
7_Service_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021790  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b3c8  08021960  08021960  00031960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cd28  0802cd28  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802cd28  0802cd28  0003cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cd30  0802cd30  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0802cd30  0802cd30  0003cd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0802cd54  0802cd54  0003cd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802cd64  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008738  20000078  0802cdd8  00040078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200087b0  0802cdd8  000487b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00120ce7  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00014358  00000000  00000000  00160d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00007020  00000000  00000000  001750e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00006e60  00000000  00000000  0017c108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035e46  00000000  00000000  00182f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00042adb  00000000  00000000  001b8dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013c225  00000000  00000000  001fb889  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00337aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002058c  00000000  00000000  00337b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021948 	.word	0x08021948

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08021948 	.word	0x08021948

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_frsub>:
 80002c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__addsf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_fsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002cc <__addsf3>:
 80002cc:	0042      	lsls	r2, r0, #1
 80002ce:	bf1f      	itttt	ne
 80002d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d4:	ea92 0f03 	teqne	r2, r3
 80002d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e0:	d06a      	beq.n	80003b8 <__addsf3+0xec>
 80002e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ea:	bfc1      	itttt	gt
 80002ec:	18d2      	addgt	r2, r2, r3
 80002ee:	4041      	eorgt	r1, r0
 80002f0:	4048      	eorgt	r0, r1
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	bfb8      	it	lt
 80002f6:	425b      	neglt	r3, r3
 80002f8:	2b19      	cmp	r3, #25
 80002fa:	bf88      	it	hi
 80002fc:	4770      	bxhi	lr
 80002fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000302:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030a:	bf18      	it	ne
 800030c:	4240      	negne	r0, r0
 800030e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000312:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000316:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031a:	bf18      	it	ne
 800031c:	4249      	negne	r1, r1
 800031e:	ea92 0f03 	teq	r2, r3
 8000322:	d03f      	beq.n	80003a4 <__addsf3+0xd8>
 8000324:	f1a2 0201 	sub.w	r2, r2, #1
 8000328:	fa41 fc03 	asr.w	ip, r1, r3
 800032c:	eb10 000c 	adds.w	r0, r0, ip
 8000330:	f1c3 0320 	rsb	r3, r3, #32
 8000334:	fa01 f103 	lsl.w	r1, r1, r3
 8000338:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800033c:	d502      	bpl.n	8000344 <__addsf3+0x78>
 800033e:	4249      	negs	r1, r1
 8000340:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000344:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000348:	d313      	bcc.n	8000372 <__addsf3+0xa6>
 800034a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034e:	d306      	bcc.n	800035e <__addsf3+0x92>
 8000350:	0840      	lsrs	r0, r0, #1
 8000352:	ea4f 0131 	mov.w	r1, r1, rrx
 8000356:	f102 0201 	add.w	r2, r2, #1
 800035a:	2afe      	cmp	r2, #254	; 0xfe
 800035c:	d251      	bcs.n	8000402 <__addsf3+0x136>
 800035e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000362:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000366:	bf08      	it	eq
 8000368:	f020 0001 	biceq.w	r0, r0, #1
 800036c:	ea40 0003 	orr.w	r0, r0, r3
 8000370:	4770      	bx	lr
 8000372:	0049      	lsls	r1, r1, #1
 8000374:	eb40 0000 	adc.w	r0, r0, r0
 8000378:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800037c:	f1a2 0201 	sub.w	r2, r2, #1
 8000380:	d1ed      	bne.n	800035e <__addsf3+0x92>
 8000382:	fab0 fc80 	clz	ip, r0
 8000386:	f1ac 0c08 	sub.w	ip, ip, #8
 800038a:	ebb2 020c 	subs.w	r2, r2, ip
 800038e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000392:	bfaa      	itet	ge
 8000394:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000398:	4252      	neglt	r2, r2
 800039a:	4318      	orrge	r0, r3
 800039c:	bfbc      	itt	lt
 800039e:	40d0      	lsrlt	r0, r2
 80003a0:	4318      	orrlt	r0, r3
 80003a2:	4770      	bx	lr
 80003a4:	f092 0f00 	teq	r2, #0
 80003a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003ac:	bf06      	itte	eq
 80003ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b2:	3201      	addeq	r2, #1
 80003b4:	3b01      	subne	r3, #1
 80003b6:	e7b5      	b.n	8000324 <__addsf3+0x58>
 80003b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c0:	bf18      	it	ne
 80003c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c6:	d021      	beq.n	800040c <__addsf3+0x140>
 80003c8:	ea92 0f03 	teq	r2, r3
 80003cc:	d004      	beq.n	80003d8 <__addsf3+0x10c>
 80003ce:	f092 0f00 	teq	r2, #0
 80003d2:	bf08      	it	eq
 80003d4:	4608      	moveq	r0, r1
 80003d6:	4770      	bx	lr
 80003d8:	ea90 0f01 	teq	r0, r1
 80003dc:	bf1c      	itt	ne
 80003de:	2000      	movne	r0, #0
 80003e0:	4770      	bxne	lr
 80003e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003e6:	d104      	bne.n	80003f2 <__addsf3+0x126>
 80003e8:	0040      	lsls	r0, r0, #1
 80003ea:	bf28      	it	cs
 80003ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f0:	4770      	bx	lr
 80003f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003f6:	bf3c      	itt	cc
 80003f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003fc:	4770      	bxcc	lr
 80003fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000402:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000406:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040a:	4770      	bx	lr
 800040c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000410:	bf16      	itet	ne
 8000412:	4608      	movne	r0, r1
 8000414:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000418:	4601      	movne	r1, r0
 800041a:	0242      	lsls	r2, r0, #9
 800041c:	bf06      	itte	eq
 800041e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000422:	ea90 0f01 	teqeq	r0, r1
 8000426:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042a:	4770      	bx	lr

0800042c <__aeabi_ui2f>:
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	e004      	b.n	800043c <__aeabi_i2f+0x8>
 8000432:	bf00      	nop

08000434 <__aeabi_i2f>:
 8000434:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	ea5f 0c00 	movs.w	ip, r0
 8000440:	bf08      	it	eq
 8000442:	4770      	bxeq	lr
 8000444:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000448:	4601      	mov	r1, r0
 800044a:	f04f 0000 	mov.w	r0, #0
 800044e:	e01c      	b.n	800048a <__aeabi_l2f+0x2a>

08000450 <__aeabi_ul2f>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	f04f 0300 	mov.w	r3, #0
 800045c:	e00a      	b.n	8000474 <__aeabi_l2f+0x14>
 800045e:	bf00      	nop

08000460 <__aeabi_l2f>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800046c:	d502      	bpl.n	8000474 <__aeabi_l2f+0x14>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	ea5f 0c01 	movs.w	ip, r1
 8000478:	bf02      	ittt	eq
 800047a:	4684      	moveq	ip, r0
 800047c:	4601      	moveq	r1, r0
 800047e:	2000      	moveq	r0, #0
 8000480:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000484:	bf08      	it	eq
 8000486:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800048e:	fabc f28c 	clz	r2, ip
 8000492:	3a08      	subs	r2, #8
 8000494:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000498:	db10      	blt.n	80004bc <__aeabi_l2f+0x5c>
 800049a:	fa01 fc02 	lsl.w	ip, r1, r2
 800049e:	4463      	add	r3, ip
 80004a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a4:	f1c2 0220 	rsb	r2, r2, #32
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	fa20 f202 	lsr.w	r2, r0, r2
 80004b0:	eb43 0002 	adc.w	r0, r3, r2
 80004b4:	bf08      	it	eq
 80004b6:	f020 0001 	biceq.w	r0, r0, #1
 80004ba:	4770      	bx	lr
 80004bc:	f102 0220 	add.w	r2, r2, #32
 80004c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004cc:	fa21 f202 	lsr.w	r2, r1, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004da:	4770      	bx	lr

080004dc <__aeabi_ldivmod>:
 80004dc:	b97b      	cbnz	r3, 80004fe <__aeabi_ldivmod+0x22>
 80004de:	b972      	cbnz	r2, 80004fe <__aeabi_ldivmod+0x22>
 80004e0:	2900      	cmp	r1, #0
 80004e2:	bfbe      	ittt	lt
 80004e4:	2000      	movlt	r0, #0
 80004e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80004ea:	e006      	blt.n	80004fa <__aeabi_ldivmod+0x1e>
 80004ec:	bf08      	it	eq
 80004ee:	2800      	cmpeq	r0, #0
 80004f0:	bf1c      	itt	ne
 80004f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80004f6:	f04f 30ff 	movne.w	r0, #4294967295
 80004fa:	f000 b9bd 	b.w	8000878 <__aeabi_idiv0>
 80004fe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000502:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000506:	2900      	cmp	r1, #0
 8000508:	db09      	blt.n	800051e <__aeabi_ldivmod+0x42>
 800050a:	2b00      	cmp	r3, #0
 800050c:	db1a      	blt.n	8000544 <__aeabi_ldivmod+0x68>
 800050e:	f000 f84d 	bl	80005ac <__udivmoddi4>
 8000512:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000516:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800051a:	b004      	add	sp, #16
 800051c:	4770      	bx	lr
 800051e:	4240      	negs	r0, r0
 8000520:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	db1b      	blt.n	8000560 <__aeabi_ldivmod+0x84>
 8000528:	f000 f840 	bl	80005ac <__udivmoddi4>
 800052c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000534:	b004      	add	sp, #16
 8000536:	4240      	negs	r0, r0
 8000538:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053c:	4252      	negs	r2, r2
 800053e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000542:	4770      	bx	lr
 8000544:	4252      	negs	r2, r2
 8000546:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800054a:	f000 f82f 	bl	80005ac <__udivmoddi4>
 800054e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000552:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000556:	b004      	add	sp, #16
 8000558:	4240      	negs	r0, r0
 800055a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055e:	4770      	bx	lr
 8000560:	4252      	negs	r2, r2
 8000562:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000566:	f000 f821 	bl	80005ac <__udivmoddi4>
 800056a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000572:	b004      	add	sp, #16
 8000574:	4252      	negs	r2, r2
 8000576:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800057a:	4770      	bx	lr

0800057c <__aeabi_uldivmod>:
 800057c:	b953      	cbnz	r3, 8000594 <__aeabi_uldivmod+0x18>
 800057e:	b94a      	cbnz	r2, 8000594 <__aeabi_uldivmod+0x18>
 8000580:	2900      	cmp	r1, #0
 8000582:	bf08      	it	eq
 8000584:	2800      	cmpeq	r0, #0
 8000586:	bf1c      	itt	ne
 8000588:	f04f 31ff 	movne.w	r1, #4294967295
 800058c:	f04f 30ff 	movne.w	r0, #4294967295
 8000590:	f000 b972 	b.w	8000878 <__aeabi_idiv0>
 8000594:	f1ad 0c08 	sub.w	ip, sp, #8
 8000598:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800059c:	f000 f806 	bl	80005ac <__udivmoddi4>
 80005a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005a8:	b004      	add	sp, #16
 80005aa:	4770      	bx	lr

080005ac <__udivmoddi4>:
 80005ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b0:	9e08      	ldr	r6, [sp, #32]
 80005b2:	4604      	mov	r4, r0
 80005b4:	4688      	mov	r8, r1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d14b      	bne.n	8000652 <__udivmoddi4+0xa6>
 80005ba:	428a      	cmp	r2, r1
 80005bc:	4615      	mov	r5, r2
 80005be:	d967      	bls.n	8000690 <__udivmoddi4+0xe4>
 80005c0:	fab2 f282 	clz	r2, r2
 80005c4:	b14a      	cbz	r2, 80005da <__udivmoddi4+0x2e>
 80005c6:	f1c2 0720 	rsb	r7, r2, #32
 80005ca:	fa01 f302 	lsl.w	r3, r1, r2
 80005ce:	fa20 f707 	lsr.w	r7, r0, r7
 80005d2:	4095      	lsls	r5, r2
 80005d4:	ea47 0803 	orr.w	r8, r7, r3
 80005d8:	4094      	lsls	r4, r2
 80005da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005de:	0c23      	lsrs	r3, r4, #16
 80005e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80005e4:	fa1f fc85 	uxth.w	ip, r5
 80005e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80005ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005f0:	fb07 f10c 	mul.w	r1, r7, ip
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d909      	bls.n	800060c <__udivmoddi4+0x60>
 80005f8:	18eb      	adds	r3, r5, r3
 80005fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80005fe:	f080 811b 	bcs.w	8000838 <__udivmoddi4+0x28c>
 8000602:	4299      	cmp	r1, r3
 8000604:	f240 8118 	bls.w	8000838 <__udivmoddi4+0x28c>
 8000608:	3f02      	subs	r7, #2
 800060a:	442b      	add	r3, r5
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f0fe 	udiv	r0, r3, lr
 8000614:	fb0e 3310 	mls	r3, lr, r0, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000620:	45a4      	cmp	ip, r4
 8000622:	d909      	bls.n	8000638 <__udivmoddi4+0x8c>
 8000624:	192c      	adds	r4, r5, r4
 8000626:	f100 33ff 	add.w	r3, r0, #4294967295
 800062a:	f080 8107 	bcs.w	800083c <__udivmoddi4+0x290>
 800062e:	45a4      	cmp	ip, r4
 8000630:	f240 8104 	bls.w	800083c <__udivmoddi4+0x290>
 8000634:	3802      	subs	r0, #2
 8000636:	442c      	add	r4, r5
 8000638:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800063c:	eba4 040c 	sub.w	r4, r4, ip
 8000640:	2700      	movs	r7, #0
 8000642:	b11e      	cbz	r6, 800064c <__udivmoddi4+0xa0>
 8000644:	40d4      	lsrs	r4, r2
 8000646:	2300      	movs	r3, #0
 8000648:	e9c6 4300 	strd	r4, r3, [r6]
 800064c:	4639      	mov	r1, r7
 800064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000652:	428b      	cmp	r3, r1
 8000654:	d909      	bls.n	800066a <__udivmoddi4+0xbe>
 8000656:	2e00      	cmp	r6, #0
 8000658:	f000 80eb 	beq.w	8000832 <__udivmoddi4+0x286>
 800065c:	2700      	movs	r7, #0
 800065e:	e9c6 0100 	strd	r0, r1, [r6]
 8000662:	4638      	mov	r0, r7
 8000664:	4639      	mov	r1, r7
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	fab3 f783 	clz	r7, r3
 800066e:	2f00      	cmp	r7, #0
 8000670:	d147      	bne.n	8000702 <__udivmoddi4+0x156>
 8000672:	428b      	cmp	r3, r1
 8000674:	d302      	bcc.n	800067c <__udivmoddi4+0xd0>
 8000676:	4282      	cmp	r2, r0
 8000678:	f200 80fa 	bhi.w	8000870 <__udivmoddi4+0x2c4>
 800067c:	1a84      	subs	r4, r0, r2
 800067e:	eb61 0303 	sbc.w	r3, r1, r3
 8000682:	2001      	movs	r0, #1
 8000684:	4698      	mov	r8, r3
 8000686:	2e00      	cmp	r6, #0
 8000688:	d0e0      	beq.n	800064c <__udivmoddi4+0xa0>
 800068a:	e9c6 4800 	strd	r4, r8, [r6]
 800068e:	e7dd      	b.n	800064c <__udivmoddi4+0xa0>
 8000690:	b902      	cbnz	r2, 8000694 <__udivmoddi4+0xe8>
 8000692:	deff      	udf	#255	; 0xff
 8000694:	fab2 f282 	clz	r2, r2
 8000698:	2a00      	cmp	r2, #0
 800069a:	f040 808f 	bne.w	80007bc <__udivmoddi4+0x210>
 800069e:	1b49      	subs	r1, r1, r5
 80006a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a4:	fa1f f885 	uxth.w	r8, r5
 80006a8:	2701      	movs	r7, #1
 80006aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80006ae:	0c23      	lsrs	r3, r4, #16
 80006b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80006b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b8:	fb08 f10c 	mul.w	r1, r8, ip
 80006bc:	4299      	cmp	r1, r3
 80006be:	d907      	bls.n	80006d0 <__udivmoddi4+0x124>
 80006c0:	18eb      	adds	r3, r5, r3
 80006c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80006c6:	d202      	bcs.n	80006ce <__udivmoddi4+0x122>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	f200 80cd 	bhi.w	8000868 <__udivmoddi4+0x2bc>
 80006ce:	4684      	mov	ip, r0
 80006d0:	1a59      	subs	r1, r3, r1
 80006d2:	b2a3      	uxth	r3, r4
 80006d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80006d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80006dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80006e0:	fb08 f800 	mul.w	r8, r8, r0
 80006e4:	45a0      	cmp	r8, r4
 80006e6:	d907      	bls.n	80006f8 <__udivmoddi4+0x14c>
 80006e8:	192c      	adds	r4, r5, r4
 80006ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ee:	d202      	bcs.n	80006f6 <__udivmoddi4+0x14a>
 80006f0:	45a0      	cmp	r8, r4
 80006f2:	f200 80b6 	bhi.w	8000862 <__udivmoddi4+0x2b6>
 80006f6:	4618      	mov	r0, r3
 80006f8:	eba4 0408 	sub.w	r4, r4, r8
 80006fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000700:	e79f      	b.n	8000642 <__udivmoddi4+0x96>
 8000702:	f1c7 0c20 	rsb	ip, r7, #32
 8000706:	40bb      	lsls	r3, r7
 8000708:	fa22 fe0c 	lsr.w	lr, r2, ip
 800070c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000710:	fa01 f407 	lsl.w	r4, r1, r7
 8000714:	fa20 f50c 	lsr.w	r5, r0, ip
 8000718:	fa21 f30c 	lsr.w	r3, r1, ip
 800071c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000720:	4325      	orrs	r5, r4
 8000722:	fbb3 f9f8 	udiv	r9, r3, r8
 8000726:	0c2c      	lsrs	r4, r5, #16
 8000728:	fb08 3319 	mls	r3, r8, r9, r3
 800072c:	fa1f fa8e 	uxth.w	sl, lr
 8000730:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000734:	fb09 f40a 	mul.w	r4, r9, sl
 8000738:	429c      	cmp	r4, r3
 800073a:	fa02 f207 	lsl.w	r2, r2, r7
 800073e:	fa00 f107 	lsl.w	r1, r0, r7
 8000742:	d90b      	bls.n	800075c <__udivmoddi4+0x1b0>
 8000744:	eb1e 0303 	adds.w	r3, lr, r3
 8000748:	f109 30ff 	add.w	r0, r9, #4294967295
 800074c:	f080 8087 	bcs.w	800085e <__udivmoddi4+0x2b2>
 8000750:	429c      	cmp	r4, r3
 8000752:	f240 8084 	bls.w	800085e <__udivmoddi4+0x2b2>
 8000756:	f1a9 0902 	sub.w	r9, r9, #2
 800075a:	4473      	add	r3, lr
 800075c:	1b1b      	subs	r3, r3, r4
 800075e:	b2ad      	uxth	r5, r5
 8000760:	fbb3 f0f8 	udiv	r0, r3, r8
 8000764:	fb08 3310 	mls	r3, r8, r0, r3
 8000768:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800076c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000770:	45a2      	cmp	sl, r4
 8000772:	d908      	bls.n	8000786 <__udivmoddi4+0x1da>
 8000774:	eb1e 0404 	adds.w	r4, lr, r4
 8000778:	f100 33ff 	add.w	r3, r0, #4294967295
 800077c:	d26b      	bcs.n	8000856 <__udivmoddi4+0x2aa>
 800077e:	45a2      	cmp	sl, r4
 8000780:	d969      	bls.n	8000856 <__udivmoddi4+0x2aa>
 8000782:	3802      	subs	r0, #2
 8000784:	4474      	add	r4, lr
 8000786:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800078a:	fba0 8902 	umull	r8, r9, r0, r2
 800078e:	eba4 040a 	sub.w	r4, r4, sl
 8000792:	454c      	cmp	r4, r9
 8000794:	46c2      	mov	sl, r8
 8000796:	464b      	mov	r3, r9
 8000798:	d354      	bcc.n	8000844 <__udivmoddi4+0x298>
 800079a:	d051      	beq.n	8000840 <__udivmoddi4+0x294>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d069      	beq.n	8000874 <__udivmoddi4+0x2c8>
 80007a0:	ebb1 050a 	subs.w	r5, r1, sl
 80007a4:	eb64 0403 	sbc.w	r4, r4, r3
 80007a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007ac:	40fd      	lsrs	r5, r7
 80007ae:	40fc      	lsrs	r4, r7
 80007b0:	ea4c 0505 	orr.w	r5, ip, r5
 80007b4:	e9c6 5400 	strd	r5, r4, [r6]
 80007b8:	2700      	movs	r7, #0
 80007ba:	e747      	b.n	800064c <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f703 	lsr.w	r7, r0, r3
 80007c4:	4095      	lsls	r5, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	fa21 f303 	lsr.w	r3, r1, r3
 80007ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d2:	4338      	orrs	r0, r7
 80007d4:	0c01      	lsrs	r1, r0, #16
 80007d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80007da:	fa1f f885 	uxth.w	r8, r5
 80007de:	fb0e 3317 	mls	r3, lr, r7, r3
 80007e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e6:	fb07 f308 	mul.w	r3, r7, r8
 80007ea:	428b      	cmp	r3, r1
 80007ec:	fa04 f402 	lsl.w	r4, r4, r2
 80007f0:	d907      	bls.n	8000802 <__udivmoddi4+0x256>
 80007f2:	1869      	adds	r1, r5, r1
 80007f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80007f8:	d22f      	bcs.n	800085a <__udivmoddi4+0x2ae>
 80007fa:	428b      	cmp	r3, r1
 80007fc:	d92d      	bls.n	800085a <__udivmoddi4+0x2ae>
 80007fe:	3f02      	subs	r7, #2
 8000800:	4429      	add	r1, r5
 8000802:	1acb      	subs	r3, r1, r3
 8000804:	b281      	uxth	r1, r0
 8000806:	fbb3 f0fe 	udiv	r0, r3, lr
 800080a:	fb0e 3310 	mls	r3, lr, r0, r3
 800080e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000812:	fb00 f308 	mul.w	r3, r0, r8
 8000816:	428b      	cmp	r3, r1
 8000818:	d907      	bls.n	800082a <__udivmoddi4+0x27e>
 800081a:	1869      	adds	r1, r5, r1
 800081c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000820:	d217      	bcs.n	8000852 <__udivmoddi4+0x2a6>
 8000822:	428b      	cmp	r3, r1
 8000824:	d915      	bls.n	8000852 <__udivmoddi4+0x2a6>
 8000826:	3802      	subs	r0, #2
 8000828:	4429      	add	r1, r5
 800082a:	1ac9      	subs	r1, r1, r3
 800082c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000830:	e73b      	b.n	80006aa <__udivmoddi4+0xfe>
 8000832:	4637      	mov	r7, r6
 8000834:	4630      	mov	r0, r6
 8000836:	e709      	b.n	800064c <__udivmoddi4+0xa0>
 8000838:	4607      	mov	r7, r0
 800083a:	e6e7      	b.n	800060c <__udivmoddi4+0x60>
 800083c:	4618      	mov	r0, r3
 800083e:	e6fb      	b.n	8000638 <__udivmoddi4+0x8c>
 8000840:	4541      	cmp	r1, r8
 8000842:	d2ab      	bcs.n	800079c <__udivmoddi4+0x1f0>
 8000844:	ebb8 0a02 	subs.w	sl, r8, r2
 8000848:	eb69 020e 	sbc.w	r2, r9, lr
 800084c:	3801      	subs	r0, #1
 800084e:	4613      	mov	r3, r2
 8000850:	e7a4      	b.n	800079c <__udivmoddi4+0x1f0>
 8000852:	4660      	mov	r0, ip
 8000854:	e7e9      	b.n	800082a <__udivmoddi4+0x27e>
 8000856:	4618      	mov	r0, r3
 8000858:	e795      	b.n	8000786 <__udivmoddi4+0x1da>
 800085a:	4667      	mov	r7, ip
 800085c:	e7d1      	b.n	8000802 <__udivmoddi4+0x256>
 800085e:	4681      	mov	r9, r0
 8000860:	e77c      	b.n	800075c <__udivmoddi4+0x1b0>
 8000862:	3802      	subs	r0, #2
 8000864:	442c      	add	r4, r5
 8000866:	e747      	b.n	80006f8 <__udivmoddi4+0x14c>
 8000868:	f1ac 0c02 	sub.w	ip, ip, #2
 800086c:	442b      	add	r3, r5
 800086e:	e72f      	b.n	80006d0 <__udivmoddi4+0x124>
 8000870:	4638      	mov	r0, r7
 8000872:	e708      	b.n	8000686 <__udivmoddi4+0xda>
 8000874:	4637      	mov	r7, r6
 8000876:	e6e9      	b.n	800064c <__udivmoddi4+0xa0>

08000878 <__aeabi_idiv0>:
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_Init+0x40>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <HAL_Init+0x40>)
 8000886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_Init+0x40>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_Init+0x40>)
 8000892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x40>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x40>)
 800089e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f8fa 	bl	8000a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f013 f9ea 	bl	8013c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f013 f91a 	bl	8013ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023c00 	.word	0x40023c00

080008c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x20>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_IncTick+0x24>)
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20008768 	.word	0x20008768

080008e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <HAL_GetTick+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20008768 	.word	0x20008768

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff ffee 	bl	80008e8 <HAL_GetTick>
 800090c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d005      	beq.n	8000926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_Delay+0x40>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000926:	bf00      	nop
 8000928:	f7ff ffde 	bl	80008e8 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	429a      	cmp	r2, r3
 8000936:	d8f7      	bhi.n	8000928 <HAL_Delay+0x28>
  {
  }
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff4c 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac6:	f7ff ff61 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000aca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	6978      	ldr	r0, [r7, #20]
 8000ad2:	f7ff ffb1 	bl	8000a38 <NVIC_EncodePriority>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff80 	bl	80009e4 <__NVIC_SetPriority>
}
 8000ae4:	bf00      	nop
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff54 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	e165      	b.n	8000df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b24:	2201      	movs	r2, #1
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8154 	bne.w	8000dea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x4a>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d123      	bne.n	8000b9a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	08da      	lsrs	r2, r3, #3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3208      	adds	r2, #8
 8000b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	220f      	movs	r2, #15
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	691a      	ldr	r2, [r3, #16]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	f003 0307 	and.w	r3, r3, #7
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3208      	adds	r2, #8
 8000b94:	69b9      	ldr	r1, [r7, #24]
 8000b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0203 	and.w	r2, r3, #3
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d00b      	beq.n	8000bee <HAL_GPIO_Init+0xe6>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d007      	beq.n	8000bee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be2:	2b11      	cmp	r3, #17
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b12      	cmp	r3, #18
 8000bec:	d130      	bne.n	8000c50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	4013      	ands	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	f003 0201 	and.w	r2, r3, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 80ae 	beq.w	8000dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b5c      	ldr	r3, [pc, #368]	; (8000e04 <HAL_GPIO_Init+0x2fc>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a5b      	ldr	r2, [pc, #364]	; (8000e04 <HAL_GPIO_Init+0x2fc>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <HAL_GPIO_Init+0x2fc>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000caa:	4a57      	ldr	r2, [pc, #348]	; (8000e08 <HAL_GPIO_Init+0x300>)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4e      	ldr	r2, [pc, #312]	; (8000e0c <HAL_GPIO_Init+0x304>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d025      	beq.n	8000d22 <HAL_GPIO_Init+0x21a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <HAL_GPIO_Init+0x308>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01f      	beq.n	8000d1e <HAL_GPIO_Init+0x216>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d019      	beq.n	8000d1a <HAL_GPIO_Init+0x212>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_GPIO_Init+0x310>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0x20e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x314>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <HAL_GPIO_Init+0x20a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_GPIO_Init+0x318>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0x206>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x31c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x202>
 8000d06:	2306      	movs	r3, #6
 8000d08:	e00c      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	e00a      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d0e:	2305      	movs	r3, #5
 8000d10:	e008      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d12:	2304      	movs	r3, #4
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d16:	2303      	movs	r3, #3
 8000d18:	e004      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d22:	2300      	movs	r3, #0
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	f002 0203 	and.w	r2, r2, #3
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	4093      	lsls	r3, r2
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d34:	4934      	ldr	r1, [pc, #208]	; (8000e08 <HAL_GPIO_Init+0x300>)
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d66:	4a30      	ldr	r2, [pc, #192]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d90:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dba:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de4:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3301      	adds	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	f67f ae96 	bls.w	8000b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3724      	adds	r7, #36	; 0x24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40021400 	.word	0x40021400
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	619a      	str	r2, [r3, #24]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e60:	b08f      	sub	sp, #60	; 0x3c
 8000e62:	af0a      	add	r7, sp, #40	; 0x28
 8000e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e116      	b.n	800109e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f012 fea0 	bl	8013bd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 ff63 	bl	8002d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	687e      	ldr	r6, [r7, #4]
 8000ebc:	466d      	mov	r5, sp
 8000ebe:	f106 0410 	add.w	r4, r6, #16
 8000ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed2:	1d33      	adds	r3, r6, #4
 8000ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f001 feee 	bl	8002cb8 <USB_CoreInit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0d7      	b.n	800109e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 ff51 	bl	8002d9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e04a      	b.n	8000f96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	333d      	adds	r3, #61	; 0x3d
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	333c      	adds	r3, #60	; 0x3c
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b298      	uxth	r0, r3
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3342      	adds	r3, #66	; 0x42
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	333f      	adds	r3, #63	; 0x3f
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	3344      	adds	r3, #68	; 0x44
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3348      	adds	r3, #72	; 0x48
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f7c:	7bfa      	ldrb	r2, [r7, #15]
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	3350      	adds	r3, #80	; 0x50
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3af      	bcc.n	8000f00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e044      	b.n	8001030 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	1a9b      	subs	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3301      	adds	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3b5      	bcc.n	8000fa6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	687e      	ldr	r6, [r7, #4]
 8001042:	466d      	mov	r5, sp
 8001044:	f106 0410 	add.w	r4, r6, #16
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001054:	e885 0003 	stmia.w	r5, {r0, r1}
 8001058:	1d33      	adds	r3, r6, #4
 800105a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f001 fec7 	bl	8002df0 <USB_DevInit>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e014      	b.n	800109e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d102      	bne.n	8001092 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f80a 	bl	80010a6 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f877 	bl	800318a <USB_DevDisconnect>

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	f043 0303 	orr.w	r3, r3, #3
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0ca      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001104:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d90c      	bls.n	800112c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_RCC_ClockConfig+0x1b4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0b6      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001144:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a57      	ldr	r2, [pc, #348]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 800114a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800114e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800115c:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	494c      	ldr	r1, [pc, #304]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d044      	beq.n	8001210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d119      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e07d      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d003      	beq.n	80011ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06d      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e065      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f023 0203 	bic.w	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4933      	ldr	r1, [pc, #204]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e0:	f7ff fb82 	bl	80008e8 <HAL_GetTick>
 80011e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	e00a      	b.n	80011fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e8:	f7ff fb7e 	bl	80008e8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e04d      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 020c 	and.w	r2, r3, #12
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	429a      	cmp	r2, r3
 800120e:	d1eb      	bne.n	80011e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d20c      	bcs.n	8001238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_RCC_ClockConfig+0x1b4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e030      	b.n	800129a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4915      	ldr	r1, [pc, #84]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	490d      	ldr	r1, [pc, #52]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001276:	f000 fbad 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 800127a:	4601      	mov	r1, r0
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_RCC_ClockConfig+0x1b8>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	5cd3      	ldrb	r3, [r2, r3]
 800128a:	fa21 f303 	lsr.w	r3, r1, r3
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f012 fcf6 	bl	8013c84 <HAL_InitTick>

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	080298c8 	.word	0x080298c8
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008

080012cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012d4:	4601      	mov	r1, r0
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	080298d8 	.word	0x080298d8

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012f8:	f7ff ffdc 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012fc:	4601      	mov	r1, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	080298d8 	.word	0x080298d8

0800131c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	220f      	movs	r2, #15
 800132a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0203 	and.w	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_GetClockConfig+0x5c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_RCC_GetClockConfig+0x60>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 020f 	and.w	r2, r3, #15
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	601a      	str	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d010      	beq.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80013b8:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013be:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c6:	496c      	ldr	r1, [pc, #432]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80013d6:	2301      	movs	r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	4960      	ldr	r1, [pc, #384]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001404:	2301      	movs	r3, #1
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d017      	beq.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001414:	4b58      	ldr	r3, [pc, #352]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800141a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4955      	ldr	r1, [pc, #340]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001424:	4313      	orrs	r3, r2
 8001426:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001432:	d101      	bne.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d017      	beq.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	4946      	ldr	r1, [pc, #280]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001460:	4313      	orrs	r3, r2
 8001462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800146e:	d101      	bne.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001470:	2301      	movs	r3, #1
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 808a 	beq.w	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a38      	ldr	r2, [pc, #224]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b6:	f7ff fa17 	bl	80008e8 <HAL_GetTick>
 80014ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fa13 	bl	80008e8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e278      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014d0:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02f      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f4:	6a3a      	ldr	r2, [r7, #32]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d028      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001502:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d114      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f9e1 	bl	80008e8 <HAL_GetTick>
 8001526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f9dd 	bl	80008e8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e240      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ee      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001558:	d114      	bne.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800156a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156e:	4902      	ldr	r1, [pc, #8]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e00c      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000
 8001580:	42470e40 	.word	0x42470e40
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800158a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800158e:	6093      	str	r3, [r2, #8]
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	4944      	ldr	r1, [pc, #272]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80015b4:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80015b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00a      	beq.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f4:	492e      	ldr	r1, [pc, #184]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d011      	beq.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	4926      	ldr	r1, [pc, #152]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001618:	4313      	orrs	r3, r2
 800161a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001626:	d101      	bne.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00a      	beq.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	491a      	ldr	r1, [pc, #104]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001648:	4313      	orrs	r3, r2
 800164a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d011      	beq.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800165c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001660:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001668:	4911      	ldr	r1, [pc, #68]	; (80016b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800166a:	4313      	orrs	r3, r2
 800166c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001678:	d101      	bne.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800167a:	2301      	movs	r3, #1
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800168c:	f040 80ff 	bne.w	800188e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001696:	f7ff f927 	bl	80008e8 <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800169e:	f7ff f923 	bl	80008e8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e188      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	424711e0 	.word	0x424711e0
 80016b8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016bc:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d028      	beq.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d124      	bne.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80016f0:	4b71      	ldr	r3, [pc, #452]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80016f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f6:	0c1b      	lsrs	r3, r3, #16
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	3301      	adds	r3, #1
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001702:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001708:	0e1b      	lsrs	r3, r3, #24
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	431a      	orrs	r2, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	431a      	orrs	r2, r3
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	071b      	lsls	r3, r3, #28
 8001732:	4961      	ldr	r1, [pc, #388]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001734:	4313      	orrs	r3, r2
 8001736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800174e:	d00a      	beq.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001758:	2b00      	cmp	r3, #0
 800175a:	d035      	beq.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001764:	d130      	bne.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001766:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176c:	0c1b      	lsrs	r3, r3, #16
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	3301      	adds	r3, #1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001778:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800177a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800177e:	0f1b      	lsrs	r3, r3, #28
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	019b      	lsls	r3, r3, #6
 8001790:	431a      	orrs	r2, r3
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	431a      	orrs	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	071b      	lsls	r3, r3, #28
 80017a8:	4943      	ldr	r1, [pc, #268]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b6:	f023 021f 	bic.w	r2, r3, #31
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	3b01      	subs	r3, #1
 80017c0:	493d      	ldr	r1, [pc, #244]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d029      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017dc:	d124      	bne.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	3301      	adds	r3, #1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80017f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f6:	0f1b      	lsrs	r3, r3, #28
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	019b      	lsls	r3, r3, #6
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	431a      	orrs	r2, r3
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	061b      	lsls	r3, r3, #24
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	071b      	lsls	r3, r3, #28
 8001820:	4925      	ldr	r1, [pc, #148]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001822:	4313      	orrs	r3, r2
 8001824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001830:	2b00      	cmp	r3, #0
 8001832:	d016      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	3b01      	subs	r3, #1
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	071b      	lsls	r3, r3, #28
 800185a:	4917      	ldr	r1, [pc, #92]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800185c:	4313      	orrs	r3, r2
 800185e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff f83e 	bl	80008e8 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001870:	f7ff f83a 	bl	80008e8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e09f      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	2b01      	cmp	r3, #1
 8001892:	f040 8095 	bne.w	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f824 	bl	80008e8 <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80018a2:	e00f      	b.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80018a4:	f7ff f820 	bl	80008e8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d908      	bls.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e085      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	42470068 	.word	0x42470068
 80018c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018d0:	d0e8      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d02b      	beq.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d127      	bne.n	800194a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80018fa:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80018fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	019b      	lsls	r3, r3, #6
 8001916:	431a      	orrs	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	3b01      	subs	r3, #1
 800191e:	041b      	lsls	r3, r3, #16
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	061b      	lsls	r3, r3, #24
 8001928:	4928      	ldr	r1, [pc, #160]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001936:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	3b01      	subs	r3, #1
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	4922      	ldr	r1, [pc, #136]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001944:	4313      	orrs	r3, r2
 8001946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01d      	beq.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800195e:	d118      	bne.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	0e1b      	lsrs	r3, r3, #24
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	019b      	lsls	r3, r3, #6
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	431a      	orrs	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4910      	ldr	r1, [pc, #64]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001998:	f7fe ffa6 	bl	80008e8 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80019a0:	f7fe ffa2 	bl	80008e8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e007      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019be:	d1ef      	bne.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3730      	adds	r7, #48	; 0x30
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	42470070 	.word	0x42470070

080019d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ee:	4bc6      	ldr	r3, [pc, #792]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	f200 817e 	bhi.w	8001cf8 <HAL_RCC_GetSysClockFreq+0x324>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_RCC_GetSysClockFreq+0x30>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a39 	.word	0x08001a39
 8001a08:	08001cf9 	.word	0x08001cf9
 8001a0c:	08001cf9 	.word	0x08001cf9
 8001a10:	08001cf9 	.word	0x08001cf9
 8001a14:	08001a3f 	.word	0x08001a3f
 8001a18:	08001cf9 	.word	0x08001cf9
 8001a1c:	08001cf9 	.word	0x08001cf9
 8001a20:	08001cf9 	.word	0x08001cf9
 8001a24:	08001a45 	.word	0x08001a45
 8001a28:	08001cf9 	.word	0x08001cf9
 8001a2c:	08001cf9 	.word	0x08001cf9
 8001a30:	08001cf9 	.word	0x08001cf9
 8001a34:	08001ba1 	.word	0x08001ba1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4bb4      	ldr	r3, [pc, #720]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x338>)
 8001a3a:	613b      	str	r3, [r7, #16]
       break;
 8001a3c:	e15f      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3e:	4bb4      	ldr	r3, [pc, #720]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001a40:	613b      	str	r3, [r7, #16]
      break;
 8001a42:	e15c      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a44:	4bb0      	ldr	r3, [pc, #704]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4e:	4bae      	ldr	r3, [pc, #696]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d04a      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4bab      	ldr	r3, [pc, #684]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	ea03 0501 	and.w	r5, r3, r1
 8001a70:	ea04 0602 	and.w	r6, r4, r2
 8001a74:	4629      	mov	r1, r5
 8001a76:	4632      	mov	r2, r6
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	0154      	lsls	r4, r2, #5
 8001a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a86:	014b      	lsls	r3, r1, #5
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	1b49      	subs	r1, r1, r5
 8001a8e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	f04f 0400 	mov.w	r4, #0
 8001a9a:	0194      	lsls	r4, r2, #6
 8001a9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aa0:	018b      	lsls	r3, r1, #6
 8001aa2:	1a5b      	subs	r3, r3, r1
 8001aa4:	eb64 0402 	sbc.w	r4, r4, r2
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	00e2      	lsls	r2, r4, #3
 8001ab2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ab6:	00d9      	lsls	r1, r3, #3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4614      	mov	r4, r2
 8001abc:	195b      	adds	r3, r3, r5
 8001abe:	eb44 0406 	adc.w	r4, r4, r6
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	0262      	lsls	r2, r4, #9
 8001acc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ad0:	0259      	lsls	r1, r3, #9
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4621      	mov	r1, r4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f04f 0400 	mov.w	r4, #0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	f7fe fd4a 	bl	800057c <__aeabi_uldivmod>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e049      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af0:	4b85      	ldr	r3, [pc, #532]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	f04f 0400 	mov.w	r4, #0
 8001afa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	ea03 0501 	and.w	r5, r3, r1
 8001b06:	ea04 0602 	and.w	r6, r4, r2
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4632      	mov	r2, r6
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	0154      	lsls	r4, r2, #5
 8001b18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b1c:	014b      	lsls	r3, r1, #5
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4622      	mov	r2, r4
 8001b22:	1b49      	subs	r1, r1, r5
 8001b24:	eb62 0206 	sbc.w	r2, r2, r6
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	f04f 0400 	mov.w	r4, #0
 8001b30:	0194      	lsls	r4, r2, #6
 8001b32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b36:	018b      	lsls	r3, r1, #6
 8001b38:	1a5b      	subs	r3, r3, r1
 8001b3a:	eb64 0402 	sbc.w	r4, r4, r2
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	00e2      	lsls	r2, r4, #3
 8001b48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b4c:	00d9      	lsls	r1, r3, #3
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	195b      	adds	r3, r3, r5
 8001b54:	eb44 0406 	adc.w	r4, r4, r6
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	02a2      	lsls	r2, r4, #10
 8001b62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b66:	0299      	lsls	r1, r3, #10
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4614      	mov	r4, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4621      	mov	r1, r4
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4623      	mov	r3, r4
 8001b7a:	f7fe fcff 	bl	800057c <__aeabi_uldivmod>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460c      	mov	r4, r1
 8001b82:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b84:	4b60      	ldr	r3, [pc, #384]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	613b      	str	r3, [r7, #16]
      break;
 8001b9e:	e0ae      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d04a      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	f04f 0400 	mov.w	r4, #0
 8001bc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	ea03 0501 	and.w	r5, r3, r1
 8001bcc:	ea04 0602 	and.w	r6, r4, r2
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	4632      	mov	r2, r6
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	f04f 0400 	mov.w	r4, #0
 8001bdc:	0154      	lsls	r4, r2, #5
 8001bde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001be2:	014b      	lsls	r3, r1, #5
 8001be4:	4619      	mov	r1, r3
 8001be6:	4622      	mov	r2, r4
 8001be8:	1b49      	subs	r1, r1, r5
 8001bea:	eb62 0206 	sbc.w	r2, r2, r6
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	f04f 0400 	mov.w	r4, #0
 8001bf6:	0194      	lsls	r4, r2, #6
 8001bf8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bfc:	018b      	lsls	r3, r1, #6
 8001bfe:	1a5b      	subs	r3, r3, r1
 8001c00:	eb64 0402 	sbc.w	r4, r4, r2
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	00e2      	lsls	r2, r4, #3
 8001c0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c12:	00d9      	lsls	r1, r3, #3
 8001c14:	460b      	mov	r3, r1
 8001c16:	4614      	mov	r4, r2
 8001c18:	195b      	adds	r3, r3, r5
 8001c1a:	eb44 0406 	adc.w	r4, r4, r6
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	0262      	lsls	r2, r4, #9
 8001c28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c2c:	0259      	lsls	r1, r3, #9
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4614      	mov	r4, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	4621      	mov	r1, r4
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	f7fe fc9c 	bl	800057c <__aeabi_uldivmod>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e049      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	f04f 0400 	mov.w	r4, #0
 8001c56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	ea03 0501 	and.w	r5, r3, r1
 8001c62:	ea04 0602 	and.w	r6, r4, r2
 8001c66:	4629      	mov	r1, r5
 8001c68:	4632      	mov	r2, r6
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f04f 0400 	mov.w	r4, #0
 8001c72:	0154      	lsls	r4, r2, #5
 8001c74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c78:	014b      	lsls	r3, r1, #5
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	1b49      	subs	r1, r1, r5
 8001c80:	eb62 0206 	sbc.w	r2, r2, r6
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	f04f 0400 	mov.w	r4, #0
 8001c8c:	0194      	lsls	r4, r2, #6
 8001c8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c92:	018b      	lsls	r3, r1, #6
 8001c94:	1a5b      	subs	r3, r3, r1
 8001c96:	eb64 0402 	sbc.w	r4, r4, r2
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	00e2      	lsls	r2, r4, #3
 8001ca4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ca8:	00d9      	lsls	r1, r3, #3
 8001caa:	460b      	mov	r3, r1
 8001cac:	4614      	mov	r4, r2
 8001cae:	195b      	adds	r3, r3, r5
 8001cb0:	eb44 0406 	adc.w	r4, r4, r6
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	02a2      	lsls	r2, r4, #10
 8001cbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cc2:	0299      	lsls	r1, r3, #10
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4621      	mov	r1, r4
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f04f 0400 	mov.w	r4, #0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	f7fe fc51 	bl	800057c <__aeabi_uldivmod>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0f1b      	lsrs	r3, r3, #28
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	613b      	str	r3, [r7, #16]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x338>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	693b      	ldr	r3, [r7, #16]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8083 	beq.w	8001e34 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d2e:	4b95      	ldr	r3, [pc, #596]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d019      	beq.n	8001d6e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d3a:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d46:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d52:	d00c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d54:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d112      	bne.n	8001d86 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d60:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6c:	d10b      	bne.n	8001d86 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6e:	4b85      	ldr	r3, [pc, #532]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d05b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x11e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d157      	bne.n	8001e32 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e216      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x8a>
 8001d90:	4b7c      	ldr	r3, [pc, #496]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a7b      	ldr	r2, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e01d      	b.n	8001dda <HAL_RCC_OscConfig+0xc6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xae>
 8001da8:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a72      	ldr	r2, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0xc6>
 8001dc2:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6f      	ldr	r2, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6c      	ldr	r2, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe fd81 	bl	80008e8 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dea:	f7fe fd7d 	bl	80008e8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1db      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0xd6>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fd6d 	bl	80008e8 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e12:	f7fe fd69 	bl	80008e8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1c7      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0xfe>
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d06f      	beq.n	8001f20 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e40:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d017      	beq.n	8001e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e4c:	4b4d      	ldr	r3, [pc, #308]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00b      	beq.n	8001e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e64:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d11c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e70:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d116      	bne.n	8001eaa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7c:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x180>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e18f      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4938      	ldr	r1, [pc, #224]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea8:	e03a      	b.n	8001f20 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d020      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fd16 	bl	80008e8 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fd12 	bl	80008e8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e170      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4925      	ldr	r1, [pc, #148]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
 8001ef2:	e015      	b.n	8001f20 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe fcf5 	bl	80008e8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7fe fcf1 	bl	80008e8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e14f      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d037      	beq.n	8001f9c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d016      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_RCC_OscConfig+0x278>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fcd5 	bl	80008e8 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe fcd1 	bl	80008e8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e12f      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x270>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x22e>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x278>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fcbe 	bl	80008e8 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe fcba 	bl	80008e8 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e118      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b8a      	ldr	r3, [pc, #552]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8097 	beq.w	80020d8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b83      	ldr	r3, [pc, #524]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b7f      	ldr	r3, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a7e      	ldr	r2, [pc, #504]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a75      	ldr	r2, [pc, #468]	; (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fc79 	bl	80008e8 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7fe fc75 	bl	80008e8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0d3      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x31a>
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a65      	ldr	r2, [pc, #404]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x354>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x33c>
 8002036:	4b61      	ldr	r3, [pc, #388]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	4a60      	ldr	r2, [pc, #384]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
 8002042:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0x354>
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a59      	ldr	r2, [pc, #356]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fc3a 	bl	80008e8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe fc36 	bl	80008e8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e092      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ee      	beq.n	8002078 <HAL_RCC_OscConfig+0x364>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fc24 	bl	80008e8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fc20 	bl	80008e8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e07c      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ba:	4b40      	ldr	r3, [pc, #256]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a3a      	ldr	r2, [pc, #232]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d068      	beq.n	80021b2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e0:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d060      	beq.n	80021ae <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d145      	bne.n	8002180 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe fbf5 	bl	80008e8 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fbf1 	bl	80008e8 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e04f      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	019b      	lsls	r3, r3, #6
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	3b01      	subs	r3, #1
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	071b      	lsls	r3, r3, #28
 800214c:	491b      	ldr	r1, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7fe fbc6 	bl	80008e8 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fbc2 	bl	80008e8 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e020      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x44c>
 800217e:	e018      	b.n	80021b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fbaf 	bl	80008e8 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7fe fbab 	bl	80008e8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e009      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_OscConfig+0x4a8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x47a>
 80021ac:	e001      	b.n	80021b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42470060 	.word	0x42470060

080021c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01d      	b.n	8002216 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f815 	bl	800221e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 f968 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0201 	orr.w	r2, r2, #1
 8002248:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b06      	cmp	r3, #6
 800225a:	d007      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d122      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d11b      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f06f 0202 	mvn.w	r2, #2
 80022a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8ee 	bl	800249e <HAL_TIM_IC_CaptureCallback>
 80022c2:	e005      	b.n	80022d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8e0 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8f1 	bl	80024b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d122      	bne.n	800232a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d11b      	bne.n	800232a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0204 	mvn.w	r2, #4
 80022fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8c4 	bl	800249e <HAL_TIM_IC_CaptureCallback>
 8002316:	e005      	b.n	8002324 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8b6 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8c7 	bl	80024b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d122      	bne.n	800237e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b08      	cmp	r3, #8
 8002344:	d11b      	bne.n	800237e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0208 	mvn.w	r2, #8
 800234e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2204      	movs	r2, #4
 8002354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f89a 	bl	800249e <HAL_TIM_IC_CaptureCallback>
 800236a:	e005      	b.n	8002378 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f88c 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f89d 	bl	80024b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d122      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b10      	cmp	r3, #16
 8002398:	d11b      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0210 	mvn.w	r2, #16
 80023a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2208      	movs	r2, #8
 80023a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f870 	bl	800249e <HAL_TIM_IC_CaptureCallback>
 80023be:	e005      	b.n	80023cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f862 	bl	800248a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f873 	bl	80024b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10e      	bne.n	80023fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0201 	mvn.w	r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 f8b5 	bl	8008568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d10e      	bne.n	800242a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b80      	cmp	r3, #128	; 0x80
 8002418:	d107      	bne.n	800242a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f903 	bl	8002630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d107      	bne.n	8002456 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f838 	bl	80024c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d10e      	bne.n	8002482 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d107      	bne.n	8002482 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f06f 0220 	mvn.w	r2, #32
 800247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f8cd 	bl	800261c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a40      	ldr	r2, [pc, #256]	; (80025f0 <TIM_Base_SetConfig+0x114>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d00f      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3d      	ldr	r2, [pc, #244]	; (80025f4 <TIM_Base_SetConfig+0x118>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00b      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <TIM_Base_SetConfig+0x11c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <TIM_Base_SetConfig+0x120>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_Base_SetConfig+0x40>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <TIM_Base_SetConfig+0x124>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d108      	bne.n	800252e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2f      	ldr	r2, [pc, #188]	; (80025f0 <TIM_Base_SetConfig+0x114>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d02b      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d027      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <TIM_Base_SetConfig+0x118>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d023      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <TIM_Base_SetConfig+0x11c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <TIM_Base_SetConfig+0x120>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01b      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a29      	ldr	r2, [pc, #164]	; (8002600 <TIM_Base_SetConfig+0x124>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d017      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a28      	ldr	r2, [pc, #160]	; (8002604 <TIM_Base_SetConfig+0x128>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <TIM_Base_SetConfig+0x12c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00f      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <TIM_Base_SetConfig+0x130>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00b      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <TIM_Base_SetConfig+0x134>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <TIM_Base_SetConfig+0x138>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d003      	beq.n	800258e <TIM_Base_SetConfig+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a23      	ldr	r2, [pc, #140]	; (8002618 <TIM_Base_SetConfig+0x13c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <TIM_Base_SetConfig+0x114>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <TIM_Base_SetConfig+0xf8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <TIM_Base_SetConfig+0x124>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d103      	bne.n	80025dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	615a      	str	r2, [r3, #20]
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40000c00 	.word	0x40000c00
 8002600:	40010400 	.word	0x40010400
 8002604:	40014000 	.word	0x40014000
 8002608:	40014400 	.word	0x40014400
 800260c:	40014800 	.word	0x40014800
 8002610:	40001800 	.word	0x40001800
 8002614:	40001c00 	.word	0x40001c00
 8002618:	40002000 	.word	0x40002000

0800261c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e03f      	b.n	80026d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f011 fa68 	bl	8013b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f90b 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b088      	sub	sp, #32
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	f040 8083 	bne.w	8002806 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Transmit+0x2e>
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e07b      	b.n	8002808 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_UART_Transmit+0x40>
 800271a:	2302      	movs	r3, #2
 800271c:	e074      	b.n	8002808 <HAL_UART_Transmit+0x12a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2221      	movs	r2, #33	; 0x21
 8002730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002734:	f7fe f8d8 	bl	80008e8 <HAL_GetTick>
 8002738:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002746:	e042      	b.n	80027ce <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275e:	d122      	bne.n	80027a6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2200      	movs	r2, #0
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f850 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e046      	b.n	8002808 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800278c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3302      	adds	r3, #2
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	e017      	b.n	80027ce <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3301      	adds	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	e013      	b.n	80027ce <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f82d 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e023      	b.n	8002808 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	60ba      	str	r2, [r7, #8]
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1b7      	bne.n	8002748 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2200      	movs	r2, #0
 80027e0:	2140      	movs	r1, #64	; 0x40
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f814 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00a      	b.n	8002808 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002820:	e02c      	b.n	800287c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d028      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <UART_WaitOnFlagUntilTimeout+0x30>
 8002830:	f7fe f85a 	bl	80008e8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	429a      	cmp	r2, r3
 800283e:	d21d      	bcs.n	800287c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800284e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e00f      	b.n	800289c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	429a      	cmp	r2, r3
 8002898:	d0c3      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028e4:	f023 030c 	bic.w	r3, r3, #12
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002910:	f040 80e4 	bne.w	8002adc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4aab      	ldr	r2, [pc, #684]	; (8002bc8 <UART_SetConfig+0x324>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <UART_SetConfig+0x84>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4aaa      	ldr	r2, [pc, #680]	; (8002bcc <UART_SetConfig+0x328>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d16c      	bne.n	8002a02 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002928:	f7fe fce4 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 800292c:	4602      	mov	r2, r0
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	009a      	lsls	r2, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4aa3      	ldr	r2, [pc, #652]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	011c      	lsls	r4, r3, #4
 800294c:	f7fe fcd2 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002950:	4602      	mov	r2, r0
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009a      	lsls	r2, r3, #2
 800295a:	441a      	add	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb2 f5f3 	udiv	r5, r2, r3
 8002966:	f7fe fcc5 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 800296a:	4602      	mov	r2, r0
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	009a      	lsls	r2, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	4a93      	ldr	r2, [pc, #588]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2264      	movs	r2, #100	; 0x64
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	1aeb      	subs	r3, r5, r3
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	3332      	adds	r3, #50	; 0x32
 8002994:	4a8e      	ldr	r2, [pc, #568]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a2:	441c      	add	r4, r3
 80029a4:	f7fe fca6 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	441a      	add	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80029be:	f7fe fc99 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a7d      	ldr	r2, [pc, #500]	; (8002bd0 <UART_SetConfig+0x32c>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2264      	movs	r2, #100	; 0x64
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	1aeb      	subs	r3, r5, r3
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a78      	ldr	r2, [pc, #480]	; (8002bd0 <UART_SetConfig+0x32c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	f003 0207 	and.w	r2, r3, #7
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4422      	add	r2, r4
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e154      	b.n	8002cac <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a02:	f7fe fc63 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009a      	lsls	r2, r3, #2
 8002a10:	441a      	add	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	4a6c      	ldr	r2, [pc, #432]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	011c      	lsls	r4, r3, #4
 8002a26:	f7fe fc51 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	009a      	lsls	r2, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a40:	f7fe fc44 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009a      	lsls	r2, r3, #2
 8002a4e:	441a      	add	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	2264      	movs	r2, #100	; 0x64
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	1aeb      	subs	r3, r5, r3
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	3332      	adds	r3, #50	; 0x32
 8002a6e:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a7c:	441c      	add	r4, r3
 8002a7e:	f7fe fc25 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	009a      	lsls	r2, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a98:	f7fe fc18 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009a      	lsls	r2, r3, #2
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4a47      	ldr	r2, [pc, #284]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	2264      	movs	r2, #100	; 0x64
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	1aeb      	subs	r3, r5, r3
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	3332      	adds	r3, #50	; 0x32
 8002ac6:	4a42      	ldr	r2, [pc, #264]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	f003 0207 	and.w	r2, r3, #7
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4422      	add	r2, r4
 8002ad8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002ada:	e0e7      	b.n	8002cac <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <UART_SetConfig+0x324>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <UART_SetConfig+0x24c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <UART_SetConfig+0x328>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d171      	bne.n	8002bd4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002af0:	f7fe fc00 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	011c      	lsls	r4, r3, #4
 8002b14:	f7fe fbee 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b2e:	f7fe fbe1 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009a      	lsls	r2, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2264      	movs	r2, #100	; 0x64
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	1aeb      	subs	r3, r5, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	; 0x32
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	441c      	add	r4, r3
 8002b6a:	f7fe fbc3 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b84:	f7fe fbb6 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	2264      	movs	r2, #100	; 0x64
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	1aeb      	subs	r3, r5, r3
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	3332      	adds	r3, #50	; 0x32
 8002bb2:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <UART_SetConfig+0x32c>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4422      	add	r2, r4
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	e071      	b.n	8002cac <UART_SetConfig+0x408>
 8002bc8:	40011000 	.word	0x40011000
 8002bcc:	40011400 	.word	0x40011400
 8002bd0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bd4:	f7fe fb7a 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <UART_SetConfig+0x410>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	011c      	lsls	r4, r3, #4
 8002bf8:	f7fe fb68 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	009a      	lsls	r2, r3, #2
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c12:	f7fe fb5b 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	4a21      	ldr	r2, [pc, #132]	; (8002cb4 <UART_SetConfig+0x410>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2264      	movs	r2, #100	; 0x64
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	1aeb      	subs	r3, r5, r3
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	3332      	adds	r3, #50	; 0x32
 8002c40:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <UART_SetConfig+0x410>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	441c      	add	r4, r3
 8002c4e:	f7fe fb3d 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	009a      	lsls	r2, r3, #2
 8002c5c:	441a      	add	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c68:	f7fe fb30 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009a      	lsls	r2, r3, #2
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <UART_SetConfig+0x410>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	2264      	movs	r2, #100	; 0x64
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	1aeb      	subs	r3, r5, r3
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	3332      	adds	r3, #50	; 0x32
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <UART_SetConfig+0x410>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	f003 020f 	and.w	r2, r3, #15
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4422      	add	r2, r4
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	e7ff      	b.n	8002cac <UART_SetConfig+0x408>
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb4:	51eb851f 	.word	0x51eb851f

08002cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cb8:	b084      	sub	sp, #16
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	f107 001c 	add.w	r0, r7, #28
 8002cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d122      	bne.n	8002d16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa56 	bl	80031bc <USB_CoreReset>
 8002d10:	4603      	mov	r3, r0
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	e01a      	b.n	8002d4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa4a 	bl	80031bc <USB_CoreReset>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d3e:	e005      	b.n	8002d4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10b      	bne.n	8002d6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f043 0206 	orr.w	r2, r3, #6
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d76:	b004      	add	sp, #16
 8002d78:	4770      	bx	lr

08002d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d106      	bne.n	8002dc8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e00b      	b.n	8002de0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	e001      	b.n	8002de0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e003      	b.n	8002de8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002de0:	2032      	movs	r0, #50	; 0x32
 8002de2:	f7fd fd8d 	bl	8000900 <HAL_Delay>

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002df0:	b084      	sub	sp, #16
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	e009      	b.n	8002e24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3340      	adds	r3, #64	; 0x40
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	3301      	adds	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0e      	cmp	r3, #14
 8002e28:	d9f2      	bls.n	8002e10 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d112      	bne.n	8002e56 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e005      	b.n	8002e62 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e74:	4619      	mov	r1, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	680b      	ldr	r3, [r1, #0]
 8002e80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10c      	bne.n	8002ea2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f961 	bl	8003158 <USB_SetDevSpeed>
 8002e96:	e008      	b.n	8002eaa <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f95c 	bl	8003158 <USB_SetDevSpeed>
 8002ea0:	e003      	b.n	8002eaa <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f957 	bl	8003158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002eaa:	2110      	movs	r1, #16
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f90b 	bl	80030c8 <USB_FlushTxFifo>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f929 	bl	8003114 <USB_FlushRxFifo>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eea:	461a      	mov	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e043      	b.n	8002f7e <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f0c:	d118      	bne.n	8002f40 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f20:	461a      	mov	r2, r3
 8002f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e013      	b.n	8002f52 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f36:	461a      	mov	r2, r3
 8002f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e008      	b.n	8002f52 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2300      	movs	r3, #0
 8002f50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2300      	movs	r3, #0
 8002f62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f70:	461a      	mov	r2, r3
 8002f72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d3b7      	bcc.n	8002ef6 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e043      	b.n	8003014 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fa2:	d118      	bne.n	8002fd6 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10a      	bne.n	8002fc0 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e013      	b.n	8002fe8 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e008      	b.n	8002fe8 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800300c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3301      	adds	r3, #1
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3b7      	bcc.n	8002f8c <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800302e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	2b01      	cmp	r3, #1
 8003034:	d111      	bne.n	800305a <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	461a      	mov	r2, r3
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <USB_DevInit+0x2d0>)
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	f043 0303 	orr.w	r3, r3, #3
 8003058:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003066:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f043 0210 	orr.w	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <USB_DevInit+0x2d4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f043 0208 	orr.w	r2, r3, #8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030ba:	b004      	add	sp, #16
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	00800100 	.word	0x00800100
 80030c4:	803c3800 	.word	0x803c3800

080030c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <USB_FlushTxFifo+0x48>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d0f0      	beq.n	80030e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	00030d40 	.word	0x00030d40

08003114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2210      	movs	r2, #16
 8003124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3301      	adds	r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <USB_FlushRxFifo+0x40>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d901      	bls.n	8003138 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e006      	b.n	8003146 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b10      	cmp	r3, #16
 8003142:	d0f0      	beq.n	8003126 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	00030d40 	.word	0x00030d40

08003158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80031aa:	2003      	movs	r0, #3
 80031ac:	f7fd fba8 	bl	8000900 <HAL_Delay>

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a13      	ldr	r2, [pc, #76]	; (8003220 <USB_CoreReset+0x64>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e01b      	b.n	8003212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	daf2      	bge.n	80031c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <USB_CoreReset+0x64>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e006      	b.n	8003212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d0f0      	beq.n	80031f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	00030d40 	.word	0x00030d40

08003224 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003236:	2b84      	cmp	r3, #132	; 0x84
 8003238:	d005      	beq.n	8003246 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800323a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	3303      	adds	r3, #3
 8003244:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800325a:	f3ef 8305 	mrs	r3, IPSR
 800325e:	607b      	str	r3, [r7, #4]
  return(result);
 8003260:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800327c:	f001 f922 	bl	80044c4 <vTaskStartScheduler>
  
  return osOK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	bd80      	pop	{r7, pc}

08003286 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003288:	b089      	sub	sp, #36	; 0x24
 800328a:	af04      	add	r7, sp, #16
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <osThreadCreate+0x54>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01c      	beq.n	80032da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685c      	ldr	r4, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681d      	ldr	r5, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691e      	ldr	r6, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ffb6 	bl	8003224 <makeFreeRtosPriority>
 80032b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c2:	9202      	str	r2, [sp, #8]
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	9100      	str	r1, [sp, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4632      	mov	r2, r6
 80032cc:	4629      	mov	r1, r5
 80032ce:	4620      	mov	r0, r4
 80032d0:	f000 ff3d 	bl	800414e <xTaskCreateStatic>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e01c      	b.n	8003314 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685c      	ldr	r4, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032e6:	b29e      	uxth	r6, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff98 	bl	8003224 <makeFreeRtosPriority>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	9200      	str	r2, [sp, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	4632      	mov	r2, r6
 8003302:	4629      	mov	r1, r5
 8003304:	4620      	mov	r0, r4
 8003306:	f000 ff7b 	bl	8004200 <xTaskCreate>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d001      	beq.n	8003314 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800331e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <osDelay+0x16>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	e000      	b.n	8003336 <osDelay+0x18>
 8003334:	2301      	movs	r3, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f890 	bl	800445c <vTaskDelay>
  
  return osOK;
 800333c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af02      	add	r7, sp, #8
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10b      	bne.n	8003376 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	2303      	movs	r3, #3
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	2200      	movs	r2, #0
 800336a:	2100      	movs	r1, #0
 800336c:	2001      	movs	r0, #1
 800336e:	f000 f9bd 	bl	80036ec <xQueueGenericCreateStatic>
 8003372:	4603      	mov	r3, r0
 8003374:	e016      	b.n	80033a4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	e014      	b.n	80033a4 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d110      	bne.n	80033a2 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003380:	2203      	movs	r2, #3
 8003382:	2100      	movs	r1, #0
 8003384:	2001      	movs	r0, #1
 8003386:	f000 fa23 	bl	80037d0 <xQueueGenericCreate>
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <osSemaphoreCreate+0x58>
 8003392:	2300      	movs	r3, #0
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 faa7 	bl	80038ec <xQueueGenericSend>
      return sema;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	e000      	b.n	80033a4 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80033a2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	e03a      	b.n	800343a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d103      	bne.n	80033d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e009      	b.n	80033ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <osSemaphoreWait+0x40>
      ticks = 1;
 80033e8:	2301      	movs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80033ec:	f7ff ff32 	bl	8003254 <inHandlerMode>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	461a      	mov	r2, r3
 80033fc:	2100      	movs	r1, #0
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fd00 	bl	8003e04 <xQueueReceiveFromISR>
 8003404:	4603      	mov	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <osSemaphoreWait+0x62>
      return osErrorOS;
 800340a:	23ff      	movs	r3, #255	; 0xff
 800340c:	e015      	b.n	800343a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d011      	beq.n	8003438 <osSemaphoreWait+0x8c>
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <osSemaphoreWait+0x98>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	e008      	b.n	8003438 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fbe3 	bl	8003bf4 <xQueueSemaphoreTake>
 800342e:	4603      	mov	r3, r0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d001      	beq.n	8003438 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003434:	23ff      	movs	r3, #255	; 0xff
 8003436:	e000      	b.n	800343a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003458:	f7ff fefc 	bl	8003254 <inHandlerMode>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb39 	bl	8003ae0 <xQueueGiveFromISR>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003474:	23ff      	movs	r3, #255	; 0xff
 8003476:	e017      	b.n	80034a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d013      	beq.n	80034a6 <osSemaphoreRelease+0x5e>
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <osSemaphoreRelease+0x68>)
 8003480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	e00a      	b.n	80034a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003490:	2300      	movs	r3, #0
 8003492:	2200      	movs	r2, #0
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa28 	bl	80038ec <xQueueGenericSend>
 800349c:	4603      	mov	r3, r0
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80034a2:	23ff      	movs	r3, #255	; 0xff
 80034a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 0208 	add.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f103 0208 	add.w	r2, r3, #8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 0208 	add.w	r2, r3, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d103      	bne.n	8003576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e00c      	b.n	8003590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3308      	adds	r3, #8
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e002      	b.n	8003584 <vListInsert+0x2e>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	d2f6      	bcs.n	800357e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6852      	ldr	r2, [r2, #4]
 80035e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d103      	bne.n	80035fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	e7fe      	b.n	8003642 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003644:	f001 fea2 	bl	800538c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	68f9      	ldr	r1, [r7, #12]
 8003652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	441a      	add	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	3b01      	subs	r3, #1
 8003676:	68f9      	ldr	r1, [r7, #12]
 8003678:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	441a      	add	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d114      	bne.n	80036c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01a      	beq.n	80036d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3310      	adds	r3, #16
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 f94e 	bl	8004948 <xTaskRemoveFromEventList>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <xQueueGenericReset+0xcc>)
 80036b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	e009      	b.n	80036d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3310      	adds	r3, #16
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fef3 	bl	80034b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3324      	adds	r3, #36	; 0x24
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff feee 	bl	80034b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036d8:	f001 fe86 	bl	80053e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036dc:	2301      	movs	r3, #1
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08e      	sub	sp, #56	; 0x38
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <xQueueGenericCreateStatic+0x28>
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 8003712:	e7fe      	b.n	8003712 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d109      	bne.n	800372e <xQueueGenericCreateStatic+0x42>
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	e7fe      	b.n	800372c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <xQueueGenericCreateStatic+0x4e>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <xQueueGenericCreateStatic+0x52>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <xQueueGenericCreateStatic+0x54>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <xQueueGenericCreateStatic+0x6c>
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	e7fe      	b.n	8003756 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <xQueueGenericCreateStatic+0x78>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xQueueGenericCreateStatic+0x7c>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <xQueueGenericCreateStatic+0x7e>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <xQueueGenericCreateStatic+0x96>
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	e7fe      	b.n	8003780 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003782:	2348      	movs	r3, #72	; 0x48
 8003784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b48      	cmp	r3, #72	; 0x48
 800378a:	d009      	beq.n	80037a0 <xQueueGenericCreateStatic+0xb4>
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e7fe      	b.n	800379e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f842 	bl	800384a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3730      	adds	r7, #48	; 0x30
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <xQueueGenericCreate+0x28>
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e7fe      	b.n	80037f6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e004      	b.n	800380e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3348      	adds	r3, #72	; 0x48
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fed4 	bl	80055c0 <pvPortMalloc>
 8003818:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00f      	beq.n	8003840 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	3348      	adds	r3, #72	; 0x48
 8003824:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800382e:	79fa      	ldrb	r2, [r7, #7]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f805 	bl	800384a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003840:	69bb      	ldr	r3, [r7, #24]
	}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e002      	b.n	800386c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003878:	2101      	movs	r1, #1
 800387a:	69b8      	ldr	r0, [r7, #24]
 800387c:	f7ff fece 	bl	800361c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80038a8:	2300      	movs	r3, #0
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f81c 	bl	80038ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6939      	ldr	r1, [r7, #16]
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7ff ff7b 	bl	80037d0 <xQueueGenericCreate>
 80038da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff ffd3 	bl	8003888 <prvInitialiseMutex>

		return pxNewQueue;
 80038e2:	68fb      	ldr	r3, [r7, #12]
	}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038fa:	2300      	movs	r3, #0
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <xQueueGenericSend+0x30>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
 800391a:	e7fe      	b.n	800391a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <xQueueGenericSend+0x3e>
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <xQueueGenericSend+0x42>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueGenericSend+0x44>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <xQueueGenericSend+0x5c>
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	e7fe      	b.n	8003946 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d103      	bne.n	8003956 <xQueueGenericSend+0x6a>
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <xQueueGenericSend+0x6e>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueGenericSend+0x70>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <xQueueGenericSend+0x88>
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
 8003972:	e7fe      	b.n	8003972 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003974:	f001 f9a4 	bl	8004cc0 <xTaskGetSchedulerState>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <xQueueGenericSend+0x98>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <xQueueGenericSend+0x9c>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <xQueueGenericSend+0x9e>
 8003988:	2300      	movs	r3, #0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <xQueueGenericSend+0xb6>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039a2:	f001 fcf3 	bl	800538c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <xQueueGenericSend+0xcc>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d129      	bne.n	8003a0c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039be:	f000 fab6 	bl	8003f2e <prvCopyDataToQueue>
 80039c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	3324      	adds	r3, #36	; 0x24
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 ffb9 	bl	8004948 <xTaskRemoveFromEventList>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039dc:	4b3f      	ldr	r3, [pc, #252]	; (8003adc <xQueueGenericSend+0x1f0>)
 80039de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	e00a      	b.n	8003a04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <xQueueGenericSend+0x1f0>)
 80039f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a04:	f001 fcf0 	bl	80053e8 <vPortExitCritical>
				return pdPASS;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e063      	b.n	8003ad4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a12:	f001 fce9 	bl	80053e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e05c      	b.n	8003ad4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fff1 	bl	8004a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a2e:	f001 fcdb 	bl	80053e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a32:	f000 fda5 	bl	8004580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a36:	f001 fca9 	bl	800538c <vPortEnterCritical>
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a40:	b25b      	sxtb	r3, r3
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d103      	bne.n	8003a50 <xQueueGenericSend+0x164>
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d103      	bne.n	8003a66 <xQueueGenericSend+0x17a>
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a66:	f001 fcbf 	bl	80053e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a6a:	1d3a      	adds	r2, r7, #4
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 ffe0 	bl	8004a38 <xTaskCheckForTimeOut>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d124      	bne.n	8003ac8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a80:	f000 fb4d 	bl	800411e <prvIsQueueFull>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d018      	beq.n	8003abc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	3310      	adds	r3, #16
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 ff34 	bl	8004900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a9a:	f000 fad8 	bl	800404e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a9e:	f000 fd7d 	bl	800459c <xTaskResumeAll>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f af7c 	bne.w	80039a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <xQueueGenericSend+0x1f0>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	e772      	b.n	80039a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003abe:	f000 fac6 	bl	800404e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ac2:	f000 fd6b 	bl	800459c <xTaskResumeAll>
 8003ac6:	e76c      	b.n	80039a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aca:	f000 fac0 	bl	800404e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ace:	f000 fd65 	bl	800459c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ad2:	2300      	movs	r3, #0
		}
	}
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3738      	adds	r7, #56	; 0x38
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <xQueueGiveFromISR+0x28>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	623b      	str	r3, [r7, #32]
 8003b06:	e7fe      	b.n	8003b06 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <xQueueGiveFromISR+0x44>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	e7fe      	b.n	8003b22 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d103      	bne.n	8003b34 <xQueueGiveFromISR+0x54>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <xQueueGiveFromISR+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <xQueueGiveFromISR+0x5a>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <xQueueGiveFromISR+0x72>
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e7fe      	b.n	8003b50 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b52:	f001 fcf7 	bl	8005544 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b56:	f3ef 8211 	mrs	r2, BASEPRI
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	617a      	str	r2, [r7, #20]
 8003b6c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d22b      	bcs.n	8003bda <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d112      	bne.n	8003bc4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	3324      	adds	r3, #36	; 0x24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fecc 	bl	8004948 <xTaskRemoveFromEventList>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e007      	b.n	8003bd4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc8:	3301      	adds	r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	b25a      	sxtb	r2, r3
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd8:	e001      	b.n	8003bde <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3738      	adds	r7, #56	; 0x38
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08e      	sub	sp, #56	; 0x38
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	e7fe      	b.n	8003c22 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <xQueueSemaphoreTake+0x4c>
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e7fe      	b.n	8003c3e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c40:	f001 f83e 	bl	8004cc0 <xTaskGetSchedulerState>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <xQueueSemaphoreTake+0x5c>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <xQueueSemaphoreTake+0x60>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <xQueueSemaphoreTake+0x62>
 8003c54:	2300      	movs	r3, #0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <xQueueSemaphoreTake+0x7a>
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e7fe      	b.n	8003c6c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c6e:	f001 fb8d 	bl	800538c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d024      	beq.n	8003cc8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003c8e:	f001 f9dd 	bl	800504c <pvTaskIncrementMutexHeldCount>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00f      	beq.n	8003cc0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	3310      	adds	r3, #16
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fe4f 	bl	8004948 <xTaskRemoveFromEventList>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <xQueueSemaphoreTake+0x20c>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cc0:	f001 fb92 	bl	80053e8 <vPortExitCritical>
				return pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e096      	b.n	8003df6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d110      	bne.n	8003cf0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <xQueueSemaphoreTake+0xf4>
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e7fe      	b.n	8003ce6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ce8:	f001 fb7e 	bl	80053e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e082      	b.n	8003df6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cf6:	f107 030c 	add.w	r3, r7, #12
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fe86 	bl	8004a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d04:	f001 fb70 	bl	80053e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d08:	f000 fc3a 	bl	8004580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d0c:	f001 fb3e 	bl	800538c <vPortEnterCritical>
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d103      	bne.n	8003d26 <xQueueSemaphoreTake+0x132>
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d2c:	b25b      	sxtb	r3, r3
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d103      	bne.n	8003d3c <xQueueSemaphoreTake+0x148>
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d3c:	f001 fb54 	bl	80053e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d40:	463a      	mov	r2, r7
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fe75 	bl	8004a38 <xTaskCheckForTimeOut>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d132      	bne.n	8003dba <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d56:	f000 f9cc 	bl	80040f2 <prvIsQueueEmpty>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d026      	beq.n	8003dae <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003d68:	f001 fb10 	bl	800538c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 ffc3 	bl	8004cfc <xTaskPriorityInherit>
 8003d76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003d78:	f001 fb36 	bl	80053e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	3324      	adds	r3, #36	; 0x24
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fdbb 	bl	8004900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d8c:	f000 f95f 	bl	800404e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d90:	f000 fc04 	bl	800459c <xTaskResumeAll>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f47f af69 	bne.w	8003c6e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003d9c:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <xQueueSemaphoreTake+0x20c>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	e75f      	b.n	8003c6e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003db0:	f000 f94d 	bl	800404e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003db4:	f000 fbf2 	bl	800459c <xTaskResumeAll>
 8003db8:	e759      	b.n	8003c6e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dbc:	f000 f947 	bl	800404e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dc0:	f000 fbec 	bl	800459c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dc6:	f000 f994 	bl	80040f2 <prvIsQueueEmpty>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f43f af4e 	beq.w	8003c6e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003dd8:	f001 fad8 	bl	800538c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003dde:	f000 f88e 	bl	8003efe <prvGetDisinheritPriorityAfterTimeout>
 8003de2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 f890 	bl	8004f10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003df0:	f001 fafa 	bl	80053e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3738      	adds	r7, #56	; 0x38
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08e      	sub	sp, #56	; 0x38
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <xQueueReceiveFromISR+0x2a>
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	e7fe      	b.n	8003e2c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <xQueueReceiveFromISR+0x38>
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <xQueueReceiveFromISR+0x3c>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <xQueueReceiveFromISR+0x3e>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <xQueueReceiveFromISR+0x56>
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	e7fe      	b.n	8003e58 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e5a:	f001 fb73 	bl	8005544 <vPortValidateInterruptPriority>
	__asm volatile
 8003e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	61ba      	str	r2, [r7, #24]
 8003e74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003e76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d02f      	beq.n	8003ee6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e94:	f000 f8b5 	bl	8004002 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	1e5a      	subs	r2, r3, #1
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d112      	bne.n	8003ed0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	3310      	adds	r3, #16
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd46 	bl	8004948 <xTaskRemoveFromEventList>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00b      	beq.n	8003ee0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e007      	b.n	8003ee0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee4:	e001      	b.n	8003eea <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3738      	adds	r7, #56	; 0x38
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1c3 0307 	rsb	r3, r3, #7
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e001      	b.n	8003f20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f20:	68fb      	ldr	r3, [r7, #12]
	}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10d      	bne.n	8003f68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d14d      	bne.n	8003ff0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 ff55 	bl	8004e08 <xTaskPriorityDisinherit>
 8003f5e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	e043      	b.n	8003ff0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6898      	ldr	r0, [r3, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	461a      	mov	r2, r3
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	f01c fb77 	bl	802066c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	441a      	add	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d32b      	bcc.n	8003ff0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e026      	b.n	8003ff0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	68d8      	ldr	r0, [r3, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	461a      	mov	r2, r3
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	f01c fb5d 	bl	802066c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	425b      	negs	r3, r3
 8003fbc:	441a      	add	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d207      	bcs.n	8003fde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	425b      	negs	r3, r3
 8003fd8:	441a      	add	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d105      	bne.n	8003ff0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ff8:	697b      	ldr	r3, [r7, #20]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d018      	beq.n	8004046 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	441a      	add	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d303      	bcc.n	8004036 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	461a      	mov	r2, r3
 8004040:	6838      	ldr	r0, [r7, #0]
 8004042:	f01c fb13 	bl	802066c <memcpy>
	}
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004056:	f001 f999 	bl	800538c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004060:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004062:	e011      	b.n	8004088 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3324      	adds	r3, #36	; 0x24
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fc69 	bl	8004948 <xTaskRemoveFromEventList>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800407c:	f000 fd3c 	bl	8004af8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	3b01      	subs	r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	dce9      	bgt.n	8004064 <prvUnlockQueue+0x16>
 8004090:	e000      	b.n	8004094 <prvUnlockQueue+0x46>
					break;
 8004092:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800409c:	f001 f9a4 	bl	80053e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040a0:	f001 f974 	bl	800538c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040ac:	e011      	b.n	80040d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3310      	adds	r3, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fc44 	bl	8004948 <xTaskRemoveFromEventList>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040c6:	f000 fd17 	bl	8004af8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040ca:	7bbb      	ldrb	r3, [r7, #14]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	dce9      	bgt.n	80040ae <prvUnlockQueue+0x60>
 80040da:	e000      	b.n	80040de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	22ff      	movs	r2, #255	; 0xff
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040e6:	f001 f97f 	bl	80053e8 <vPortExitCritical>
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040fa:	f001 f947 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004106:	2301      	movs	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e001      	b.n	8004110 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004110:	f001 f96a 	bl	80053e8 <vPortExitCritical>

	return xReturn;
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004126:	f001 f931 	bl	800538c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	429a      	cmp	r2, r3
 8004134:	d102      	bne.n	800413c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e001      	b.n	8004140 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004140:	f001 f952 	bl	80053e8 <vPortExitCritical>

	return xReturn;
 8004144:	68fb      	ldr	r3, [r7, #12]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800414e:	b580      	push	{r7, lr}
 8004150:	b08e      	sub	sp, #56	; 0x38
 8004152:	af04      	add	r7, sp, #16
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <xTaskCreateStatic+0x28>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	e7fe      	b.n	8004174 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <xTaskCreateStatic+0x42>
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e7fe      	b.n	800418e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004190:	2354      	movs	r3, #84	; 0x54
 8004192:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b54      	cmp	r3, #84	; 0x54
 8004198:	d009      	beq.n	80041ae <xTaskCreateStatic+0x60>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e7fe      	b.n	80041ac <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01e      	beq.n	80041f2 <xTaskCreateStatic+0xa4>
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041cc:	2300      	movs	r3, #0
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9302      	str	r3, [sp, #8]
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f850 	bl	800428a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ec:	f000 f8cc 	bl	8004388 <prvAddNewTaskToReadyList>
 80041f0:	e001      	b.n	80041f6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041f6:	697b      	ldr	r3, [r7, #20]
	}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	; 0x30
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f001 f9d3 	bl	80055c0 <pvPortMalloc>
 800421a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004222:	2054      	movs	r0, #84	; 0x54
 8004224:	f001 f9cc 	bl	80055c0 <pvPortMalloc>
 8004228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
 8004236:	e005      	b.n	8004244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f001 fa83 	bl	8005744 <vPortFree>
 800423e:	e001      	b.n	8004244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d017      	beq.n	800427a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	2300      	movs	r3, #0
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f80e 	bl	800428a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800426e:	69f8      	ldr	r0, [r7, #28]
 8004270:	f000 f88a 	bl	8004388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004274:	2301      	movs	r3, #1
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e002      	b.n	8004280 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004280:	69bb      	ldr	r3, [r7, #24]
	}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b088      	sub	sp, #32
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042a2:	3b01      	subs	r3, #1
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f023 0307 	bic.w	r3, r3, #7
 80042b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <prvInitialiseNewTask+0x46>
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e7fe      	b.n	80042ce <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	e012      	b.n	80042fc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	7819      	ldrb	r1, [r3, #0]
 80042de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	3334      	adds	r3, #52	; 0x34
 80042e6:	460a      	mov	r2, r1
 80042e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3301      	adds	r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	d9e9      	bls.n	80042d6 <prvInitialiseNewTask+0x4c>
 8004302:	e000      	b.n	8004306 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004304:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b06      	cmp	r3, #6
 8004312:	d901      	bls.n	8004318 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004314:	2306      	movs	r3, #6
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004322:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	2200      	movs	r2, #0
 8004328:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	3304      	adds	r3, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f8e0 	bl	80034f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	3318      	adds	r3, #24
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff f8db 	bl	80034f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	f1c3 0207 	rsb	r2, r3, #7
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	68f9      	ldr	r1, [r7, #12]
 8004366:	69b8      	ldr	r0, [r7, #24]
 8004368:	f000 feea 	bl	8005140 <pxPortInitialiseStack>
 800436c:	4602      	mov	r2, r0
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800437e:	bf00      	nop
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004390:	f000 fffc 	bl	800538c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <prvAddNewTaskToReadyList+0xb8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	4a29      	ldr	r2, [pc, #164]	; (8004440 <prvAddNewTaskToReadyList+0xb8>)
 800439c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800439e:	4b29      	ldr	r3, [pc, #164]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043ac:	4b24      	ldr	r3, [pc, #144]	; (8004440 <prvAddNewTaskToReadyList+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d110      	bne.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043b4:	f000 fbc4 	bl	8004b40 <prvInitialiseTaskLists>
 80043b8:	e00d      	b.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <prvAddNewTaskToReadyList+0xc0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d802      	bhi.n	80043d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <prvAddNewTaskToReadyList+0xc4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	4a1b      	ldr	r2, [pc, #108]	; (800444c <prvAddNewTaskToReadyList+0xc4>)
 80043de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <prvAddNewTaskToReadyList+0xc8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <prvAddNewTaskToReadyList+0xc8>)
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <prvAddNewTaskToReadyList+0xcc>)
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7ff f880 	bl	800350e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800440e:	f000 ffeb 	bl	80053e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004412:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <prvAddNewTaskToReadyList+0xc0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00e      	beq.n	8004438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <prvAddNewTaskToReadyList+0xbc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	429a      	cmp	r2, r3
 8004426:	d207      	bcs.n	8004438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <prvAddNewTaskToReadyList+0xd0>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000194 	.word	0x20000194
 8004444:	20000094 	.word	0x20000094
 8004448:	200001a0 	.word	0x200001a0
 800444c:	200001b0 	.word	0x200001b0
 8004450:	2000019c 	.word	0x2000019c
 8004454:	20000098 	.word	0x20000098
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800446e:	4b13      	ldr	r3, [pc, #76]	; (80044bc <vTaskDelay+0x60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <vTaskDelay+0x2e>
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	e7fe      	b.n	8004488 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800448a:	f000 f879 	bl	8004580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800448e:	2100      	movs	r1, #0
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fdef 	bl	8005074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004496:	f000 f881 	bl	800459c <xTaskResumeAll>
 800449a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044a2:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <vTaskDelay+0x64>)
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200001bc 	.word	0x200001bc
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044d2:	463a      	mov	r2, r7
 80044d4:	1d39      	adds	r1, r7, #4
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fa46 	bl	800596c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	9202      	str	r2, [sp, #8]
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	460a      	mov	r2, r1
 80044f2:	491d      	ldr	r1, [pc, #116]	; (8004568 <vTaskStartScheduler+0xa4>)
 80044f4:	481d      	ldr	r0, [pc, #116]	; (800456c <vTaskStartScheduler+0xa8>)
 80044f6:	f7ff fe2a 	bl	800414e <xTaskCreateStatic>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <vTaskStartScheduler+0xac>)
 80044fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <vTaskStartScheduler+0xac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e001      	b.n	8004512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d115      	bne.n	8004544 <vTaskStartScheduler+0x80>
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <vTaskStartScheduler+0xb0>)
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <vTaskStartScheduler+0xb4>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004538:	4b10      	ldr	r3, [pc, #64]	; (800457c <vTaskStartScheduler+0xb8>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800453e:	f000 fe87 	bl	8005250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004542:	e00d      	b.n	8004560 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d109      	bne.n	8004560 <vTaskStartScheduler+0x9c>
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e7fe      	b.n	800455e <vTaskStartScheduler+0x9a>
}
 8004560:	bf00      	nop
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	08021960 	.word	0x08021960
 800456c:	08004b11 	.word	0x08004b11
 8004570:	200001b8 	.word	0x200001b8
 8004574:	200001b4 	.word	0x200001b4
 8004578:	200001a0 	.word	0x200001a0
 800457c:	20000198 	.word	0x20000198

08004580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004584:	4b04      	ldr	r3, [pc, #16]	; (8004598 <vTaskSuspendAll+0x18>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a03      	ldr	r2, [pc, #12]	; (8004598 <vTaskSuspendAll+0x18>)
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	200001bc 	.word	0x200001bc

0800459c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <xTaskResumeAll+0x114>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <xTaskResumeAll+0x2a>
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	e7fe      	b.n	80045c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045c6:	f000 fee1 	bl	800538c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <xTaskResumeAll+0x114>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4a37      	ldr	r2, [pc, #220]	; (80046b0 <xTaskResumeAll+0x114>)
 80045d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <xTaskResumeAll+0x114>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d161      	bne.n	80046a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045dc:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <xTaskResumeAll+0x118>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05d      	beq.n	80046a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e4:	e02e      	b.n	8004644 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045e6:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <xTaskResumeAll+0x11c>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3318      	adds	r3, #24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ffe8 	bl	80035c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe ffe3 	bl	80035c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	2201      	movs	r2, #1
 8004608:	409a      	lsls	r2, r3
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <xTaskResumeAll+0x120>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	4a2a      	ldr	r2, [pc, #168]	; (80046bc <xTaskResumeAll+0x120>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <xTaskResumeAll+0x124>)
 8004622:	441a      	add	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe ff6f 	bl	800350e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <xTaskResumeAll+0x128>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <xTaskResumeAll+0x12c>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <xTaskResumeAll+0x11c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1cc      	bne.n	80045e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004652:	f000 fb0f 	bl	8004c74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <xTaskResumeAll+0x130>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004662:	f000 f837 	bl	80046d4 <xTaskIncrementTick>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <xTaskResumeAll+0x12c>)
 800466e:	2201      	movs	r2, #1
 8004670:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3b01      	subs	r3, #1
 8004676:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f1      	bne.n	8004662 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <xTaskResumeAll+0x130>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004684:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <xTaskResumeAll+0x12c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004690:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <xTaskResumeAll+0x134>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a0:	f000 fea2 	bl	80053e8 <vPortExitCritical>

	return xAlreadyYielded;
 80046a4:	68bb      	ldr	r3, [r7, #8]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200001bc 	.word	0x200001bc
 80046b4:	20000194 	.word	0x20000194
 80046b8:	20000154 	.word	0x20000154
 80046bc:	2000019c 	.word	0x2000019c
 80046c0:	20000098 	.word	0x20000098
 80046c4:	20000094 	.word	0x20000094
 80046c8:	200001a8 	.word	0x200001a8
 80046cc:	200001a4 	.word	0x200001a4
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046de:	4b50      	ldr	r3, [pc, #320]	; (8004820 <xTaskIncrementTick+0x14c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 808c 	bne.w	8004800 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046e8:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <xTaskIncrementTick+0x150>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f0:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <xTaskIncrementTick+0x150>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11f      	bne.n	800473c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80046fc:	4b4a      	ldr	r3, [pc, #296]	; (8004828 <xTaskIncrementTick+0x154>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <xTaskIncrementTick+0x46>
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	e7fe      	b.n	8004718 <xTaskIncrementTick+0x44>
 800471a:	4b43      	ldr	r3, [pc, #268]	; (8004828 <xTaskIncrementTick+0x154>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4b42      	ldr	r3, [pc, #264]	; (800482c <xTaskIncrementTick+0x158>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a40      	ldr	r2, [pc, #256]	; (8004828 <xTaskIncrementTick+0x154>)
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4a40      	ldr	r2, [pc, #256]	; (800482c <xTaskIncrementTick+0x158>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b40      	ldr	r3, [pc, #256]	; (8004830 <xTaskIncrementTick+0x15c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a3e      	ldr	r2, [pc, #248]	; (8004830 <xTaskIncrementTick+0x15c>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	f000 fa9c 	bl	8004c74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800473c:	4b3d      	ldr	r3, [pc, #244]	; (8004834 <xTaskIncrementTick+0x160>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d34d      	bcc.n	80047e2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <xTaskIncrementTick+0x154>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <xTaskIncrementTick+0x80>
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <xTaskIncrementTick+0x82>
 8004754:	2300      	movs	r3, #0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <xTaskIncrementTick+0x160>)
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	601a      	str	r2, [r3, #0]
					break;
 8004762:	e03e      	b.n	80047e2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004764:	4b30      	ldr	r3, [pc, #192]	; (8004828 <xTaskIncrementTick+0x154>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	429a      	cmp	r2, r3
 800477a:	d203      	bcs.n	8004784 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800477c:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <xTaskIncrementTick+0x160>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6013      	str	r3, [r2, #0]
						break;
 8004782:	e02e      	b.n	80047e2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe ff1d 	bl	80035c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3318      	adds	r3, #24
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe ff14 	bl	80035c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	4b23      	ldr	r3, [pc, #140]	; (8004838 <xTaskIncrementTick+0x164>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	4a22      	ldr	r2, [pc, #136]	; (8004838 <xTaskIncrementTick+0x164>)
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <xTaskIncrementTick+0x168>)
 80047c0:	441a      	add	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3304      	adds	r3, #4
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7fe fea0 	bl	800350e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <xTaskIncrementTick+0x16c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3b4      	bcc.n	8004746 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e0:	e7b1      	b.n	8004746 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047e2:	4b17      	ldr	r3, [pc, #92]	; (8004840 <xTaskIncrementTick+0x16c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	4914      	ldr	r1, [pc, #80]	; (800483c <xTaskIncrementTick+0x168>)
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d907      	bls.n	800480a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	e004      	b.n	800480a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004800:	4b10      	ldr	r3, [pc, #64]	; (8004844 <xTaskIncrementTick+0x170>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <xTaskIncrementTick+0x170>)
 8004808:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <xTaskIncrementTick+0x174>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004816:	697b      	ldr	r3, [r7, #20]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	200001bc 	.word	0x200001bc
 8004824:	20000198 	.word	0x20000198
 8004828:	2000014c 	.word	0x2000014c
 800482c:	20000150 	.word	0x20000150
 8004830:	200001ac 	.word	0x200001ac
 8004834:	200001b4 	.word	0x200001b4
 8004838:	2000019c 	.word	0x2000019c
 800483c:	20000098 	.word	0x20000098
 8004840:	20000094 	.word	0x20000094
 8004844:	200001a4 	.word	0x200001a4
 8004848:	200001a8 	.word	0x200001a8

0800484c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <vTaskSwitchContext+0xa0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800485a:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <vTaskSwitchContext+0xa4>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004860:	e03e      	b.n	80048e0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <vTaskSwitchContext+0xa4>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004868:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <vTaskSwitchContext+0xa8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	fab3 f383 	clz	r3, r3
 8004874:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004876:	7afb      	ldrb	r3, [r7, #11]
 8004878:	f1c3 031f 	rsb	r3, r3, #31
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	491e      	ldr	r1, [pc, #120]	; (80048f8 <vTaskSwitchContext+0xac>)
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	e7fe      	b.n	80048a4 <vTaskSwitchContext+0x58>
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <vTaskSwitchContext+0xac>)
 80048b2:	4413      	add	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3308      	adds	r3, #8
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d104      	bne.n	80048d6 <vTaskSwitchContext+0x8a>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <vTaskSwitchContext+0xb0>)
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	200001bc 	.word	0x200001bc
 80048f0:	200001a8 	.word	0x200001a8
 80048f4:	2000019c 	.word	0x2000019c
 80048f8:	20000098 	.word	0x20000098
 80048fc:	20000094 	.word	0x20000094

08004900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <vTaskPlaceOnEventList+0x24>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e7fe      	b.n	8004922 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <vTaskPlaceOnEventList+0x44>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3318      	adds	r3, #24
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fe fe12 	bl	8003556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004932:	2101      	movs	r1, #1
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f000 fb9d 	bl	8005074 <prvAddCurrentTaskToDelayedList>
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000094 	.word	0x20000094

08004948 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <xTaskRemoveFromEventList+0x2a>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e7fe      	b.n	8004970 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3318      	adds	r3, #24
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fe26 	bl	80035c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <xTaskRemoveFromEventList+0xac>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11c      	bne.n	80049be <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fe1d 	bl	80035c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	2201      	movs	r2, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <xTaskRemoveFromEventList+0xb0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	4a16      	ldr	r2, [pc, #88]	; (80049f8 <xTaskRemoveFromEventList+0xb0>)
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <xTaskRemoveFromEventList+0xb4>)
 80049ae:	441a      	add	r2, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fe fda9 	bl	800350e <vListInsertEnd>
 80049bc:	e005      	b.n	80049ca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	3318      	adds	r3, #24
 80049c2:	4619      	mov	r1, r3
 80049c4:	480e      	ldr	r0, [pc, #56]	; (8004a00 <xTaskRemoveFromEventList+0xb8>)
 80049c6:	f7fe fda2 	bl	800350e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <xTaskRemoveFromEventList+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d905      	bls.n	80049e4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <xTaskRemoveFromEventList+0xc0>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e001      	b.n	80049e8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200001bc 	.word	0x200001bc
 80049f8:	2000019c 	.word	0x2000019c
 80049fc:	20000098 	.word	0x20000098
 8004a00:	20000154 	.word	0x20000154
 8004a04:	20000094 	.word	0x20000094
 8004a08:	200001a8 	.word	0x200001a8

08004a0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <vTaskInternalSetTimeOutState+0x24>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <vTaskInternalSetTimeOutState+0x28>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	605a      	str	r2, [r3, #4]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	200001ac 	.word	0x200001ac
 8004a34:	20000198 	.word	0x20000198

08004a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <xTaskCheckForTimeOut+0x24>
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e7fe      	b.n	8004a5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <xTaskCheckForTimeOut+0x3e>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e7fe      	b.n	8004a74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004a76:	f000 fc89 	bl	800538c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <xTaskCheckForTimeOut+0xb8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d102      	bne.n	8004a9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e023      	b.n	8004ae2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <xTaskCheckForTimeOut+0xbc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d007      	beq.n	8004ab6 <xTaskCheckForTimeOut+0x7e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e015      	b.n	8004ae2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d20b      	bcs.n	8004ad8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ff9d 	bl	8004a0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	e004      	b.n	8004ae2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ae2:	f000 fc81 	bl	80053e8 <vPortExitCritical>

	return xReturn;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000198 	.word	0x20000198
 8004af4:	200001ac 	.word	0x200001ac

08004af8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <vTaskMissedYield+0x14>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	200001a8 	.word	0x200001a8

08004b10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b18:	f000 f852 	bl	8004bc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <prvIdleTask+0x28>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d9f9      	bls.n	8004b18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <prvIdleTask+0x2c>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b34:	e7f0      	b.n	8004b18 <prvIdleTask+0x8>
 8004b36:	bf00      	nop
 8004b38:	20000098 	.word	0x20000098
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e00c      	b.n	8004b66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <prvInitialiseTaskLists+0x60>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fcaa 	bl	80034b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d9ef      	bls.n	8004b4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b6c:	480d      	ldr	r0, [pc, #52]	; (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b6e:	f7fe fca1 	bl	80034b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b72:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b74:	f7fe fc9e 	bl	80034b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b78:	480c      	ldr	r0, [pc, #48]	; (8004bac <prvInitialiseTaskLists+0x6c>)
 8004b7a:	f7fe fc9b 	bl	80034b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b7e:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <prvInitialiseTaskLists+0x70>)
 8004b80:	f7fe fc98 	bl	80034b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b84:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <prvInitialiseTaskLists+0x74>)
 8004b86:	f7fe fc95 	bl	80034b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <prvInitialiseTaskLists+0x78>)
 8004b8c:	4a05      	ldr	r2, [pc, #20]	; (8004ba4 <prvInitialiseTaskLists+0x64>)
 8004b8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b90:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <prvInitialiseTaskLists+0x7c>)
 8004b92:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <prvInitialiseTaskLists+0x68>)
 8004b94:	601a      	str	r2, [r3, #0]
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000098 	.word	0x20000098
 8004ba4:	20000124 	.word	0x20000124
 8004ba8:	20000138 	.word	0x20000138
 8004bac:	20000154 	.word	0x20000154
 8004bb0:	20000168 	.word	0x20000168
 8004bb4:	20000180 	.word	0x20000180
 8004bb8:	2000014c 	.word	0x2000014c
 8004bbc:	20000150 	.word	0x20000150

08004bc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc6:	e019      	b.n	8004bfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bc8:	f000 fbe0 	bl	800538c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <prvCheckTasksWaitingTermination+0x4c>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fcf5 	bl	80035c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <prvCheckTasksWaitingTermination+0x50>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <prvCheckTasksWaitingTermination+0x50>)
 8004be6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004bf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bf2:	f000 fbf9 	bl	80053e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f80e 	bl	8004c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <prvCheckTasksWaitingTermination+0x54>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e1      	bne.n	8004bc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000168 	.word	0x20000168
 8004c10:	20000194 	.word	0x20000194
 8004c14:	2000017c 	.word	0x2000017c

08004c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d108      	bne.n	8004c3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fd88 	bl	8005744 <vPortFree>
				vPortFree( pxTCB );
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fd85 	bl	8005744 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c3a:	e017      	b.n	8004c6c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d103      	bne.n	8004c4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fd7c 	bl	8005744 <vPortFree>
	}
 8004c4c:	e00e      	b.n	8004c6c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d009      	beq.n	8004c6c <prvDeleteTCB+0x54>
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e7fe      	b.n	8004c6a <prvDeleteTCB+0x52>
	}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c7a:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <prvResetNextTaskUnblockTime+0x44>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <prvResetNextTaskUnblockTime+0x14>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <prvResetNextTaskUnblockTime+0x16>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c8e:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <prvResetNextTaskUnblockTime+0x48>)
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c96:	e008      	b.n	8004caa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c98:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <prvResetNextTaskUnblockTime+0x44>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4a05      	ldr	r2, [pc, #20]	; (8004cbc <prvResetNextTaskUnblockTime+0x48>)
 8004ca8:	6013      	str	r3, [r2, #0]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	2000014c 	.word	0x2000014c
 8004cbc:	200001b4 	.word	0x200001b4

08004cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <xTaskGetSchedulerState+0x34>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	e008      	b.n	8004ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <xTaskGetSchedulerState+0x38>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d102      	bne.n	8004ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e001      	b.n	8004ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ce6:	687b      	ldr	r3, [r7, #4]
	}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	200001a0 	.word	0x200001a0
 8004cf8:	200001bc 	.word	0x200001bc

08004cfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d06e      	beq.n	8004df0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <xTaskPriorityInherit+0x100>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d25e      	bcs.n	8004dde <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	db06      	blt.n	8004d36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <xTaskPriorityInherit+0x100>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	f1c3 0207 	rsb	r2, r3, #7
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6959      	ldr	r1, [r3, #20]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <xTaskPriorityInherit+0x104>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d101      	bne.n	8004d52 <xTaskPriorityInherit+0x56>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <xTaskPriorityInherit+0x58>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03a      	beq.n	8004dce <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fc33 	bl	80035c8 <uxListRemove>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4924      	ldr	r1, [pc, #144]	; (8004e00 <xTaskPriorityInherit+0x104>)
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <xTaskPriorityInherit+0x98>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	2201      	movs	r2, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43da      	mvns	r2, r3
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <xTaskPriorityInherit+0x108>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <xTaskPriorityInherit+0x108>)
 8004d92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <xTaskPriorityInherit+0x100>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	2201      	movs	r2, #1
 8004da4:	409a      	lsls	r2, r3
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <xTaskPriorityInherit+0x108>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <xTaskPriorityInherit+0x108>)
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a10      	ldr	r2, [pc, #64]	; (8004e00 <xTaskPriorityInherit+0x104>)
 8004dbe:	441a      	add	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7fe fba1 	bl	800350e <vListInsertEnd>
 8004dcc:	e004      	b.n	8004dd8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <xTaskPriorityInherit+0x100>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e008      	b.n	8004df0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <xTaskPriorityInherit+0x100>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d201      	bcs.n	8004df0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004df0:	68fb      	ldr	r3, [r7, #12]
	}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000094 	.word	0x20000094
 8004e00:	20000098 	.word	0x20000098
 8004e04:	2000019c 	.word	0x2000019c

08004e08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d06c      	beq.n	8004ef8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e1e:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <xTaskPriorityDisinherit+0xfc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d009      	beq.n	8004e3c <xTaskPriorityDisinherit+0x34>
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e7fe      	b.n	8004e3a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <xTaskPriorityDisinherit+0x50>
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	e7fe      	b.n	8004e56 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5c:	1e5a      	subs	r2, r3, #1
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d044      	beq.n	8004ef8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d140      	bne.n	8004ef8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fba4 	bl	80035c8 <uxListRemove>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d115      	bne.n	8004eb2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8a:	491f      	ldr	r1, [pc, #124]	; (8004f08 <xTaskPriorityDisinherit+0x100>)
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xTaskPriorityDisinherit+0xaa>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <xTaskPriorityDisinherit+0x104>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4013      	ands	r3, r2
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <xTaskPriorityDisinherit+0x104>)
 8004eb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f1c3 0207 	rsb	r2, r3, #7
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	2201      	movs	r2, #1
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <xTaskPriorityDisinherit+0x104>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	4a0d      	ldr	r2, [pc, #52]	; (8004f0c <xTaskPriorityDisinherit+0x104>)
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <xTaskPriorityDisinherit+0x100>)
 8004ee6:	441a      	add	r2, r3
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f7fe fb0d 	bl	800350e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ef8:	697b      	ldr	r3, [r7, #20]
	}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000094 	.word	0x20000094
 8004f08:	20000098 	.word	0x20000098
 8004f0c:	2000019c 	.word	0x2000019c

08004f10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8086 	beq.w	8005036 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e7fe      	b.n	8004f44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d902      	bls.n	8004f56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	e002      	b.n	8004f5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d067      	beq.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d162      	bne.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f70:	4b33      	ldr	r3, [pc, #204]	; (8005040 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d109      	bne.n	8004f8e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	e7fe      	b.n	8004f8c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	db04      	blt.n	8004fac <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f1c3 0207 	rsb	r2, r3, #7
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6959      	ldr	r1, [r3, #20]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d101      	bne.n	8004fc6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d034      	beq.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe faf9 	bl	80035c8 <uxListRemove>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d115      	bne.n	8005008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4918      	ldr	r1, [pc, #96]	; (8005044 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43da      	mvns	r2, r3
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4013      	ands	r3, r2
 8005004:	4a10      	ldr	r2, [pc, #64]	; (8005048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005006:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005028:	441a      	add	r2, r3
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe fa6c 	bl	800350e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005036:	bf00      	nop
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000094 	.word	0x20000094
 8005044:	20000098 	.word	0x20000098
 8005048:	2000019c 	.word	0x2000019c

0800504c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <pvTaskIncrementMutexHeldCount+0x24>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <pvTaskIncrementMutexHeldCount+0x24>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800505e:	3201      	adds	r2, #1
 8005060:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <pvTaskIncrementMutexHeldCount+0x24>)
 8005064:	681b      	ldr	r3, [r3, #0]
	}
 8005066:	4618      	mov	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	20000094 	.word	0x20000094

08005074 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005084:	4b28      	ldr	r3, [pc, #160]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe fa9c 	bl	80035c8 <uxListRemove>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005096:	4b24      	ldr	r3, [pc, #144]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	2201      	movs	r2, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43da      	mvns	r2, r3
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	4a20      	ldr	r2, [pc, #128]	; (800512c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d10a      	bne.n	80050cc <prvAddCurrentTaskToDelayedList+0x58>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050bc:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	481a      	ldr	r0, [pc, #104]	; (8005130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050c6:	f7fe fa22 	bl	800350e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050ca:	e026      	b.n	800511a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050d4:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d209      	bcs.n	80050f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e4:	4b13      	ldr	r3, [pc, #76]	; (8005134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f7fe fa30 	bl	8003556 <vListInsert>
}
 80050f6:	e010      	b.n	800511a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3304      	adds	r3, #4
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7fe fa26 	bl	8003556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <prvAddCurrentTaskToDelayedList+0xc8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	d202      	bcs.n	800511a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005114:	4a09      	ldr	r2, [pc, #36]	; (800513c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	6013      	str	r3, [r2, #0]
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000198 	.word	0x20000198
 8005128:	20000094 	.word	0x20000094
 800512c:	2000019c 	.word	0x2000019c
 8005130:	20000180 	.word	0x20000180
 8005134:	20000150 	.word	0x20000150
 8005138:	2000014c 	.word	0x2000014c
 800513c:	200001b4 	.word	0x200001b4

08005140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3b04      	subs	r3, #4
 8005150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3b04      	subs	r3, #4
 800516e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005170:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <pxPortInitialiseStack+0x64>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b14      	subs	r3, #20
 800517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b04      	subs	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f06f 0202 	mvn.w	r2, #2
 800518e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3b20      	subs	r3, #32
 8005194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	080051a9 	.word	0x080051a9

080051a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <prvTaskExitError+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d009      	beq.n	80051d0 <prvTaskExitError+0x28>
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e7fe      	b.n	80051ce <prvTaskExitError+0x26>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051e2:	bf00      	nop
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0fc      	beq.n	80051e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000004 	.word	0x20000004
 80051fc:	00000000 	.word	0x00000000

08005200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <pxCurrentTCBConst2>)
 8005202:	6819      	ldr	r1, [r3, #0]
 8005204:	6808      	ldr	r0, [r1, #0]
 8005206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	f380 8809 	msr	PSP, r0
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	4770      	bx	lr
 800521c:	f3af 8000 	nop.w

08005220 <pxCurrentTCBConst2>:
 8005220:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005228:	4808      	ldr	r0, [pc, #32]	; (800524c <prvPortStartFirstTask+0x24>)
 800522a:	6800      	ldr	r0, [r0, #0]
 800522c:	6800      	ldr	r0, [r0, #0]
 800522e:	f380 8808 	msr	MSP, r0
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8814 	msr	CONTROL, r0
 800523a:	b662      	cpsie	i
 800523c:	b661      	cpsie	f
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	df00      	svc	0
 8005248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800524a:	bf00      	nop
 800524c:	e000ed08 	.word	0xe000ed08

08005250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005256:	4b44      	ldr	r3, [pc, #272]	; (8005368 <xPortStartScheduler+0x118>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a44      	ldr	r2, [pc, #272]	; (800536c <xPortStartScheduler+0x11c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d109      	bne.n	8005274 <xPortStartScheduler+0x24>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e7fe      	b.n	8005272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005274:	4b3c      	ldr	r3, [pc, #240]	; (8005368 <xPortStartScheduler+0x118>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3d      	ldr	r2, [pc, #244]	; (8005370 <xPortStartScheduler+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d109      	bne.n	8005292 <xPortStartScheduler+0x42>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e7fe      	b.n	8005290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <xPortStartScheduler+0x124>)
 8005294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4b30      	ldr	r3, [pc, #192]	; (8005378 <xPortStartScheduler+0x128>)
 80052b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <xPortStartScheduler+0x12c>)
 80052bc:	2207      	movs	r2, #7
 80052be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052c0:	e009      	b.n	80052d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <xPortStartScheduler+0x12c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	4a2c      	ldr	r2, [pc, #176]	; (800537c <xPortStartScheduler+0x12c>)
 80052ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b80      	cmp	r3, #128	; 0x80
 80052e0:	d0ef      	beq.n	80052c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052e2:	4b26      	ldr	r3, [pc, #152]	; (800537c <xPortStartScheduler+0x12c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1c3 0307 	rsb	r3, r3, #7
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d009      	beq.n	8005302 <xPortStartScheduler+0xb2>
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	e7fe      	b.n	8005300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <xPortStartScheduler+0x12c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <xPortStartScheduler+0x12c>)
 800530a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <xPortStartScheduler+0x12c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <xPortStartScheduler+0x12c>)
 8005316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005320:	4b17      	ldr	r3, [pc, #92]	; (8005380 <xPortStartScheduler+0x130>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	; (8005380 <xPortStartScheduler+0x130>)
 8005326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800532a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800532c:	4b14      	ldr	r3, [pc, #80]	; (8005380 <xPortStartScheduler+0x130>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a13      	ldr	r2, [pc, #76]	; (8005380 <xPortStartScheduler+0x130>)
 8005332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005338:	f000 f8d6 	bl	80054e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <xPortStartScheduler+0x134>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005342:	f000 f8f5 	bl	8005530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <xPortStartScheduler+0x138>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <xPortStartScheduler+0x138>)
 800534c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005352:	f7ff ff69 	bl	8005228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005356:	f7ff fa79 	bl	800484c <vTaskSwitchContext>
	prvTaskExitError();
 800535a:	f7ff ff25 	bl	80051a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	e000ed00 	.word	0xe000ed00
 800536c:	410fc271 	.word	0x410fc271
 8005370:	410fc270 	.word	0x410fc270
 8005374:	e000e400 	.word	0xe000e400
 8005378:	200001c0 	.word	0x200001c0
 800537c:	200001c4 	.word	0x200001c4
 8005380:	e000ed20 	.word	0xe000ed20
 8005384:	20000004 	.word	0x20000004
 8005388:	e000ef34 	.word	0xe000ef34

0800538c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <vPortEnterCritical+0x54>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <vPortEnterCritical+0x54>)
 80053ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <vPortEnterCritical+0x54>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10e      	bne.n	80053d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <vPortEnterCritical+0x58>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <vPortEnterCritical+0x48>
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	e7fe      	b.n	80053d2 <vPortEnterCritical+0x46>
	}
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	20000004 	.word	0x20000004
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <vPortExitCritical+0x4c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <vPortExitCritical+0x22>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e7fe      	b.n	8005408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortExitCritical+0x4c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <vPortExitCritical+0x4c>)
 8005412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <vPortExitCritical+0x4c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <vPortExitCritical+0x3e>
 800541c:	2300      	movs	r3, #0
 800541e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000004 	.word	0x20000004
	...

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f01e 0f10 	tst.w	lr, #16
 8005450:	bf08      	it	eq
 8005452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005464:	f380 8811 	msr	BASEPRI, r0
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f7ff f9ec 	bl	800484c <vTaskSwitchContext>
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f380 8811 	msr	BASEPRI, r0
 800547c:	bc09      	pop	{r0, r3}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005486:	f01e 0f10 	tst.w	lr, #16
 800548a:	bf08      	it	eq
 800548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005490:	f380 8809 	msr	PSP, r0
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst>:
 80054a0:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054c0:	f7ff f908 	bl	80046d4 <xTaskIncrementTick>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <SysTick_Handler+0x3c>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <vPortSetupTimerInterrupt+0x34>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <vPortSetupTimerInterrupt+0x38>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <vPortSetupTimerInterrupt+0x3c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <vPortSetupTimerInterrupt+0x40>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	4a09      	ldr	r2, [pc, #36]	; (800552c <vPortSetupTimerInterrupt+0x44>)
 8005506:	3b01      	subs	r3, #1
 8005508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550a:	4b04      	ldr	r3, [pc, #16]	; (800551c <vPortSetupTimerInterrupt+0x34>)
 800550c:	2207      	movs	r2, #7
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000e010 	.word	0xe000e010
 8005520:	e000e018 	.word	0xe000e018
 8005524:	20000008 	.word	0x20000008
 8005528:	10624dd3 	.word	0x10624dd3
 800552c:	e000e014 	.word	0xe000e014

08005530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005540 <vPortEnableVFP+0x10>
 8005534:	6801      	ldr	r1, [r0, #0]
 8005536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800553a:	6001      	str	r1, [r0, #0]
 800553c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800553e:	bf00      	nop
 8005540:	e000ed88 	.word	0xe000ed88

08005544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800554a:	f3ef 8305 	mrs	r3, IPSR
 800554e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d913      	bls.n	800557e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005556:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <vPortValidateInterruptPriority+0x6c>)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005560:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <vPortValidateInterruptPriority+0x70>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	7afa      	ldrb	r2, [r7, #11]
 8005566:	429a      	cmp	r2, r3
 8005568:	d209      	bcs.n	800557e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	e7fe      	b.n	800557c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800557e:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <vPortValidateInterruptPriority+0x74>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005586:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <vPortValidateInterruptPriority+0x78>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d909      	bls.n	80055a2 <vPortValidateInterruptPriority+0x5e>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	e7fe      	b.n	80055a0 <vPortValidateInterruptPriority+0x5c>
	}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e3f0 	.word	0xe000e3f0
 80055b4:	200001c0 	.word	0x200001c0
 80055b8:	e000ed0c 	.word	0xe000ed0c
 80055bc:	200001c4 	.word	0x200001c4

080055c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055cc:	f7fe ffd8 	bl	8004580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055d0:	4b57      	ldr	r3, [pc, #348]	; (8005730 <pvPortMalloc+0x170>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055d8:	f000 f90c 	bl	80057f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055dc:	4b55      	ldr	r3, [pc, #340]	; (8005734 <pvPortMalloc+0x174>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f040 808c 	bne.w	8005702 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01c      	beq.n	800562a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80055f0:	2208      	movs	r2, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d013      	beq.n	800562a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	3308      	adds	r3, #8
 800560a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <pvPortMalloc+0x6a>
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e7fe      	b.n	8005628 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d068      	beq.n	8005702 <pvPortMalloc+0x142>
 8005630:	4b41      	ldr	r3, [pc, #260]	; (8005738 <pvPortMalloc+0x178>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d863      	bhi.n	8005702 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800563a:	4b40      	ldr	r3, [pc, #256]	; (800573c <pvPortMalloc+0x17c>)
 800563c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800563e:	4b3f      	ldr	r3, [pc, #252]	; (800573c <pvPortMalloc+0x17c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005644:	e004      	b.n	8005650 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <pvPortMalloc+0xa2>
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f1      	bne.n	8005646 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005662:	4b33      	ldr	r3, [pc, #204]	; (8005730 <pvPortMalloc+0x170>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	429a      	cmp	r2, r3
 800566a:	d04a      	beq.n	8005702 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	4413      	add	r3, r2
 8005674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	2308      	movs	r3, #8
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	429a      	cmp	r2, r3
 800568c:	d91e      	bls.n	80056cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <pvPortMalloc+0xf4>
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e7fe      	b.n	80056b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056c6:	69b8      	ldr	r0, [r7, #24]
 80056c8:	f000 f8f6 	bl	80058b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <pvPortMalloc+0x178>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <pvPortMalloc+0x178>)
 80056d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056da:	4b17      	ldr	r3, [pc, #92]	; (8005738 <pvPortMalloc+0x178>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b18      	ldr	r3, [pc, #96]	; (8005740 <pvPortMalloc+0x180>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d203      	bcs.n	80056ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <pvPortMalloc+0x178>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <pvPortMalloc+0x180>)
 80056ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <pvPortMalloc+0x174>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005702:	f7fe ff4b 	bl	800459c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <pvPortMalloc+0x164>
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e7fe      	b.n	8005722 <pvPortMalloc+0x162>
	return pvReturn;
 8005724:	69fb      	ldr	r3, [r7, #28]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3728      	adds	r7, #40	; 0x28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20003dd0 	.word	0x20003dd0
 8005734:	20003ddc 	.word	0x20003ddc
 8005738:	20003dd4 	.word	0x20003dd4
 800573c:	20003dc8 	.word	0x20003dc8
 8005740:	20003dd8 	.word	0x20003dd8

08005744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d046      	beq.n	80057e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005756:	2308      	movs	r3, #8
 8005758:	425b      	negs	r3, r3
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <vPortFree+0xa8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <vPortFree+0x42>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e7fe      	b.n	8005784 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <vPortFree+0x5e>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	e7fe      	b.n	80057a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <vPortFree+0xa8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d019      	beq.n	80057e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d115      	bne.n	80057e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <vPortFree+0xa8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	43db      	mvns	r3, r3
 80057c2:	401a      	ands	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057c8:	f7fe feda 	bl	8004580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <vPortFree+0xac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4413      	add	r3, r2
 80057d6:	4a06      	ldr	r2, [pc, #24]	; (80057f0 <vPortFree+0xac>)
 80057d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f000 f86c 	bl	80058b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057e0:	f7fe fedc 	bl	800459c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20003ddc 	.word	0x20003ddc
 80057f0:	20003dd4 	.word	0x20003dd4

080057f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <prvHeapInit+0xac>)
 8005802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3307      	adds	r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <prvHeapInit+0xac>)
 8005824:	4413      	add	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800582c:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <prvHeapInit+0xb0>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <prvHeapInit+0xb0>)
 8005834:	2200      	movs	r2, #0
 8005836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4413      	add	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005840:	2208      	movs	r2, #8
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <prvHeapInit+0xb4>)
 8005854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <prvHeapInit+0xb4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <prvHeapInit+0xb4>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005874:	4b0c      	ldr	r3, [pc, #48]	; (80058a8 <prvHeapInit+0xb4>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <prvHeapInit+0xb8>)
 8005882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <prvHeapInit+0xbc>)
 800588a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <prvHeapInit+0xc0>)
 800588e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	200001c8 	.word	0x200001c8
 80058a4:	20003dc8 	.word	0x20003dc8
 80058a8:	20003dd0 	.word	0x20003dd0
 80058ac:	20003dd8 	.word	0x20003dd8
 80058b0:	20003dd4 	.word	0x20003dd4
 80058b4:	20003ddc 	.word	0x20003ddc

080058b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058c0:	4b28      	ldr	r3, [pc, #160]	; (8005964 <prvInsertBlockIntoFreeList+0xac>)
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e002      	b.n	80058cc <prvInsertBlockIntoFreeList+0x14>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d8f7      	bhi.n	80058c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d108      	bne.n	80058fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	441a      	add	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	441a      	add	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d118      	bne.n	8005940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b15      	ldr	r3, [pc, #84]	; (8005968 <prvInsertBlockIntoFreeList+0xb0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d00d      	beq.n	8005936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e008      	b.n	8005948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005936:	4b0c      	ldr	r3, [pc, #48]	; (8005968 <prvInsertBlockIntoFreeList+0xb0>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e003      	b.n	8005948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d002      	beq.n	8005956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005956:	bf00      	nop
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20003dc8 	.word	0x20003dc8
 8005968:	20003dd0 	.word	0x20003dd0

0800596c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a07      	ldr	r2, [pc, #28]	; (8005998 <vApplicationGetIdleTaskMemory+0x2c>)
 800597c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4a06      	ldr	r2, [pc, #24]	; (800599c <vApplicationGetIdleTaskMemory+0x30>)
 8005982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20003de0 	.word	0x20003de0
 800599c:	20003e34 	.word	0x20003e34

080059a0 <_ZN6uavcan8snprintfEPcjPKcz>:
#endif
extern int snprintf(char* out, std::size_t maxlen, const char* format, ...);

#if !UAVCAN_USE_EXTERNAL_SNPRINTF
inline int snprintf(char* out, std::size_t maxlen, const char* format, ...)
{
 80059a0:	b40c      	push	{r2, r3}
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
    using namespace std;  // This way we can pull vsnprintf() either from std:: or from ::.
    va_list args;
    va_start(args, format);
 80059ac:	f107 031c 	add.w	r3, r7, #28
 80059b0:	60bb      	str	r3, [r7, #8]
    const int return_value = vsnprintf(out, maxlen, format, args);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f01b fa6d 	bl	8020e98 <vsniprintf>
 80059be:	60f8      	str	r0, [r7, #12]
    va_end(args);
    return return_value;
 80059c0:	68fb      	ldr	r3, [r7, #12]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059cc:	b002      	add	sp, #8
 80059ce:	4770      	bx	lr

080059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>:
struct UAVCAN_EXPORT StaticAssert;

template <>
struct UAVCAN_EXPORT StaticAssert<true>
{
    static void check() { }
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <_ZN6uavcan11NoncopyableC1Ev>:
class UAVCAN_EXPORT Noncopyable
{
    Noncopyable(const Noncopyable&);
    Noncopyable& operator=(const Noncopyable&);
protected:
    Noncopyable() { }
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <_ZN6uavcan11NoncopyableD1Ev>:
    ~Noncopyable() { }
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <_ZN6uavcan13NumericTraitsIhE3maxEv>:
template <>
struct UAVCAN_EXPORT NumericTraits<unsigned char>
{
    enum { IsSigned = 0 };
    enum { IsInteger = 1 };
    static unsigned char max() { return UCHAR_MAX; }
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	23ff      	movs	r3, #255	; 0xff
 8005a10:	4618      	mov	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <_ZN6uavcan13NumericTraitsIhE3minEv>:
    static unsigned char min() { return 0; }
 8005a1a:	b480      	push	{r7}
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <_ZN6uavcan13NumericTraitsItE3maxEv>:
template <>
struct UAVCAN_EXPORT NumericTraits<unsigned short>
{
    enum { IsSigned = 0 };
    enum { IsInteger = 1 };
    static unsigned short max() { return USHRT_MAX; }
 8005a2a:	b480      	push	{r7}
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a32:	4618      	mov	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <_ZN6uavcan13NumericTraitsItE3minEv>:
    static unsigned short min() { return 0; }
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	2300      	movs	r3, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <_ZN6uavcan13NumericTraitsImE3maxEv>:
template <>
struct UAVCAN_EXPORT NumericTraits<unsigned long>
{
    enum { IsSigned = 0 };
    enum { IsInteger = 1 };
    static unsigned long max() { return ULONG_MAX; }
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <_ZN6uavcan13NumericTraitsImE3minEv>:
    static unsigned long min() { return 0; }
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	2300      	movs	r3, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <_ZN6uavcan13NumericTraitsIxE3maxEv>:
template <>
struct UAVCAN_EXPORT NumericTraits<long long>
{
    enum { IsSigned = 1 };
    enum { IsInteger = 1 };
    static long long max() { return LLONG_MAX; }
 8005a6e:	b490      	push	{r4, r7}
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295
 8005a76:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc90      	pop	{r4, r7}
 8005a82:	4770      	bx	lr

08005a84 <_ZN6uavcan13NumericTraitsIyE3maxEv>:
template <>
struct UAVCAN_EXPORT NumericTraits<unsigned long long>
{
    enum { IsSigned = 0 };
    enum { IsInteger = 1 };
    static unsigned long long max() { return ULLONG_MAX; }
 8005a84:	b490      	push	{r4, r7}
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a90:	4618      	mov	r0, r3
 8005a92:	4621      	mov	r1, r4
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc90      	pop	{r4, r7}
 8005a98:	4770      	bx	lr

08005a9a <_ZN6uavcan13NumericTraitsIyE3minEv>:
    static unsigned long long min() { return 0; }
 8005a9a:	b490      	push	{r4, r7}
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	f04f 0400 	mov.w	r4, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc90      	pop	{r4, r7}
 8005aae:	4770      	bx	lr

08005ab0 <_ZN6uavcan16TransferPriorityC1Ev>:
    static const TransferPriority MiddleLower;
    static const TransferPriority OneHigherThanLowest;
    static const TransferPriority OneLowerThanHighest;
    static const TransferPriority Lowest;

    TransferPriority() : value_(0xFF) { }
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <_ZN6uavcan10TransferIDC1Ev>:
public:
    static const uint8_t BitLen = 5U;
    static const uint8_t Max = (1U << BitLen) - 1U;
    static const uint8_t Half = (1U << BitLen) / 2U;

    TransferID()
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
        : value_(0)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
    { }
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <_ZNK6uavcan10TransferIDeqES0_>:
        value_ &= Max;
        UAVCAN_ASSERT(value == value_);
    }

    bool operator!=(TransferID rhs) const { return !operator==(rhs); }
    bool operator==(TransferID rhs) const { return get() == rhs.get(); }
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	7039      	strb	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f810 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461c      	mov	r4, r3
 8005afc:	463b      	mov	r3, r7
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f80a 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 8005b04:	4603      	mov	r3, r0
 8005b06:	429c      	cmp	r4, r3
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd90      	pop	{r4, r7, pc}

08005b18 <_ZNK6uavcan10TransferID3getEv>:
    void increment()
    {
        value_ = (value_ + 1) & Max;
    }

    uint8_t get() const
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
    {
        UAVCAN_ASSERT(value_ <= Max);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b1f      	cmp	r3, #31
 8005b26:	d905      	bls.n	8005b34 <_ZNK6uavcan10TransferID3getEv+0x1c>
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <_ZNK6uavcan10TransferID3getEv+0x28>)
 8005b2a:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <_ZNK6uavcan10TransferID3getEv+0x2c>)
 8005b2c:	2165      	movs	r1, #101	; 0x65
 8005b2e:	4806      	ldr	r0, [pc, #24]	; (8005b48 <_ZNK6uavcan10TransferID3getEv+0x30>)
 8005b30:	f01a fd2c 	bl	802058c <__assert_func>
        return value_;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	781b      	ldrb	r3, [r3, #0]
    }
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08021968 	.word	0x08021968
 8005b44:	08028a88 	.word	0x08028a88
 8005b48:	08021978 	.word	0x08021978

08005b4c <_ZN6uavcan6NodeIDC1Ev>:
    static const uint8_t BitLen = 7U;
    static const uint8_t Max = (1U << BitLen) - 1U;
    static const uint8_t MaxRecommendedForRegularNodes = Max - 2;
    static const NodeID Broadcast;

    NodeID() : value_(ValueInvalid) { }
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	22ff      	movs	r2, #255	; 0xff
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <_ZN6uavcan6NodeIDC1Eh>:

    NodeID(uint8_t value)   // Implicit
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
        : value_(value)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	701a      	strb	r2, [r3, #0]
    {
        UAVCAN_ASSERT(isValid());
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f820 	bl	8005bc0 <_ZNK6uavcan6NodeID7isValidEv>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d105      	bne.n	8005b92 <_ZN6uavcan6NodeIDC1Eh+0x2a>
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <_ZN6uavcan6NodeIDC1Eh+0x34>)
 8005b88:	4a05      	ldr	r2, [pc, #20]	; (8005ba0 <_ZN6uavcan6NodeIDC1Eh+0x38>)
 8005b8a:	2181      	movs	r1, #129	; 0x81
 8005b8c:	4805      	ldr	r0, [pc, #20]	; (8005ba4 <_ZN6uavcan6NodeIDC1Eh+0x3c>)
 8005b8e:	f01a fcfd 	bl	802058c <__assert_func>
    }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	080219c0 	.word	0x080219c0
 8005ba0:	08028c4c 	.word	0x08028c4c
 8005ba4:	08021978 	.word	0x08021978

08005ba8 <_ZNK6uavcan6NodeID3getEv>:

    uint8_t get() const { return value_; }
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <_ZNK6uavcan6NodeID7isValidEv>:

    bool isValid()     const { return value_ <= Max; }
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	09db      	lsrs	r3, r3, #7
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <_ZNK6uavcan6NodeID9isUnicastEv>:
    bool isBroadcast() const { return value_ == ValueBroadcast; }
    bool isUnicast()   const { return (value_ <= Max) && (value_ != ValueBroadcast); }
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db05      	blt.n	8005c00 <_ZNK6uavcan6NodeID9isUnicastEv+0x1e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <_ZNK6uavcan6NodeID9isUnicastEv+0x1e>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <_ZNK6uavcan6NodeID9isUnicastEv+0x20>
 8005c00:	2300      	movs	r3, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <_ZNK6uavcan6NodeIDeqES0_>:

    bool operator!=(NodeID rhs) const { return !operator==(rhs); }
    bool operator==(NodeID rhs) const { return value_ == rhs.value_; }
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	7039      	strb	r1, [r7, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	783b      	ldrb	r3, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	bf0c      	ite	eq
 8005c22:	2301      	moveq	r3, #1
 8005c24:	2300      	movne	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <_ZN6uavcan10DataTypeIDC1Ev>:
public:
    static const uint16_t MaxServiceDataTypeIDValue = 255;
    static const uint16_t MaxMessageDataTypeIDValue = 65535;
    static const uint16_t MaxPossibleDataTypeIDValue = MaxMessageDataTypeIDValue;

    DataTypeID() : value_(0xFFFFFFFFUL) { }
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <_ZN6uavcan10DataTypeIDC1Et>:

    DataTypeID(uint16_t id)  // Implicit
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	807b      	strh	r3, [r7, #2]
        : value_(id)
 8005c5e:	887a      	ldrh	r2, [r7, #2]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
    { }
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <_ZNK6uavcan10DataTypeID3getEv>:
    bool isValidForDataTypeKind(DataTypeKind dtkind) const
    {
        return value_ <= getMaxValueForDataTypeKind(dtkind).get();
    }

    uint16_t get() const { return static_cast<uint16_t>(value_); }
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <_ZNK6uavcan10DataTypeIDeqES0_>:

    bool operator==(DataTypeID rhs) const { return value_ == rhs.value_; }
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_ZN6uavcan17DataTypeSignatureC1Ev>:
    uint64_t value_;

    void mixin64(uint64_t x);

public:
    DataTypeSignature() : value_(0) { }
 8005cb2:	b490      	push	{r4, r7}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	f04f 0400 	mov.w	r4, #0
 8005cc4:	e9c2 3400 	strd	r3, r4, [r2]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc90      	pop	{r4, r7}
 8005cd2:	4770      	bx	lr

08005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>:
    explicit DataTypeSignature(uint64_t value) : value_(value) { }
 8005cd4:	b490      	push	{r4, r7}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	e9c7 2300 	strd	r2, r3, [r7]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005ce6:	e9c2 3400 	strd	r3, r4, [r2]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc90      	pop	{r4, r7}
 8005cf4:	4770      	bx	lr

08005cf6 <_ZNK6uavcan17DataTypeSignature3getEv>:

    void extend(DataTypeSignature dts);

    TransferCRC toTransferCRC() const;

    uint64_t get() const { return value_; }
 8005cf6:	b490      	push	{r4, r7}
 8005cf8:	b082      	sub	sp, #8
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d04:	4618      	mov	r0, r3
 8005d06:	4621      	mov	r1, r4
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc90      	pop	{r4, r7}
 8005d0e:	4770      	bx	lr

08005d10 <_ZN6uavcan18DataTypeDescriptorC1Ev>:
    DataTypeID id_;

public:
    static const unsigned MaxFullNameLen = 80;

    DataTypeDescriptor() :
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
        full_name_(""),
        kind_(DataTypeKind(0))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ffc9 	bl	8005cb2 <_ZN6uavcan17DataTypeSignatureC1Ev>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <_ZN6uavcan18DataTypeDescriptorC1Ev+0x30>)
 8005d24:	609a      	str	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	731a      	strb	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3310      	adds	r3, #16
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ff7f 	bl	8005c34 <_ZN6uavcan10DataTypeIDC1Ev>
    { }
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	080219cc 	.word	0x080219cc

08005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>:

    DataTypeDescriptor(DataTypeKind kind, DataTypeID id, const DataTypeSignature& signature, const char* name) :
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	460b      	mov	r3, r1
 8005d52:	72fb      	strb	r3, [r7, #11]
        signature_(signature),
        full_name_(name),
        kind_(kind),
        id_(id)
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d5c:	e9c2 3400 	strd	r3, r4, [r2]
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	609a      	str	r2, [r3, #8]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	7afa      	ldrb	r2, [r7, #11]
 8005d6a:	731a      	strb	r2, [r3, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	611a      	str	r2, [r3, #16]
    {
        UAVCAN_ASSERT((kind == DataTypeKindMessage) || (kind == DataTypeKindService));
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d008      	beq.n	8005d8a <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x46>
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x46>
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x7c>)
 8005d80:	4a10      	ldr	r2, [pc, #64]	; (8005dc4 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x80>)
 8005d82:	2197      	movs	r1, #151	; 0x97
 8005d84:	4810      	ldr	r0, [pc, #64]	; (8005dc8 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x84>)
 8005d86:	f01a fc01 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(name);
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d105      	bne.n	8005d9c <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x58>
 8005d90:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x88>)
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x80>)
 8005d94:	2198      	movs	r1, #152	; 0x98
 8005d96:	480c      	ldr	r0, [pc, #48]	; (8005dc8 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x84>)
 8005d98:	f01a fbf8 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(std::strlen(name) <= MaxFullNameLen);
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fa36 	bl	8000210 <strlen>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b50      	cmp	r3, #80	; 0x50
 8005da8:	d905      	bls.n	8005db6 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x72>
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x8c>)
 8005dac:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x80>)
 8005dae:	2199      	movs	r1, #153	; 0x99
 8005db0:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc+0x84>)
 8005db2:	f01a fbeb 	bl	802058c <__assert_func>
    }
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd90      	pop	{r4, r7, pc}
 8005dc0:	080219d0 	.word	0x080219d0
 8005dc4:	080297a8 	.word	0x080297a8
 8005dc8:	08021a10 	.word	0x08021a10
 8005dcc:	08021a50 	.word	0x08021a50
 8005dd0:	08021a58 	.word	0x08021a58

08005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>:

    bool isValid() const;

    DataTypeKind getKind() const { return kind_; }
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7b1b      	ldrb	r3, [r3, #12]
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>:
    DataTypeID getID() const { return id_; }
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <_ZNK6uavcan18DataTypeDescriptor12getSignatureEv>:
    const DataTypeSignature& getSignature() const { return signature_; }
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <_ZNK6uavcan18DataTypeDescriptor11getFullNameEv>:
    const char* getFullName() const { return full_name_; }
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>:
{
    struct Entry : public LinkedListNode<Entry>
    {
        DataTypeDescriptor descriptor;

        Entry() { }
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f002 fbac 	bl	800859a <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEEC1Ev>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3308      	adds	r3, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff ff62 	bl	8005d10 <_ZN6uavcan18DataTypeDescriptorC1Ev>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>:
     * calls will not have any effect.
     *
     * Once frozen, data type registry can't be unfrozen.
     */
    void freeze();
    bool isFrozen() const { return frozen_; }
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	7b1b      	ldrb	r3, [r3, #12]
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <_ZN6uavcan15ITransferBufferD1Ev>:
 * API for transfer buffer users.
 */
class UAVCAN_EXPORT ITransferBuffer
{
public:
    virtual ~ITransferBuffer() { }
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	4a04      	ldr	r2, [pc, #16]	; (8005e8c <_ZN6uavcan15ITransferBufferD1Ev+0x1c>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	08025294 	.word	0x08025294

08005e90 <_ZN6uavcan15ITransferBufferD0Ev>:
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ffe9 	bl	8005e70 <_ZN6uavcan15ITransferBufferD1Ev>
 8005e9e:	2104      	movs	r1, #4
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f01a fb52 	bl	802054a <_ZdlPvj>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>:
    {
        ResultOutOfBuffer = 0,
        ResultOk          = 1
    };

    explicit BitStream(ITransferBuffer& buf)
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
        : buf_(buf)
        , bit_offset_(0)
        , byte_cache_(0)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	721a      	strb	r2, [r3, #8]
    {
        StaticAssert<sizeof(uint8_t) == 1>::check();
 8005ecc:	f7ff fd80 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>:

    int encodeBytesImpl(uint8_t* bytes, unsigned bitlen);
    int decodeBytesImpl(uint8_t* bytes, unsigned bitlen);

public:
    explicit ScalarCodec(BitStream& stream)
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
        : stream_(stream)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	601a      	str	r2, [r3, #0]
    { }
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <_ZN6uavcan14IPoolAllocatorD1Ev>:
 * This interface is used by other library components that need dynamic memory.
 */
class UAVCAN_EXPORT IPoolAllocator
{
public:
    virtual ~IPoolAllocator() { }
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <_ZN6uavcan14IPoolAllocatorD1Ev+0x1c>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	08025278 	.word	0x08025278

08005f30 <_ZN6uavcan14IPoolAllocatorD0Ev>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ffe9 	bl	8005f10 <_ZN6uavcan14IPoolAllocatorD1Ev>
 8005f3e:	2104      	movs	r1, #4
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f01a fb02 	bl	802054a <_ZdlPvj>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZN6uavcan14IPoolAllocatorC1Ev>:
class UAVCAN_EXPORT IPoolAllocator
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <_ZN6uavcan14IPoolAllocatorC1Ev+0x1c>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	08025278 	.word	0x08025278

08005f70 <_ZN6uavcan19TransferPerfCounterC1Ev>:
    uint64_t transfers_tx_;
    uint64_t transfers_rx_;
    uint64_t errors_;

public:
    TransferPerfCounter()
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
        : transfers_tx_(0)
        , transfers_rx_(0)
        , errors_(0)
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff fd30 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	f04f 0400 	mov.w	r4, #0
 8005f88:	e9c2 3400 	strd	r3, r4, [r2]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	f04f 0400 	mov.w	r4, #0
 8005f96:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	e9c2 3404 	strd	r3, r4, [r2, #16]
    { }
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd90      	pop	{r4, r7, pc}

08005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>:

    void addTxTransfer() { transfers_tx_++; }
    void addRxTransfer() { transfers_rx_++; }

    void addError() { errors_++; }
 8005fb2:	b490      	push	{r4, r7}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8005fc0:	1c4b      	adds	r3, r1, #1
 8005fc2:	f142 0400 	adc.w	r4, r2, #0
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc90      	pop	{r4, r7}
 8005fd4:	4770      	bx	lr

08005fd6 <_ZNK6uavcan19TransferPerfCounter18getTxTransferCountEv>:

    /**
     * Returned references are guaranteed to be valid as long as this instance of Node exists.
     * This is enforced by virtue of the class being Noncopyable.
     */
    const uint64_t& getTxTransferCount() const { return transfers_tx_; }
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <_ZNK6uavcan19TransferPerfCounter18getRxTransferCountEv>:
    const uint64_t& getRxTransferCount() const { return transfers_rx_; }
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZNK6uavcan19TransferPerfCounter13getErrorCountEv>:
    const uint64_t& getErrorCount() const { return errors_; }
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3310      	adds	r3, #16
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <_ZN6uavcan8CanFrameC1Ev>:

    uint32_t id;                ///< CAN ID with flags (above)
    uint8_t data[MaxDataLen];
    uint8_t dlc;                ///< Data Length Code

    CanFrame() :
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
        id(0),
        dlc(0)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	731a      	strb	r2, [r3, #12]
    {
        fill(data, data + MaxDataLen, uint8_t(0));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	1d18      	adds	r0, r3, #4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	3308      	adds	r3, #8
 800603a:	2200      	movs	r2, #0
 800603c:	73fa      	strb	r2, [r7, #15]
 800603e:	f107 020f 	add.w	r2, r7, #15
 8006042:	4619      	mov	r1, r3
 8006044:	f002 fac4 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <_ZN6uavcan9ICanIfaceD1Ev>:
 * Single non-blocking CAN interface.
 */
class UAVCAN_EXPORT ICanIface
{
public:
    virtual ~ICanIface() { }
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	4a04      	ldr	r2, [pc, #16]	; (8006070 <_ZN6uavcan9ICanIfaceD1Ev+0x1c>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	08025254 	.word	0x08025254

08006074 <_ZN6uavcan9ICanIfaceD0Ev>:
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ffe9 	bl	8006054 <_ZN6uavcan9ICanIfaceD1Ev>
 8006082:	2104      	movs	r1, #4
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f01a fa60 	bl	802054a <_ZdlPvj>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_ZN6uavcan10ICanDriverD1Ev>:
 * Generic CAN driver.
 */
class UAVCAN_EXPORT ICanDriver
{
public:
    virtual ~ICanDriver() { }
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	4a04      	ldr	r2, [pc, #16]	; (80060b0 <_ZN6uavcan10ICanDriverD1Ev+0x1c>)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	08025234 	.word	0x08025234

080060b4 <_ZN6uavcan10ICanDriverD0Ev>:
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ffe9 	bl	8006094 <_ZN6uavcan10ICanDriverD1Ev>
 80060c2:	2104      	movs	r1, #4
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f01a fa40 	bl	802054a <_ZdlPvj>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <_ZNK6uavcan10ICanDriver8getIfaceEh>:

    /**
     * Default implementation of this method calls the non-const overload of getIface().
     * Can be overriden by the application if necessary.
     */
    virtual const ICanIface* getIface(uint8_t iface_index) const
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
    {
        return const_cast<ICanDriver*>(this)->getIface(iface_index);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	4611      	mov	r1, r2
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
 80060f0:	4603      	mov	r3, r0
    }
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <_ZN6uavcan13MonotonicTimeC1Ev>:
/*
 * Monotonic
 */
class UAVCAN_EXPORT MonotonicDuration : public DurationBase<MonotonicDuration> { };

class UAVCAN_EXPORT MonotonicTime : public TimeBase<MonotonicTime, MonotonicDuration> { };
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4618      	mov	r0, r3
 8006106:	f002 fa7b 	bl	8008600 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEC1Ev>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <_ZN6uavcan13MonotonicTimeD1Ev>:
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4618      	mov	r0, r3
 8006120:	f002 fa82 	bl	8008628 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEED1Ev>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZNK6uavcan12CanIOManager12getNumIfacesEv>:

public:
    CanIOManager(ICanDriver& driver, IPoolAllocator& allocator, ISystemClock& sysclock,
                 std::size_t mem_blocks_per_iface = 0);

    uint8_t getNumIfaces() const { return num_ifaces_; }
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <_ZNK6uavcan5Frame15getTransferTypeEv>:
    uint8_t setPayload(const uint8_t* data, unsigned len);

    unsigned getPayloadLen() const { return payload_len_; }
    const uint8_t* getPayloadPtr() const { return payload_; }

    TransferType getTransferType() const { return transfer_type_; }
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7a1b      	ldrb	r3, [r3, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>:
    DataTypeID getDataTypeID()     const { return data_type_id_; }
    NodeID getSrcNodeID()          const { return src_node_id_; }
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	7d1b      	ldrb	r3, [r3, #20]
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <_ZNK6uavcan5Frame13getTransferIDEv>:
    NodeID getDstNodeID()          const { return dst_node_id_; }
    TransferID getTransferID()     const { return transfer_id_; }
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7d9b      	ldrb	r3, [r3, #22]
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <_ZN6uavcan15ITransferBufferC1Ev>:
class UAVCAN_EXPORT ITransferBuffer
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	4a04      	ldr	r2, [pc, #16]	; (80061ac <_ZN6uavcan15ITransferBufferC1Ev+0x1c>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	08025294 	.word	0x08025294

080061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>:
    uint8_t* const data_;
    const uint16_t size_;
    uint16_t max_write_pos_;

public:
    StaticTransferBufferImpl(uint8_t* buf, uint16_t buf_size) :
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	4613      	mov	r3, r2
 80061bc:	80fb      	strh	r3, [r7, #6]
        data_(buf),
        size_(buf_size),
        max_write_pos_(0)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff ffe5 	bl	8006190 <_ZN6uavcan15ITransferBufferC1Ev>
 80061c6:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <_ZN6uavcan24StaticTransferBufferImplC1EPht+0x38>)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	811a      	strh	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	815a      	strh	r2, [r3, #10]
    { }
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	0802b904 	.word	0x0802b904

080061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>:
{
    NodeID node_id_;
    uint8_t transfer_type_;

public:
    TransferBufferManagerKey()
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
        : transfer_type_(TransferType(0))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fca8 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	705a      	strb	r2, [r3, #1]
    {
        UAVCAN_ASSERT(isEmpty());
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f82f 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d105      	bne.n	800621a <_ZN6uavcan24TransferBufferManagerKeyC1Ev+0x2e>
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <_ZN6uavcan24TransferBufferManagerKeyC1Ev+0x38>)
 8006210:	4a05      	ldr	r2, [pc, #20]	; (8006228 <_ZN6uavcan24TransferBufferManagerKeyC1Ev+0x3c>)
 8006212:	2148      	movs	r1, #72	; 0x48
 8006214:	4805      	ldr	r0, [pc, #20]	; (800622c <_ZN6uavcan24TransferBufferManagerKeyC1Ev+0x40>)
 8006216:	f01a f9b9 	bl	802058c <__assert_func>
    }
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	08021a7c 	.word	0x08021a7c
 8006228:	08028534 	.word	0x08028534
 800622c:	08021a88 	.word	0x08021a88

08006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>:
        , transfer_type_(ttype)
    {
        UAVCAN_ASSERT(!isEmpty());
    }

    bool operator==(const TransferBufferManagerKey& rhs) const
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
    {
        return node_id_ == rhs.node_id_ && transfer_type_ == rhs.transfer_type_;
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	7819      	ldrb	r1, [r3, #0]
 8006240:	4610      	mov	r0, r2
 8006242:	f7ff fce4 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_+0x2c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	785a      	ldrb	r2, [r3, #1]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	429a      	cmp	r2, r3
 8006256:	d101      	bne.n	800625c <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_+0x2c>
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_+0x2e>
 800625c:	2300      	movs	r3, #0
    }
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>:

    bool isEmpty() const { return !node_id_.isValid(); }
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fca5 	bl	8005bc0 <_ZNK6uavcan6NodeID7isValidEv>
 8006276:	4603      	mov	r3, r0
 8006278:	f083 0301 	eor.w	r3, r3, #1
 800627c:	b2db      	uxtb	r3, r3
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <_ZN6uavcan21TransferBufferManagerC1EtRNS_14IPoolAllocatorE>:
    const uint16_t max_buf_size_;

    TransferBufferManagerEntry* findFirst(const TransferBufferManagerKey& key);

public:
    TransferBufferManager(uint16_t max_buf_size, IPoolAllocator& allocator) :
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	460b      	mov	r3, r1
 8006290:	607a      	str	r2, [r7, #4]
 8006292:	817b      	strh	r3, [r7, #10]
        allocator_(allocator),
        max_buf_size_(max_buf_size)
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fba2 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f002 f9cd 	bl	800863e <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEEC1Ev>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	609a      	str	r2, [r3, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	897a      	ldrh	r2, [r7, #10]
 80062ae:	819a      	strh	r2, [r3, #12]
    { }
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_ZN6uavcan17MonotonicDurationD1Ev>:
class UAVCAN_EXPORT MonotonicDuration : public DurationBase<MonotonicDuration> { };
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f002 fa01 	bl	80086cc <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEED1Ev>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <_ZN6uavcan11TransferCRCC1Ev>:
    uint16_t value_;

public:
    enum { NumBytes = 2 };

    TransferCRC()
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
        : value_(0xFFFFU)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062e2:	801a      	strh	r2, [r3, #0]
    { }
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <_ZNK6uavcan16IncomingTransfer11getPriorityEv>:
     */
    virtual bool isAnonymousTransfer() const { return false; }

    MonotonicTime getMonotonicTimestamp() const { return ts_mono_; }
    UtcTime getUtcTimestamp()             const { return ts_utc_; }
    TransferPriority getPriority()        const { return transfer_priority_; }
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	7e1b      	ldrb	r3, [r3, #24]
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>:
    TransferType getTransferType()        const { return transfer_type_; }
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	7e5b      	ldrb	r3, [r3, #25]
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <_ZNK6uavcan16IncomingTransfer13getTransferIDEv>:
    TransferID getTransferID()            const { return transfer_id_; }
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7e9b      	ldrb	r3, [r3, #26]
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>:
    NodeID getSrcNodeID()                 const { return src_node_id_; }
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7edb      	ldrb	r3, [r3, #27]
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
    void handleAnonymousTransferReception(const RxFrame& frame);

    virtual void handleIncomingTransfer(IncomingTransfer& transfer) = 0;

public:
    TransferListener(TransferPerfCounter& perf, const DataTypeDescriptor& data_type,
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	807b      	strh	r3, [r7, #2]
        : data_type_(data_type)
        , bufmgr_(max_buffer_size, allocator)
        , receivers_(allocator)
        , perf_(perf)
        , crc_base_(data_type.getSignature().toTransferCRC())
        , allow_anonymous_transfers_(false)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f002 f9bb 	bl	80086e2 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEEC1Ev>
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x70>)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	330c      	adds	r3, #12
 800637c:	8879      	ldrh	r1, [r7, #2]
 800637e:	6a3a      	ldr	r2, [r7, #32]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff ff80 	bl	8006286 <_ZN6uavcan21TransferBufferManagerC1EtRNS_14IPoolAllocatorE>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	331c      	adds	r3, #28
 800638a:	6a39      	ldr	r1, [r7, #32]
 800638c:	4618      	mov	r0, r3
 800638e:	f002 f9b7 	bl	8008700 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEEC1ERNS_14IPoolAllocatorE>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
        , crc_base_(data_type.getSignature().toTransferCRC())
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff fd33 	bl	8005e04 <_ZNK6uavcan18DataTypeDescriptor12getSignatureEv>
 800639e:	4602      	mov	r2, r0
        , allow_anonymous_transfers_(false)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80063a6:	4610      	mov	r0, r2
 80063a8:	f017 fcf2 	bl	801dd90 <_ZNK6uavcan17DataTypeSignature13toTransferCRCEv>
 80063ac:	4603      	mov	r3, r0
 80063ae:	8023      	strh	r3, [r4, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    { }
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	bf00      	nop
 80063c4:	0802be0c 	.word	0x0802be0c

080063c8 <_ZN6uavcan25ITransferAcceptanceFilterD1Ev>:
    /**
     * If it returns false, the frame will be ignored, otherwise accepted.
     */
    virtual bool shouldAcceptFrame(const RxFrame& frame) const = 0;

    virtual ~ITransferAcceptanceFilter() { }
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <_ZN6uavcan25ITransferAcceptanceFilterD1Ev+0x1c>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	08025220 	.word	0x08025220

080063e8 <_ZN6uavcan25ITransferAcceptanceFilterD0Ev>:
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ffe9 	bl	80063c8 <_ZN6uavcan25ITransferAcceptanceFilterD1Ev>
 80063f6:	2104      	movs	r1, #4
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f01a f8a6 	bl	802054a <_ZdlPvj>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <_ZN6uavcan26TransferListenerWithFilterC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
    const ITransferAcceptanceFilter* filter_;

    virtual void handleFrame(const RxFrame& frame);

public:
    TransferListenerWithFilter(TransferPerfCounter& perf, const DataTypeDescriptor& data_type,
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	807b      	strh	r3, [r7, #2]
                               uint16_t max_buffer_size, IPoolAllocator& allocator)
        : TransferListener(perf, data_type, max_buffer_size, allocator)
        , filter_(UAVCAN_NULLPTR)
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	f7ff ff96 	bl	8006354 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 8006428:	4a05      	ldr	r2, [pc, #20]	; (8006440 <_ZN6uavcan26TransferListenerWithFilterC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x38>)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
    { }
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	0802bdf4 	.word	0x0802bdf4

08006444 <_ZN6uavcan26TransferListenerWithFilter23installAcceptanceFilterEPKNS_25ITransferAcceptanceFilterE>:

    void installAcceptanceFilter(const ITransferAcceptanceFilter* acceptance_filter)
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
    {
        filter_ = acceptance_filter;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>:
    DataTypeID data_type_id_;
    uint8_t transfer_type_;
    NodeID destination_node_id_;  ///< Not applicable for message broadcasting

public:
    OutgoingTransferRegistryKey()
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
        : transfer_type_(0xFF)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fbe2 	bl	8005c34 <_ZN6uavcan10DataTypeIDC1Ev>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	22ff      	movs	r2, #255	; 0xff
 8006474:	711a      	strb	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3305      	adds	r3, #5
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fb66 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
    { }
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_>:
    }

    DataTypeID getDataTypeID() const { return data_type_id_; }
    TransferType getTransferType() const { return TransferType(transfer_type_); }

    bool operator==(const OutgoingTransferRegistryKey& rhs) const
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
    {
        return
            (data_type_id_        == rhs.data_type_id_) &&
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6819      	ldr	r1, [r3, #0]
 800649a:	4610      	mov	r0, r2
 800649c:	f7ff fbf6 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 80064a0:	4603      	mov	r3, r0
            (transfer_type_       == rhs.transfer_type_) &&
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d011      	beq.n	80064ca <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_+0x40>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	791a      	ldrb	r2, [r3, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	791b      	ldrb	r3, [r3, #4]
            (data_type_id_        == rhs.data_type_id_) &&
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d10b      	bne.n	80064ca <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_+0x40>
            (destination_node_id_ == rhs.destination_node_id_);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	1d5a      	adds	r2, r3, #5
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	7959      	ldrb	r1, [r3, #5]
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7ff fba7 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 80064c0:	4603      	mov	r3, r0
            (transfer_type_       == rhs.transfer_type_) &&
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_+0x40>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_+0x42>
 80064ca:	2300      	movs	r3, #0
    }
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <_ZN6uavcan24OutgoingTransferRegistryC1ERNS_14IPoolAllocatorE>:
    Map<OutgoingTransferRegistryKey, Value> map_;

public:
    static const MonotonicDuration MinEntryLifetime;

    explicit OutgoingTransferRegistry(IPoolAllocator& allocator)
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
        : map_(allocator)
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fa7d 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f002 f95c 	bl	80087a8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEEC1ERNS_14IPoolAllocatorE>
    { }
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <_ZN6uavcan12CanIOManagerD1Ev>:
class UAVCAN_EXPORT CanIOManager : Noncopyable
 80064fa:	b590      	push	{r4, r7, lr}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3308      	adds	r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <_ZN6uavcan12CanIOManagerD1Ev+0x2a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3308      	adds	r3, #8
 800650e:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3308      	adds	r3, #8
 8006516:	429c      	cmp	r4, r3
 8006518:	d004      	beq.n	8006524 <_ZN6uavcan12CanIOManagerD1Ev+0x2a>
 800651a:	3c20      	subs	r4, #32
 800651c:	4620      	mov	r0, r4
 800651e:	f002 f98d 	bl	800883c <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEED1Ev>
 8006522:	e7f6      	b.n	8006512 <_ZN6uavcan12CanIOManagerD1Ev+0x18>
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fa65 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bd90      	pop	{r4, r7, pc}

08006534 <_ZN6uavcan24OutgoingTransferRegistryD1Ev>:
class UAVCAN_EXPORT OutgoingTransferRegistry : Noncopyable
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f002 f967 	bl	8008814 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEED1Ev>
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7ff fa54 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <_ZN6uavcan19TransferPerfCounterD1Ev>:
class UAVCAN_EXPORT TransferPerfCounter : Noncopyable
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fa48 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZN6uavcan14LinkedListRootINS_16TransferListenerEED1Ev>:

/**
 * Linked list root.
 */
template <typename T>
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fa3c 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZN6uavcan10Dispatcher16ListenerRegistryC1Ev>:
    CanIOManager canio_;
    ISystemClock& sysclock_;
    OutgoingTransferRegistry outgoing_transfer_reg_;
    TransferPerfCounter perf_;

    class ListenerRegistry
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	f002 f95f 	bl	8008854 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEEC1Ev>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <_ZN6uavcan10Dispatcher16ListenerRegistryD1Ev>:
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff ffdf 	bl	800656e <_ZN6uavcan14LinkedListRootINS_16TransferListenerEED1Ev>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <_ZN6uavcan14LinkedListRootINS_25LoopbackFrameListenerBaseEED1Ev>:
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fa16 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <_ZN6uavcan29LoopbackFrameListenerRegistryC1Ev>:
class UAVCAN_EXPORT LoopbackFrameListenerRegistry : Noncopyable
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff f9ff 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4618      	mov	r0, r3
 80065e6:	f002 f944 	bl	8008872 <_ZN6uavcan14LinkedListRootINS_25LoopbackFrameListenerBaseEEC1Ev>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <_ZN6uavcan29LoopbackFrameListenerRegistryD1Ev>:
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff ffda 	bl	80065ba <_ZN6uavcan14LinkedListRootINS_25LoopbackFrameListenerBaseEED1Ev>
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff f9f4 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <_ZN6uavcan10DispatcherC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockE>:
    void handleLoopbackFrame(const CanRxFrame& can_frame);

    void notifyRxFrameListener(const CanRxFrame& can_frame, CanIOFlags flags);

public:
    Dispatcher(ICanDriver& driver, IPoolAllocator& allocator, ISystemClock& sysclock)
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
        , outgoing_transfer_reg_(allocator)
#if !UAVCAN_TINY
        , rx_listener_(UAVCAN_NULLPTR)
#endif
        , self_node_id_(NodeID::Broadcast)  // Default
        , self_node_id_is_set_(false)
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff f9d9 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f103 0008 	add.w	r0, r3, #8
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	f011 f89e 	bl	801777c <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	33ac      	adds	r3, #172	; 0xac
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff40 	bl	80064d4 <_ZN6uavcan24OutgoingTransferRegistryC1ERNS_14IPoolAllocatorE>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	33c0      	adds	r3, #192	; 0xc0
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fc89 	bl	8005f70 <_ZN6uavcan19TransferPerfCounterC1Ev>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	33d8      	adds	r3, #216	; 0xd8
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff ff8f 	bl	8006586 <_ZN6uavcan10Dispatcher16ListenerRegistryC1Ev>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	33dc      	adds	r3, #220	; 0xdc
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ff8a 	bl	8006586 <_ZN6uavcan10Dispatcher16ListenerRegistryC1Ev>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	33e0      	adds	r3, #224	; 0xe0
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff85 	bl	8006586 <_ZN6uavcan10Dispatcher16ListenerRegistryC1Ev>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	33e4      	adds	r3, #228	; 0xe4
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ffa6 	bl	80065d2 <_ZN6uavcan29LoopbackFrameListenerRegistryC1Ev>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a06      	ldr	r2, [pc, #24]	; (80066ac <_ZN6uavcan10DispatcherC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockE+0x94>)
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    { }
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20008604 	.word	0x20008604

080066b0 <_ZNK6uavcan10Dispatcher14getSystemClockEv>:
    /**
     * Refer to the specs to learn more about passive mode.
     */
    bool isPassiveMode() const { return !getNodeID().isUnicast(); }

    const ISystemClock& getSystemClock() const { return sysclock_; }
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <_ZN6uavcan10Dispatcher15getCanIOManagerEv>:
    ISystemClock& getSystemClock() { return sysclock_; }

    const CanIOManager& getCanIOManager() const { return canio_; }
    CanIOManager& getCanIOManager() { return canio_; }
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3308      	adds	r3, #8
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>:

    const TransferPerfCounter& getTransferPerfCounter() const { return perf_; }
    TransferPerfCounter& getTransferPerfCounter() { return perf_; }
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	33c0      	adds	r3, #192	; 0xc0
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <_ZN6uavcan15DeadlineHandlerC1ERNS_9SchedulerE>:
    MonotonicTime deadline_;

protected:
    Scheduler& scheduler_;

    explicit DeadlineHandler(Scheduler& scheduler)
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
        : scheduler_(scheduler)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f002 f8c0 	bl	8008890 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEEC1Ev>
 8006710:	4a07      	ldr	r2, [pc, #28]	; (8006730 <_ZN6uavcan15DeadlineHandlerC1ERNS_9SchedulerE+0x34>)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3308      	adds	r3, #8
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fced 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	611a      	str	r2, [r3, #16]
    { }
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	0802520c 	.word	0x0802520c

08006734 <_ZN6uavcan15DeadlineHandlerD1Ev>:

    virtual ~DeadlineHandler() { stop(); }
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	4a0a      	ldr	r2, [pc, #40]	; (8006768 <_ZN6uavcan15DeadlineHandlerD1Ev+0x34>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f00e fcef 	bl	8015126 <_ZN6uavcan15DeadlineHandler4stopEv>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3308      	adds	r3, #8
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fce1 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	4618      	mov	r0, r3
 8006758:	f002 f8a9 	bl	80088ae <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEED1Ev>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	0802520c 	.word	0x0802520c

0800676c <_ZN6uavcan15DeadlineHandlerD0Ev>:
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff ffdd 	bl	8006734 <_ZN6uavcan15DeadlineHandlerD1Ev>
 800677a:	2118      	movs	r1, #24
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f019 fee4 	bl	802054a <_ZdlPvj>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEED1Ev>:
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff f92d 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <_ZN6uavcan17DeadlineSchedulerC1Ev>:
    MonotonicTime getDeadline() const { return deadline_; }
    Scheduler& getScheduler() const { return scheduler_; }
};


class UAVCAN_EXPORT DeadlineScheduler : Noncopyable
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff f916 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4618      	mov	r0, r3
 80067b8:	f002 f898 	bl	80088ec <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEEC1Ev>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <_ZN6uavcan17DeadlineSchedulerD1Ev>:
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ffda 	bl	800678c <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEED1Ev>
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f90b 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <_ZN6uavcan10DispatcherD1Ev>:
class UAVCAN_EXPORT Dispatcher : Noncopyable
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	33e4      	adds	r3, #228	; 0xe4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fefd 	bl	80065f4 <_ZN6uavcan29LoopbackFrameListenerRegistryD1Ev>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	33e0      	adds	r3, #224	; 0xe0
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fece 	bl	80065a0 <_ZN6uavcan10Dispatcher16ListenerRegistryD1Ev>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	33dc      	adds	r3, #220	; 0xdc
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fec9 	bl	80065a0 <_ZN6uavcan10Dispatcher16ListenerRegistryD1Ev>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	33d8      	adds	r3, #216	; 0xd8
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fec4 	bl	80065a0 <_ZN6uavcan10Dispatcher16ListenerRegistryD1Ev>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	33c0      	adds	r3, #192	; 0xc0
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fe9a 	bl	8006556 <_ZN6uavcan19TransferPerfCounterD1Ev>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	33ac      	adds	r3, #172	; 0xac
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fe84 	bl	8006534 <_ZN6uavcan24OutgoingTransferRegistryD1Ev>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3308      	adds	r3, #8
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fe62 	bl	80064fa <_ZN6uavcan12CanIOManagerD1Ev>
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff f8dc 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <_ZN6uavcan9SchedulerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockE>:

    MonotonicTime computeDispatcherSpinDeadline(MonotonicTime spin_deadline) const;
    void pollCleanup(MonotonicTime mono_ts, uint32_t num_frames_processed_with_last_spin);

public:
    Scheduler(ICanDriver& can_driver, IPoolAllocator& allocator, ISystemClock& sysclock)
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	603b      	str	r3, [r7, #0]
        : dispatcher_(can_driver, allocator, sysclock)
        , prev_cleanup_ts_(sysclock.getMonotonic())
        , deadline_resolution_(MonotonicDuration::fromMSec(DefaultDeadlineResolutionMs))
        , cleanup_period_(MonotonicDuration::fromMSec(DefaultCleanupPeriodMs))
        , inside_spin_(false)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff f8c2 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3304      	adds	r3, #4
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff ffa0 	bl	80067a4 <_ZN6uavcan17DeadlineSchedulerC1Ev>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f103 0010 	add.w	r0, r3, #16
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	f7ff fed2 	bl	8006618 <_ZN6uavcan10DispatcherC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockE>
        , prev_cleanup_ts_(sysclock.getMonotonic())
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	681b      	ldr	r3, [r3, #0]
        , inside_spin_(false)
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 7188 	add.w	r1, r3, #272	; 0x110
 800688e:	f04f 0205 	mov.w	r2, #5
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	4608      	mov	r0, r1
 8006898:	f001 fee0 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 718c 	add.w	r1, r3, #280	; 0x118
 80068a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	4608      	mov	r0, r1
 80068ac:	f001 fed6 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    { }
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <_ZN6uavcan9Scheduler13getDispatcherEv>:
     */
    int spinOnce();

    DeadlineScheduler& getDeadlineScheduler() { return deadline_scheduler_; }

    Dispatcher& getDispatcher()             { return dispatcher_; }
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3310      	adds	r3, #16
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <_ZNK6uavcan9Scheduler16getMonotonicTimeEv>:
    const Dispatcher& getDispatcher() const { return dispatcher_; }

    ISystemClock& getSystemClock()         { return dispatcher_.getSystemClock(); }
    MonotonicTime getMonotonicTime() const { return dispatcher_.getSystemClock().getMonotonic(); }
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	3310      	adds	r3, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fee1 	bl	80066b0 <_ZNK6uavcan10Dispatcher14getSystemClockEv>
 80068ee:	4602      	mov	r2, r0
 80068f0:	6813      	ldr	r3, [r2, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4798      	blx	r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZN6uavcan5INodeD1Ev>:
 * Normally you don't need to use it directly though - please refer to the class Node<> instead.
 */
class UAVCAN_EXPORT INode
{
public:
    virtual ~INode() { }
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	4a04      	ldr	r2, [pc, #16]	; (8006920 <_ZN6uavcan5INodeD1Ev+0x1c>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	080251ec 	.word	0x080251ec

08006924 <_ZN6uavcan5INodeD0Ev>:
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff ffe9 	bl	8006904 <_ZN6uavcan5INodeD1Ev>
 8006932:	2104      	movs	r1, #4
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f019 fe08 	bl	802054a <_ZdlPvj>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <_ZN6uavcan5INode13getDispatcherEv>:
    virtual IPoolAllocator& getAllocator() = 0;
    virtual Scheduler& getScheduler() = 0;
    virtual const Scheduler& getScheduler() const = 0;
    virtual void registerInternalFailure(const char* msg) = 0;

    Dispatcher& getDispatcher()             { return getScheduler().getDispatcher(); }
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
 8006958:	4603      	mov	r3, r0
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff ffb1 	bl	80068c2 <_ZN6uavcan9Scheduler13getDispatcherEv>
 8006960:	4603      	mov	r3, r0
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <_ZNK6uavcan5INode16getMonotonicTimeEv>:
    const Dispatcher& getDispatcher() const { return getScheduler().getDispatcher(); }

    ISystemClock& getSystemClock()         { return getScheduler().getSystemClock(); }
    MonotonicTime getMonotonicTime() const { return getScheduler().getMonotonicTime(); }
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3310      	adds	r3, #16
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6838      	ldr	r0, [r7, #0]
 800697e:	4798      	blx	r3
 8006980:	4602      	mov	r2, r0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff ffa7 	bl	80068da <_ZNK6uavcan9Scheduler16getMonotonicTimeEv>
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <_ZN6uavcan5INode9setNodeIDENS_6NodeIDE>:
     * Node ID can be assigned only once. This method returns true if the Node ID was successfully assigned, otherwise
     * it returns false.
     * As long as a valid Node ID is not set, the node will remain in passive mode.
     * Using a non-unicast Node ID puts the node into passive mode (as default).
     */
    bool setNodeID(NodeID nid)
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	7039      	strb	r1, [r7, #0]
    {
        return getScheduler().getDispatcher().setNodeID(nid);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff ff88 	bl	80068c2 <_ZN6uavcan9Scheduler13getDispatcherEv>
 80069b2:	4603      	mov	r3, r0
 80069b4:	7839      	ldrb	r1, [r7, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f012 f9aa 	bl	8018d10 <_ZN6uavcan10Dispatcher9setNodeIDENS_6NodeIDE>
 80069bc:	4603      	mov	r3, r0
    }
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <_ZN6uavcan5INode4spinENS_17MonotonicDurationE>:
     * Runs the node.
     * Normally your application should not block anywhere else.
     * Block inside this method forever or call it periodically.
     * This method returns 0 if no errors occurred, or a negative error code if something failed (see error.hpp).
     */
    int spin(MonotonicDuration duration)
 80069c6:	b590      	push	{r4, r7, lr}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
    {
        return getScheduler().spin(getMonotonicTime() + duration);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	4604      	mov	r4, r0
 80069de:	f107 0310 	add.w	r3, r7, #16
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff ffc0 	bl	800696a <_ZNK6uavcan5INode16getMonotonicTimeEv>
 80069ea:	f107 0308 	add.w	r3, r7, #8
 80069ee:	f107 0110 	add.w	r1, r7, #16
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 ffb0 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4619      	mov	r1, r3
 8006a00:	4620      	mov	r0, r4
 8006a02:	f00e fdc1 	bl	8015588 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE>
 8006a06:	4604      	mov	r4, r0
 8006a08:	f107 0308 	add.w	r3, r7, #8
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff fb81 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8006a12:	f107 0310 	add.w	r3, r7, #16
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff fb7c 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8006a1c:	4623      	mov	r3, r4
    }
 8006a1e:	4618      	mov	r0, r3
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd90      	pop	{r4, r7, pc}

08006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>:
    void registerError() const;

public:
    enum { AllIfacesMask = 0xFF };

    static MonotonicDuration getDefaultMaxTransferInterval()
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
    {
        return MonotonicDuration::fromMSec(60 * 1000);
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	f64e 2260 	movw	r2, #60000	; 0xea60
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	f001 fe0f 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
    }
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <_ZN6uavcan14TransferSenderC1ERNS_10DispatcherENS_17MonotonicDurationE>:
        , allow_anonymous_transfers_(false)
    {
        init(data_type, qos);
    }

    TransferSender(Dispatcher& dispatcher, MonotonicDuration max_transfer_interval = getDefaultMaxTransferInterval())
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
        , dispatcher_(dispatcher)
        , priority_(TransferPriority::Default)
        , qos_(CanTxQueue::Qos())
        , flags_(CanIOFlags(0))
        , iface_mask_(AllIfacesMask)
        , allow_anonymous_transfers_(false)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	609a      	str	r2, [r3, #8]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a0e      	ldr	r2, [pc, #56]	; (8006aa4 <_ZN6uavcan14TransferSenderC1ERNS_10DispatcherENS_17MonotonicDurationE+0x5c>)
 8006a6a:	7812      	ldrb	r2, [r2, #0]
 8006a6c:	731a      	strb	r2, [r3, #12]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	735a      	strb	r2, [r3, #13]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	330e      	adds	r3, #14
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fc2b 	bl	80062d4 <_ZN6uavcan11TransferCRCC1Ev>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3310      	adds	r3, #16
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff f8d6 	bl	8005c34 <_ZN6uavcan10DataTypeIDC1Ev>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	829a      	strh	r2, [r3, #20]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	22ff      	movs	r2, #255	; 0xff
 8006a92:	759a      	strb	r2, [r3, #22]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	75da      	strb	r2, [r3, #23]
    { }
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	200085f0 	.word	0x200085f0

08006aa8 <_ZN6uavcan14TransferSender11setPriorityENS_16TransferPriorityE>:
        UAVCAN_ASSERT(iface_mask);
        iface_mask_ = iface_mask;
    }

    TransferPriority getPriority() const { return priority_; }
    void setPriority(TransferPriority prio) { priority_ = prio; }
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	7039      	strb	r1, [r7, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	783a      	ldrb	r2, [r7, #0]
 8006ab6:	731a      	strb	r2, [r3, #12]
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <_ZN6uavcan14TransferSenderD1Ev>:
class UAVCAN_EXPORT TransferSender
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fbf3 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>:
    TransferSender sender_;
    MonotonicDuration tx_timeout_;
    INode& node_;

protected:
    GenericPublisherBase(INode& node, MonotonicDuration tx_timeout,
 8006ade:	b5b0      	push	{r4, r5, r7, lr}
 8006ae0:	b088      	sub	sp, #32
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
                         MonotonicDuration max_transfer_interval)
        : sender_(node.getDispatcher(), max_transfer_interval)
        , tx_timeout_(tx_timeout)
        , node_(node)
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7fe ff76 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8006af2:	68fc      	ldr	r4, [r7, #12]
 8006af4:	68b8      	ldr	r0, [r7, #8]
 8006af6:	f7ff ff25 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8006afa:	4605      	mov	r5, r0
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	f107 0310 	add.w	r3, r7, #16
 8006b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b06:	e883 0003 	stmia.w	r3, {r0, r1}
 8006b0a:	f107 0310 	add.w	r3, r7, #16
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4629      	mov	r1, r5
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7ff ff98 	bl	8006a48 <_ZN6uavcan14TransferSenderC1ERNS_10DispatcherENS_17MonotonicDurationE>
 8006b18:	f107 0310 	add.w	r3, r7, #16
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fbcc 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	3318      	adds	r3, #24
 8006b28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	621a      	str	r2, [r3, #32]
    {
        setTxTimeout(tx_timeout);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	f107 0318 	add.w	r3, r7, #24
 8006b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b40:	e883 0003 	stmia.w	r3, {r0, r1}
 8006b44:	f107 0318 	add.w	r3, r7, #24
 8006b48:	4619      	mov	r1, r3
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f00d fe17 	bl	801477e <_ZN6uavcan20GenericPublisherBase12setTxTimeoutENS_17MonotonicDurationE>
 8006b50:	f107 0318 	add.w	r3, r7, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fbb0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
#if UAVCAN_DEBUG
        UAVCAN_ASSERT(getTxTimeout() == tx_timeout);  // Making sure default values are OK
#endif
    }
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bdb0      	pop	{r4, r5, r7, pc}

08006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>:

    ~GenericPublisherBase() { }
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3318      	adds	r3, #24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fba2 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ffa3 	bl	8006ac4 <_ZN6uavcan14TransferSenderD1Ev>
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fe ff38 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>:

public:
    static MonotonicDuration getMinTxTimeout() { return MonotonicDuration::fromUSec(200); }
    static MonotonicDuration getMaxTxTimeout() { return MonotonicDuration::fromMSec(60000); }

    MonotonicDuration getTxTimeout() const { return tx_timeout_; }
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ba2:	e882 0003 	stmia.w	r2, {r0, r1}
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>:

    /**
     * Priority of outgoing transfers.
     */
    TransferPriority getPriority() const { return sender_.getPriority(); }
    void setPriority(const TransferPriority prio) { sender_.setPriority(prio); }
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	7039      	strb	r1, [r7, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7839      	ldrb	r1, [r7, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff ff71 	bl	8006aa8 <_ZN6uavcan14TransferSender11setPriorityENS_16TransferPriorityE>
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNK6uavcan20GenericPublisherBase7getNodeEv>:

    INode& getNode() const { return node_; }
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <_ZN6uavcan21GenericSubscriberBaseC1ERNS_5INodeE>:
{
protected:
    INode& node_;
    uint32_t failure_count_;

    explicit GenericSubscriberBase(INode& node)
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
        : node_(node)
        , failure_count_(0)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7fe fef4 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	605a      	str	r2, [r3, #4]
    { }
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <_ZN6uavcan21GenericSubscriberBaseD1Ev>:

    ~GenericSubscriberBase() { }
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fe feed 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <_ZNK6uavcan21GenericSubscriberBase7getNodeEv>:
     * - Transient failure in the transport layer.
     * - Incompatible data types.
     */
    uint32_t getFailureCount() const { return failure_count_; }

    INode& getNode() const { return node_; }
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	4798      	blx	r3
    }
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bf0c      	ite	eq
 8006cba:	2301      	moveq	r3, #1
 8006cbc:	2300      	movne	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <_ZN6uavcan9TimerBaseC1ERNS_5INodeE>:
    using DeadlineHandler::stop;
    using DeadlineHandler::isRunning;
    using DeadlineHandler::getDeadline;
    using DeadlineHandler::getScheduler;

    explicit TimerBase(INode& node)
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
        : DeadlineHandler(node.getScheduler())
        , period_(MonotonicDuration::getInfinite())
 8006cd6:	687c      	ldr	r4, [r7, #4]
        : DeadlineHandler(node.getScheduler())
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	681b      	ldr	r3, [r3, #0]
        , period_(MonotonicDuration::getInfinite())
 8006ce0:	6838      	ldr	r0, [r7, #0]
 8006ce2:	4798      	blx	r3
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7ff fd07 	bl	80066fc <_ZN6uavcan15DeadlineHandlerC1ERNS_9SchedulerE>
 8006cee:	4a06      	ldr	r2, [pc, #24]	; (8006d08 <_ZN6uavcan9TimerBaseC1ERNS_5INodeE+0x3c>)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3318      	adds	r3, #24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fec4 	bl	8008a86 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE11getInfiniteEv>
    { }
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd90      	pop	{r4, r7, pc}
 8006d08:	0802a250 	.word	0x0802a250

08006d0c <_ZN6uavcan8protocol12GetNodeInfo_19getDataTypeFullNameEv>:
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 1 };

    static const char* getDataTypeFullName()
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
    {
        return "uavcan.protocol.GetNodeInfo";
 8006d10:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <_ZN6uavcan8protocol12GetNodeInfo_19getDataTypeFullNameEv+0x10>)
    }
 8006d12:	4618      	mov	r0, r3
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	08021ad8 	.word	0x08021ad8

08006d20 <_ZN6uavcan8protocol12GetNodeInfo_20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature GetNodeInfo_::getDataTypeSignature()
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
    ::uavcan::DataTypeSignature signature(0xA80DC8995053E685ULL);
 8006d28:	a30b      	add	r3, pc, #44	; (adr r3, 8006d58 <_ZN6uavcan8protocol12GetNodeInfo_20getDataTypeSignatureEv+0x38>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fe ffd0 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    Response::FieldTypes::status::extendDataTypeSignature(signature);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fedb 	bl	8008af0 <_ZN6uavcan8protocol11NodeStatus_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::software_version::extendDataTypeSignature(signature);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 feea 	bl	8008b14 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::hardware_version::extendDataTypeSignature(signature);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fef9 	bl	8008b38 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::name::extendDataTypeSignature(signature);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 ff08 	bl	8008b5c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 8006d4c:	bf00      	nop
}
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	5053e685 	.word	0x5053e685
 8006d5c:	a80dc899 	.word	0xa80dc899

08006d60 <_ZN6uavcan9TimerBaseD1Ev>:
class UAVCAN_EXPORT TimerBase : private DeadlineHandler
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	4a08      	ldr	r2, [pc, #32]	; (8006d8c <_ZN6uavcan9TimerBaseD1Ev+0x2c>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3318      	adds	r3, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff faa1 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff fcda 	bl	8006734 <_ZN6uavcan15DeadlineHandlerD1Ev>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	0802a250 	.word	0x0802a250

08006d90 <_ZN6uavcan9TimerBaseD0Ev>:
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff ffe1 	bl	8006d60 <_ZN6uavcan9TimerBaseD1Ev>
 8006d9e:	2120      	movs	r1, #32
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f019 fbd2 	bl	802054a <_ZdlPvj>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEED1Ev>:
 * Use this class to publish messages to the bus (broadcast, unicast, or both).
 *
 * @tparam DataType_    Message data type
 */
template <typename DataType_>
class UAVCAN_EXPORT Publisher : protected GenericPublisher<DataType_, DataType_>
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 ff39 	bl	8008c32 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_ED1Ev>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EED1Ev>:
 * - if exceptions are enabled, std::out_of_range will be thrown;
 * - if UAVCAN_ASSERT() is enabled, program will be terminated on UAVCAN_ASSERT(0);
 * - otherwise the index value will be constrained to the closest valid value.
 */
template <typename T, ArrayMode ArrayMode, unsigned MaxSize_>
class UAVCAN_EXPORT Array : public ArrayImpl<T, ArrayMode, MaxSize_>
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 ffc2 	bl	8008d5e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EED1Ev>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EED1Ev>:
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 ffc1 	bl	8008d76 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EED1Ev>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <_ZN6uavcan8protocol16HardwareVersion_ILi0EED1Ev>:
{
namespace protocol
{

template <int _tmpl>
struct UAVCAN_EXPORT HardwareVersion_
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3312      	adds	r3, #18
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff ffea 	bl	8006de4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EED1Ev>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3302      	adds	r3, #2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff ffd8 	bl	8006dca <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EED1Ev>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>:
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 ffae 	bl	8008d90 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EED1Ev>:
    struct Response_
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f203 1333 	addw	r3, r3, #307	; 0x133
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff ffe9 	bl	8006e24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3320      	adds	r3, #32
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff ffd1 	bl	8006dfe <_ZN6uavcan8protocol16HardwareVersion_ILi0EED1Ev>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE>:
    typedef typename StorageType<typename protocol::NodeStatus::FieldTypes::vendor_specific_status_code>::Type
        VendorSpecificStatusCode;

    typedef typename StorageType<typename protocol::GetNodeInfo::Response::FieldTypes::name>::Type NodeName;

    explicit NodeStatusProvider(INode& node)
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
        : TimerBase(node)
        , creation_timestamp_(node.getMonotonicTime())
        , node_status_pub_(node)
        , gni_srv_(node)
        , ad_hoc_status_updater_(UAVCAN_NULLPTR)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff28 	bl	8006ccc <_ZN6uavcan9TimerBaseC1ERNS_5INodeE>
 8006e7c:	4a2a      	ldr	r2, [pc, #168]	; (8006f28 <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE+0xc0>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3320      	adds	r3, #32
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fd6e 	bl	800696a <_ZNK6uavcan5INode16getMonotonicTimeEv>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fe8b 	bl	8008bb4 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEE19getDefaultTxTimeoutEv>
 8006e9e:	f107 0310 	add.w	r3, r7, #16
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fdbf 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 8006ea8:	f107 0310 	add.w	r3, r7, #16
 8006eac:	f107 0208 	add.w	r2, r7, #8
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f001 fe8e 	bl	8008bd4 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES7_>
 8006eb8:	f107 0310 	add.w	r3, r7, #16
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff f9fc 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff f9f7 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3350      	adds	r3, #80	; 0x50
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 feba 	bl	8008c4c <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	33d0      	adds	r3, #208	; 0xd0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 ff1f 	bl	8008d20 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EEC1Ev>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    {
        UAVCAN_ASSERT(!creation_timestamp_.isZero());
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3320      	adds	r3, #32
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fc3c 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f083 0301 	eor.w	r3, r3, #1
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d105      	bne.n	8006f0c <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE+0xa4>
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE+0xc4>)
 8006f02:	4a0b      	ldr	r2, [pc, #44]	; (8006f30 <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE+0xc8>)
 8006f04:	2158      	movs	r1, #88	; 0x58
 8006f06:	480b      	ldr	r0, [pc, #44]	; (8006f34 <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE+0xcc>)
 8006f08:	f019 fb40 	bl	802058c <__assert_func>

        node_info_.status.mode = protocol::NodeStatus::MODE_INITIALIZATION;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5

        node_info_.status.health = protocol::NodeStatus::HEALTH_OK;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
    }
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd90      	pop	{r4, r7, pc}
 8006f26:	bf00      	nop
 8006f28:	0802a30c 	.word	0x0802a30c
 8006f2c:	08021af4 	.word	0x08021af4
 8006f30:	08027ad4 	.word	0x08027ad4
 8006f34:	08021b14 	.word	0x08021b14

08006f38 <_ZN6uavcan18NodeStatusProvider18setModeOperationalEv>:
    /**
     * Local node mode code control.
     */
    uint8_t getMode() const { return node_info_.status.mode; }
    void setMode(uint8_t code);
    void setModeOperational()    { setMode(protocol::NodeStatus::MODE_OPERATIONAL); }
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f00f fb6f 	bl	8016626 <_ZN6uavcan18NodeStatusProvider7setModeEh>
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <_ZN6uavcan8protocol16GetDataTypeInfo_19getDataTypeFullNameEv>:
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 2 };

    static const char* getDataTypeFullName()
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
    {
        return "uavcan.protocol.GetDataTypeInfo";
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <_ZN6uavcan8protocol16GetDataTypeInfo_19getDataTypeFullNameEv+0x10>)
    }
 8006f56:	4618      	mov	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	08021b68 	.word	0x08021b68
 8006f64:	00000000 	.word	0x00000000

08006f68 <_ZN6uavcan8protocol16GetDataTypeInfo_20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature GetDataTypeInfo_::getDataTypeSignature()
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
    ::uavcan::DataTypeSignature signature(0x88C93DC9F68D24FCULL);
 8006f70:	a311      	add	r3, pc, #68	; (adr r3, 8006fb8 <_ZN6uavcan8protocol16GetDataTypeInfo_20getDataTypeSignatureEv+0x50>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fe feac 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    Request::FieldTypes::id::extendDataTypeSignature(signature);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 ff14 	bl	8008daa <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Request::FieldTypes::kind::extendDataTypeSignature(signature);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 ff1b 	bl	8008dbe <_ZN6uavcan8protocol13DataTypeKind_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Request::FieldTypes::name::extendDataTypeSignature(signature);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fde7 	bl	8008b5c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    Response::FieldTypes::signature::extendDataTypeSignature(signature);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 ff27 	bl	8008de2 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::id::extendDataTypeSignature(signature);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 ff08 	bl	8008daa <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::kind::extendDataTypeSignature(signature);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 ff0f 	bl	8008dbe <_ZN6uavcan8protocol13DataTypeKind_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::flags::extendDataTypeSignature(signature);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 ff28 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::name::extendDataTypeSignature(signature);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 fdd8 	bl	8008b5c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 8006fac:	bf00      	nop
}
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	f68d24fc 	.word	0xf68d24fc
 8006fbc:	88c93dc9 	.word	0x88c93dc9

08006fc0 <_ZN6uavcan20DataTypeInfoProvider7getNodeEv>:
                         void (DataTypeInfoProvider::*)(const protocol::GetDataTypeInfo::Request&,
                                                        protocol::GetDataTypeInfo::Response&)> GetDataTypeInfoCallback;

    ServiceServer<protocol::GetDataTypeInfo, GetDataTypeInfoCallback> gdti_srv_;

    INode& getNode() { return gdti_srv_.getNode(); }
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7ff fe29 	bl	8006c24 <_ZNK6uavcan21GenericSubscriberBase7getNodeEv>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZN6uavcan20DataTypeInfoProvider19isValidDataTypeKindENS_12DataTypeKindE>:

    static bool isValidDataTypeKind(DataTypeKind kind)
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
    {
        return (kind == DataTypeKindMessage) || (kind == DataTypeKindService);
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d002      	beq.n	8006ff2 <_ZN6uavcan20DataTypeInfoProvider19isValidDataTypeKindENS_12DataTypeKindE+0x16>
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <_ZN6uavcan20DataTypeInfoProvider19isValidDataTypeKindENS_12DataTypeKindE+0x1a>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <_ZN6uavcan20DataTypeInfoProvider19isValidDataTypeKindENS_12DataTypeKindE+0x1c>
 8006ff6:	2300      	movs	r3, #0
    }
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE>:

    void handleGetDataTypeInfoRequest(const protocol::GetDataTypeInfo::Request& request,
 8007004:	b5b0      	push	{r4, r5, r7, lr}
 8007006:	b08e      	sub	sp, #56	; 0x38
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
                                      protocol::GetDataTypeInfo::Response& response)
    {
        /*
         * Asking the Global Data Type Registry for the matching type descriptor, either by name or by ID
         */
        const DataTypeDescriptor* desc = UAVCAN_NULLPTR;
 8007010:	2300      	movs	r3, #0
 8007012:	637b      	str	r3, [r7, #52]	; 0x34

        if (request.name.empty())
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3303      	adds	r3, #3
 8007018:	4618      	mov	r0, r3
 800701a:	f001 ff17 	bl	8008e4c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5emptyEv>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d027      	beq.n	8007074 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x70>
        {
            response.id   = request.id;   // Pre-setting the fields so they have meaningful values even in
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	811a      	strh	r2, [r3, #8]
            response.kind = request.kind; // ...case of failure.
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	7892      	ldrb	r2, [r2, #2]
 8007032:	729a      	strb	r2, [r3, #10]

            if (!isValidDataTypeKind(DataTypeKind(request.kind.value)))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	789b      	ldrb	r3, [r3, #2]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ffcf 	bl	8006fdc <_ZN6uavcan20DataTypeInfoProvider19isValidDataTypeKindENS_12DataTypeKindE>
 800703e:	4603      	mov	r3, r0
 8007040:	f083 0301 	eor.w	r3, r3, #1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 80e4 	bne.w	8007214 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x210>
                UAVCAN_TRACE("DataTypeInfoProvider", "GetDataTypeInfo request with invalid DataTypeKind %i",
                             static_cast<int>(request.kind.value));
                return;
            }

            desc = GlobalDataTypeRegistry::instance().find(DataTypeKind(request.kind.value), request.id);
 800704c:	f00d fdf6 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8007050:	4605      	mov	r5, r0
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	789c      	ldrb	r4, [r3, #2]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	f107 0310 	add.w	r3, r7, #16
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fdf6 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4621      	mov	r1, r4
 800706a:	4628      	mov	r0, r5
 800706c:	f00d fe72 	bl	8014d54 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE>
 8007070:	6378      	str	r0, [r7, #52]	; 0x34
 8007072:	e016      	b.n	80070a2 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x9e>
        }
        else
        {
            response.name = request.name;
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f102 000c 	add.w	r0, r2, #12
 800707c:	3303      	adds	r3, #3
 800707e:	2252      	movs	r2, #82	; 0x52
 8007080:	4619      	mov	r1, r3
 8007082:	f019 faf3 	bl	802066c <memcpy>

            desc = GlobalDataTypeRegistry::instance().find(request.name.c_str());
 8007086:	f00d fdd9 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800708a:	4604      	mov	r4, r0
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	3303      	adds	r3, #3
 8007090:	4618      	mov	r0, r3
 8007092:	f001 feed 	bl	8008e70 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5c_strEv>
 8007096:	4603      	mov	r3, r0
 8007098:	4619      	mov	r1, r3
 800709a:	4620      	mov	r0, r4
 800709c:	f00d fdfc 	bl	8014c98 <_ZNK6uavcan22GlobalDataTypeRegistry4findEPKc>
 80070a0:	6378      	str	r0, [r7, #52]	; 0x34
        }

        if (desc == UAVCAN_NULLPTR)
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80b7 	beq.w	8007218 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x214>
        UAVCAN_TRACE("DataTypeInfoProvider", "GetDataTypeInfo request for %s", desc->toString().c_str());

        /*
         * Filling the response struct
         */
        response.signature  = desc->getSignature().get();
 80070aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070ac:	f7fe feaa 	bl	8005e04 <_ZNK6uavcan18DataTypeDescriptor12getSignatureEv>
 80070b0:	4603      	mov	r3, r0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fe1f 	bl	8005cf6 <_ZNK6uavcan17DataTypeSignature3getEv>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	e9c2 3400 	strd	r3, r4, [r2]
        response.id         = desc->getID().get();
 80070c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070c4:	f7fe fe92 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 80070c8:	4603      	mov	r3, r0
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	f107 0314 	add.w	r3, r7, #20
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fdce 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	811a      	strh	r2, [r3, #8]
        response.kind.value = desc->getKind();
 80070de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070e0:	f7fe fe78 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	729a      	strb	r2, [r3, #10]
        response.flags      = protocol::GetDataTypeInfo::Response::FLAG_KNOWN;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	72da      	strb	r2, [r3, #11]
        response.name       = desc->getFullName();
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f103 040c 	add.w	r4, r3, #12
 80070f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070fa:	f7fe fe8e 	bl	8005e1a <_ZNK6uavcan18DataTypeDescriptor11getFullNameEv>
 80070fe:	4603      	mov	r3, r0
 8007100:	4619      	mov	r1, r3
 8007102:	4620      	mov	r0, r4
 8007104:	f001 fede 	bl	8008ec4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEaSEPKc>

        const Dispatcher& dispatcher = getNode().getDispatcher();
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff ff59 	bl	8006fc0 <_ZN6uavcan20DataTypeInfoProvider7getNodeEv>
 800710e:	4603      	mov	r3, r0
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fc17 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8007116:	6338      	str	r0, [r7, #48]	; 0x30

        if (desc->getKind() == DataTypeKindService)
 8007118:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800711a:	f7fe fe5b 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d020      	beq.n	8007170 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x16c>
        {
            if (dispatcher.hasServer(desc->getID().get()))
 800712e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007130:	f7fe fe5c 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8007134:	4603      	mov	r3, r0
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	f107 031c 	add.w	r3, r7, #28
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fd98 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 8007142:	4603      	mov	r3, r0
 8007144:	461a      	mov	r2, r3
 8007146:	f107 0318 	add.w	r3, r7, #24
 800714a:	4611      	mov	r1, r2
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe fd80 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8007152:	69b9      	ldr	r1, [r7, #24]
 8007154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007156:	f011 fdcb 	bl	8018cf0 <_ZNK6uavcan10Dispatcher9hasServerENS_10DataTypeIDE>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d05c      	beq.n	800721a <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x216>
            {
                response.flags |= protocol::GetDataTypeInfo::Response::FLAG_SERVING;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7adb      	ldrb	r3, [r3, #11]
 8007164:	f043 0308 	orr.w	r3, r3, #8
 8007168:	b2da      	uxtb	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	72da      	strb	r2, [r3, #11]
 800716e:	e054      	b.n	800721a <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x216>
            }
        }
        else if (desc->getKind() == DataTypeKindMessage)
 8007170:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007172:	f7fe fe2f 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 8007176:	4603      	mov	r3, r0
 8007178:	2b01      	cmp	r3, #1
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d040      	beq.n	8007208 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x204>
        {
            if (dispatcher.hasSubscriber(desc->getID().get()))
 8007186:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007188:	f7fe fe30 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 800718c:	4603      	mov	r3, r0
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe fd6c 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 800719a:	4603      	mov	r3, r0
 800719c:	461a      	mov	r2, r3
 800719e:	f107 0320 	add.w	r3, r7, #32
 80071a2:	4611      	mov	r1, r2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe fd54 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 80071aa:	6a39      	ldr	r1, [r7, #32]
 80071ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ae:	f011 fd7e 	bl	8018cae <_ZNK6uavcan10Dispatcher13hasSubscriberENS_10DataTypeIDE>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x1c2>
            {
                response.flags |= protocol::GetDataTypeInfo::Response::FLAG_SUBSCRIBED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	7adb      	ldrb	r3, [r3, #11]
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	72da      	strb	r2, [r3, #11]
            }
            if (dispatcher.hasPublisher(desc->getID().get()))
 80071c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071c8:	f7fe fe10 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 80071cc:	4603      	mov	r3, r0
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fd4c 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fd34 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 80071ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ee:	f011 fd6e 	bl	8018cce <_ZNK6uavcan10Dispatcher12hasPublisherENS_10DataTypeIDE>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x216>
            {
                response.flags |= protocol::GetDataTypeInfo::Response::FLAG_PUBLISHING;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7adb      	ldrb	r3, [r3, #11]
 80071fc:	f043 0304 	orr.w	r3, r3, #4
 8007200:	b2da      	uxtb	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	72da      	strb	r2, [r3, #11]
 8007206:	e008      	b.n	800721a <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x216>
            }
        }
        else
        {
            UAVCAN_ASSERT(0); // That means that GDTR somehow found a type of an unknown kind. The horror.
 8007208:	4b05      	ldr	r3, [pc, #20]	; (8007220 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x21c>)
 800720a:	4a06      	ldr	r2, [pc, #24]	; (8007224 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x220>)
 800720c:	216a      	movs	r1, #106	; 0x6a
 800720e:	4806      	ldr	r0, [pc, #24]	; (8007228 <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x224>)
 8007210:	f019 f9bc 	bl	802058c <__assert_func>
                return;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <_ZN6uavcan20DataTypeInfoProvider28handleGetDataTypeInfoRequestERKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x216>
            return;
 8007218:	bf00      	nop
        }
    }
 800721a:	3738      	adds	r7, #56	; 0x38
 800721c:	46bd      	mov	sp, r7
 800721e:	bdb0      	pop	{r4, r5, r7, pc}
 8007220:	08021b88 	.word	0x08021b88
 8007224:	08028154 	.word	0x08028154
 8007228:	08021b8c 	.word	0x08021b8c

0800722c <_ZN6uavcan20DataTypeInfoProviderC1ERNS_5INodeE>:

public:
    explicit DataTypeInfoProvider(INode& node) :
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
        gdti_srv_(node)
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fe fbd1 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fe69 	bl	8008f18 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>
    { }
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZN6uavcan20DataTypeInfoProvider5startEv>:

    int start()
 8007250:	b590      	push	{r4, r7, lr}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
    {
        int res = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]

        res = gdti_srv_.start(GetDataTypeInfoCallback(this, &DataTypeInfoProvider::handleGetDataTypeInfoRequest));
 800725c:	687c      	ldr	r4, [r7, #4]
 800725e:	4b1a      	ldr	r3, [pc, #104]	; (80072c8 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x78>)
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	2300      	movs	r3, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	f107 0008 	add.w	r0, r7, #8
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	cb0c      	ldmia	r3, {r2, r3}
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	f001 febb 	bl	8008fec <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1ES2_SD_>
 8007276:	f107 0308 	add.w	r3, r7, #8
 800727a:	4619      	mov	r1, r3
 800727c:	4620      	mov	r0, r4
 800727e:	f001 fece 	bl	800901e <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_>
 8007282:	61f8      	str	r0, [r7, #28]
        if (res < 0)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	db0a      	blt.n	80072a0 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x50>
        {
            goto fail;
        }

        UAVCAN_ASSERT(res >= 0);
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	da05      	bge.n	800729c <_ZN6uavcan20DataTypeInfoProvider5startEv+0x4c>
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <_ZN6uavcan20DataTypeInfoProvider5startEv+0x7c>)
 8007292:	4a0f      	ldr	r2, [pc, #60]	; (80072d0 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x80>)
 8007294:	217d      	movs	r1, #125	; 0x7d
 8007296:	480f      	ldr	r0, [pc, #60]	; (80072d4 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x84>)
 8007298:	f019 f978 	bl	802058c <__assert_func>
        return res;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	e00e      	b.n	80072be <_ZN6uavcan20DataTypeInfoProvider5startEv+0x6e>
            goto fail;
 80072a0:	bf00      	nop

    fail:
        UAVCAN_ASSERT(res < 0);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	db05      	blt.n	80072b4 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x64>
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x88>)
 80072aa:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x80>)
 80072ac:	2181      	movs	r1, #129	; 0x81
 80072ae:	4809      	ldr	r0, [pc, #36]	; (80072d4 <_ZN6uavcan20DataTypeInfoProvider5startEv+0x84>)
 80072b0:	f019 f96c 	bl	802058c <__assert_func>
        gdti_srv_.stop();
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 fee5 	bl	8009086 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
        return res;
 80072bc:	69fb      	ldr	r3, [r7, #28]
    }
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	; 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd90      	pop	{r4, r7, pc}
 80072c6:	bf00      	nop
 80072c8:	08007005 	.word	0x08007005
 80072cc:	08021be4 	.word	0x08021be4
 80072d0:	08028128 	.word	0x08028128
 80072d4:	08021b8c 	.word	0x08021b8c
 80072d8:	08021bf0 	.word	0x08021bf0

080072dc <_ZN6uavcan6Logger19getLogLevelAboveAllEv>:

    /**
     * This value is higher than any valid severity value.
     * Use it to completely suppress the output.
     */
    static LogLevel getLogLevelAboveAll() { return (1U << protocol::debug::LogLevel::FieldTypes::value::BitLen) - 1U; }
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
 80072e0:	2307      	movs	r3, #7
 80072e2:	4618      	mov	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <_ZNK6uavcan6Logger20getExternalSinkLevelEv>:
    Publisher<protocol::debug::LogMessage> logmsg_pub_;
    protocol::debug::LogMessage msg_buf_;
    LogLevel level_;
    ILogSink* external_sink_;

    LogLevel getExternalSinkLevel() const
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
    {
        return (external_sink_ == UAVCAN_NULLPTR) ? getLogLevelAboveAll() : external_sink_->getLogLevel();
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d103      	bne.n	8007306 <_ZNK6uavcan6Logger20getExternalSinkLevelEv+0x1a>
 80072fe:	f7ff ffed 	bl	80072dc <_ZN6uavcan6Logger19getLogLevelAboveAllEv>
 8007302:	4603      	mov	r3, r0
 8007304:	e00b      	b.n	800731e <_ZNK6uavcan6Logger20getExternalSinkLevelEv+0x32>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	4603      	mov	r3, r0
    }
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEED1Ev>:
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	f001 ff1e 	bl	8009172 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_ED1Ev>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EED1Ev>:
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4618      	mov	r0, r3
 800734c:	f001 ff37 	bl	80091be <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EED1Ev>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EED1Ev>:
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4618      	mov	r0, r3
 8007366:	f001 ff37 	bl	80091d8 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EED1Ev>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EED1Ev>:
{
namespace debug
{

template <int _tmpl>
struct UAVCAN_EXPORT LogMessage_
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3322      	adds	r3, #34	; 0x22
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff ffea 	bl	800735a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EED1Ev>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3301      	adds	r3, #1
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff ffd8 	bl	8007340 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EED1Ev>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <_ZN6uavcan6LoggerC1ERNS_5INodeE>:

public:
    explicit Logger(INode& node)
 800739c:	b590      	push	{r4, r7, lr}
 800739e:	b08d      	sub	sp, #52	; 0x34
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
        : logmsg_pub_(node)
        , external_sink_(UAVCAN_NULLPTR)
 80073a6:	687c      	ldr	r4, [r7, #4]
 80073a8:	f107 0308 	add.w	r3, r7, #8
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fea1 	bl	80090f4 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEE19getDefaultTxTimeoutEv>
 80073b2:	f107 0310 	add.w	r3, r7, #16
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff fb35 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 80073bc:	f107 0310 	add.w	r3, r7, #16
 80073c0:	f107 0208 	add.w	r2, r7, #8
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	4620      	mov	r0, r4
 80073c8:	f001 fea4 	bl	8009114 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>
 80073cc:	f107 0310 	add.w	r3, r7, #16
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe ff72 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80073d6:	f107 0308 	add.w	r3, r7, #8
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe ff6d 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3328      	adds	r3, #40	; 0x28
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fed1 	bl	800918c <_ZN6uavcan8protocol5debug11LogMessage_ILi0EEC1Ev>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    {
        level_ = protocol::debug::LogLevel::ERROR;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2203      	movs	r2, #3
 80073f6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
        setTxTimeout(MonotonicDuration::fromMSec(DefaultTxTimeoutMs));
 80073fa:	f107 0118 	add.w	r1, r7, #24
 80073fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	4608      	mov	r0, r1
 8007408:	f001 f928 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800740c:	f107 0318 	add.w	r3, r7, #24
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f890 	bl	8007538 <_ZN6uavcan6Logger12setTxTimeoutENS_17MonotonicDurationE>
 8007418:	f107 0318 	add.w	r3, r7, #24
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe ff4c 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        UAVCAN_ASSERT(getTxTimeout() == MonotonicDuration::fromMSec(DefaultTxTimeoutMs));
 8007422:	f107 0320 	add.w	r3, r7, #32
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4618      	mov	r0, r3
 800742a:	f000 f876 	bl	800751a <_ZNK6uavcan6Logger12getTxTimeoutEv>
 800742e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	4608      	mov	r0, r1
 800743c:	f001 f90e 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 8007440:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007444:	f107 0320 	add.w	r3, r7, #32
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f001 fed1 	bl	80091f2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEeqERKS1_>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <_ZN6uavcan6LoggerC1ERNS_5INodeE+0xc6>
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <_ZN6uavcan6LoggerC1ERNS_5INodeE+0xe4>)
 8007458:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <_ZN6uavcan6LoggerC1ERNS_5INodeE+0xe8>)
 800745a:	2159      	movs	r1, #89	; 0x59
 800745c:	480a      	ldr	r0, [pc, #40]	; (8007488 <_ZN6uavcan6LoggerC1ERNS_5INodeE+0xec>)
 800745e:	f019 f895 	bl	802058c <__assert_func>
 8007462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe ff27 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800746c:	f107 0320 	add.w	r3, r7, #32
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe ff22 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    }
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4618      	mov	r0, r3
 800747a:	3734      	adds	r7, #52	; 0x34
 800747c:	46bd      	mov	sp, r7
 800747e:	bd90      	pop	{r4, r7, pc}
 8007480:	08021bf8 	.word	0x08021bf8
 8007484:	08027db4 	.word	0x08027db4
 8007488:	08021c3c 	.word	0x08021c3c

0800748c <_ZN6uavcan6Logger4initENS_16TransferPriorityE>:
    /**
     * Initializes the logger, does not perform any network activity.
     * Must be called once before use.
     * Returns negative error code.
     */
    int init(const TransferPriority priority = TransferPriority::Lowest)
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	7039      	strb	r1, [r7, #0]
    {
        const int res = logmsg_pub_.init(priority);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7839      	ldrb	r1, [r7, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f001 febf 	bl	800921e <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E4initENS_16TransferPriorityE>
 80074a0:	60f8      	str	r0, [r7, #12]
        if (res < 0)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da01      	bge.n	80074ac <_ZN6uavcan6Logger4initENS_16TransferPriorityE+0x20>
        {
            return res;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	e000      	b.n	80074ae <_ZN6uavcan6Logger4initENS_16TransferPriorityE+0x22>
        }
        return 0;
 80074ac:	2300      	movs	r3, #0
    }
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <_ZN6uavcan6Logger3logERKNS_8protocol5debug11LogMessage_ILi0EEE>:
     * The message will be reported into the external log sink if the external sink is
     * installed and the severity level of the message is >= severity level of the external sink.
     *
     * Returns negative error code.
     */
    int log(const protocol::debug::LogMessage& message)
 80074b6:	b590      	push	{r4, r7, lr}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
    {
        int retval = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
        if (message.level.value >= getExternalSinkLevel())
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781c      	ldrb	r4, [r3, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff0f 	bl	80072ec <_ZNK6uavcan6Logger20getExternalSinkLevelEv>
 80074ce:	4603      	mov	r3, r0
 80074d0:	429c      	cmp	r4, r3
 80074d2:	bf2c      	ite	cs
 80074d4:	2301      	movcs	r3, #1
 80074d6:	2300      	movcc	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <_ZN6uavcan6Logger3logERKNS_8protocol5debug11LogMessage_ILi0EEE+0x40>
        {
            external_sink_->log(message);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	4610      	mov	r0, r2
 80074f4:	4798      	blx	r3
        }
        if (message.level.value >= level_)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8007500:	429a      	cmp	r2, r3
 8007502:	d305      	bcc.n	8007510 <_ZN6uavcan6Logger3logERKNS_8protocol5debug11LogMessage_ILi0EEE+0x5a>
        {
            retval = logmsg_pub_.broadcast(message);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f001 fe9b 	bl	8009244 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEE9broadcastERKS4_>
 800750e:	60f8      	str	r0, [r7, #12]
        }
        return retval;
 8007510:	68fb      	ldr	r3, [r7, #12]
    }
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	bd90      	pop	{r4, r7, pc}

0800751a <_ZNK6uavcan6Logger12getTxTimeoutEv>:

    /**
     * Log message broadcast transmission timeout.
     * The default value should be acceptable for any use case.
     */
    MonotonicDuration getTxTimeout() const { return logmsg_pub_.getTxTimeout(); }
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fb2f 	bl	8006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <_ZN6uavcan6Logger12setTxTimeoutENS_17MonotonicDurationE>:
    void setTxTimeout(MonotonicDuration val) { logmsg_pub_.setTxTimeout(val); }
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	f107 0308 	add.w	r3, r7, #8
 800754a:	c903      	ldmia	r1, {r0, r1}
 800754c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007550:	f107 0308 	add.w	r3, r7, #8
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f00d f911 	bl	801477e <_ZN6uavcan20GenericPublisherBase12setTxTimeoutENS_17MonotonicDurationE>
 800755c:	f107 0308 	add.w	r3, r7, #8
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe feaa 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <_ZN6uavcan8protocol12RestartNode_19getDataTypeFullNameEv>:
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 5 };

    static const char* getDataTypeFullName()
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
    {
        return "uavcan.protocol.RestartNode";
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <_ZN6uavcan8protocol12RestartNode_19getDataTypeFullNameEv+0x10>)
    }
 8007576:	4618      	mov	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	08021c84 	.word	0x08021c84
 8007584:	00000000 	.word	0x00000000

08007588 <_ZN6uavcan8protocol12RestartNode_20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature RestartNode_::getDataTypeSignature()
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
    ::uavcan::DataTypeSignature signature(0x569E05394A3017F0ULL);
 8007590:	a309      	add	r3, pc, #36	; (adr r3, 80075b8 <_ZN6uavcan8protocol12RestartNode_20getDataTypeSignatureEv+0x30>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fe fb9c 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    Request::FieldTypes::magic_number::extendDataTypeSignature(signature);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fe79 	bl	8009294 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    Response::FieldTypes::ok::extendDataTypeSignature(signature);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 fe80 	bl	80092a8 <_ZN6uavcan11IntegerSpecILj1ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 80075a8:	bf00      	nop
}
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w
 80075b8:	4a3017f0 	.word	0x4a3017f0
 80075bc:	569e0539 	.word	0x569e0539

080075c0 <_ZNK6uavcan20RestartRequestServer17handleRestartNodeERKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS3_9Response_ILi0EEE>:
                                                        protocol::RestartNode::Response&) const> RestartNodeCallback;

    ServiceServer<protocol::RestartNode, RestartNodeCallback> srv_;
    IRestartRequestHandler* handler_;

    void handleRestartNode(const ReceivedDataStructure<protocol::RestartNode::Request>& request,
 80075c0:	b5b0      	push	{r4, r5, r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
                           protocol::RestartNode::Response& response) const
    {
        UAVCAN_TRACE("RestartRequestServer", "Request from snid=%i", int(request.getSrcNodeID().get()));
        response.ok = false;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
        if (request.magic_number == protocol::RestartNode::Request::MAGIC_NUMBER)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075d8:	a211      	add	r2, pc, #68	; (adr r2, 8007620 <_ZNK6uavcan20RestartRequestServer17handleRestartNodeERKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS3_9Response_ILi0EEE+0x60>)
 80075da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80075de:	4294      	cmp	r4, r2
 80075e0:	bf08      	it	eq
 80075e2:	428b      	cmpeq	r3, r1
 80075e4:	d118      	bne.n	8007618 <_ZNK6uavcan20RestartRequestServer17handleRestartNodeERKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS3_9Response_ILi0EEE+0x58>
        {
            if (handler_)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d013      	beq.n	8007618 <_ZNK6uavcan20RestartRequestServer17handleRestartNodeERKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS3_9Response_ILi0EEE+0x58>
            {
                response.ok = handler_->handleRestartRequest(request.getSrcNodeID());
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	681c      	ldr	r4, [r3, #0]
 8007602:	68b8      	ldr	r0, [r7, #8]
 8007604:	f001 fe7a 	bl	80092fc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE12getSrcNodeIDEv>
 8007608:	4603      	mov	r3, r0
 800760a:	4619      	mov	r1, r3
 800760c:	4628      	mov	r0, r5
 800760e:	47a0      	blx	r4
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	701a      	strb	r2, [r3, #0]
        else
        {
            UAVCAN_TRACE("RestartRequestServer", "Invalid magic number 0x%llx",
                         static_cast<unsigned long long>(request.magic_number));
        }
    }
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bdb0      	pop	{r4, r5, r7, pc}
 8007620:	ce551b1e 	.word	0xce551b1e
 8007624:	000000ac 	.word	0x000000ac

08007628 <_ZN6uavcan20RestartRequestServerC1ERNS_5INodeE>:

public:
    explicit RestartRequestServer(INode& node)
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
        : srv_(node)
        , handler_(UAVCAN_NULLPTR)
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe f9d3 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fe69 	bl	8009314 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    { }
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <_ZN6uavcan20RestartRequestServer5startEv>:

    /**
     * Starts the server.
     * Returns negative error code.
     */
    int start()
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
    {
        return srv_.start(RestartNodeCallback(this, &RestartRequestServer::handleRestartNode));
 800765c:	687c      	ldr	r4, [r7, #4]
 800765e:	4b0b      	ldr	r3, [pc, #44]	; (800768c <_ZN6uavcan20RestartRequestServer5startEv+0x38>)
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	f107 000c 	add.w	r0, r7, #12
 800766a:	f107 0318 	add.w	r3, r7, #24
 800766e:	cb0c      	ldmia	r3, {r2, r3}
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	f001 feb9 	bl	80093e8 <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEC1ES3_SG_>
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	4619      	mov	r1, r3
 800767c:	4620      	mov	r0, r4
 800767e:	f001 fecc 	bl	800941a <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE5startERKSI_>
 8007682:	4603      	mov	r3, r0
    }
 8007684:	4618      	mov	r0, r3
 8007686:	3724      	adds	r7, #36	; 0x24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}
 800768c:	080075c1 	.word	0x080075c1

08007690 <_ZN6uavcan8protocol18GetTransportStats_19getDataTypeFullNameEv>:
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 4 };

    static const char* getDataTypeFullName()
 8007690:	b480      	push	{r7}
 8007692:	af00      	add	r7, sp, #0
    {
        return "uavcan.protocol.GetTransportStats";
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <_ZN6uavcan8protocol18GetTransportStats_19getDataTypeFullNameEv+0x10>)
    }
 8007696:	4618      	mov	r0, r3
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	08021ca0 	.word	0x08021ca0
 80076a4:	00000000 	.word	0x00000000

080076a8 <_ZN6uavcan8protocol18GetTransportStats_20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature GetTransportStats_::getDataTypeSignature()
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
    ::uavcan::DataTypeSignature signature(0x31C7F654531B61B3ULL);
 80076b0:	a30b      	add	r3, pc, #44	; (adr r3, 80076e0 <_ZN6uavcan8protocol18GetTransportStats_20getDataTypeSignatureEv+0x38>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fe fb0c 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    Response::FieldTypes::transfers_tx::extendDataTypeSignature(signature);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fee0 	bl	8009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::transfers_rx::extendDataTypeSignature(signature);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fedd 	bl	8009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::transfer_errors::extendDataTypeSignature(signature);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 feda 	bl	8009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::can_iface_stats::extendDataTypeSignature(signature);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fee1 	bl	8009496 <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 80076d4:	bf00      	nop
}
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	531b61b3 	.word	0x531b61b3
 80076e4:	31c7f654 	.word	0x31c7f654

080076e8 <_ZNK6uavcan22TransportStatsProvider23handleGetTransportStatsERKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS2_9Response_ILi0EEE>:
                                                          protocol::GetTransportStats::Response&) const>
            GetTransportStatsCallback;

    ServiceServer<protocol::GetTransportStats, GetTransportStatsCallback> srv_;

    void handleGetTransportStats(const protocol::GetTransportStats::Request&,
 80076e8:	b590      	push	{r4, r7, lr}
 80076ea:	b095      	sub	sp, #84	; 0x54
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
                                 protocol::GetTransportStats::Response& resp) const
    {
        const TransferPerfCounter& perf = srv_.getNode().getDispatcher().getTransferPerfCounter();
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fa93 	bl	8006c24 <_ZNK6uavcan21GenericSubscriberBase7getNodeEv>
 80076fe:	4603      	mov	r3, r0
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff f91f 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8007706:	4603      	mov	r3, r0
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe ffea 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800770e:	64b8      	str	r0, [r7, #72]	; 0x48
        resp.transfer_errors = perf.getErrorCount();
 8007710:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007712:	f7fe fc77 	bl	8006004 <_ZNK6uavcan19TransferPerfCounter13getErrorCountEv>
 8007716:	4603      	mov	r3, r0
 8007718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	e9c2 3404 	strd	r3, r4, [r2, #16]
        resp.transfers_tx = perf.getTxTransferCount();
 8007722:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007724:	f7fe fc57 	bl	8005fd6 <_ZNK6uavcan19TransferPerfCounter18getTxTransferCountEv>
 8007728:	4603      	mov	r3, r0
 800772a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	e9c2 3400 	strd	r3, r4, [r2]
        resp.transfers_rx = perf.getRxTransferCount();
 8007734:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007736:	f7fe fc59 	bl	8005fec <_ZNK6uavcan19TransferPerfCounter18getRxTransferCountEv>
 800773a:	4603      	mov	r3, r0
 800773c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	e9c2 3402 	strd	r3, r4, [r2, #8]

        const CanIOManager& canio = srv_.getNode().getDispatcher().getCanIOManager();
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3304      	adds	r3, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fa6a 	bl	8006c24 <_ZNK6uavcan21GenericSubscriberBase7getNodeEv>
 8007750:	4603      	mov	r3, r0
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f8f6 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8007758:	4603      	mov	r3, r0
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe ffb5 	bl	80066ca <_ZN6uavcan10Dispatcher15getCanIOManagerEv>
 8007760:	6478      	str	r0, [r7, #68]	; 0x44
        for (uint8_t i = 0; i < canio.getNumIfaces(); i++)
 8007762:	2300      	movs	r3, #0
 8007764:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007768:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800776a:	f7fe fce0 	bl	800612e <_ZNK6uavcan12CanIOManager12getNumIfacesEv>
 800776e:	4603      	mov	r3, r0
 8007770:	461a      	mov	r2, r3
 8007772:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007776:	4293      	cmp	r3, r2
 8007778:	bf34      	ite	cc
 800777a:	2301      	movcc	r3, #1
 800777c:	2300      	movcs	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d026      	beq.n	80077d2 <_ZNK6uavcan22TransportStatsProvider23handleGetTransportStatsERKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS2_9Response_ILi0EEE+0xea>
        {
            const CanIfacePerfCounters can_perf = canio.getIfacePerfCounters(i);
 8007784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007788:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800778c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800778e:	4618      	mov	r0, r3
 8007790:	f010 f8a0 	bl	80178d4 <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh>
            protocol::CANIfaceStats stats;
 8007794:	f107 0310 	add.w	r3, r7, #16
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fea7 	bl	80094ec <_ZN6uavcan8protocol14CANIfaceStats_ILi0EEC1Ev>
            stats.errors = can_perf.errors;
 800779e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80077a2:	e9c7 3408 	strd	r3, r4, [r7, #32]
            stats.frames_tx = can_perf.frames_tx;
 80077a6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80077aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
            stats.frames_rx = can_perf.frames_rx;
 80077ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80077b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
            resp.can_iface_stats.push_back(stats);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3318      	adds	r3, #24
 80077ba:	f107 0210 	add.w	r2, r7, #16
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f001 feb3 	bl	800952c <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE9push_backERKS3_>
        for (uint8_t i = 0; i < canio.getNumIfaces(); i++)
 80077c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80077ca:	3301      	adds	r3, #1
 80077cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80077d0:	e7ca      	b.n	8007768 <_ZNK6uavcan22TransportStatsProvider23handleGetTransportStatsERKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x80>
        }
    }
 80077d2:	bf00      	nop
 80077d4:	3754      	adds	r7, #84	; 0x54
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd90      	pop	{r4, r7, pc}

080077da <_ZN6uavcan22TransportStatsProviderC1ERNS_5INodeE>:

public:
    explicit TransportStatsProvider(INode& node)
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
        : srv_(node)
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7fe f8fa 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f001 fec0 	bl	8009574 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>
    { }
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <_ZN6uavcan22TransportStatsProvider5startEv>:

    /**
     * Once started, this class requires no further attention.
     * Returns negative error code.
     */
    int start()
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b089      	sub	sp, #36	; 0x24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
    {
        return srv_.start(GetTransportStatsCallback(this, &TransportStatsProvider::handleGetTransportStats));
 8007808:	687c      	ldr	r4, [r7, #4]
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <_ZN6uavcan22TransportStatsProvider5startEv+0x38>)
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
 8007812:	f107 000c 	add.w	r0, r7, #12
 8007816:	f107 0318 	add.w	r3, r7, #24
 800781a:	cb0c      	ldmia	r3, {r2, r3}
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	f001 ff13 	bl	8009648 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEC1ES3_SE_>
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	4619      	mov	r1, r3
 8007828:	4620      	mov	r0, r4
 800782a:	f001 ff26 	bl	800967a <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSG_>
 800782e:	4603      	mov	r3, r0
    }
 8007830:	4618      	mov	r0, r3
 8007832:	3724      	adds	r7, #36	; 0x24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd90      	pop	{r4, r7, pc}
 8007838:	080076e9 	.word	0x080076e9

0800783c <_ZN6uavcan13ServiceCallIDC1Ev>:
struct ServiceCallID
{
    NodeID server_node_id;
    TransferID transfer_id;

    ServiceCallID() { }
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe f980 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3301      	adds	r3, #1
 8007850:	4618      	mov	r0, r3
 8007852:	f7fe f93b 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZN6uavcan13ServiceCallIDC1ENS_6NodeIDENS_10TransferIDE>:

    ServiceCallID(NodeID arg_server_node_id, TransferID arg_transfer_id)
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	7239      	strb	r1, [r7, #8]
 800786a:	713a      	strb	r2, [r7, #4]
        : server_node_id(arg_server_node_id)
        , transfer_id(arg_transfer_id)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	7a3a      	ldrb	r2, [r7, #8]
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	793a      	ldrb	r2, [r7, #4]
 8007876:	705a      	strb	r2, [r3, #1]
    { }
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <_ZNK6uavcan13ServiceCallIDeqES0_>:

    bool operator==(const ServiceCallID rhs) const
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	8039      	strh	r1, [r7, #0]
    {
        return (rhs.server_node_id == server_node_id) &&
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	463a      	mov	r2, r7
 8007894:	7819      	ldrb	r1, [r3, #0]
 8007896:	4610      	mov	r0, r2
 8007898:	f7fe f9b9 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <_ZNK6uavcan13ServiceCallIDeqES0_+0x34>
               (rhs.transfer_id == transfer_id);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	463a      	mov	r2, r7
 80078a6:	3201      	adds	r2, #1
 80078a8:	7859      	ldrb	r1, [r3, #1]
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fe f91c 	bl	8005ae8 <_ZNK6uavcan10TransferIDeqES0_>
 80078b0:	4603      	mov	r3, r0
        return (rhs.server_node_id == server_node_id) &&
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <_ZNK6uavcan13ServiceCallIDeqES0_+0x34>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <_ZNK6uavcan13ServiceCallIDeqES0_+0x36>
 80078ba:	2300      	movs	r3, #0
    }
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZNK6uavcan13ServiceCallID7isValidEv>:

    bool isValid() const { return server_node_id.isUnicast(); }
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe f987 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 80078d4:	4603      	mov	r3, r0
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE>:
        bool timed_out_;

        virtual void handleDeadline(MonotonicTime);

    public:
        CallState(INode& node, ServiceClientBase& owner, ServiceCallID call_id)
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	803b      	strh	r3, [r7, #0]
            : DeadlineHandler(node.getScheduler())
            , owner_(owner)
            , id_(call_id)
            , timed_out_(false)
 80078ee:	68fc      	ldr	r4, [r7, #12]
            : DeadlineHandler(node.getScheduler())
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	681b      	ldr	r3, [r3, #0]
            , timed_out_(false)
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	4798      	blx	r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	4619      	mov	r1, r3
 8007900:	4620      	mov	r0, r4
 8007902:	f7fe fefb 	bl	80066fc <_ZN6uavcan15DeadlineHandlerC1ERNS_9SchedulerE>
 8007906:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE+0x94>)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	615a      	str	r2, [r3, #20]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3318      	adds	r3, #24
 8007916:	461a      	mov	r2, r3
 8007918:	463b      	mov	r3, r7
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	8013      	strh	r3, [r2, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	769a      	strb	r2, [r3, #26]
        {
            UAVCAN_ASSERT(id_.isValid());
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3318      	adds	r3, #24
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff ffcb 	bl	80078c4 <_ZNK6uavcan13ServiceCallID7isValidEv>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE+0x60>
 8007934:	4b10      	ldr	r3, [pc, #64]	; (8007978 <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE+0x98>)
 8007936:	4a11      	ldr	r2, [pc, #68]	; (800797c <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE+0x9c>)
 8007938:	218a      	movs	r1, #138	; 0x8a
 800793a:	4811      	ldr	r0, [pc, #68]	; (8007980 <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE+0xa0>)
 800793c:	f018 fe26 	bl	802058c <__assert_func>
            DeadlineHandler::startWithDelay(owner_.request_timeout_);
 8007940:	68fc      	ldr	r4, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	f107 0310 	add.w	r3, r7, #16
 800794a:	3220      	adds	r2, #32
 800794c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007950:	e883 0003 	stmia.w	r3, {r0, r1}
 8007954:	f107 0310 	add.w	r3, r7, #16
 8007958:	4619      	mov	r1, r3
 800795a:	4620      	mov	r0, r4
 800795c:	f00d fbba 	bl	80150d4 <_ZN6uavcan15DeadlineHandler14startWithDelayENS_17MonotonicDurationE>
 8007960:	f107 0310 	add.w	r3, r7, #16
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fca8 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        }
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4618      	mov	r0, r3
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	bd90      	pop	{r4, r7, pc}
 8007974:	0802a0f0 	.word	0x0802a0f0
 8007978:	08021cc4 	.word	0x08021cc4
 800797c:	08029338 	.word	0x08029338
 8007980:	08021cd4 	.word	0x08021cd4

08007984 <_ZNK6uavcan17ServiceClientBase9CallState9getCallIDEv>:

        ServiceCallID getCallID() const { return id_; }
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8b1b      	ldrh	r3, [r3, #24]
 8007990:	81bb      	strh	r3, [r7, #12]
 8007992:	2300      	movs	r3, #0
 8007994:	7b3a      	ldrb	r2, [r7, #12]
 8007996:	f362 0307 	bfi	r3, r2, #0, #8
 800799a:	7b7a      	ldrb	r2, [r7, #13]
 800799c:	f362 230f 	bfi	r3, r2, #8, #8
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <_ZNK6uavcan17ServiceClientBase9CallState11hasTimedOutEv>:

        bool hasTimedOut() const { return timed_out_; }
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7e9b      	ldrb	r3, [r3, #26]
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <_ZN6uavcan17ServiceClientBase9CallState20hasTimedOutPredicateERKS1_>:

        static bool hasTimedOutPredicate(const CallState& cs) { return cs.hasTimedOut(); }
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ffed 	bl	80079ac <_ZNK6uavcan17ServiceClientBase9CallState11hasTimedOutEv>
 80079d2:	4603      	mov	r3, r0
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <_ZN6uavcan17ServiceClientBase26CallStateMatchingPredicateC1ENS_13ServiceCallIDE>:
    };

    struct CallStateMatchingPredicate
    {
        const ServiceCallID id;
        CallStateMatchingPredicate(ServiceCallID reference) : id(reference) { }
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	8039      	strh	r1, [r7, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	461a      	mov	r2, r3
 80079ea:	463b      	mov	r3, r7
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	8013      	strh	r3, [r2, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <_ZNK6uavcan17ServiceClientBase26CallStateMatchingPredicateclERKNS0_9CallStateE>:
        bool operator()(const CallState& state) const { return (state.getCallID() == id) && !state.hasTimedOut(); }
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
 8007a08:	6838      	ldr	r0, [r7, #0]
 8007a0a:	f7ff ffbb 	bl	8007984 <_ZNK6uavcan17ServiceClientBase9CallState9getCallIDEv>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	81bb      	strh	r3, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f107 000c 	add.w	r0, r7, #12
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	2300      	movs	r3, #0
 8007a22:	f362 030f 	bfi	r3, r2, #0, #16
 8007a26:	4619      	mov	r1, r3
 8007a28:	f7ff ff2d 	bl	8007886 <_ZNK6uavcan13ServiceCallIDeqES0_>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <_ZNK6uavcan17ServiceClientBase26CallStateMatchingPredicateclERKNS0_9CallStateE+0x4a>
 8007a32:	6838      	ldr	r0, [r7, #0]
 8007a34:	f7ff ffba 	bl	80079ac <_ZNK6uavcan17ServiceClientBase9CallState11hasTimedOutEv>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f083 0301 	eor.w	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <_ZNK6uavcan17ServiceClientBase26CallStateMatchingPredicateclERKNS0_9CallStateE+0x4a>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e000      	b.n	8007a4a <_ZNK6uavcan17ServiceClientBase26CallStateMatchingPredicateclERKNS0_9CallStateE+0x4c>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <_ZN6uavcan25ITransferAcceptanceFilterC1Ev>:
class ITransferAcceptanceFilter
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	4a04      	ldr	r2, [pc, #16]	; (8007a70 <_ZN6uavcan25ITransferAcceptanceFilterC1Ev+0x1c>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	08025220 	.word	0x08025220

08007a74 <_ZN6uavcan17ServiceClientBaseC1ERNS_5INodeE>:
        bool operator()(const CallState& state) const { return state.getCallID().server_node_id == server_node_id; }
    };

    MonotonicDuration request_timeout_;

    ServiceClientBase(INode& node)
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
        : DeadlineHandler(node.getScheduler())
        , data_type_descriptor_(UAVCAN_NULLPTR)
        , request_timeout_(getDefaultRequestTimeout())
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff ffe7 	bl	8007a54 <_ZN6uavcan25ITransferAcceptanceFilterC1Ev>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f103 0408 	add.w	r4, r3, #8
        : DeadlineHandler(node.getScheduler())
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	330c      	adds	r3, #12
 8007a92:	681b      	ldr	r3, [r3, #0]
        , request_timeout_(getDefaultRequestTimeout())
 8007a94:	6838      	ldr	r0, [r7, #0]
 8007a96:	4798      	blx	r3
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f7fe fe2d 	bl	80066fc <_ZN6uavcan15DeadlineHandlerC1ERNS_9SchedulerE>
 8007aa2:	4a09      	ldr	r2, [pc, #36]	; (8007ac8 <_ZN6uavcan17ServiceClientBaseC1ERNS_5INodeE+0x54>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	4a08      	ldr	r2, [pc, #32]	; (8007acc <_ZN6uavcan17ServiceClientBaseC1ERNS_5INodeE+0x58>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	609a      	str	r2, [r3, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	61da      	str	r2, [r3, #28]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3320      	adds	r3, #32
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f842 	bl	8007b42 <_ZN6uavcan17ServiceClientBase24getDefaultRequestTimeoutEv>
    { }
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd90      	pop	{r4, r7, pc}
 8007ac8:	080250dc 	.word	0x080250dc
 8007acc:	080250f0 	.word	0x080250f0

08007ad0 <_ZN6uavcan17ServiceClientBaseD1Ev>:

    virtual ~ServiceClientBase() { }
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <_ZN6uavcan17ServiceClientBaseD1Ev+0x3c>)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	4a0c      	ldr	r2, [pc, #48]	; (8007b10 <_ZN6uavcan17ServiceClientBaseD1Ev+0x40>)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	609a      	str	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3320      	adds	r3, #32
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fbe6 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3308      	adds	r3, #8
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fe1e 	bl	8006734 <_ZN6uavcan15DeadlineHandlerD1Ev>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fc64 	bl	80063c8 <_ZN6uavcan25ITransferAcceptanceFilterD1Ev>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	080250dc 	.word	0x080250dc
 8007b10:	080250f0 	.word	0x080250f0

08007b14 <_ZThn8_N6uavcan17ServiceClientBaseD1Ev>:
 8007b14:	f1a0 0008 	sub.w	r0, r0, #8
 8007b18:	e7da      	b.n	8007ad0 <_ZN6uavcan17ServiceClientBaseD1Ev>
 8007b1a:	bf00      	nop

08007b1c <_ZN6uavcan17ServiceClientBaseD0Ev>:
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff ffd3 	bl	8007ad0 <_ZN6uavcan17ServiceClientBaseD1Ev>
 8007b2a:	2128      	movs	r1, #40	; 0x28
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f018 fd0c 	bl	802054a <_ZdlPvj>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <_ZThn8_N6uavcan17ServiceClientBaseD0Ev>:
 8007b3c:	f1a0 0008 	sub.w	r0, r0, #8
 8007b40:	e7ec      	b.n	8007b1c <_ZN6uavcan17ServiceClientBaseD0Ev>

08007b42 <_ZN6uavcan17ServiceClientBase24getDefaultRequestTimeoutEv>:
public:
    /**
     * It's not recommended to override default timeouts.
     * Change of this value will not affect pending calls.
     */
    static MonotonicDuration getDefaultRequestTimeout() { return MonotonicDuration::fromMSec(1000); }
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b50:	f04f 0300 	mov.w	r3, #0
 8007b54:	4608      	mov	r0, r1
 8007b56:	f000 fd81 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <_ZN6uavcan17ServiceClientBase20getMinRequestTimeoutEv>:
    static MonotonicDuration getMinRequestTimeout() { return MonotonicDuration::fromMSec(10); }
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	f04f 020a 	mov.w	r2, #10
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	4608      	mov	r0, r1
 8007b76:	f000 fd71 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <_ZN6uavcan17ServiceClientBase20getMaxRequestTimeoutEv>:
    static MonotonicDuration getMaxRequestTimeout() { return MonotonicDuration::fromMSec(60000); }
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	4608      	mov	r0, r1
 8007b96:	f000 fd61 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <_ZN12uavcan_stm328BusEventC1ERNS_9CanDriverE>:
{
    SemaphoreHandle_t sem_;
    BaseType_t higher_priority_task_woken;

public:
    BusEvent(CanDriver& can_driver)
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
    {
        (void)can_driver;
        sem_ = xSemaphoreCreateBinary();
 8007bac:	2203      	movs	r2, #3
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f7fb fe0d 	bl	80037d0 <xQueueGenericCreate>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	601a      	str	r2, [r3, #0]
    }
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <_ZN12uavcan_stm329CanRxItemC1Ev>:
struct CanRxItem
{
    uavcan::uint64_t utc_usec;
    uavcan::CanFrame frame;
    uavcan::CanIOFlags flags;
    CanRxItem()
 8007bc6:	b590      	push	{r4, r7, lr}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
        : utc_usec(0)
        , flags(0)
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	f04f 0400 	mov.w	r4, #0
 8007bd8:	e9c2 3400 	strd	r3, r4, [r2]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3308      	adds	r3, #8
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fa1b 	bl	800601c <_ZN6uavcan8CanFrameC1Ev>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	831a      	strh	r2, [r3, #24]
    { }
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd90      	pop	{r4, r7, pc}

08007bf6 <_ZN12uavcan_stm328CanIface7RxQueueC1EPNS_9CanRxItemEh>:
        uavcan::uint32_t overflow_cnt_;

        void registerOverflow();

    public:
        RxQueue(CanRxItem* buf, uavcan::uint8_t capacity)
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	4613      	mov	r3, r2
 8007c02:	71fb      	strb	r3, [r7, #7]
            : buf_(buf)
            , capacity_(capacity)
            , in_(0)
            , out_(0)
            , len_(0)
            , overflow_cnt_(0)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	79fa      	ldrb	r2, [r7, #7]
 8007c0e:	711a      	strb	r2, [r3, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	715a      	strb	r2, [r3, #5]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	719a      	strb	r2, [r3, #6]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	71da      	strb	r2, [r3, #7]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	609a      	str	r2, [r3, #8]
        { }
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <_ZN12uavcan_stm328CanIface6TxItemC1Ev>:
        uavcan::CanFrame frame;
        bool pending;
        bool loopback;
        bool abort_on_error;

        TxItem()
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
            : pending(false)
            , loopback(false)
            , abort_on_error(false)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fa5a 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe f9e6 	bl	800601c <_ZN6uavcan8CanFrameC1Ev>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	761a      	strb	r2, [r3, #24]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	765a      	strb	r2, [r3, #25]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	769a      	strb	r2, [r3, #26]
        { }
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <_ZN6uavcan9ICanIfaceC1Ev>:
class UAVCAN_EXPORT ICanIface
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <_ZN6uavcan9ICanIfaceC1Ev+0x1c>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	08025254 	.word	0x08025254

08007c8c <_ZN12uavcan_stm328CanIface6TxItemD1Ev>:
    struct TxItem
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fa3c 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh>:
    {
        NormalMode,
        SilentMode
    };

    CanIface(bxcan::CanType* can, BusEvent& update_event, uavcan::uint8_t self_index,
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	70fb      	strb	r3, [r7, #3]
        , error_cnt_(0)
        , served_aborts_cnt_(0)
        , update_event_(update_event)
        , peak_tx_mailbox_index_(0)
        , self_index_(self_index)
        , had_activity_(false)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff ffd7 	bl	8007c6c <_ZN6uavcan9ICanIfaceC1Ev>
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f7fd fe8d 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8007cc4:	4a21      	ldr	r2, [pc, #132]	; (8007d4c <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0xa4>)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007cd2:	6a39      	ldr	r1, [r7, #32]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff ff8e 	bl	8007bf6 <_ZN12uavcan_stm328CanIface7RxQueueC1EPNS_9CanRxItemEh>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	611a      	str	r2, [r3, #16]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	f04f 0300 	mov.w	r3, #0
 8007ce6:	f04f 0400 	mov.w	r4, #0
 8007cea:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	621a      	str	r2, [r3, #32]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	625a      	str	r2, [r3, #36]	; 0x24
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3328      	adds	r3, #40	; 0x28
 8007cfe:	2402      	movs	r4, #2
 8007d00:	461d      	mov	r5, r3
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	db05      	blt.n	8007d12 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0x6a>
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7ff ff95 	bl	8007c36 <_ZN12uavcan_stm328CanIface6TxItemC1Ev>
 8007d0c:	3520      	adds	r5, #32
 8007d0e:	3c01      	subs	r4, #1
 8007d10:	e7f7      	b.n	8007d02 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0x5a>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    {
        UAVCAN_ASSERT(self_index_ < UAVCAN_STM32_NUM_IFACES);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0x98>
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0xa8>)
 8007d36:	4a07      	ldr	r2, [pc, #28]	; (8007d54 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0xac>)
 8007d38:	21a2      	movs	r1, #162	; 0xa2
 8007d3a:	4807      	ldr	r0, [pc, #28]	; (8007d58 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh+0xb0>)
 8007d3c:	f018 fc26 	bl	802058c <__assert_func>
    }
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bdb0      	pop	{r4, r5, r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	0802c828 	.word	0x0802c828
 8007d50:	08021d20 	.word	0x08021d20
 8007d54:	08029830 	.word	0x08029830
 8007d58:	08021d30 	.word	0x08021d30

08007d5c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_19getDataTypeFullNameEv>:
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindService };
    enum { DefaultDataTypeID = 40 };

    static const char* getDataTypeFullName()
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
    {
        return "uavcan.protocol.file.BeginFirmwareUpdate";
 8007d60:	4b02      	ldr	r3, [pc, #8]	; (8007d6c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_19getDataTypeFullNameEv+0x10>)
    }
 8007d62:	4618      	mov	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	08021d84 	.word	0x08021d84

08007d70 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
inline ::uavcan::DataTypeSignature BeginFirmwareUpdate_::getDataTypeSignature()
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
    ::uavcan::DataTypeSignature signature(0x36A8B8AA5453257BULL);
 8007d78:	a30b      	add	r3, pc, #44	; (adr r3, 8007da8 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_20getDataTypeSignatureEv+0x38>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fd ffa8 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    Request::FieldTypes::source_node_id::extendDataTypeSignature(signature);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f836 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Request::FieldTypes::image_file_remote_path::extendDataTypeSignature(signature);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fca9 	bl	80096e2 <_ZN6uavcan8protocol4file5Path_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    Response::FieldTypes::error::extendDataTypeSignature(signature);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 f830 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    Response::FieldTypes::optional_error_message::extendDataTypeSignature(signature);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fcb5 	bl	8009706 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 8007d9c:	bf00      	nop
}
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	5453257b 	.word	0x5453257b
 8007dac:	36a8b8aa 	.word	0x36a8b8aa

08007db0 <__tcf_0>:
/* USER CODE BEGIN 0 */
constexpr unsigned NodePoolSize = 8192;
uavcan_stm32::CanInitHelper<> can;

uavcan::Node<NodePoolSize>& getNode() {
    static uavcan::Node<NodePoolSize> node(can.driver, uavcan_stm32::SystemClock::instance());
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__tcf_0+0xc>)
 8007db6:	f007 f8b9 	bl	800ef2c <_ZN6uavcan4NodeILj8192EED1Ev>
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20005e98 	.word	0x20005e98

08007dc0 <_Z7getNodev>:
uavcan::Node<NodePoolSize>& getNode() {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
    static uavcan::Node<NodePoolSize> node(can.driver, uavcan_stm32::SystemClock::instance());
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <_Z7getNodev+0x34>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <_Z7getNodev+0x2c>
 8007dd0:	f018 f8de 	bl	801ff90 <_ZN12uavcan_stm3211SystemClock8instanceEv>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4907      	ldr	r1, [pc, #28]	; (8007df8 <_Z7getNodev+0x38>)
 8007dda:	4808      	ldr	r0, [pc, #32]	; (8007dfc <_Z7getNodev+0x3c>)
 8007ddc:	f001 fe20 	bl	8009a20 <_ZN6uavcan4NodeILj8192EEC1ERNS_10ICanDriverERNS_12ISystemClockE>
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <_Z7getNodev+0x34>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	4806      	ldr	r0, [pc, #24]	; (8007e00 <_Z7getNodev+0x40>)
 8007de8:	f018 fbee 	bl	80205c8 <atexit>
    return node;
 8007dec:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <_Z7getNodev+0x3c>)
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20008480 	.word	0x20008480
 8007df8:	20005df8 	.word	0x20005df8
 8007dfc:	20005e98 	.word	0x20005e98
 8007e00:	08007db1 	.word	0x08007db1

08007e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e04:	b5b0      	push	{r4, r5, r7, lr}
 8007e06:	b08e      	sub	sp, #56	; 0x38
 8007e08:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e0a:	f7f8 fd37 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e0e:	f000 f85b 	bl	8007ec8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e12:	f000 f951 	bl	80080b8 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8007e16:	f000 f8ef 	bl	8007ff8 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8007e1a:	f000 f91b 	bl	8008054 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* USER CODE BEGIN 2 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	605a      	str	r2, [r3, #4]
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	60da      	str	r2, [r3, #12]
 8007e2c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_CAN1_CLK_ENABLE();
 8007e2e:	2300      	movs	r3, #0
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	4b21      	ldr	r3, [pc, #132]	; (8007eb8 <main+0xb4>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	4a20      	ldr	r2, [pc, #128]	; (8007eb8 <main+0xb4>)
 8007e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	; (8007eb8 <main+0xb4>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <main+0xb4>)
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <main+0xb4>)
 8007e54:	f043 0308 	orr.w	r3, r3, #8
 8007e58:	6313      	str	r3, [r2, #48]	; 0x30
 8007e5a:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <main+0xb4>)
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	683b      	ldr	r3, [r7, #0]
  /**CAN1 GPIO Configuration
  PD0     ------> CAN1_RX
  PD1     ------> CAN1_TX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e66:	2303      	movs	r3, #3
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e72:	2303      	movs	r3, #3
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007e76:	2309      	movs	r3, #9
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e7e:	4619      	mov	r1, r3
 8007e80:	480e      	ldr	r0, [pc, #56]	; (8007ebc <main+0xb8>)
 8007e82:	f7f8 fe41 	bl	8000b08 <HAL_GPIO_Init>

  DEBUG_Init();
 8007e86:	f000 f9c5 	bl	8008214 <_Z10DEBUG_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, CAN_THRAD_STACK_SIZE, defaultTaskBuffer, &defaultTaskControlBlock);
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <main+0xbc>)
 8007e8c:	f107 0408 	add.w	r4, r7, #8
 8007e90:	461d      	mov	r5, r3
 8007e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fb f9ee 	bl	8003286 <osThreadCreate>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <main+0xc0>)
 8007eae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007eb0:	f7fb f9e2 	bl	8003278 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007eb4:	e7fe      	b.n	8007eb4 <main+0xb0>
 8007eb6:	bf00      	nop
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	40020c00 	.word	0x40020c00
 8007ec0:	08021dbc 	.word	0x08021dbc
 8007ec4:	20004498 	.word	0x20004498

08007ec8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0ac      	sub	sp, #176	; 0xb0
 8007ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ece:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007ed2:	2234      	movs	r2, #52	; 0x34
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f018 fbd3 	bl	8020682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007edc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	609a      	str	r2, [r3, #8]
 8007ee8:	60da      	str	r2, [r3, #12]
 8007eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007eec:	f107 030c 	add.w	r3, r7, #12
 8007ef0:	225c      	movs	r2, #92	; 0x5c
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f018 fbc4 	bl	8020682 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	4b3c      	ldr	r3, [pc, #240]	; (8007ff0 <_Z18SystemClock_Configv+0x128>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	4a3b      	ldr	r2, [pc, #236]	; (8007ff0 <_Z18SystemClock_Configv+0x128>)
 8007f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0a:	4b39      	ldr	r3, [pc, #228]	; (8007ff0 <_Z18SystemClock_Configv+0x128>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	4b36      	ldr	r3, [pc, #216]	; (8007ff4 <_Z18SystemClock_Configv+0x12c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a35      	ldr	r2, [pc, #212]	; (8007ff4 <_Z18SystemClock_Configv+0x12c>)
 8007f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4b33      	ldr	r3, [pc, #204]	; (8007ff4 <_Z18SystemClock_Configv+0x12c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f2e:	607b      	str	r3, [r7, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007f36:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007f52:	23a8      	movs	r3, #168	; 0xa8
 8007f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007f5e:	2307      	movs	r3, #7
 8007f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007f64:	2302      	movs	r3, #2
 8007f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7f9 fed0 	bl	8001d14 <HAL_RCC_OscConfig>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bf14      	ite	ne
 8007f7a:	2301      	movne	r3, #1
 8007f7c:	2300      	moveq	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8007f84:	f000 fb02 	bl	800858c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f88:	230f      	movs	r3, #15
 8007f8a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f90:	2300      	movs	r3, #0
 8007f92:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007f94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007f98:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f9e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007fa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007fa4:	2105      	movs	r1, #5
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7f9 f8a2 	bl	80010f0 <HAL_RCC_ClockConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	2300      	moveq	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <_Z18SystemClock_Configv+0xf8>
  {
    Error_Handler();
 8007fbc:	f000 fae6 	bl	800858c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f9 f9d6 	bl	8001380 <HAL_RCCEx_PeriphCLKConfig>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bf14      	ite	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	2300      	moveq	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <_Z18SystemClock_Configv+0x120>
  {
    Error_Handler();
 8007fe4:	f000 fad2 	bl	800858c <Error_Handler>
  }
}
 8007fe8:	bf00      	nop
 8007fea:	37b0      	adds	r7, #176	; 0xb0
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	40007000 	.word	0x40007000

08007ff8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007ffc:	4b13      	ldr	r3, [pc, #76]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 8007ffe:	4a14      	ldr	r2, [pc, #80]	; (8008050 <_ZL19MX_USART3_UART_Initv+0x58>)
 8008000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 8008004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800800a:	4b10      	ldr	r3, [pc, #64]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 800800c:	2200      	movs	r2, #0
 800800e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 8008012:	2200      	movs	r2, #0
 8008014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008016:	4b0d      	ldr	r3, [pc, #52]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 8008018:	2200      	movs	r2, #0
 800801a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 800801e:	220c      	movs	r2, #12
 8008020:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008022:	4b0a      	ldr	r3, [pc, #40]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 8008024:	2200      	movs	r2, #0
 8008026:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 800802a:	2200      	movs	r2, #0
 800802c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800802e:	4807      	ldr	r0, [pc, #28]	; (800804c <_ZL19MX_USART3_UART_Initv+0x54>)
 8008030:	f7fa fb08 	bl	8002644 <HAL_UART_Init>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	bf14      	ite	ne
 800803a:	2301      	movne	r3, #1
 800803c:	2300      	moveq	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8008044:	f000 faa2 	bl	800858c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008048:	bf00      	nop
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20004050 	.word	0x20004050
 8008050:	40004800 	.word	0x40004800

08008054 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800805a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800805e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008060:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008062:	2206      	movs	r2, #6
 8008064:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008068:	2202      	movs	r2, #2
 800806a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800806c:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800806e:	2200      	movs	r2, #0
 8008070:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008074:	2202      	movs	r2, #2
 8008076:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008078:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800807a:	2201      	movs	r2, #1
 800807c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800807e:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008080:	2200      	movs	r2, #0
 8008082:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008086:	2200      	movs	r2, #0
 8008088:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800808a:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800808c:	2201      	movs	r2, #1
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008090:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008092:	2200      	movs	r2, #0
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008096:	4807      	ldr	r0, [pc, #28]	; (80080b4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8008098:	f7f8 fee1 	bl	8000e5e <HAL_PCD_Init>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 80080ac:	f000 fa6e 	bl	800858c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80080b0:	bf00      	nop
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20004090 	.word	0x20004090

080080b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08c      	sub	sp, #48	; 0x30
 80080bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080be:	f107 031c 	add.w	r3, r7, #28
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	605a      	str	r2, [r3, #4]
 80080c8:	609a      	str	r2, [r3, #8]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080ce:	2300      	movs	r3, #0
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	4b4b      	ldr	r3, [pc, #300]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	4a4a      	ldr	r2, [pc, #296]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 80080d8:	f043 0304 	orr.w	r3, r3, #4
 80080dc:	6313      	str	r3, [r2, #48]	; 0x30
 80080de:	4b48      	ldr	r3, [pc, #288]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	4b44      	ldr	r3, [pc, #272]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	4a43      	ldr	r2, [pc, #268]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	6313      	str	r3, [r2, #48]	; 0x30
 80080fa:	4b41      	ldr	r3, [pc, #260]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	4b3d      	ldr	r3, [pc, #244]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	4a3c      	ldr	r2, [pc, #240]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008110:	f043 0302 	orr.w	r3, r3, #2
 8008114:	6313      	str	r3, [r2, #48]	; 0x30
 8008116:	4b3a      	ldr	r3, [pc, #232]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	4a35      	ldr	r2, [pc, #212]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 800812c:	f043 0308 	orr.w	r3, r3, #8
 8008130:	6313      	str	r3, [r2, #48]	; 0x30
 8008132:	4b33      	ldr	r3, [pc, #204]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800813e:	2300      	movs	r3, #0
 8008140:	60bb      	str	r3, [r7, #8]
 8008142:	4b2f      	ldr	r3, [pc, #188]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008146:	4a2e      	ldr	r2, [pc, #184]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800814c:	6313      	str	r3, [r2, #48]	; 0x30
 800814e:	4b2c      	ldr	r3, [pc, #176]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008156:	60bb      	str	r3, [r7, #8]
 8008158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800815a:	2300      	movs	r3, #0
 800815c:	607b      	str	r3, [r7, #4]
 800815e:	4b28      	ldr	r3, [pc, #160]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	4a27      	ldr	r2, [pc, #156]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	6313      	str	r3, [r2, #48]	; 0x30
 800816a:	4b25      	ldr	r3, [pc, #148]	; (8008200 <_ZL12MX_GPIO_Initv+0x148>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	607b      	str	r3, [r7, #4]
 8008174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008176:	2200      	movs	r2, #0
 8008178:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800817c:	4821      	ldr	r0, [pc, #132]	; (8008204 <_ZL12MX_GPIO_Initv+0x14c>)
 800817e:	f7f8 fe55 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008182:	2200      	movs	r2, #0
 8008184:	2140      	movs	r1, #64	; 0x40
 8008186:	4820      	ldr	r0, [pc, #128]	; (8008208 <_ZL12MX_GPIO_Initv+0x150>)
 8008188:	f7f8 fe50 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800818c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008192:	4b1e      	ldr	r3, [pc, #120]	; (800820c <_ZL12MX_GPIO_Initv+0x154>)
 8008194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008196:	2300      	movs	r3, #0
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800819a:	f107 031c 	add.w	r3, r7, #28
 800819e:	4619      	mov	r1, r3
 80081a0:	481b      	ldr	r0, [pc, #108]	; (8008210 <_ZL12MX_GPIO_Initv+0x158>)
 80081a2:	f7f8 fcb1 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80081a6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80081aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081ac:	2301      	movs	r3, #1
 80081ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081b4:	2300      	movs	r3, #0
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081b8:	f107 031c 	add.w	r3, r7, #28
 80081bc:	4619      	mov	r1, r3
 80081be:	4811      	ldr	r0, [pc, #68]	; (8008204 <_ZL12MX_GPIO_Initv+0x14c>)
 80081c0:	f7f8 fca2 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80081c4:	2340      	movs	r3, #64	; 0x40
 80081c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081c8:	2301      	movs	r3, #1
 80081ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081d0:	2300      	movs	r3, #0
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80081d4:	f107 031c 	add.w	r3, r7, #28
 80081d8:	4619      	mov	r1, r3
 80081da:	480b      	ldr	r0, [pc, #44]	; (8008208 <_ZL12MX_GPIO_Initv+0x150>)
 80081dc:	f7f8 fc94 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80081e0:	2380      	movs	r3, #128	; 0x80
 80081e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081e4:	2300      	movs	r3, #0
 80081e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80081ec:	f107 031c 	add.w	r3, r7, #28
 80081f0:	4619      	mov	r1, r3
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <_ZL12MX_GPIO_Initv+0x150>)
 80081f4:	f7f8 fc88 	bl	8000b08 <HAL_GPIO_Init>

}
 80081f8:	bf00      	nop
 80081fa:	3730      	adds	r7, #48	; 0x30
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	40020400 	.word	0x40020400
 8008208:	40021800 	.word	0x40021800
 800820c:	10110000 	.word	0x10110000
 8008210:	40020800 	.word	0x40020800

08008214 <_Z10DEBUG_Initv>:

/* USER CODE BEGIN 4 */
bool DEBUG_Init(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
    if ((DEBUG_TX_completeID = osSemaphoreCreate(osSemaphore(DEBUG_TX_complete), 1)) == NULL)
 8008218:	2101      	movs	r1, #1
 800821a:	480a      	ldr	r0, [pc, #40]	; (8008244 <_Z10DEBUG_Initv+0x30>)
 800821c:	f7fb f893 	bl	8003346 <osSemaphoreCreate>
 8008220:	4602      	mov	r2, r0
 8008222:	4b09      	ldr	r3, [pc, #36]	; (8008248 <_Z10DEBUG_Initv+0x34>)
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	4b08      	ldr	r3, [pc, #32]	; (8008248 <_Z10DEBUG_Initv+0x34>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	bf0c      	ite	eq
 800822e:	2301      	moveq	r3, #1
 8008230:	2300      	movne	r3, #0
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <_Z10DEBUG_Initv+0x28>
    {
        return false;
 8008238:	2300      	movs	r3, #0
 800823a:	e000      	b.n	800823e <_Z10DEBUG_Initv+0x2a>
    }
    return true;
 800823c:	2301      	movs	r3, #1
}
 800823e:	4618      	mov	r0, r3
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	08024fe8 	.word	0x08024fe8
 8008248:	20004cf0 	.word	0x20004cf0

0800824c <_Z12DEBUG_PrintfPKcz>:

void DEBUG_Printf(const char *fmt, ...)
{
 800824c:	b40f      	push	{r0, r1, r2, r3}
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
    uint16_t i = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	80bb      	strh	r3, [r7, #4]
    va_list args;
    if (osSemaphoreWait(DEBUG_TX_completeID, 1000) == osOK)
 8008258:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <_Z12DEBUG_PrintfPKcz+0x9c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008260:	4618      	mov	r0, r3
 8008262:	f7fb f8a3 	bl	80033ac <osSemaphoreWait>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	bf0c      	ite	eq
 800826c:	2301      	moveq	r3, #1
 800826e:	2300      	movne	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d030      	beq.n	80082d8 <_Z12DEBUG_PrintfPKcz+0x8c>
    {
        va_start(args, fmt);
 8008276:	f107 0314 	add.w	r3, r7, #20
 800827a:	603b      	str	r3, [r7, #0]
        i = vsnprintf((char*) DEBUG_TX_Buffer, DEBUG_BUFFER_SIZE - 1, fmt, args);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	21ff      	movs	r1, #255	; 0xff
 8008282:	481a      	ldr	r0, [pc, #104]	; (80082ec <_Z12DEBUG_PrintfPKcz+0xa0>)
 8008284:	f018 fe08 	bl	8020e98 <vsniprintf>
 8008288:	4603      	mov	r3, r0
 800828a:	80bb      	strh	r3, [r7, #4]
        DEBUG_TX_Buffer[i] = 0x00;
 800828c:	88bb      	ldrh	r3, [r7, #4]
 800828e:	4a17      	ldr	r2, [pc, #92]	; (80082ec <_Z12DEBUG_PrintfPKcz+0xa0>)
 8008290:	2100      	movs	r1, #0
 8008292:	54d1      	strb	r1, [r2, r3]

        uint16_t retry = 4096;
 8008294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008298:	80fb      	strh	r3, [r7, #6]

        while ((retry--)&&(HAL_UART_Transmit(&huart3, &DEBUG_TX_Buffer[0], strlen((char*)&DEBUG_TX_Buffer[0]), 0xFFF) != HAL_OK));
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	80fa      	strh	r2, [r7, #6]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00f      	beq.n	80082c4 <_Z12DEBUG_PrintfPKcz+0x78>
 80082a4:	4811      	ldr	r0, [pc, #68]	; (80082ec <_Z12DEBUG_PrintfPKcz+0xa0>)
 80082a6:	f7f7 ffb3 	bl	8000210 <strlen>
 80082aa:	4603      	mov	r3, r0
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f640 73ff 	movw	r3, #4095	; 0xfff
 80082b2:	490e      	ldr	r1, [pc, #56]	; (80082ec <_Z12DEBUG_PrintfPKcz+0xa0>)
 80082b4:	480e      	ldr	r0, [pc, #56]	; (80082f0 <_Z12DEBUG_PrintfPKcz+0xa4>)
 80082b6:	f7fa fa12 	bl	80026de <HAL_UART_Transmit>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <_Z12DEBUG_PrintfPKcz+0x78>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <_Z12DEBUG_PrintfPKcz+0x7a>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d000      	beq.n	80082cc <_Z12DEBUG_PrintfPKcz+0x80>
 80082ca:	e7e6      	b.n	800829a <_Z12DEBUG_PrintfPKcz+0x4e>

        va_end(args);
        osSemaphoreRelease(DEBUG_TX_completeID);
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <_Z12DEBUG_PrintfPKcz+0x9c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fb f8b9 	bl	8003448 <osSemaphoreRelease>
    }
    return;
 80082d6:	bf00      	nop
 80082d8:	bf00      	nop
}
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e2:	b004      	add	sp, #16
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20004cf0 	.word	0x20004cf0
 80082ec:	20004cf4 	.word	0x20004cf4
 80082f0:	20004050 	.word	0x20004050

080082f4 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fcc0 	bl	8006c84 <_ZNSt14_Function_baseD1Ev>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <_ZZ16StartDefaultTaskENKUlRKN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEE_clES6_>:
    if (client_init_res < 0)
    {
    	DEBUG_Printf("Failed to init the client\r\n");
    }

    client.setCallback([](const uavcan::ServiceCallResult<BeginFirmwareUpdate>& call_result)
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
    {
    	if (call_result.isSuccessful())  // Whether the call was successful, i.e. whether the response was received
 800831a:	6838      	ldr	r0, [r7, #0]
 800831c:	f001 fd5e 	bl	8009ddc <_ZNK6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EE12isSuccessfulEv>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10e      	bne.n	8008344 <_ZZ16StartDefaultTaskENKUlRKN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEE_clES6_+0x34>
    		// The result can be directly streamed; the output will be formatted in human-readable YAML.
    		//DEBUG_Printf("%s\r\n", call_result);
    	}
    	else
    	{
    		DEBUG_Printf("Service call to node %d has failed\r\n", static_cast<int>(call_result.getCallID().server_node_id.get()));
 8008326:	6838      	ldr	r0, [r7, #0]
 8008328:	f001 fd69 	bl	8009dfe <_ZNK6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EE9getCallIDEv>
 800832c:	4603      	mov	r3, r0
 800832e:	81bb      	strh	r3, [r7, #12]
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4618      	mov	r0, r3
 8008336:	f7fd fc37 	bl	8005ba8 <_ZNK6uavcan6NodeID3getEv>
 800833a:	4603      	mov	r3, r0
 800833c:	4619      	mov	r1, r3
 800833e:	4803      	ldr	r0, [pc, #12]	; (800834c <_ZZ16StartDefaultTaskENKUlRKN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEE_clES6_+0x3c>)
 8008340:	f7ff ff84 	bl	800824c <_Z12DEBUG_PrintfPKcz>
    	}
    });
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	08021dd8 	.word	0x08021dd8

08008350 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EED1Ev>:
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4618      	mov	r0, r3
 800835c:	f001 fdbe 	bl	8009edc <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EED1Ev>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <_ZN6uavcan8protocol4file5Path_ILi0EED1Ev>:
{
namespace file
{

template <int _tmpl>
struct UAVCAN_EXPORT Path_
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff ffeb 	bl	8008350 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EED1Ev>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EED1Ev>:
    struct Request_
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3301      	adds	r3, #1
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ffea 	bl	800836a <_ZN6uavcan8protocol4file5Path_ILi0EED1Ev>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <StartDefaultTask>:
{
 80083a0:	b5b0      	push	{r4, r5, r7, lr}
 80083a2:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	1d3b      	adds	r3, r7, #4
 80083aa:	6018      	str	r0, [r3, #0]
	uint32_t value = 1000000;
 80083ac:	4b66      	ldr	r3, [pc, #408]	; (8008548 <StartDefaultTask+0x1a8>)
 80083ae:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	can.init(value);
 80083b2:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80083b6:	4865      	ldr	r0, [pc, #404]	; (800854c <StartDefaultTask+0x1ac>)
 80083b8:	f001 fb86 	bl	8009ac8 <_ZN12uavcan_stm3213CanInitHelperILj128EE4initEm>
	getNode().setName("org.test.ServiceClient");
 80083bc:	f7ff fd00 	bl	8007dc0 <_Z7getNodev>
 80083c0:	4604      	mov	r4, r0
 80083c2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80083c6:	4962      	ldr	r1, [pc, #392]	; (8008550 <StartDefaultTask+0x1b0>)
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fb8f 	bl	8009aec <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1EPKc>
 80083ce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80083d2:	4619      	mov	r1, r3
 80083d4:	4620      	mov	r0, r4
 80083d6:	f001 fb9b 	bl	8009b10 <_ZN6uavcan4NodeILj8192EE7setNameERKNS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEE>
 80083da:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fd20 	bl	8006e24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>
	getNode().setNodeID(5);
 80083e4:	f7ff fcec 	bl	8007dc0 <_Z7getNodev>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461c      	mov	r4, r3
 80083ec:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80083f0:	2105      	movs	r1, #5
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd fbb8 	bl	8005b68 <_ZN6uavcan6NodeIDC1Eh>
 80083f8:	f897 11e4 	ldrb.w	r1, [r7, #484]	; 0x1e4
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7fe fac9 	bl	8006994 <_ZN6uavcan5INode9setNodeIDENS_6NodeIDE>
	if (getNode().start() < 0) {
 8008402:	f7ff fcdd 	bl	8007dc0 <_Z7getNodev>
 8008406:	4602      	mov	r2, r0
 8008408:	4b52      	ldr	r3, [pc, #328]	; (8008554 <StartDefaultTask+0x1b4>)
 800840a:	7819      	ldrb	r1, [r3, #0]
 800840c:	4610      	mov	r0, r2
 800840e:	f001 fb8f 	bl	8009b30 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE>
 8008412:	4603      	mov	r3, r0
 8008414:	0fdb      	lsrs	r3, r3, #31
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <StartDefaultTask+0x84>
		DEBUG_Printf("UAVCAN start fail\r\n");
 800841c:	484e      	ldr	r0, [pc, #312]	; (8008558 <StartDefaultTask+0x1b8>)
 800841e:	f7ff ff15 	bl	800824c <_Z12DEBUG_PrintfPKcz>
	    while (1);
 8008422:	e7fe      	b.n	8008422 <StartDefaultTask+0x82>
	uavcan::ServiceClient<BeginFirmwareUpdate> client(getNode());
 8008424:	f7ff fccc 	bl	8007dc0 <_Z7getNodev>
 8008428:	4603      	mov	r3, r0
 800842a:	461c      	mov	r4, r3
 800842c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8008430:	4618      	mov	r0, r3
 8008432:	f001 fbf7 	bl	8009c24 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1Ev>
 8008436:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800843a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800843e:	4621      	mov	r1, r4
 8008440:	4618      	mov	r0, r3
 8008442:	f001 fbfd 	bl	8009c40 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEEC1ERNS_5INodeERKSA_>
 8008446:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff ff52 	bl	80082f4 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEED1Ev>
    const int client_init_res = client.init();
 8008450:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fcb3 	bl	8009dc0 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4initEv>
 800845a:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
    if (client_init_res < 0)
 800845e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8008462:	2b00      	cmp	r3, #0
 8008464:	da02      	bge.n	800846c <StartDefaultTask+0xcc>
    	DEBUG_Printf("Failed to init the client\r\n");
 8008466:	483d      	ldr	r0, [pc, #244]	; (800855c <StartDefaultTask+0x1bc>)
 8008468:	f7ff fef0 	bl	800824c <_Z12DEBUG_PrintfPKcz>
    client.setCallback([](const uavcan::ServiceCallResult<BeginFirmwareUpdate>& call_result)
 800846c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8008470:	4629      	mov	r1, r5
 8008472:	4618      	mov	r0, r3
 8008474:	f001 fce6 	bl	8009e44 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1IZ16StartDefaultTaskEUlS7_E_vvEET_>
 8008478:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800847c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008480:	4611      	mov	r1, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f001 fd08 	bl	8009e98 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE11setCallbackERKSA_>
 8008488:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff ff31 	bl	80082f4 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEED1Ev>

    BeginFirmwareUpdate::Request request;
 8008492:	f107 030c 	add.w	r3, r7, #12
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fd0d 	bl	8009eb6 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EEC1Ev>

    const int call_res = client.call(127, request);
 800849c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80084a0:	217f      	movs	r1, #127	; 0x7f
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fd fb60 	bl	8005b68 <_ZN6uavcan6NodeIDC1Eh>
 80084a8:	f107 020c 	add.w	r2, r7, #12
 80084ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80084b0:	f897 120c 	ldrb.w	r1, [r7, #524]	; 0x20c
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fd1e 	bl	8009ef6 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEE>
 80084ba:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    if (call_res < 0)
 80084be:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da02      	bge.n	80084cc <StartDefaultTask+0x12c>
    {
    	DEBUG_Printf("Unable to perform service call:\r\n");
 80084c6:	4826      	ldr	r0, [pc, #152]	; (8008560 <StartDefaultTask+0x1c0>)
 80084c8:	f7ff fec0 	bl	800824c <_Z12DEBUG_PrintfPKcz>
    }

	getNode().setModeOperational();
 80084cc:	f7ff fc78 	bl	8007dc0 <_Z7getNodev>
 80084d0:	4603      	mov	r3, r0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 fd26 	bl	8009f24 <_ZN6uavcan4NodeILj8192EE18setModeOperationalEv>
  /* Infinite loop */
  while(client.hasPendingCalls())
 80084d8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fd2f 	bl	8009f40 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE15hasPendingCallsEv>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d020      	beq.n	800852a <StartDefaultTask+0x18a>
  {
	    const int res = getNode().spin(uavcan::MonotonicDuration::fromMSec(500));
 80084e8:	f7ff fc6a 	bl	8007dc0 <_Z7getNodev>
 80084ec:	4604      	mov	r4, r0
 80084ee:	f507 7104 	add.w	r1, r7, #528	; 0x210
 80084f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	4608      	mov	r0, r1
 80084fc:	f000 f8ae 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 8008500:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008504:	4619      	mov	r1, r3
 8008506:	4620      	mov	r0, r4
 8008508:	f001 fd2b 	bl	8009f62 <_ZN6uavcan4NodeILj8192EE4spinENS_17MonotonicDurationE>
 800850c:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
 8008510:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008514:	4618      	mov	r0, r3
 8008516:	f7fd fed0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
	    if (res < 0) {
 800851a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800851e:	2b00      	cmp	r3, #0
 8008520:	dada      	bge.n	80084d8 <StartDefaultTask+0x138>
	    	DEBUG_Printf("UAVCAN spin fail\r\n");
 8008522:	4810      	ldr	r0, [pc, #64]	; (8008564 <StartDefaultTask+0x1c4>)
 8008524:	f7ff fe92 	bl	800824c <_Z12DEBUG_PrintfPKcz>
	    	while(1);
 8008528:	e7fe      	b.n	8008528 <StartDefaultTask+0x188>
    BeginFirmwareUpdate::Request request;
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff ff28 	bl	8008384 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EED1Ev>
	uavcan::ServiceClient<BeginFirmwareUpdate> client(getNode());
 8008534:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008538:	4618      	mov	r0, r3
 800853a:	f001 fbf1 	bl	8009d20 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>
	    }
  }
  /* USER CODE END 5 */ 
}
 800853e:	bf00      	nop
 8008540:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8008544:	46bd      	mov	sp, r7
 8008546:	bdb0      	pop	{r4, r5, r7, pc}
 8008548:	000f4240 	.word	0x000f4240
 800854c:	20004df8 	.word	0x20004df8
 8008550:	08021e00 	.word	0x08021e00
 8008554:	200085f0 	.word	0x200085f0
 8008558:	08021e18 	.word	0x08021e18
 800855c:	08021e2c 	.word	0x08021e2c
 8008560:	08021e48 	.word	0x08021e48
 8008564:	08021e6c 	.word	0x08021e6c

08008568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d101      	bne.n	800857e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800857a:	f7f8 f9a1 	bl	80008c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	40010000 	.word	0x40010000

0800858c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800858c:	b480      	push	{r7}
 800858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008590:	bf00      	nop
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEEC1Ev>:
    LinkedListNode()
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fd fa1b 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
    { }
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEED1Ev>:
    ~LinkedListNode() { }
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7fd fa17 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>:
void fill(ForwardIt first, ForwardIt last, const T& value)
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
    while (first != last)
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d007      	beq.n	80085f4 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_+0x24>
        *first = value;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	781a      	ldrb	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	701a      	strb	r2, [r3, #0]
        ++first;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3301      	adds	r3, #1
 80085f0:	60fb      	str	r3, [r7, #12]
    while (first != last)
 80085f2:	e7f3      	b.n	80085dc <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_+0xc>
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEC1Ev>:
    TimeBase()
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
        : usec_(0)
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	f04f 0400 	mov.w	r4, #0
 8008612:	e9c2 3400 	strd	r3, r4, [r2]
        StaticAssert<(sizeof(T) == 8)>::check();
 8008616:	f7fd f9db 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(sizeof(D) == 8)>::check();
 800861a:	f7fd f9d9 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	bd90      	pop	{r4, r7, pc}

08008628 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEED1Ev>:
    ~TimeBase() { }
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEEC1Ev>:
{
    T* root_;

public:
    LinkedListRoot()
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fd f9c9 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	601a      	str	r2, [r3, #0]
    { }
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>:
    static D fromMSec(int64_t ms) { return fromUSec(ms * 1000); }
 800865c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	e9c7 2300 	strd	r2, r3, [r7]
 8008668:	e9d7 5600 	ldrd	r5, r6, [r7]
 800866c:	462b      	mov	r3, r5
 800866e:	4634      	mov	r4, r6
 8008670:	f04f 0100 	mov.w	r1, #0
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	0162      	lsls	r2, r4, #5
 800867a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800867e:	0159      	lsls	r1, r3, #5
 8008680:	460b      	mov	r3, r1
 8008682:	4614      	mov	r4, r2
 8008684:	1b5b      	subs	r3, r3, r5
 8008686:	eb64 0406 	sbc.w	r4, r4, r6
 800868a:	f04f 0100 	mov.w	r1, #0
 800868e:	f04f 0200 	mov.w	r2, #0
 8008692:	00a2      	lsls	r2, r4, #2
 8008694:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8008698:	0099      	lsls	r1, r3, #2
 800869a:	460b      	mov	r3, r1
 800869c:	4614      	mov	r4, r2
 800869e:	195b      	adds	r3, r3, r5
 80086a0:	eb44 0406 	adc.w	r4, r4, r6
 80086a4:	f04f 0100 	mov.w	r1, #0
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	00e2      	lsls	r2, r4, #3
 80086ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80086b2:	00d9      	lsls	r1, r3, #3
 80086b4:	460b      	mov	r3, r1
 80086b6:	4614      	mov	r4, r2
 80086b8:	68f9      	ldr	r1, [r7, #12]
 80086ba:	461a      	mov	r2, r3
 80086bc:	4623      	mov	r3, r4
 80086be:	4608      	mov	r0, r1
 80086c0:	f000 f9ce 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086cc <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEED1Ev>:
    ~DurationBase() { }
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEEC1Ev>:
    LinkedListNode()
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7fd f977 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
    { }
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEEC1ERNS_14IPoolAllocatorE>:
    {
        bool operator()(const Key&, const Value&) const { return true; }
    };

public:
    Map(IPoolAllocator& allocator) :
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
        allocator_(allocator)
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fd f967 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3304      	adds	r3, #4
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fc4b 	bl	8009fb0 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEEC1Ev>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	609a      	str	r2, [r3, #8]
    {
        UAVCAN_ASSERT(Key() == Key());
 8008720:	f107 0308 	add.w	r3, r7, #8
 8008724:	4618      	mov	r0, r3
 8008726:	f7fd fd61 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	4618      	mov	r0, r3
 8008730:	f7fd fd5c 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 8008734:	f107 020c 	add.w	r2, r7, #12
 8008738:	f107 0308 	add.w	r3, r7, #8
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fd76 	bl	8006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEEC1ERNS_14IPoolAllocatorE+0x56>
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEEC1ERNS_14IPoolAllocatorE+0x60>)
 800874c:	4a05      	ldr	r2, [pc, #20]	; (8008764 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEEC1ERNS_14IPoolAllocatorE+0x64>)
 800874e:	2173      	movs	r1, #115	; 0x73
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEEC1ERNS_14IPoolAllocatorE+0x68>)
 8008752:	f017 ff1b 	bl	802058c <__assert_func>
    }
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	08021e80 	.word	0x08021e80
 8008764:	080284ac 	.word	0x080284ac
 8008768:	08021e90 	.word	0x08021e90

0800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>:
    bool isZero() const { return usec_ == 0; }
 800876c:	b490      	push	{r4, r7}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800877a:	4323      	orrs	r3, r4
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bc90      	pop	{r4, r7}
 800878e:	4770      	bx	lr

08008790 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEED1Ev>:
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7fd f92b 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEEC1ERNS_14IPoolAllocatorE>:
    Map(IPoolAllocator& allocator) :
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b086      	sub	sp, #24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
        allocator_(allocator)
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7fd f913 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fc06 	bl	8009fce <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEEC1Ev>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	609a      	str	r2, [r3, #8]
        UAVCAN_ASSERT(Key() == Key());
 80087c8:	f107 0308 	add.w	r3, r7, #8
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd fe47 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 80087d2:	f107 0310 	add.w	r3, r7, #16
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fd fe42 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 80087dc:	f107 0210 	add.w	r2, r7, #16
 80087e0:	f107 0308 	add.w	r3, r7, #8
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd fe4f 	bl	800648a <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEEC1ERNS_14IPoolAllocatorE+0x56>
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEEC1ERNS_14IPoolAllocatorE+0x60>)
 80087f4:	4a05      	ldr	r2, [pc, #20]	; (800880c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEEC1ERNS_14IPoolAllocatorE+0x64>)
 80087f6:	2173      	movs	r1, #115	; 0x73
 80087f8:	4805      	ldr	r0, [pc, #20]	; (8008810 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEEC1ERNS_14IPoolAllocatorE+0x68>)
 80087fa:	f017 fec7 	bl	802058c <__assert_func>
    }
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	08021e80 	.word	0x08021e80
 800880c:	08027a3c 	.word	0x08027a3c
 8008810:	08021e90 	.word	0x08021e90

08008814 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEED1Ev>:

    ~Map()
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
    {
        clear();
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fbe5 	bl	8009fec <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE5clearEv>
    }
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3304      	adds	r3, #4
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff ffb2 	bl	8008790 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEED1Ev>
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fd f8e1 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEED1Ev>:
        {
            construct<const T&>(*rhs);  // Invoke copy constructor
        }
    }

    ~LazyConstructor() { destroy(); }
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 fbdd 	bl	800a004 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE7destroyEv>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEEC1Ev>:
    LinkedListRoot()
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7fd f8be 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
    { }
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <_ZN6uavcan14LinkedListRootINS_25LoopbackFrameListenerBaseEEC1Ev>:
    LinkedListRoot()
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fd f8af 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
    { }
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEEC1Ev>:
    LinkedListNode()
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fd f8a0 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]
    { }
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEED1Ev>:
    ~LinkedListNode() { }
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fd f89c 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>:
    static T fromUSec(uint64_t us)
 80088c6:	b590      	push	{r4, r7, lr}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	e9c7 2300 	strd	r2, r3, [r7]
        T d;
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7fd fc11 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
        d.usec_ = us;
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80088de:	e9c2 3400 	strd	r3, r4, [r2]
        return d;
 80088e2:	bf00      	nop
    }
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd90      	pop	{r4, r7, pc}

080088ec <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEEC1Ev>:
    LinkedListRoot()
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7fd f872 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
    { }
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <_ZN6uavcan3minINS_17MonotonicDurationEEERKT_S4_S4_>:
const T& min(const T& a, const T& b)
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4618      	mov	r0, r3
 800891a:	f001 fb91 	bl	800a040 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEltERKS1_>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <_ZN6uavcan3minINS_17MonotonicDurationEEERKT_S4_S4_+0x1e>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	e000      	b.n	800892a <_ZN6uavcan3minINS_17MonotonicDurationEEERKT_S4_S4_+0x20>
 8008928:	687b      	ldr	r3, [r7, #4]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_>:
const T& max(const T& a, const T& b)
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
    return (a < b) ? b : a;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	4618      	mov	r0, r3
 8008942:	f001 fb7d 	bl	800a040 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEltERKS1_>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_+0x1e>
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	e000      	b.n	8008952 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_+0x20>
 8008950:	687b      	ldr	r3, [r7, #4]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>:
    T operator+(const D& r) const
 800895a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800895c:	b087      	sub	sp, #28
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
        if (r.isNegative())
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4618      	mov	r0, r3
 800896a:	f001 fb80 	bl	800a06e <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE10isNegativeEv>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d029      	beq.n	80089c8 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_+0x6e>
            if (uint64_t(r.getAbs().toUSec()) > usec_)
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	f107 0310 	add.w	r3, r7, #16
 800897a:	4611      	mov	r1, r2
 800897c:	4618      	mov	r0, r3
 800897e:	f001 fb84 	bl	800a08a <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6getAbsEv>
 8008982:	f107 0310 	add.w	r3, r7, #16
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fb98 	bl	800a0bc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toUSecEv>
 800898c:	4603      	mov	r3, r0
 800898e:	460c      	mov	r4, r1
 8008990:	4619      	mov	r1, r3
 8008992:	4622      	mov	r2, r4
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800899a:	4294      	cmp	r4, r2
 800899c:	bf08      	it	eq
 800899e:	428b      	cmpeq	r3, r1
 80089a0:	bf34      	ite	cc
 80089a2:	2301      	movcc	r3, #1
 80089a4:	2300      	movcs	r3, #0
 80089a6:	b2dc      	uxtb	r4, r3
 80089a8:	f107 0310 	add.w	r3, r7, #16
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd fc84 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80089b2:	2c00      	cmp	r4, #0
 80089b4:	d02f      	beq.n	8008a16 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_+0xbc>
                return fromUSec(0);
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	4608      	mov	r0, r1
 80089c2:	f7ff ff80 	bl	80088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>
 80089c6:	e03a      	b.n	8008a3e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_+0xe4>
            if (uint64_t(int64_t(usec_) + r.toUSec()) < usec_)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089ce:	461d      	mov	r5, r3
 80089d0:	4626      	mov	r6, r4
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 fb71 	bl	800a0bc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toUSecEv>
 80089da:	460a      	mov	r2, r1
 80089dc:	4601      	mov	r1, r0
 80089de:	194b      	adds	r3, r1, r5
 80089e0:	eb42 0406 	adc.w	r4, r2, r6
 80089e4:	4619      	mov	r1, r3
 80089e6:	4622      	mov	r2, r4
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089ee:	42a2      	cmp	r2, r4
 80089f0:	bf08      	it	eq
 80089f2:	4299      	cmpeq	r1, r3
 80089f4:	bf34      	ite	cc
 80089f6:	2301      	movcc	r3, #1
 80089f8:	2300      	movcs	r3, #0
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00a      	beq.n	8008a16 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_+0xbc>
                return fromUSec(NumericTraits<uint64_t>::max());
 8008a00:	f7fd f840 	bl	8005a84 <_ZN6uavcan13NumericTraitsIyE3maxEv>
 8008a04:	4603      	mov	r3, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	68f9      	ldr	r1, [r7, #12]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	4608      	mov	r0, r1
 8008a10:	f7ff ff59 	bl	80088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>
 8008a14:	e013      	b.n	8008a3e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_+0xe4>
        return fromUSec(uint64_t(int64_t(usec_) + r.toUSec()));
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a1c:	461d      	mov	r5, r3
 8008a1e:	4626      	mov	r6, r4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 fb4a 	bl	800a0bc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toUSecEv>
 8008a28:	460a      	mov	r2, r1
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	194b      	adds	r3, r1, r5
 8008a2e:	eb42 0406 	adc.w	r4, r2, r6
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	461a      	mov	r2, r3
 8008a36:	4623      	mov	r3, r4
 8008a38:	4608      	mov	r0, r1
 8008a3a:	f7ff ff44 	bl	80088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>
    }
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	371c      	adds	r7, #28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a46 <_ZN6uavcan17MonotonicDurationC1Ev>:
class UAVCAN_EXPORT MonotonicDuration : public DurationBase<MonotonicDuration> { };
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fb40 	bl	800a0d6 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEEC1Ev>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>:
    static D fromUSec(int64_t us)
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	e9c7 2300 	strd	r2, r3, [r7]
        D d;
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff ffea 	bl	8008a46 <_ZN6uavcan17MonotonicDurationC1Ev>
        d.usec_ = us;
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008a78:	e9c2 3400 	strd	r3, r4, [r2]
        return d;
 8008a7c:	bf00      	nop
    }
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd90      	pop	{r4, r7, pc}

08008a86 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE11getInfiniteEv>:
    static D getInfinite() { return fromUSec(NumericTraits<int64_t>::max()); }
 8008a86:	b590      	push	{r4, r7, lr}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	f7fc ffee 	bl	8005a6e <_ZN6uavcan13NumericTraitsIxE3maxEv>
 8008a92:	4603      	mov	r3, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	f7ff ffdf 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd90      	pop	{r4, r7, pc}
	...

08008aac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev>:
 * Data type needs to have a default ID to be registrable by this class.
 */
template <typename Type>
struct UAVCAN_EXPORT DefaultDataTypeRegistrator
{
    DefaultDataTypeRegistrator()
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
    {
#if !UAVCAN_NO_GLOBAL_DATA_TYPE_REGISTRY
        const GlobalDataTypeRegistry::RegistrationResult res =
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 8008ab4:	f00c f8c2 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8008ab8:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	f240 1155 	movw	r1, #341	; 0x155
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fd f8c5 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	4620      	mov	r0, r4
 8008acc:	f001 fb2a 	bl	800a124 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]

        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev+0x34>
        {
            handleFatalError("Type reg failed");
 8008ada:	4804      	ldr	r0, [pc, #16]	; (8008aec <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev+0x40>)
 8008adc:	f015 fa50 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
        }
#endif
    }
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd90      	pop	{r4, r7, pc}
 8008aea:	bf00      	nop
 8008aec:	08021ed0 	.word	0x08021ed0

08008af0 <_ZN6uavcan8protocol11NodeStatus_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.NodeStatus";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 fb73 	bl	800a1e8 <_ZN6uavcan8protocol11NodeStatus_ILi0EE20getDataTypeSignatureEv>
 8008b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f015 f923 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 8008b0c:	bf00      	nop
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.SoftwareVersion";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 8008b1c:	f107 0308 	add.w	r3, r7, #8
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fb85 	bl	800a230 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE20getDataTypeSignatureEv>
 8008b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f015 f911 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.HardwareVersion";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 fb97 	bl	800a278 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE20getDataTypeSignatureEv>
 8008b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f015 f8ff 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static int decode(SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
    {
        return array.decodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
    }

    static void extendDataTypeSignature(DataTypeSignature& signature)
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
    {
        RawValueType::extendDataTypeSignature(signature);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f946 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev>:
    DefaultDataTypeRegistrator()
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 8008b7c:	f00c f85e 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8008b80:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	2101      	movs	r1, #1
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fd f862 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	4620      	mov	r0, r4
 8008b92:	f001 fb99 	bl	800a2c8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev+0x32>
            handleFatalError("Type reg failed");
 8008ba0:	4803      	ldr	r0, [pc, #12]	; (8008bb0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev+0x3c>)
 8008ba2:	f015 f9ed 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd90      	pop	{r4, r7, pc}
 8008bb0:	08021ed0 	.word	0x08021ed0

08008bb4 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEE19getDefaultTxTimeoutEv>:
    int broadcast(const DataType& message, TransferID tid)
    {
        return BaseType::publish(message, TransferTypeMessageBroadcast, NodeID::Broadcast, tid);
    }

    static MonotonicDuration getDefaultTxTimeout() { return MonotonicDuration::fromMSec(100); }
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	f04f 0264 	mov.w	r2, #100	; 0x64
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	4608      	mov	r0, r1
 8008bc8:	f7ff fd48 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES7_>:
    explicit Publisher(INode& node, MonotonicDuration tx_timeout = getDefaultTxTimeout(),
 8008bd4:	b590      	push	{r4, r7, lr}
 8008bd6:	b089      	sub	sp, #36	; 0x24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	603b      	str	r3, [r7, #0]
        : BaseType(node, tx_timeout, max_transfer_interval)
 8008be2:	68fc      	ldr	r4, [r7, #12]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	f107 0310 	add.w	r3, r7, #16
 8008bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bee:	e883 0003 	stmia.w	r3, {r0, r1}
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	f107 0318 	add.w	r3, r7, #24
 8008bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8008c00:	f107 0318 	add.w	r3, r7, #24
 8008c04:	f107 0210 	add.w	r2, r7, #16
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f001 fbbe 	bl	800a38c <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_EC1ERNS_5INodeENS_17MonotonicDurationES7_>
 8008c10:	f107 0318 	add.w	r3, r7, #24
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fd fb50 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008c1a:	f107 0310 	add.w	r3, r7, #16
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fd fb4b 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        StaticAssert<DataTypeKind(DataType::DataTypeKind) == DataTypeKindMessage>::check();
 8008c24:	f7fc fed4 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3724      	adds	r7, #36	; 0x24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd90      	pop	{r4, r7, pc}

08008c32 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_ED1Ev>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
                     MonotonicDuration max_transfer_interval = TransferSender::getDefaultMaxTransferInterval())
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
    { }

    ~GenericPublisher() { }
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fd ff91 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>:
            UAVCAN_TRACE("ServiceServer", "Response was suppressed by the application");
        }
    }

public:
    explicit ServiceServer(INode& node)
 8008c4c:	b590      	push	{r4, r7, lr}
 8008c4e:	b08b      	sub	sp, #44	; 0x2c
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
        : SubscriberType(node)
        , publisher_(node, getDefaultTxTimeout())
        , callback_()
        , response_failure_count_(0)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fbd4 	bl	800a408 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>
 8008c60:	4a2b      	ldr	r2, [pc, #172]	; (8008d10 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc4>)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8008c6c:	f107 0308 	add.w	r3, r7, #8
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 fbb8 	bl	800a3e6 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 8008c76:	f107 0310 	add.w	r3, r7, #16
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd fed3 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 8008c80:	f107 0310 	add.w	r3, r7, #16
 8008c84:	f107 0208 	add.w	r2, r7, #8
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f001 fc02 	bl	800a494 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>
 8008c90:	f107 0310 	add.w	r3, r7, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fd fb10 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008c9a:	f107 0308 	add.w	r3, r7, #8
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fb0b 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3370      	adds	r3, #112	; 0x70
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 fc2d 	bl	800a508 <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1Ev>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	67da      	str	r2, [r3, #124]	; 0x7c
    {
        UAVCAN_ASSERT(getTxTimeout() == getDefaultTxTimeout());  // Making sure it is valid
 8008cb4:	f107 0318 	add.w	r3, r7, #24
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fc38 	bl	800a530 <_ZNK6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>
 8008cc0:	f107 0320 	add.w	r3, r7, #32
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 fb8e 	bl	800a3e6 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 8008cca:	f107 0220 	add.w	r2, r7, #32
 8008cce:	f107 0318 	add.w	r3, r7, #24
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fa8c 	bl	80091f2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEeqERKS1_>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d105      	bne.n	8008cec <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xa0>
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc8>)
 8008ce2:	4a0d      	ldr	r2, [pc, #52]	; (8008d18 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xcc>)
 8008ce4:	2195      	movs	r1, #149	; 0x95
 8008ce6:	480d      	ldr	r0, [pc, #52]	; (8008d1c <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xd0>)
 8008ce8:	f017 fc50 	bl	802058c <__assert_func>
 8008cec:	f107 0320 	add.w	r3, r7, #32
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fd fae2 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008cf6:	f107 0318 	add.w	r3, r7, #24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fd fadd 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>

        StaticAssert<DataTypeKind(DataType::DataTypeKind) == DataTypeKindService>::check();
 8008d00:	f7fc fe66 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4618      	mov	r0, r3
 8008d08:	372c      	adds	r7, #44	; 0x2c
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd90      	pop	{r4, r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	080251c4 	.word	0x080251c4
 8008d14:	08021ee0 	.word	0x08021ee0
 8008d18:	08027b14 	.word	0x08027b14
 8008d1c:	08021f08 	.word	0x08021f08

08008d20 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EEC1Ev>:
        Response_()
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
            , name()
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f001 fc11 	bl	800a552 <_ZN6uavcan8protocol11NodeStatus_ILi0EEC1Ev>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3310      	adds	r3, #16
 8008d34:	4618      	mov	r0, r3
 8008d36:	f001 fc26 	bl	800a586 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EEC1Ev>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3320      	adds	r3, #32
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 fc3f 	bl	800a5c2 <_ZN6uavcan8protocol16HardwareVersion_ILi0EEC1Ev>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f203 1333 	addw	r3, r3, #307	; 0x133
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 fc54 	bl	800a5f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8008d50:	f7fc fe3e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EED1Ev>:
    ~ArrayImpl() { }
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fc53 	bl	800a612 <_ZN6uavcan15StaticArrayBaseILj16EED1Ev>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EED1Ev>:
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fc51 	bl	800a628 <_ZN6uavcan16DynamicArrayBaseILj255EED1Ev>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>:
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 fc4f 	bl	800a63e <_ZN6uavcan16DynamicArrayBaseILj80EED1Ev>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    {
        validate();
        return codec.decode<BitLen>(out_value);
    }

    static void extendDataTypeSignature(DataTypeSignature&) { }
 8008daa:	b480      	push	{r7}
 8008dac:	b083      	sub	sp, #12
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	bf00      	nop
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <_ZN6uavcan8protocol13DataTypeKind_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.DataTypeKind";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 8008dc6:	f107 0308 	add.w	r3, r7, #8
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fc44 	bl	800a658 <_ZN6uavcan8protocol13DataTypeKind_ILi0EE20getDataTypeSignatureEv>
 8008dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f014 ffbc 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
 8008df6:	b480      	push	{r7}
 8008df8:	b083      	sub	sp, #12
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev>:
    DefaultDataTypeRegistrator()
 8008e0c:	b590      	push	{r4, r7, lr}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 8008e14:	f00b ff12 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8008e18:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	2102      	movs	r1, #2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fc ff16 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8008e26:	68b9      	ldr	r1, [r7, #8]
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f001 fc35 	bl	800a698 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev+0x32>
            handleFatalError("Type reg failed");
 8008e38:	4803      	ldr	r0, [pc, #12]	; (8008e48 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev+0x3c>)
 8008e3a:	f015 f8a1 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}
 8008e48:	08021ed0 	.word	0x08021ed0

08008e4c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5emptyEv>:

    bool empty() const { return size() == 0; }
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f001 fc80 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5c_strEv>:
    const char* c_str() const
 8008e70:	b590      	push	{r4, r7, lr}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
        StaticAssert<IsStringLike>::check();
 8008e78:	f7fc fdaa 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(size() < (MaxSize + 1));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fc6c 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b50      	cmp	r3, #80	; 0x50
 8008e88:	d906      	bls.n	8008e98 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5c_strEv+0x28>
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5c_strEv+0x48>)
 8008e8c:	4a0b      	ldr	r2, [pc, #44]	; (8008ebc <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5c_strEv+0x4c>)
 8008e8e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008e92:	480b      	ldr	r0, [pc, #44]	; (8008ec0 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5c_strEv+0x50>)
 8008e94:	f017 fb7a 	bl	802058c <__assert_func>
        const_cast<BufferType&>(data_)[size()] = 0;  // Ad-hoc string termination
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	1c5c      	adds	r4, r3, #1
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fc5c 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	54e2      	strb	r2, [r4, r3]
        return reinterpret_cast<const char*>(data_);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3301      	adds	r3, #1
    }
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd90      	pop	{r4, r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	08021f54 	.word	0x08021f54
 8008ebc:	080281d4 	.word	0x080281d4
 8008ec0:	08021f6c 	.word	0x08021f6c

08008ec4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEaSEPKc>:

    /**
     * This operator can only be used with string-like arrays; otherwise it will fail to compile.
     * @ref c_str()
     */
    SelfType& operator=(const char* chr)
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
    {
        StaticAssert<Base::IsStringLike>::check();
 8008ece:	f7fc fd7f 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<IsDynamic>::check();
 8008ed2:	f7fc fd7d 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        Base::clear();
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fc65 	bl	800a7a8 <_ZN6uavcan16DynamicArrayBaseILj80EE5clearEv>
        if (chr == UAVCAN_NULLPTR)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEaSEPKc+0x26>
        {
            handleFatalError("Array::operator=(const char*)");
 8008ee4:	480b      	ldr	r0, [pc, #44]	; (8008f14 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEaSEPKc+0x50>)
 8008ee6:	f015 f84b 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
        }
        while (*chr)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEaSEPKc+0x46>
        {
            push_back(ValueType(*chr++));  // Value type is likely to be unsigned char, so conversion may be required.
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	603a      	str	r2, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	73fb      	strb	r3, [r7, #15]
 8008efc:	f107 030f 	add.w	r3, r7, #15
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 fc5d 	bl	800a7c2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE9push_backERKh>
        while (*chr)
 8008f08:	e7ef      	b.n	8008eea <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEaSEPKc+0x26>
        }
        return *this;
 8008f0a:	687b      	ldr	r3, [r7, #4]
    }
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	08021fb0 	.word	0x08021fb0

08008f18 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>:
    explicit ServiceServer(INode& node)
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b08b      	sub	sp, #44	; 0x2c
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
        , response_failure_count_(0)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 fc78 	bl	800a81c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>
 8008f2c:	4a2b      	ldr	r2, [pc, #172]	; (8008fdc <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc4>)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fc5d 	bl	800a7fc <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 8008f42:	f107 0310 	add.w	r3, r7, #16
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd fd6d 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 8008f4c:	f107 0310 	add.w	r3, r7, #16
 8008f50:	f107 0208 	add.w	r2, r7, #8
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	4620      	mov	r0, r4
 8008f58:	f001 fca6 	bl	800a8a8 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>
 8008f5c:	f107 0310 	add.w	r3, r7, #16
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fd f9aa 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fd f9a5 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3370      	adds	r3, #112	; 0x70
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 fcd1 	bl	800a91c <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1Ev>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	67da      	str	r2, [r3, #124]	; 0x7c
        UAVCAN_ASSERT(getTxTimeout() == getDefaultTxTimeout());  // Making sure it is valid
 8008f80:	f107 0318 	add.w	r3, r7, #24
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 fcdc 	bl	800a944 <_ZNK6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>
 8008f8c:	f107 0320 	add.w	r3, r7, #32
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 fc33 	bl	800a7fc <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 8008f96:	f107 0220 	add.w	r2, r7, #32
 8008f9a:	f107 0318 	add.w	r3, r7, #24
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f926 	bl	80091f2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEeqERKS1_>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d105      	bne.n	8008fb8 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xa0>
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc8>)
 8008fae:	4a0d      	ldr	r2, [pc, #52]	; (8008fe4 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xcc>)
 8008fb0:	2195      	movs	r1, #149	; 0x95
 8008fb2:	480d      	ldr	r0, [pc, #52]	; (8008fe8 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xd0>)
 8008fb4:	f017 faea 	bl	802058c <__assert_func>
 8008fb8:	f107 0320 	add.w	r3, r7, #32
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fd f97c 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8008fc2:	f107 0318 	add.w	r3, r7, #24
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd f977 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        StaticAssert<DataTypeKind(DataType::DataTypeKind) == DataTypeKindService>::check();
 8008fcc:	f7fc fd00 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	372c      	adds	r7, #44	; 0x2c
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd90      	pop	{r4, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	08025184 	.word	0x08025184
 8008fe0:	08021ee0 	.word	0x08021ee0
 8008fe4:	08027c5c 	.word	0x08027c5c
 8008fe8:	08021f08 	.word	0x08021f08

08008fec <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1ES2_SD_>:
    MethodBinder()
        : obj_()
        , fun_()
    { }

    MethodBinder(ObjectPtr o, MemFunPtr f)
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	e881 000c 	stmia.w	r1, {r2, r3}
        : obj_(o)
        , fun_(f)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3304      	adds	r3, #4
 8009006:	463a      	mov	r2, r7
 8009008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800900c:	e883 0003 	stmia.w	r3, {r0, r1}
    { }
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_>:

    /**
     * Starts the server.
     * Incoming service requests will be passed to the application via the callback.
     */
    int start(const Callback& callback)
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
    {
        stop();
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f82b 	bl	8009086 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>

        if (!coerceOrFallback<bool>(callback, true))
 8009030:	2301      	movs	r3, #1
 8009032:	72fb      	strb	r3, [r7, #11]
 8009034:	f107 030b 	add.w	r3, r7, #11
 8009038:	4619      	mov	r1, r3
 800903a:	6838      	ldr	r0, [r7, #0]
 800903c:	f001 fc93 	bl	800a966 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPNS_20DataTypeInfoProviderEMS2_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEEET_RKT0_RKSG_>
 8009040:	4603      	mov	r3, r0
 8009042:	f083 0301 	eor.w	r3, r3, #1
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x34>
        {
            UAVCAN_TRACE("ServiceServer", "Invalid callback");
            return -ErrInvalidParam;
 800904c:	f06f 0301 	mvn.w	r3, #1
 8009050:	e015      	b.n	800907e <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x60>
        }
        callback_ = callback;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	3370      	adds	r3, #112	; 0x70
 8009058:	ca07      	ldmia	r2, {r0, r1, r2}
 800905a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        const int publisher_res = publisher_.init();
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3348      	adds	r3, #72	; 0x48
 8009062:	4618      	mov	r0, r3
 8009064:	f001 fc8e 	bl	800a984 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE4initEv>
 8009068:	60f8      	str	r0, [r7, #12]
        if (publisher_res < 0)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da01      	bge.n	8009074 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x56>
        {
            UAVCAN_TRACE("ServiceServer", "Publisher initialization failure: %i", publisher_res);
            return publisher_res;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	e004      	b.n	800907e <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x60>
        }
        return SubscriberType::startAsServiceRequestListener();
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4618      	mov	r0, r3
 8009078:	f001 fc90 	bl	800a99c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>
 800907c:	4603      	mov	r3, r0
    }
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>:

    /**
     * Terminate the subscription.
     * Dispatcher core will remove this instance from the subscribers list.
     */
    void stop()
 8009086:	b590      	push	{r4, r7, lr}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
    {
        UAVCAN_TRACE("GenericSubscriber", "Stop; dtname=%s", DataSpec::getDataTypeFullName());
        GenericSubscriberBase::stop(forwarder_);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	1d1c      	adds	r4, r3, #4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	330c      	adds	r3, #12
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fc96 	bl	800a9c8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800909c:	4603      	mov	r3, r0
 800909e:	4619      	mov	r1, r3
 80090a0:	4620      	mov	r0, r4
 80090a2:	f00b fbeb 	bl	801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>
    }
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd90      	pop	{r4, r7, pc}
	...

080090b0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev>:
    DefaultDataTypeRegistrator()
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 80090b8:	f00b fdc0 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 80090bc:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 80090be:	f107 0308 	add.w	r3, r7, #8
 80090c2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fc fdc3 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	4620      	mov	r0, r4
 80090d0:	f001 fc8e 	bl	800a9f0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev+0x34>
            handleFatalError("Type reg failed");
 80090de:	4804      	ldr	r0, [pc, #16]	; (80090f0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev+0x40>)
 80090e0:	f014 ff4e 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd90      	pop	{r4, r7, pc}
 80090ee:	bf00      	nop
 80090f0:	08021ed0 	.word	0x08021ed0

080090f4 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEE19getDefaultTxTimeoutEv>:
    static MonotonicDuration getDefaultTxTimeout() { return MonotonicDuration::fromMSec(100); }
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	f04f 0264 	mov.w	r2, #100	; 0x64
 8009102:	f04f 0300 	mov.w	r3, #0
 8009106:	4608      	mov	r0, r1
 8009108:	f7ff faa8 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>:
    explicit Publisher(INode& node, MonotonicDuration tx_timeout = getDefaultTxTimeout(),
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b089      	sub	sp, #36	; 0x24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
        : BaseType(node, tx_timeout, max_transfer_interval)
 8009122:	68fc      	ldr	r4, [r7, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	f107 0310 	add.w	r3, r7, #16
 800912a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800912e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	f107 0318 	add.w	r3, r7, #24
 8009138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800913c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009140:	f107 0318 	add.w	r3, r7, #24
 8009144:	f107 0210 	add.w	r2, r7, #16
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4620      	mov	r0, r4
 800914c:	f001 fcb2 	bl	800aab4 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_EC1ERNS_5INodeENS_17MonotonicDurationES8_>
 8009150:	f107 0318 	add.w	r3, r7, #24
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd f8b0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800915a:	f107 0310 	add.w	r3, r7, #16
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd f8ab 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        StaticAssert<DataTypeKind(DataType::DataTypeKind) == DataTypeKindMessage>::check();
 8009164:	f7fc fc34 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4618      	mov	r0, r3
 800916c:	3724      	adds	r7, #36	; 0x24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd90      	pop	{r4, r7, pc}

08009172 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_ED1Ev>:
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	f7fd fcf1 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <_ZN6uavcan8protocol5debug11LogMessage_ILi0EEC1Ev>:
    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::level >::Type level;
    typename ::uavcan::StorageType< typename FieldTypes::source >::Type source;
    typename ::uavcan::StorageType< typename FieldTypes::text >::Type text;

    LogMessage_()
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
        : level()
        , source()
        , text()
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4618      	mov	r0, r3
 8009198:	f001 fcb9 	bl	800ab0e <_ZN6uavcan8protocol5debug9LogLevel_ILi0EEC1Ev>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3301      	adds	r3, #1
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 fcc2 	bl	800ab2a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEC1Ev>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3322      	adds	r3, #34	; 0x22
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 fcca 	bl	800ab44 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEC1Ev>
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 80091b0:	f7fc fc0e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<983 == MaxBitLen>::check();
#endif
    }
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EED1Ev>:
    ~ArrayImpl() { }
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 fcc8 	bl	800ab5e <_ZN6uavcan16DynamicArrayBaseILj31EED1Ev>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4618      	mov	r0, r3
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EED1Ev>:
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 fcc6 	bl	800ab74 <_ZN6uavcan16DynamicArrayBaseILj90EED1Ev>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEeqERKS1_>:
    bool operator==(const D& r) const { return usec_ == r.usec_; }
 80091f2:	b490      	push	{r4, r7}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009208:	42a2      	cmp	r2, r4
 800920a:	bf06      	itte	eq
 800920c:	4299      	cmpeq	r1, r3
 800920e:	2301      	moveq	r3, #1
 8009210:	2300      	movne	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bc90      	pop	{r4, r7}
 800921c:	4770      	bx	lr

0800921e <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E4initENS_16TransferPriorityE>:
    }

    /**
     * This overload allows to set the priority; otherwise it's the same.
     */
    int init(TransferPriority priority)
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	7039      	strb	r1, [r7, #0]
    {
        setPriority(priority);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7839      	ldrb	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7fd fcc0 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>
        return checkInit();
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 fca9 	bl	800ab8a <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E9checkInitEv>
 8009238:	4603      	mov	r3, r0
    }
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEE9broadcastERKS4_>:
    int broadcast(const DataType& message)
 8009244:	b5b0      	push	{r4, r5, r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af02      	add	r7, sp, #8
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
        return BaseType::publish(message, TransferTypeMessageBroadcast, NodeID::Broadcast);
 800924e:	687d      	ldr	r5, [r7, #4]
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	f04f 0400 	mov.w	r4, #0
 8009258:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800925c:	f107 0308 	add.w	r3, r7, #8
 8009260:	4618      	mov	r0, r3
 8009262:	f7fc ff4a 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 8009266:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEE9broadcastERKS4_+0x4c>)
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	7813      	ldrb	r3, [r2, #0]
 8009270:	2202      	movs	r2, #2
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	4628      	mov	r0, r5
 8009276:	f001 fca3 	bl	800abc0 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_13MonotonicTimeE>
 800927a:	4604      	mov	r4, r0
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4618      	mov	r0, r3
 8009282:	f7fc ff47 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8009286:	4623      	mov	r3, r4
    }
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bdb0      	pop	{r4, r5, r7, pc}
 8009290:	20008604 	.word	0x20008604

08009294 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <_ZN6uavcan11IntegerSpecILj1ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static int decode(StorageType& out_value, ScalarCodec& codec, TailArrayOptimizationMode)
    {
        return codec.decode<BitLen>(out_value);
    }

    static void extendDataTypeSignature(DataTypeSignature&) { }
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev>:
    DefaultDataTypeRegistrator()
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 80092c4:	f00b fcba 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 80092c8:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	2105      	movs	r1, #5
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fc fcbe 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	4620      	mov	r0, r4
 80092da:	f001 fc9f 	bl	800ac1c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE>
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev+0x32>
            handleFatalError("Type reg failed");
 80092e8:	4803      	ldr	r0, [pc, #12]	; (80092f8 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev+0x3c>)
 80092ea:	f014 fe49 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd90      	pop	{r4, r7, pc}
 80092f8:	08021ed0 	.word	0x08021ed0

080092fc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE12getSrcNodeIDEv>:
    NodeID getSrcNodeID()            const { return safeget<NodeID, &IncomingTransfer::getSrcNodeID>(); }
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fceb 	bl	800ace0 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>
 800930a:	4603      	mov	r3, r0
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>:
    explicit ServiceServer(INode& node)
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b08b      	sub	sp, #44	; 0x2c
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
        , response_failure_count_(0)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f001 fd06 	bl	800ad34 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>
 8009328:	4a2b      	ldr	r2, [pc, #172]	; (80093d8 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc4>)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8009334:	f107 0308 	add.w	r3, r7, #8
 8009338:	4618      	mov	r0, r3
 800933a:	f001 fcea 	bl	800ad12 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 800933e:	f107 0310 	add.w	r3, r7, #16
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fb6f 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 8009348:	f107 0310 	add.w	r3, r7, #16
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	4620      	mov	r0, r4
 8009354:	f001 fd34 	bl	800adc0 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>
 8009358:	f107 0310 	add.w	r3, r7, #16
 800935c:	4618      	mov	r0, r3
 800935e:	f7fc ffac 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8009362:	f107 0308 	add.w	r3, r7, #8
 8009366:	4618      	mov	r0, r3
 8009368:	f7fc ffa7 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3370      	adds	r3, #112	; 0x70
 8009370:	4618      	mov	r0, r3
 8009372:	f001 fd5f 	bl	800ae34 <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEC1Ev>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	67da      	str	r2, [r3, #124]	; 0x7c
        UAVCAN_ASSERT(getTxTimeout() == getDefaultTxTimeout());  // Making sure it is valid
 800937c:	f107 0318 	add.w	r3, r7, #24
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4618      	mov	r0, r3
 8009384:	f001 fd6a 	bl	800ae5c <_ZNK6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>
 8009388:	f107 0320 	add.w	r3, r7, #32
 800938c:	4618      	mov	r0, r3
 800938e:	f001 fcc0 	bl	800ad12 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 8009392:	f107 0220 	add.w	r2, r7, #32
 8009396:	f107 0318 	add.w	r3, r7, #24
 800939a:	4611      	mov	r1, r2
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff ff28 	bl	80091f2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEeqERKS1_>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d105      	bne.n	80093b4 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xa0>
 80093a8:	4b0c      	ldr	r3, [pc, #48]	; (80093dc <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc8>)
 80093aa:	4a0d      	ldr	r2, [pc, #52]	; (80093e0 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xcc>)
 80093ac:	2195      	movs	r1, #149	; 0x95
 80093ae:	480d      	ldr	r0, [pc, #52]	; (80093e4 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xd0>)
 80093b0:	f017 f8ec 	bl	802058c <__assert_func>
 80093b4:	f107 0320 	add.w	r3, r7, #32
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fc ff7e 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80093be:	f107 0318 	add.w	r3, r7, #24
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fc ff79 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        StaticAssert<DataTypeKind(DataType::DataTypeKind) == DataTypeKindService>::check();
 80093c8:	f7fc fb02 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4618      	mov	r0, r3
 80093d0:	372c      	adds	r7, #44	; 0x2c
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd90      	pop	{r4, r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08025144 	.word	0x08025144
 80093dc:	08021ee0 	.word	0x08021ee0
 80093e0:	08027ddc 	.word	0x08027ddc
 80093e4:	08021f08 	.word	0x08021f08

080093e8 <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEC1ES3_SG_>:
    MethodBinder(ObjectPtr o, MemFunPtr f)
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4639      	mov	r1, r7
 80093f4:	e881 000c 	stmia.w	r1, {r2, r3}
        , fun_(f)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3304      	adds	r3, #4
 8009402:	463a      	mov	r2, r7
 8009404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009408:	e883 0003 	stmia.w	r3, {r0, r1}
    { }
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE5startERKSI_>:
    int start(const Callback& callback)
 800941a:	b580      	push	{r7, lr}
 800941c:	b084      	sub	sp, #16
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	6039      	str	r1, [r7, #0]
        stop();
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4618      	mov	r0, r3
 8009428:	f001 fd29 	bl	800ae7e <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
        if (!coerceOrFallback<bool>(callback, true))
 800942c:	2301      	movs	r3, #1
 800942e:	72fb      	strb	r3, [r7, #11]
 8009430:	f107 030b 	add.w	r3, r7, #11
 8009434:	4619      	mov	r1, r3
 8009436:	6838      	ldr	r0, [r7, #0]
 8009438:	f001 fd35 	bl	800aea6 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPKNS_20RestartRequestServerEMS2_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS7_9Response_ILi0EEEEEEEET_RKT0_RKSJ_>
 800943c:	4603      	mov	r3, r0
 800943e:	f083 0301 	eor.w	r3, r3, #1
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE5startERKSI_+0x34>
            return -ErrInvalidParam;
 8009448:	f06f 0301 	mvn.w	r3, #1
 800944c:	e015      	b.n	800947a <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE5startERKSI_+0x60>
        callback_ = callback;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	3370      	adds	r3, #112	; 0x70
 8009454:	ca07      	ldmia	r2, {r0, r1, r2}
 8009456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        const int publisher_res = publisher_.init();
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3348      	adds	r3, #72	; 0x48
 800945e:	4618      	mov	r0, r3
 8009460:	f001 fd30 	bl	800aec4 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE4initEv>
 8009464:	60f8      	str	r0, [r7, #12]
        if (publisher_res < 0)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	da01      	bge.n	8009470 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE5startERKSI_+0x56>
            return publisher_res;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	e004      	b.n	800947a <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE5startERKSI_+0x60>
        return SubscriberType::startAsServiceRequestListener();
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fd32 	bl	800aedc <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>
 8009478:	4603      	mov	r3, r0
    }
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature&) { }
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f001 fd32 	bl	800af08 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev>:
    DefaultDataTypeRegistrator()
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 80094b4:	f00b fbc2 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 80094b8:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 80094ba:	f107 0308 	add.w	r3, r7, #8
 80094be:	2104      	movs	r1, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fc fbc6 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	4620      	mov	r0, r4
 80094ca:	f001 fd37 	bl	800af3c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev+0x32>
            handleFatalError("Type reg failed");
 80094d8:	4803      	ldr	r0, [pc, #12]	; (80094e8 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev+0x3c>)
 80094da:	f014 fd51 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}
 80094e8:	08021ed0 	.word	0x08021ed0

080094ec <_ZN6uavcan8protocol14CANIfaceStats_ILi0EEC1Ev>:
    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::frames_tx >::Type frames_tx;
    typename ::uavcan::StorageType< typename FieldTypes::frames_rx >::Type frames_rx;
    typename ::uavcan::StorageType< typename FieldTypes::errors >::Type errors;

    CANIfaceStats_()
 80094ec:	b590      	push	{r4, r7, lr}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
        : frames_tx()
        , frames_rx()
        , errors()
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	f04f 0400 	mov.w	r4, #0
 80094fe:	e9c2 3400 	strd	r3, r4, [r2]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	f04f 0300 	mov.w	r3, #0
 8009508:	f04f 0400 	mov.w	r4, #0
 800950c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	f04f 0400 	mov.w	r4, #0
 800951a:	e9c2 3404 	strd	r3, r4, [r2, #16]
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 800951e:	f7fc fa57 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<144 == MaxBitLen>::check();
#endif
    }
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	bd90      	pop	{r4, r7, pc}

0800952c <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE9push_backERKS3_>:
    void push_back(const ValueType& value)
 800952c:	b5b0      	push	{r4, r5, r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
        Base::grow();
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4618      	mov	r0, r3
 800953a:	f001 fd61 	bl	800b000 <_ZN6uavcan16DynamicArrayBaseILj3EE4growEv>
        Base::at(SizeType(size() - 1)) = value;
 800953e:	687c      	ldr	r4, [r7, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4618      	mov	r0, r3
 8009544:	f001 fd74 	bl	800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>
 8009548:	4603      	mov	r3, r0
 800954a:	3b01      	subs	r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	4619      	mov	r1, r3
 8009550:	4620      	mov	r0, r4
 8009552:	f001 fd93 	bl	800b07c <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE2atEh>
 8009556:	4602      	mov	r2, r0
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	4614      	mov	r4, r2
 800955c:	461d      	mov	r5, r3
 800955e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009562:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009566:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009574 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE>:
    explicit ServiceServer(INode& node)
 8009574:	b590      	push	{r4, r7, lr}
 8009576:	b08b      	sub	sp, #44	; 0x2c
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
        , response_failure_count_(0)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fda4 	bl	800b0d0 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>
 8009588:	4a2b      	ldr	r2, [pc, #172]	; (8009638 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc4>)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8009594:	f107 0308 	add.w	r3, r7, #8
 8009598:	4618      	mov	r0, r3
 800959a:	f001 fd88 	bl	800b0ae <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 800959e:	f107 0310 	add.w	r3, r7, #16
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fd fa3f 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 80095a8:	f107 0310 	add.w	r3, r7, #16
 80095ac:	f107 0208 	add.w	r2, r7, #8
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	4620      	mov	r0, r4
 80095b4:	f001 fdd2 	bl	800b15c <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fc fe7c 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80095c2:	f107 0308 	add.w	r3, r7, #8
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fc fe77 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3370      	adds	r3, #112	; 0x70
 80095d0:	4618      	mov	r0, r3
 80095d2:	f001 fdfd 	bl	800b1d0 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEC1Ev>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	67da      	str	r2, [r3, #124]	; 0x7c
        UAVCAN_ASSERT(getTxTimeout() == getDefaultTxTimeout());  // Making sure it is valid
 80095dc:	f107 0318 	add.w	r3, r7, #24
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f001 fe08 	bl	800b1f8 <_ZNK6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>
 80095e8:	f107 0320 	add.w	r3, r7, #32
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fd5e 	bl	800b0ae <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>
 80095f2:	f107 0220 	add.w	r2, r7, #32
 80095f6:	f107 0318 	add.w	r3, r7, #24
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff fdf8 	bl	80091f2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEeqERKS1_>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d105      	bne.n	8009614 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xa0>
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xc8>)
 800960a:	4a0d      	ldr	r2, [pc, #52]	; (8009640 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xcc>)
 800960c:	2195      	movs	r1, #149	; 0x95
 800960e:	480d      	ldr	r0, [pc, #52]	; (8009644 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEEC1ERNS_5INodeE+0xd0>)
 8009610:	f016 ffbc 	bl	802058c <__assert_func>
 8009614:	f107 0320 	add.w	r3, r7, #32
 8009618:	4618      	mov	r0, r3
 800961a:	f7fc fe4e 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800961e:	f107 0318 	add.w	r3, r7, #24
 8009622:	4618      	mov	r0, r3
 8009624:	f7fc fe49 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        StaticAssert<DataTypeKind(DataType::DataTypeKind) == DataTypeKindService>::check();
 8009628:	f7fc f9d2 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4618      	mov	r0, r3
 8009630:	372c      	adds	r7, #44	; 0x2c
 8009632:	46bd      	mov	sp, r7
 8009634:	bd90      	pop	{r4, r7, pc}
 8009636:	bf00      	nop
 8009638:	08025104 	.word	0x08025104
 800963c:	08021ee0 	.word	0x08021ee0
 8009640:	08027f54 	.word	0x08027f54
 8009644:	08021f08 	.word	0x08021f08

08009648 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEC1ES3_SE_>:
    MethodBinder(ObjectPtr o, MemFunPtr f)
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4639      	mov	r1, r7
 8009654:	e881 000c 	stmia.w	r1, {r2, r3}
        , fun_(f)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3304      	adds	r3, #4
 8009662:	463a      	mov	r2, r7
 8009664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009668:	e883 0003 	stmia.w	r3, {r0, r1}
    { }
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSG_>:
    int start(const Callback& callback)
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
        stop();
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4618      	mov	r0, r3
 8009688:	f001 fdc7 	bl	800b21a <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
        if (!coerceOrFallback<bool>(callback, true))
 800968c:	2301      	movs	r3, #1
 800968e:	72fb      	strb	r3, [r7, #11]
 8009690:	f107 030b 	add.w	r3, r7, #11
 8009694:	4619      	mov	r1, r3
 8009696:	6838      	ldr	r0, [r7, #0]
 8009698:	f001 fdd3 	bl	800b242 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPKNS_22TransportStatsProviderEMS2_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS6_9Response_ILi0EEEEEEEET_RKT0_RKSH_>
 800969c:	4603      	mov	r3, r0
 800969e:	f083 0301 	eor.w	r3, r3, #1
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSG_+0x34>
            return -ErrInvalidParam;
 80096a8:	f06f 0301 	mvn.w	r3, #1
 80096ac:	e015      	b.n	80096da <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSG_+0x60>
        callback_ = callback;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	3370      	adds	r3, #112	; 0x70
 80096b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80096b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        const int publisher_res = publisher_.init();
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3348      	adds	r3, #72	; 0x48
 80096be:	4618      	mov	r0, r3
 80096c0:	f001 fdce 	bl	800b260 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE4initEv>
 80096c4:	60f8      	str	r0, [r7, #12]
        if (publisher_res < 0)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da01      	bge.n	80096d0 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSG_+0x56>
            return publisher_res;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	e004      	b.n	80096da <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSG_+0x60>
        return SubscriberType::startAsServiceRequestListener();
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f001 fdd0 	bl	800b278 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>
 80096d8:	4603      	mov	r3, r0
    }
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <_ZN6uavcan8protocol4file5Path_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.file.Path";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 fdda 	bl	800b2a8 <_ZN6uavcan8protocol4file5Path_ILi0EE20getDataTypeSignatureEv>
 80096f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f014 fb2a 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 8009706:	b580      	push	{r7, lr}
 8009708:	b082      	sub	sp, #8
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff fb71 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol4file20BeginFirmwareUpdate_EEC1Ev>:
    DefaultDataTypeRegistrator()
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 8009724:	f00b fa8a 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8009728:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 800972a:	f107 0308 	add.w	r3, r7, #8
 800972e:	2128      	movs	r1, #40	; 0x28
 8009730:	4618      	mov	r0, r3
 8009732:	f7fc fa8e 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	4620      	mov	r0, r4
 800973a:	f001 fdd5 	bl	800b2e8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol4file20BeginFirmwareUpdate_EEC1Ev+0x32>
            handleFatalError("Type reg failed");
 8009748:	4803      	ldr	r0, [pc, #12]	; (8009758 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol4file20BeginFirmwareUpdate_EEC1Ev+0x3c>)
 800974a:	f014 fc19 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}
 8009758:	08021ed0 	.word	0x08021ed0

0800975c <_ZN12uavcan_stm328CanIfaceD1Ev>:
class CanIface : public uavcan::ICanIface, uavcan::Noncopyable
 800975c:	b590      	push	{r4, r7, lr}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	4a0f      	ldr	r2, [pc, #60]	; (80097a4 <_ZN12uavcan_stm328CanIfaceD1Ev+0x48>)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3328      	adds	r3, #40	; 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00c      	beq.n	800978c <_ZN12uavcan_stm328CanIfaceD1Ev+0x30>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3328      	adds	r3, #40	; 0x28
 8009776:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3328      	adds	r3, #40	; 0x28
 800977e:	429c      	cmp	r4, r3
 8009780:	d004      	beq.n	800978c <_ZN12uavcan_stm328CanIfaceD1Ev+0x30>
 8009782:	3c20      	subs	r4, #32
 8009784:	4620      	mov	r0, r4
 8009786:	f7fe fa81 	bl	8007c8c <_ZN12uavcan_stm328CanIface6TxItemD1Ev>
 800978a:	e7f6      	b.n	800977a <_ZN12uavcan_stm328CanIfaceD1Ev+0x1e>
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7fc f931 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4618      	mov	r0, r3
 8009796:	f7fc fc5d 	bl	8006054 <_ZN6uavcan9ICanIfaceD1Ev>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd90      	pop	{r4, r7, pc}
 80097a4:	0802c828 	.word	0x0802c828

080097a8 <_ZN12uavcan_stm328CanIfaceD0Ev>:
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff ffd3 	bl	800975c <_ZN12uavcan_stm328CanIfaceD1Ev>
 80097b6:	2190      	movs	r1, #144	; 0x90
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f016 fec6 	bl	802054a <_ZdlPvj>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <_ZN12uavcan_stm329CanDriverD1Ev>:

/**
 * CAN driver, incorporates all available CAN ifaces.
 * Please avoid direct use, prefer @ref CanInitHelper instead.
 */
class CanDriver : public uavcan::ICanDriver, uavcan::Noncopyable
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	4a09      	ldr	r2, [pc, #36]	; (80097f8 <_ZN12uavcan_stm329CanDriverD1Ev+0x30>)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3310      	adds	r3, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff ffbe 	bl	800975c <_ZN12uavcan_stm328CanIfaceD1Ev>
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7fc f907 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fc fc53 	bl	8006094 <_ZN6uavcan10ICanDriverD1Ev>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	0802c808 	.word	0x0802c808

080097fc <_ZN12uavcan_stm329CanDriverD0Ev>:
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff ffdf 	bl	80097c8 <_ZN12uavcan_stm329CanDriverD1Ev>
 800980a:	21a0      	movs	r1, #160	; 0xa0
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f016 fe9c 	bl	802054a <_ZdlPvj>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_ZN12uavcan_stm3213CanInitHelperILj128EEC1Ev>:
public:
    enum { BitRateAutoDetect = 0 };

    CanDriver driver;

    CanInitHelper() :
 800981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
        driver(queue_storage_)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2400      	movs	r4, #0
 800982a:	461e      	mov	r6, r3
 800982c:	2c00      	cmp	r4, #0
 800982e:	db0f      	blt.n	8009850 <_ZN12uavcan_stm3213CanInitHelperILj128EEC1Ev+0x34>
 8009830:	4633      	mov	r3, r6
 8009832:	257f      	movs	r5, #127	; 0x7f
 8009834:	4698      	mov	r8, r3
 8009836:	2d00      	cmp	r5, #0
 8009838:	db06      	blt.n	8009848 <_ZN12uavcan_stm3213CanInitHelperILj128EEC1Ev+0x2c>
 800983a:	4640      	mov	r0, r8
 800983c:	f7fe f9c3 	bl	8007bc6 <_ZN12uavcan_stm329CanRxItemC1Ev>
 8009840:	f108 0820 	add.w	r8, r8, #32
 8009844:	3d01      	subs	r5, #1
 8009846:	e7f6      	b.n	8009836 <_ZN12uavcan_stm3213CanInitHelperILj128EEC1Ev+0x1a>
 8009848:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800984c:	3c01      	subs	r4, #1
 800984e:	e7ed      	b.n	800982c <_ZN12uavcan_stm3213CanInitHelperILj128EEC1Ev+0x10>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	4611      	mov	r1, r2
 800985a:	4618      	mov	r0, r3
 800985c:	f001 fdb6 	bl	800b3cc <_ZN12uavcan_stm329CanDriverC1ILj128EEERA1_AT__NS_9CanRxItemE>
    { }
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800986c <_ZN6uavcan5INodeC1Ev>:
class UAVCAN_EXPORT INode
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	4a04      	ldr	r2, [pc, #16]	; (8009888 <_ZN6uavcan5INodeC1Ev+0x1c>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	080251ec 	.word	0x080251ec

0800988c <_ZN6uavcan13PoolAllocatorILj8192ELh56EcED1Ev>:
 *     };
 */
template <std::size_t PoolSize,
          uint8_t BlockSize,
          typename RaiiSynchronizer = char>
class UAVCAN_EXPORT PoolAllocator : public IPoolAllocator,
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	4a07      	ldr	r2, [pc, #28]	; (80098b4 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcED1Ev+0x28>)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7fc f8aa 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fc fb34 	bl	8005f10 <_ZN6uavcan14IPoolAllocatorD1Ev>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4618      	mov	r0, r3
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	080250c0 	.word	0x080250c0

080098b8 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcED0Ev>:
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ffe3 	bl	800988c <_ZN6uavcan13PoolAllocatorILj8192ELh56EcED1Ev>
 80098c6:	f242 0110 	movw	r1, #8208	; 0x2010
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f016 fe3d 	bl	802054a <_ZdlPvj>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <_ZN6uavcan9SchedulerD1Ev>:
class UAVCAN_EXPORT Scheduler : Noncopyable
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fc fce6 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fc fce0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8009900:	4618      	mov	r0, r3
 8009902:	f7fc fc07 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3310      	adds	r3, #16
 800990a:	4618      	mov	r0, r3
 800990c:	f7fc ff6c 	bl	80067e8 <_ZN6uavcan10DispatcherD1Ev>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3304      	adds	r3, #4
 8009914:	4618      	mov	r0, r3
 8009916:	f7fc ff56 	bl	80067c6 <_ZN6uavcan17DeadlineSchedulerD1Ev>
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fc f86a 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <_ZN6uavcan18NodeStatusProviderD1Ev>:
class UAVCAN_EXPORT NodeStatusProvider : private TimerBase
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	4a0f      	ldr	r2, [pc, #60]	; (8009974 <_ZN6uavcan18NodeStatusProviderD1Ev+0x48>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	33d0      	adds	r3, #208	; 0xd0
 800993e:	4618      	mov	r0, r3
 8009940:	f7fd fa7d 	bl	8006e3e <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EED1Ev>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3350      	adds	r3, #80	; 0x50
 8009948:	4618      	mov	r0, r3
 800994a:	f005 fbb9 	bl	800f0c0 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3328      	adds	r3, #40	; 0x28
 8009952:	4618      	mov	r0, r3
 8009954:	f7fd fa2c 	bl	8006db0 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEED1Ev>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3320      	adds	r3, #32
 800995c:	4618      	mov	r0, r3
 800995e:	f7fc fbd9 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	f7fd f9fb 	bl	8006d60 <_ZN6uavcan9TimerBaseD1Ev>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4618      	mov	r0, r3
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	0802a30c 	.word	0x0802a30c

08009978 <_ZN6uavcan18NodeStatusProviderD0Ev>:
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff ffd3 	bl	800992c <_ZN6uavcan18NodeStatusProviderD1Ev>
 8009986:	f44f 7118 	mov.w	r1, #608	; 0x260
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f016 fddd 	bl	802054a <_ZdlPvj>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <_ZN6uavcan20DataTypeInfoProviderD1Ev>:
class UAVCAN_EXPORT DataTypeInfoProvider : Noncopyable
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f005 fb63 	bl	800f070 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fc f822 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <_ZN6uavcan6LoggerD1Ev>:
class UAVCAN_EXPORT Logger
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3328      	adds	r3, #40	; 0x28
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fd fcd4 	bl	8007374 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EED1Ev>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fd fca9 	bl	8007326 <_ZN6uavcan9PublisherINS_8protocol5debug11LogMessage_ILi0EEEED1Ev>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <_ZN6uavcan20RestartRequestServerD1Ev>:
class UAVCAN_EXPORT RestartRequestServer : Noncopyable
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f005 fb19 	bl	800f020 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEED1Ev>
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7fc f800 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_ZN6uavcan22TransportStatsProviderD1Ev>:
class UAVCAN_EXPORT TransportStatsProvider : Noncopyable
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f005 fae1 	bl	800efd0 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7fb fff0 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <_ZN6uavcan4NodeILj8192EEC1ERNS_10ICanDriverERNS_12ISystemClockE>:

public:
    /**
     * This overload is only valid if MemPoolSize > 0.
     */
    Node(ICanDriver& can_driver,
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
        proto_nsp_(*this)
#if !UAVCAN_TINY
        , proto_dtp_(*this)
        , proto_logger_(*this)
        , proto_rrs_(*this)
        , proto_tsp_(*this)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff ff1c 	bl	800986c <_ZN6uavcan5INodeC1Ev>
 8009a34:	4a23      	ldr	r2, [pc, #140]	; (8009ac4 <_ZN6uavcan4NodeILj8192EEC1ERNS_10ICanDriverERNS_12ISystemClockE+0xa4>)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 fcf4 	bl	800b42c <_ZN6uavcan13PoolAllocatorILj8192ELh56EcEC1Ev>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 8009a4a:	3018      	adds	r0, #24
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f103 0208 	add.w	r2, r3, #8
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	f7fc fef6 	bl	8006846 <_ZN6uavcan9SchedulerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockE>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fd f9ff 	bl	8006e68 <_ZN6uavcan18NodeStatusProviderC1ERNS_5INodeE>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 8009a70:	3320      	adds	r3, #32
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd fbd8 	bl	800722c <_ZN6uavcan20DataTypeInfoProviderC1ERNS_5INodeE>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009a82:	3320      	adds	r3, #32
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fd fc87 	bl	800739c <_ZN6uavcan6LoggerC1ERNS_5INodeE>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8009a94:	3310      	adds	r3, #16
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fd fdc4 	bl	8007628 <_ZN6uavcan20RestartRequestServerC1ERNS_5INodeE>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8009aa6:	3318      	adds	r3, #24
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fd fe94 	bl	80077da <_ZN6uavcan22TransportStatsProviderC1ERNS_5INodeE>
#endif
    {
        commonInit();
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f001 fd0e 	bl	800b4d4 <_ZN6uavcan4NodeILj8192EE10commonInitEv>
    }
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	080250a0 	.word	0x080250a0

08009ac8 <_ZN12uavcan_stm3213CanInitHelperILj128EE4initEm>:
     * This overload simply configures the provided bitrate.
     * Auto bit rate detection will not be performed.
     * Bitrate value must be positive.
     * @return  Negative value on error; non-negative on success. Refer to constants Err*.
     */
    int init(uavcan::uint32_t bitrate)
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
    {
        return driver.init(bitrate, CanIface::NormalMode);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad8:	2200      	movs	r2, #0
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f015 fc95 	bl	801f40c <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE>
 8009ae2:	4603      	mov	r3, r0
    }
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1EPKc>:
    Array(const char* str)      // Implicit
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
    {
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 fd05 	bl	800b508 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>
        operator+=(str);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 fd13 	bl	800b52c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEpLEPKc>
    }
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_ZN6uavcan4NodeILj8192EE7setNameERKNS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEE>:
    /**
     * Gets/sets the node name, e.g. "com.example.product_name". The node name can be set only once.
     * The name must be set before the node is started, otherwise the node will refuse to start up.
     */
    const NodeStatusProvider::NodeName& getName() const { return proto_nsp_.getName(); }
    void setName(const NodeStatusProvider::NodeName& name) { proto_nsp_.setName(name); }
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f00c fd8f 	bl	8016646 <_ZN6uavcan18NodeStatusProvider7setNameERKNS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEE>
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE>:
};

// ----------------------------------------------------------------------------

template <std::size_t MemPoolSize_>
int Node<MemPoolSize_>::start(const TransferPriority priority)
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	7039      	strb	r1, [r7, #0]
{
    if (started_)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 8009b40:	3320      	adds	r3, #32
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0x1c>
    {
        return 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e05f      	b.n	8009c0c <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xdc>
    }
    GlobalDataTypeRegistry::instance().freeze();
 8009b4c:	f00b f876 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8009b50:	4603      	mov	r3, r0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f00b f88c 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>

    int res = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60fb      	str	r3, [r7, #12]
    res = proto_nsp_.startAndPublish(priority);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8009b62:	7839      	ldrb	r1, [r7, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f00c fc55 	bl	8016414 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE>
 8009b6a:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	db38      	blt.n	8009be4 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xb4>
    {
        goto fail;
    }
#if !UAVCAN_TINY
    res = proto_dtp_.start();
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 8009b78:	3320      	adds	r3, #32
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fd fb68 	bl	8007250 <_ZN6uavcan20DataTypeInfoProvider5startEv>
 8009b80:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	db2f      	blt.n	8009be8 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xb8>
    {
        goto fail;
    }
    res = proto_logger_.init();
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009b8e:	3320      	adds	r3, #32
 8009b90:	4a20      	ldr	r2, [pc, #128]	; (8009c14 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xe4>)
 8009b92:	7811      	ldrb	r1, [r2, #0]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fd fc79 	bl	800748c <_ZN6uavcan6Logger4initENS_16TransferPriorityE>
 8009b9a:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	db24      	blt.n	8009bec <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xbc>
    {
        goto fail;
    }
    res = proto_rrs_.start();
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8009ba8:	3310      	adds	r3, #16
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fd fd52 	bl	8007654 <_ZN6uavcan20RestartRequestServer5startEv>
 8009bb0:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	db1b      	blt.n	8009bf0 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xc0>
    {
        goto fail;
    }
    res = proto_tsp_.start();
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 8009bbe:	3318      	adds	r3, #24
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fd fe1d 	bl	8007800 <_ZN6uavcan22TransportStatsProvider5startEv>
 8009bc6:	60f8      	str	r0, [r7, #12]
    if (res < 0)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	db12      	blt.n	8009bf4 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xc4>
    {
        goto fail;
    }
#endif
    started_ = res >= 0;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	0fdb      	lsrs	r3, r3, #31
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 8009bdc:	3320      	adds	r3, #32
 8009bde:	701a      	strb	r2, [r3, #0]
    return res;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	e013      	b.n	8009c0c <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xdc>
        goto fail;
 8009be4:	bf00      	nop
 8009be6:	e006      	b.n	8009bf6 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xc6>
        goto fail;
 8009be8:	bf00      	nop
 8009bea:	e004      	b.n	8009bf6 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xc6>
        goto fail;
 8009bec:	bf00      	nop
 8009bee:	e002      	b.n	8009bf6 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xc6>
        goto fail;
 8009bf0:	bf00      	nop
 8009bf2:	e000      	b.n	8009bf6 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xc6>
        goto fail;
 8009bf4:	bf00      	nop
fail:
    UAVCAN_ASSERT(res < 0);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	db06      	blt.n	8009c0a <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xda>
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xe8>)
 8009bfe:	4a07      	ldr	r2, [pc, #28]	; (8009c1c <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xec>)
 8009c00:	f240 1139 	movw	r1, #313	; 0x139
 8009c04:	4806      	ldr	r0, [pc, #24]	; (8009c20 <_ZN6uavcan4NodeILj8192EE5startENS_16TransferPriorityE+0xf0>)
 8009c06:	f016 fcc1 	bl	802058c <__assert_func>
    return res;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20008600 	.word	0x20008600
 8009c18:	08021bf0 	.word	0x08021bf0
 8009c1c:	080280c0 	.word	0x080280c0
 8009c20:	08021fd0 	.word	0x08021fd0

08009c24 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fd f81a 	bl	8006c68 <_ZNSt14_Function_baseC1Ev>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEEC1ERNS_5INodeERKSA_>:
public:
    /**
     * @param node      Node instance this client will be registered with.
     * @param callback  Callback instance. Optional, can be assigned later.
     */
    explicit ServiceClient(INode& node, const Callback& callback = Callback())
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
        : SubscriberType(node)
        , ServiceClientBase(node)
        , call_registry_(node.getAllocator())
        , publisher_(node, getDefaultRequestTimeout())
        , callback_(callback)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f001 fc91 	bl	800b578 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEEC1ERNS_5INodeE>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3348      	adds	r3, #72	; 0x48
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fd ff09 	bl	8007a74 <_ZN6uavcan17ServiceClientBaseC1ERNS_5INodeE>
 8009c62:	4a2b      	ldr	r2, [pc, #172]	; (8009d10 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEEC1ERNS_5INodeERKSA_+0xd0>)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	4a2a      	ldr	r2, [pc, #168]	; (8009d14 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEEC1ERNS_5INodeERKSA_+0xd4>)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	649a      	str	r2, [r3, #72]	; 0x48
 8009c6e:	4a2a      	ldr	r2, [pc, #168]	; (8009d18 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEEC1ERNS_5INodeERKSA_+0xd8>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	651a      	str	r2, [r3, #80]	; 0x50
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f103 0470 	add.w	r4, r3, #112	; 0x70
        , call_registry_(node.getAllocator())
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	681b      	ldr	r3, [r3, #0]
        , callback_(callback)
 8009c82:	68b8      	ldr	r0, [r7, #8]
 8009c84:	4798      	blx	r3
 8009c86:	4603      	mov	r3, r0
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	f001 fcc6 	bl	800b61c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEEC1ERNS_14IPoolAllocatorE>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8009c96:	f107 0310 	add.w	r3, r7, #16
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fd ff51 	bl	8007b42 <_ZN6uavcan17ServiceClientBase24getDefaultRequestTimeoutEv>
 8009ca0:	f107 0318 	add.w	r3, r7, #24
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fc febe 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 8009caa:	f107 0318 	add.w	r3, r7, #24
 8009cae:	f107 0210 	add.w	r2, r7, #16
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f001 fcda 	bl	800b66e <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES9_>
 8009cba:	f107 0318 	add.w	r3, r7, #24
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fc fafb 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8009cc4:	f107 0310 	add.w	r3, r7, #16
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fc faf6 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	33a8      	adds	r3, #168	; 0xa8
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f001 fd04 	bl	800b6e2 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1ERKS9_>
    {
        setPriority(TransferPriority::MiddleLower);
 8009cda:	4b10      	ldr	r3, [pc, #64]	; (8009d1c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEEC1ERNS_5INodeERKSA_+0xdc>)
 8009cdc:	7819      	ldrb	r1, [r3, #0]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f001 fd21 	bl	800b726 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE11setPriorityENS_16TransferPriorityE>
        setRequestTimeout(getDefaultRequestTimeout());
 8009ce4:	f107 0320 	add.w	r3, r7, #32
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fd ff2a 	bl	8007b42 <_ZN6uavcan17ServiceClientBase24getDefaultRequestTimeoutEv>
 8009cee:	f107 0320 	add.w	r3, r7, #32
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f001 fd25 	bl	800b744 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17setRequestTimeoutENS_17MonotonicDurationE>
 8009cfa:	f107 0320 	add.w	r3, r7, #32
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fc fadb 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
#if UAVCAN_DEBUG
        UAVCAN_ASSERT(getRequestTimeout() == getDefaultRequestTimeout());  // Making sure default values are OK
#endif
    }
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4618      	mov	r0, r3
 8009d08:	372c      	adds	r7, #44	; 0x2c
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd90      	pop	{r4, r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	08025030 	.word	0x08025030
 8009d14:	0802504c 	.word	0x0802504c
 8009d18:	08025060 	.word	0x08025060
 8009d1c:	200085f4 	.word	0x200085f4

08009d20 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>:

    virtual ~ServiceClient() { cancelAllCalls(); }
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	4a14      	ldr	r2, [pc, #80]	; (8009d7c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev+0x5c>)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev+0x60>)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	649a      	str	r2, [r3, #72]	; 0x48
 8009d34:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev+0x64>)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	651a      	str	r2, [r3, #80]	; 0x50
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 fd66 	bl	800b80c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14cancelAllCallsEv>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	33a8      	adds	r3, #168	; 0xa8
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7fe fad5 	bl	80082f4 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEED1Ev>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3380      	adds	r3, #128	; 0x80
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fcba 	bl	800b6c8 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEED1Ev>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3370      	adds	r3, #112	; 0x70
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 fc74 	bl	800b646 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEED1Ev>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3348      	adds	r3, #72	; 0x48
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fd feb4 	bl	8007ad0 <_ZN6uavcan17ServiceClientBaseD1Ev>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 fc1e 	bl	800b5ac <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEED1Ev>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	08025030 	.word	0x08025030
 8009d80:	0802504c 	.word	0x0802504c
 8009d84:	08025060 	.word	0x08025060

08009d88 <_ZThn72_N6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>:
 8009d88:	f1a0 0048 	sub.w	r0, r0, #72	; 0x48
 8009d8c:	e7c8      	b.n	8009d20 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>

08009d8e <_ZThn80_N6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>:
 8009d8e:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8009d92:	e7c5      	b.n	8009d20 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>

08009d94 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED0Ev>:
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff ffbf 	bl	8009d20 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED1Ev>
 8009da2:	21b8      	movs	r1, #184	; 0xb8
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f016 fbd0 	bl	802054a <_ZdlPvj>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <_ZThn72_N6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED0Ev>:
 8009db4:	f1a0 0048 	sub.w	r0, r0, #72	; 0x48
 8009db8:	e7ec      	b.n	8009d94 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED0Ev>

08009dba <_ZThn80_N6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED0Ev>:
 8009dba:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 8009dbe:	e7e9      	b.n	8009d94 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEED0Ev>

08009dc0 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4initEv>:

    /**
     * Shall be called before first use.
     * Returns negative error code.
     */
    int init()
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
    {
        return publisher_.init();
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3380      	adds	r3, #128	; 0x80
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 fd2e 	bl	800b82e <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE4initEv>
 8009dd2:	4603      	mov	r3, r0
    }
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <_ZNK6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EE12isSuccessfulEv>:
    bool isSuccessful() const { return status_ == Success; }
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bf0c      	ite	eq
 8009dec:	2301      	moveq	r3, #1
 8009dee:	2300      	movne	r3, #0
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <_ZNK6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EE9getCallIDEv>:
    ServiceCallID getCallID() const { return call_id_; }
 8009dfe:	b480      	push	{r7}
 8009e00:	b085      	sub	sp, #20
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	f107 030c 	add.w	r3, r7, #12
 8009e0c:	3201      	adds	r2, #1
 8009e0e:	8812      	ldrh	r2, [r2, #0]
 8009e10:	801a      	strh	r2, [r3, #0]
 8009e12:	2300      	movs	r3, #0
 8009e14:	7b3a      	ldrb	r2, [r7, #12]
 8009e16:	f362 0307 	bfi	r3, r2, #0, #8
 8009e1a:	7b7a      	ldrb	r2, [r7, #13]
 8009e1c:	f362 230f 	bfi	r3, r2, #8, #8
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <_ZSt4moveIRZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEE_EONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1IZ16StartDefaultTaskEUlS7_E_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	7039      	strb	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fc ff09 	bl	8006c68 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8009e56:	463b      	mov	r3, r7
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 fcf4 	bl	800b846 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E21_M_not_empty_functionIS9_EEbRKT_>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00f      	beq.n	8009e84 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1IZ16StartDefaultTaskEUlS7_E_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8009e64:	687c      	ldr	r4, [r7, #4]
 8009e66:	463b      	mov	r3, r7
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7ff ffdf 	bl	8009e2c <_ZSt4moveIRZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEE_EONSt16remove_referenceIT_E4typeEOSB_>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4619      	mov	r1, r3
 8009e72:	4620      	mov	r0, r4
 8009e74:	f001 fcf2 	bl	800b85c <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E15_M_init_functorERSt9_Any_dataOS9_>
	    _M_invoker = &_My_handler::_M_invoke;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a05      	ldr	r2, [pc, #20]	; (8009e90 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1IZ16StartDefaultTaskEUlS7_E_vvEET_+0x4c>)
 8009e7c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a04      	ldr	r2, [pc, #16]	; (8009e94 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1IZ16StartDefaultTaskEUlS7_E_vvEET_+0x50>)
 8009e82:	609a      	str	r2, [r3, #8]
	  }
      }
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd90      	pop	{r4, r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800b897 	.word	0x0800b897
 8009e94:	0800b8c1 	.word	0x0800b8c1

08009e98 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE11setCallbackERKSA_>:

    /**
     * Service response callback must be set prior service call.
     */
    const Callback& getCallback() const { return callback_; }
    void setCallback(const Callback& cb) { callback_ = cb; }
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	33a8      	adds	r3, #168	; 0xa8
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 fd31 	bl	800b910 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEaSERKS9_>
 8009eae:	bf00      	nop
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EEC1Ev>:
        Request_()
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
            , image_file_remote_path()
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 fd3c 	bl	800b946 <_ZN6uavcan8protocol4file5Path_ILi0EEC1Ev>
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8009ece:	f7fb fd7f 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EED1Ev>:
    ~ArrayImpl() { }
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fd3c 	bl	800b964 <_ZN6uavcan16DynamicArrayBaseILj200EED1Ev>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEE>:

    return 0;
}

template <typename DataType_, typename Callback_>
int ServiceClient<DataType_, Callback_>::call(NodeID server_node_id, const RequestType& request)
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b086      	sub	sp, #24
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	7239      	strb	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
{
   ServiceCallID dummy;
 8009f02:	f107 0314 	add.w	r3, r7, #20
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fd fc98 	bl	800783c <_ZN6uavcan13ServiceCallIDC1Ev>
   return call(server_node_id, request, dummy);
 8009f0c:	f107 0314 	add.w	r3, r7, #20
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	7a39      	ldrb	r1, [r7, #8]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f001 fd31 	bl	800b97c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE>
 8009f1a:	4603      	mov	r3, r0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <_ZN6uavcan4NodeILj8192EE18setModeOperationalEv>:
    void setModeOperational()    { proto_nsp_.setModeOperational(); }
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fd f800 	bl	8006f38 <_ZN6uavcan18NodeStatusProvider18setModeOperationalEv>
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE15hasPendingCallsEv>:
    bool hasPendingCalls() const { return !call_registry_.isEmpty(); }
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3370      	adds	r3, #112	; 0x70
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fdbf 	bl	800bad0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7isEmptyEv>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f083 0301 	eor.w	r3, r3, #1
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZN6uavcan4NodeILj8192EE4spinENS_17MonotonicDurationE>:
    int spin(MonotonicDuration duration)
 8009f62:	b590      	push	{r4, r7, lr}
 8009f64:	b085      	sub	sp, #20
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
        if (started_)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 8009f72:	3320      	adds	r3, #32
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d013      	beq.n	8009fa2 <_ZN6uavcan4NodeILj8192EE4spinENS_17MonotonicDurationE+0x40>
            return INode::spin(duration);
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	f107 0308 	add.w	r3, r7, #8
 8009f82:	c903      	ldmia	r1, {r0, r1}
 8009f84:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f88:	f107 0308 	add.w	r3, r7, #8
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7fc fd19 	bl	80069c6 <_ZN6uavcan5INode4spinENS_17MonotonicDurationE>
 8009f94:	4604      	mov	r4, r0
 8009f96:	f107 0308 	add.w	r3, r7, #8
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fc f98d 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8009fa0:	e001      	b.n	8009fa6 <_ZN6uavcan4NodeILj8192EE4spinENS_17MonotonicDurationE+0x44>
        return -ErrNotInited;
 8009fa2:	f06f 0407 	mvn.w	r4, #7
 8009fa6:	4623      	mov	r3, r4
    }
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd90      	pop	{r4, r7, pc}

08009fb0 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEEC1Ev>:
    LinkedListRoot()
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7fb fd10 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
    { }
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEEC1Ev>:
    LinkedListRoot()
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7fb fd01 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
    { }
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE5clearEv>:
    }
    return UAVCAN_NULLPTR;
}

template <typename Key, typename Value>
void Map<Key, Value>::clear()
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
{
    removeAllWhere(YesPredicate());
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 fd96 	bl	800bb28 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_>
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE7destroyEv>:
    T*       operator->()       { ensureConstructed(); return ptr_; }

    const T& operator*() const { ensureConstructed(); return *ptr_; }
    T&       operator*()       { ensureConstructed(); return *ptr_; }

    void destroy()
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
    {
        if (ptr_)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE7destroyEv+0x1a>
        {
            ptr_->~T();
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	4618      	mov	r0, r3
 800a01a:	f00d f8bf 	bl	801719c <_ZN6uavcan10CanTxQueueD1Ev>
        }
        ptr_ = UAVCAN_NULLPTR;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	61da      	str	r2, [r3, #28]
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	331c      	adds	r3, #28
 800a02a:	2200      	movs	r2, #0
 800a02c:	73fa      	strb	r2, [r7, #15]
 800a02e:	f107 020f 	add.w	r2, r7, #15
 800a032:	4619      	mov	r1, r3
 800a034:	f7fe facc 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800a038:	bf00      	nop
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEltERKS1_>:
    bool operator<(const D& r) const { return usec_ < r.usec_; }
 800a040:	b490      	push	{r4, r7}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	e9d3 1200 	ldrd	r1, r2, [r3]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a056:	4299      	cmp	r1, r3
 800a058:	eb72 0304 	sbcs.w	r3, r2, r4
 800a05c:	bfb4      	ite	lt
 800a05e:	2301      	movlt	r3, #1
 800a060:	2300      	movge	r3, #0
 800a062:	b2db      	uxtb	r3, r3
 800a064:	4618      	mov	r0, r3
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bc90      	pop	{r4, r7}
 800a06c:	4770      	bx	lr

0800a06e <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE10isNegativeEv>:
    bool isNegative() const { return usec_ < 0; }
 800a06e:	b490      	push	{r4, r7}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a07c:	0fe3      	lsrs	r3, r4, #31
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bc90      	pop	{r4, r7}
 800a088:	4770      	bx	lr

0800a08a <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6getAbsEv>:
    D getAbs() const { return D::fromUSec((usec_ < 0) ? (-usec_) : usec_); }
 800a08a:	b590      	push	{r4, r7, lr}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f174 0200 	sbcs.w	r2, r4, #0
 800a0a0:	da02      	bge.n	800a0a8 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6getAbsEv+0x1e>
 800a0a2:	425b      	negs	r3, r3
 800a0a4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	4608      	mov	r0, r1
 800a0b0:	f7fe fcd6 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd90      	pop	{r4, r7, pc}

0800a0bc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toUSecEv>:
    int64_t toUSec() const { return usec_; }
 800a0bc:	b490      	push	{r4, r7}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bc90      	pop	{r4, r7}
 800a0d4:	4770      	bx	lr

0800a0d6 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEEC1Ev>:
    DurationBase()
 800a0d6:	b590      	push	{r4, r7, lr}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
        : usec_(0)
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	f04f 0300 	mov.w	r3, #0
 800a0e4:	f04f 0400 	mov.w	r4, #0
 800a0e8:	e9c2 3400 	strd	r3, r4, [r2]
        StaticAssert<(sizeof(D) == 8)>::check();
 800a0ec:	f7fb fc70 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd90      	pop	{r4, r7, pc}

0800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>:
    struct Entry : public LinkedListNode<Entry>
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fa57 	bl	80085b8 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEED1Ev>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <__tcf_1>:
    if (isFrozen())
    {
        return RegistrationResultFrozen;
    }

    static Entry entry;
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <__tcf_1+0xc>)
 800a11a:	f7ff ffee 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20008488 	.word	0x20008488

0800a124 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800a124:	b5b0      	push	{r4, r5, r7, lr}
 800a126:	b08e      	sub	sp, #56	; 0x38
 800a128:	af02      	add	r7, sp, #8
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7fb fe91 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e049      	b.n	800a1d2 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800a13e:	4b27      	ldr	r3, [pc, #156]	; (800a1dc <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d108      	bne.n	800a15c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800a14a:	4825      	ldr	r0, [pc, #148]	; (800a1e0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a14c:	f7fb fe71 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800a150:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800a152:	2201      	movs	r2, #1
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	4823      	ldr	r0, [pc, #140]	; (800a1e4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800a158:	f016 fa36 	bl	80205c8 <atexit>

    {
        const RegistrationResult remove_res = remove(&entry);
 800a15c:	4920      	ldr	r1, [pc, #128]	; (800a1e0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f00a fc62 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800a164:	4603      	mov	r3, r0
 800a166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800a16a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
        {
            return remove_res;
 800a172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a176:	e02c      	b.n	800a1d2 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
        }
    }

    // We can't just overwrite the entry itself because it's noncopyable
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800a178:	f107 0320 	add.w	r3, r7, #32
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f833 	bl	800a1e8 <_ZN6uavcan8protocol11NodeStatus_ILi0EE20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800a182:	f001 fd41 	bl	800bc08 <_ZN6uavcan8protocol11NodeStatus_ILi0EE19getDataTypeFullNameEv>
 800a186:	4602      	mov	r2, r0
 800a188:	f107 0320 	add.w	r3, r7, #32
 800a18c:	f107 0008 	add.w	r0, r7, #8
 800a190:	9200      	str	r2, [sp, #0]
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	2101      	movs	r1, #1
 800a196:	f7fb fdd5 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800a19a:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a19c:	f103 0408 	add.w	r4, r3, #8
 800a1a0:	f107 0508 	add.w	r5, r7, #8
 800a1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	6023      	str	r3, [r4, #0]

    {
        const RegistrationResult remove_res = remove(&entry);
 800a1ac:	490c      	ldr	r1, [pc, #48]	; (800a1e0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f00a fc3a 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800a1ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d002      	beq.n	800a1c8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
        {
            return remove_res;
 800a1c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a1c6:	e004      	b.n	800a1d2 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
        }
    }
    return registImpl(&entry);
 800a1c8:	4905      	ldr	r1, [pc, #20]	; (800a1e0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol11NodeStatus_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f00a fc8c 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800a1d0:	4603      	mov	r3, r0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3730      	adds	r7, #48	; 0x30
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200084a8 	.word	0x200084a8
 800a1e0:	20008488 	.word	0x20008488
 800a1e4:	0800a115 	.word	0x0800a115

0800a1e8 <_ZN6uavcan8protocol11NodeStatus_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature NodeStatus_<_tmpl>::getDataTypeSignature()
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0xF0868D0C1A7C6F1ULL);
 800a1f0:	a30d      	add	r3, pc, #52	; (adr r3, 800a228 <_ZN6uavcan8protocol11NodeStatus_ILi0EE20getDataTypeSignatureEv+0x40>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7fb fd6c 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::uptime_sec::extendDataTypeSignature(signature);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f001 fd0d 	bl	800bc1c <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::health::extendDataTypeSignature(signature);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f001 fd14 	bl	800bc30 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::mode::extendDataTypeSignature(signature);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 fd1b 	bl	800bc44 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::sub_mode::extendDataTypeSignature(signature);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 fd18 	bl	800bc44 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::vendor_specific_status_code::extendDataTypeSignature(signature);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7fe fdc8 	bl	8008daa <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800a21a:	bf00      	nop
}
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	f3af 8000 	nop.w
 800a228:	c1a7c6f1 	.word	0xc1a7c6f1
 800a22c:	0f0868d0 	.word	0x0f0868d0

0800a230 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature SoftwareVersion_<_tmpl>::getDataTypeSignature()
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0xDD46FD376527FEA1ULL);
 800a238:	a30d      	add	r3, pc, #52	; (adr r3, 800a270 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE20getDataTypeSignatureEv+0x40>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7fb fd48 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::major::extendDataTypeSignature(signature);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7fe fdd6 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::minor::extendDataTypeSignature(signature);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fe fdd3 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::optional_field_flags::extendDataTypeSignature(signature);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7fe fdd0 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::vcs_commit::extendDataTypeSignature(signature);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f001 fce0 	bl	800bc1c <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::image_crc::extendDataTypeSignature(signature);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fe fdc0 	bl	8008de2 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800a262:	bf00      	nop
}
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	f3af 8000 	nop.w
 800a270:	6527fea1 	.word	0x6527fea1
 800a274:	dd46fd37 	.word	0xdd46fd37

0800a278 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature HardwareVersion_<_tmpl>::getDataTypeSignature()
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0xAD5C4C933F4A0C4ULL);
 800a280:	a30b      	add	r3, pc, #44	; (adr r3, 800a2b0 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE20getDataTypeSignatureEv+0x38>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fb fd24 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::major::extendDataTypeSignature(signature);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7fe fdb2 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::minor::extendDataTypeSignature(signature);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7fe fdaf 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::unique_id::extendDataTypeSignature(signature);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 fcdd 	bl	800bc58 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::certificate_of_authenticity::extendDataTypeSignature(signature);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fce5 	bl	800bc6e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800a2a4:	bf00      	nop
}
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	33f4a0c4 	.word	0x33f4a0c4
 800a2b4:	0ad5c4c9 	.word	0x0ad5c4c9

0800a2b8 <__tcf_2>:
    static Entry entry;
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__tcf_2+0xc>)
 800a2be:	f7ff ff1c 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	200084b0 	.word	0x200084b0

0800a2c8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800a2c8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ca:	b08e      	sub	sp, #56	; 0x38
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7fb fdbf 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e049      	b.n	800a376 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800a2e2:	4b27      	ldr	r3, [pc, #156]	; (800a380 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d108      	bne.n	800a300 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800a2ee:	4825      	ldr	r0, [pc, #148]	; (800a384 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a2f0:	f7fb fd9f 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800a2f4:	4b22      	ldr	r3, [pc, #136]	; (800a380 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
 800a2fa:	4823      	ldr	r0, [pc, #140]	; (800a388 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800a2fc:	f016 f964 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 800a300:	4920      	ldr	r1, [pc, #128]	; (800a384 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f00a fb90 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800a308:	4603      	mov	r3, r0
 800a30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800a30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 800a316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a31a:	e02c      	b.n	800a376 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800a31c:	f107 0320 	add.w	r3, r7, #32
 800a320:	4618      	mov	r0, r3
 800a322:	f7fc fcfd 	bl	8006d20 <_ZN6uavcan8protocol12GetNodeInfo_20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800a326:	f7fc fcf1 	bl	8006d0c <_ZN6uavcan8protocol12GetNodeInfo_19getDataTypeFullNameEv>
 800a32a:	4602      	mov	r2, r0
 800a32c:	f107 0320 	add.w	r3, r7, #32
 800a330:	f107 0008 	add.w	r0, r7, #8
 800a334:	9200      	str	r2, [sp, #0]
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	2100      	movs	r1, #0
 800a33a:	f7fb fd03 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800a33e:	4b11      	ldr	r3, [pc, #68]	; (800a384 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a340:	f103 0408 	add.w	r4, r3, #8
 800a344:	f107 0508 	add.w	r5, r7, #8
 800a348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a34a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 800a350:	490c      	ldr	r1, [pc, #48]	; (800a384 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f00a fb68 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800a358:	4603      	mov	r3, r0
 800a35a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800a35e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 800a366:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a36a:	e004      	b.n	800a376 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 800a36c:	4905      	ldr	r1, [pc, #20]	; (800a384 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12GetNodeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f00a fbba 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800a374:	4603      	mov	r3, r0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3730      	adds	r7, #48	; 0x30
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bdb0      	pop	{r4, r5, r7, pc}
 800a37e:	bf00      	nop
 800a380:	200084d0 	.word	0x200084d0
 800a384:	200084b0 	.word	0x200084b0
 800a388:	0800a2b9 	.word	0x0800a2b9

0800a38c <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_EC1ERNS_5INodeENS_17MonotonicDurationES7_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800a38c:	b590      	push	{r4, r7, lr}
 800a38e:	b089      	sub	sp, #36	; 0x24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800a39a:	68fc      	ldr	r4, [r7, #12]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	f107 0310 	add.w	r3, r7, #16
 800a3a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3a6:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	f107 0318 	add.w	r3, r7, #24
 800a3b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a3b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a3b8:	f107 0318 	add.w	r3, r7, #24
 800a3bc:	f107 0210 	add.w	r2, r7, #16
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7fc fb8b 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800a3c8:	f107 0318 	add.w	r3, r7, #24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fb ff74 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800a3d2:	f107 0310 	add.w	r3, r7, #16
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fb ff6f 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3724      	adds	r7, #36	; 0x24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd90      	pop	{r4, r7, pc}

0800a3e6 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>:
    /**
     * Stops the server.
     */
    using SubscriberType::stop;

    static MonotonicDuration getDefaultTxTimeout() { return MonotonicDuration::fromMSec(1000); }
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3f4:	f04f 0300 	mov.w	r3, #0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	f7fe f92f 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>:
    explicit GenericSubscriber(INode& node) : GenericSubscriberBase(node)
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3304      	adds	r3, #4
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fc fbe4 	bl	8006be6 <_ZN6uavcan21GenericSubscriberBaseC1ERNS_5INodeE>
 800a41e:	4a06      	ldr	r2, [pc, #24]	; (800a438 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE+0x30>)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	330c      	adds	r3, #12
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 fc2b 	bl	800bc84 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>
    { }
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	080251d8 	.word	0x080251d8

0800a43c <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>:
    virtual ~GenericSubscriber() { stop(); }
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	4a0a      	ldr	r2, [pc, #40]	; (800a470 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev+0x34>)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fc3c 	bl	800bcc8 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	330c      	adds	r3, #12
 800a454:	4618      	mov	r0, r3
 800a456:	f001 fc2b 	bl	800bcb0 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3304      	adds	r3, #4
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fc fbd4 	bl	8006c0c <_ZN6uavcan21GenericSubscriberBaseD1Ev>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	080251d8 	.word	0x080251d8

0800a474 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED0Ev>:
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ffdd 	bl	800a43c <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800a482:	2144      	movs	r1, #68	; 0x44
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f016 f860 	bl	802054a <_ZdlPvj>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b089      	sub	sp, #36	; 0x24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800a4a2:	68fc      	ldr	r4, [r7, #12]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	f107 0310 	add.w	r3, r7, #16
 800a4aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	f107 0318 	add.w	r3, r7, #24
 800a4b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4c0:	f107 0318 	add.w	r3, r7, #24
 800a4c4:	f107 0210 	add.w	r2, r7, #16
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7fc fb07 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800a4d0:	f107 0318 	add.w	r3, r7, #24
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fb fef0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800a4da:	f107 0310 	add.w	r3, r7, #16
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fb feeb 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3724      	adds	r7, #36	; 0x24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd90      	pop	{r4, r7, pc}

0800a4ee <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEED1Ev>:
    ~GenericPublisher() { }
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fc fb33 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4618      	mov	r0, r3
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1Ev>:
    MethodBinder()
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
        , fun_()
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	605a      	str	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	609a      	str	r2, [r3, #8]
    { }
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <_ZNK6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>:
    static MonotonicDuration getMinTxTimeout() { return PublisherType::getMinTxTimeout(); }
    static MonotonicDuration getMaxTxTimeout() { return PublisherType::getMaxTxTimeout(); }

    MonotonicDuration getTxTimeout() const { return publisher_.getTxTimeout(); }
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f7fc fb22 	bl	8006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <_ZN6uavcan8protocol11NodeStatus_ILi0EEC1Ev>:
    NodeStatus_()
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
        , vendor_specific_status_code()
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	711a      	strb	r2, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	715a      	strb	r2, [r3, #5]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	719a      	strb	r2, [r3, #6]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	811a      	strh	r2, [r3, #8]
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 800a578:	f7fb fa2a 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EEC1Ev>:
    SoftwareVersion_()
 800a586:	b590      	push	{r4, r7, lr}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
        , image_crc()
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	701a      	strb	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	705a      	strb	r2, [r3, #1]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	709a      	strb	r2, [r3, #2]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	f04f 0300 	mov.w	r3, #0
 800a5ac:	f04f 0400 	mov.w	r4, #0
 800a5b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 800a5b4:	f7fb fa0c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd90      	pop	{r4, r7, pc}

0800a5c2 <_ZN6uavcan8protocol16HardwareVersion_ILi0EEC1Ev>:
    HardwareVersion_()
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
        , certificate_of_authenticity()
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	701a      	strb	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	705a      	strb	r2, [r3, #1]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3302      	adds	r3, #2
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 fb88 	bl	800bcf0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EEC1Ev>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3312      	adds	r3, #18
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f001 fb90 	bl	800bd0a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EEC1Ev>
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 800a5ea:	f7fb f9f1 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>:
    Array() { }
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 ff80 	bl	800b508 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <_ZN6uavcan15StaticArrayBaseILj16EED1Ev>:
    ~StaticArrayBase() { }
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <_ZN6uavcan16DynamicArrayBaseILj255EED1Ev>:
    ~DynamicArrayBase() { }
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <_ZN6uavcan16DynamicArrayBaseILj80EED1Ev>:
 800a63e:	b480      	push	{r7}
 800a640:	b083      	sub	sp, #12
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	0000      	movs	r0, r0
	...

0800a658 <_ZN6uavcan8protocol13DataTypeKind_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature DataTypeKind_<_tmpl>::getDataTypeSignature()
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0x9420A73E008E5930ULL);
 800a660:	a307      	add	r3, pc, #28	; (adr r3, 800a680 <_ZN6uavcan8protocol13DataTypeKind_ILi0EE20getDataTypeSignatureEv+0x28>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7fb fb34 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::value::extendDataTypeSignature(signature);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7fe fbc2 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800a672:	bf00      	nop
}
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	f3af 8000 	nop.w
 800a680:	008e5930 	.word	0x008e5930
 800a684:	9420a73e 	.word	0x9420a73e

0800a688 <__tcf_3>:
    static Entry entry;
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	4801      	ldr	r0, [pc, #4]	; (800a694 <__tcf_3+0xc>)
 800a68e:	f7ff fd34 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800a692:	bd80      	pop	{r7, pc}
 800a694:	200084d8 	.word	0x200084d8

0800a698 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800a698:	b5b0      	push	{r4, r5, r7, lr}
 800a69a:	b08e      	sub	sp, #56	; 0x38
 800a69c:	af02      	add	r7, sp, #8
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7fb fbd7 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e049      	b.n	800a746 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800a6b2:	4b27      	ldr	r3, [pc, #156]	; (800a750 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d108      	bne.n	800a6d0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800a6be:	4825      	ldr	r0, [pc, #148]	; (800a754 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a6c0:	f7fb fbb7 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800a6c4:	4b22      	ldr	r3, [pc, #136]	; (800a750 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	4823      	ldr	r0, [pc, #140]	; (800a758 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800a6cc:	f015 ff7c 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 800a6d0:	4920      	ldr	r1, [pc, #128]	; (800a754 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f00a f9a8 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800a6de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 800a6e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6ea:	e02c      	b.n	800a746 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800a6ec:	f107 0320 	add.w	r3, r7, #32
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fc fc39 	bl	8006f68 <_ZN6uavcan8protocol16GetDataTypeInfo_20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800a6f6:	f7fc fc2b 	bl	8006f50 <_ZN6uavcan8protocol16GetDataTypeInfo_19getDataTypeFullNameEv>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	f107 0320 	add.w	r3, r7, #32
 800a700:	f107 0008 	add.w	r0, r7, #8
 800a704:	9200      	str	r2, [sp, #0]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	2100      	movs	r1, #0
 800a70a:	f7fb fb1b 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800a70e:	4b11      	ldr	r3, [pc, #68]	; (800a754 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a710:	f103 0408 	add.w	r4, r3, #8
 800a714:	f107 0508 	add.w	r5, r7, #8
 800a718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a71a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 800a720:	490c      	ldr	r1, [pc, #48]	; (800a754 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f00a f980 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800a72e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 800a736:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a73a:	e004      	b.n	800a746 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 800a73c:	4905      	ldr	r1, [pc, #20]	; (800a754 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol16GetDataTypeInfo_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f00a f9d2 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800a744:	4603      	mov	r3, r0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3730      	adds	r7, #48	; 0x30
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bdb0      	pop	{r4, r5, r7, pc}
 800a74e:	bf00      	nop
 800a750:	200084f8 	.word	0x200084f8
 800a754:	200084d8 	.word	0x200084d8
 800a758:	0800a689 	.word	0x0800a689

0800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>:
    SizeType size() const
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x1a>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	3b01      	subs	r3, #1
 800a772:	2b4f      	cmp	r3, #79	; 0x4f
 800a774:	d801      	bhi.n	800a77a <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x1e>
 800a776:	2301      	movs	r3, #1
 800a778:	e000      	b.n	800a77c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x20>
 800a77a:	2300      	movs	r3, #0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d106      	bne.n	800a78e <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x32>
 800a780:	4b06      	ldr	r3, [pc, #24]	; (800a79c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x40>)
 800a782:	4a07      	ldr	r2, [pc, #28]	; (800a7a0 <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x44>)
 800a784:	f44f 7182 	mov.w	r1, #260	; 0x104
 800a788:	4806      	ldr	r0, [pc, #24]	; (800a7a4 <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv+0x48>)
 800a78a:	f015 feff 	bl	802058c <__assert_func>
        return size_;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	781b      	ldrb	r3, [r3, #0]
    }
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	08022010 	.word	0x08022010
 800a7a0:	08026cf4 	.word	0x08026cf4
 800a7a4:	08021f6c 	.word	0x08021f6c

0800a7a8 <_ZN6uavcan16DynamicArrayBaseILj80EE5clearEv>:
    void clear() { size_ = 0; }
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	701a      	strb	r2, [r3, #0]
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE9push_backERKh>:
    void push_back(const ValueType& value)
 800a7c2:	b590      	push	{r4, r7, lr}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	6039      	str	r1, [r7, #0]
        Base::grow();
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 faa8 	bl	800bd24 <_ZN6uavcan16DynamicArrayBaseILj80EE4growEv>
        Base::at(SizeType(size() - 1)) = value;
 800a7d4:	687c      	ldr	r4, [r7, #4]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff ffbf 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f001 fab3 	bl	800bd52 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE2atEh>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	7013      	strb	r3, [r2, #0]
    }
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd90      	pop	{r4, r7, pc}

0800a7fc <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>:
    static MonotonicDuration getDefaultTxTimeout() { return MonotonicDuration::fromMSec(1000); }
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6879      	ldr	r1, [r7, #4]
 800a806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	4608      	mov	r0, r1
 800a810:	f7fd ff24 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>:
    explicit GenericSubscriber(INode& node) : GenericSubscriberBase(node)
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fc f9da 	bl	8006be6 <_ZN6uavcan21GenericSubscriberBaseC1ERNS_5INodeE>
 800a832:	4a06      	ldr	r2, [pc, #24]	; (800a84c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE+0x30>)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	330c      	adds	r3, #12
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 fa9d 	bl	800bd7c <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>
    { }
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	08025198 	.word	0x08025198

0800a850 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>:
    virtual ~GenericSubscriber() { stop(); }
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	4a0a      	ldr	r2, [pc, #40]	; (800a884 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev+0x34>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7fe fc11 	bl	8009086 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	330c      	adds	r3, #12
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 fa9d 	bl	800bda8 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3304      	adds	r3, #4
 800a872:	4618      	mov	r0, r3
 800a874:	f7fc f9ca 	bl	8006c0c <_ZN6uavcan21GenericSubscriberBaseD1Ev>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	08025198 	.word	0x08025198

0800a888 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED0Ev>:
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff ffdd 	bl	800a850 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800a896:	2144      	movs	r1, #68	; 0x44
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f015 fe56 	bl	802054a <_ZdlPvj>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800a8a8:	b590      	push	{r4, r7, lr}
 800a8aa:	b089      	sub	sp, #36	; 0x24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800a8b6:	68fc      	ldr	r4, [r7, #12]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	f107 0310 	add.w	r3, r7, #16
 800a8be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8c2:	e883 0003 	stmia.w	r3, {r0, r1}
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	f107 0318 	add.w	r3, r7, #24
 800a8cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800a8d4:	f107 0318 	add.w	r3, r7, #24
 800a8d8:	f107 0210 	add.w	r2, r7, #16
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7fc f8fd 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800a8e4:	f107 0318 	add.w	r3, r7, #24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fb fce6 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800a8ee:	f107 0310 	add.w	r3, r7, #16
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fb fce1 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3724      	adds	r7, #36	; 0x24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd90      	pop	{r4, r7, pc}

0800a902 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEED1Ev>:
    ~GenericPublisher() { }
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fc f929 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1Ev>:
    MethodBinder()
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
        , fun_()
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	609a      	str	r2, [r3, #8]
    { }
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <_ZNK6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>:
    MonotonicDuration getTxTimeout() const { return publisher_.getTxTimeout(); }
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4611      	mov	r1, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fc f918 	bl	8006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPNS_20DataTypeInfoProviderEMS2_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEEET_RKT0_RKSG_>:
To coerceOrFallback(const From& from, const To& default_)
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800a970:	461a      	mov	r2, r3
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f001 fa23 	bl	800bdc0 <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPNS_20DataTypeInfoProviderEMS2_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEbE4implERKSF_RKbNS_11BooleanTypeILb1EEE>
 800a97a:	4603      	mov	r3, r0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE4initEv>:
    int init()
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
        return checkInit();
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fa25 	bl	800bddc <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE9checkInitEv>
 800a992:	4603      	mov	r3, r0
    }
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>:
    int startAsServiceRequestListener()
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
        return genericStart(&Dispatcher::registerServiceRequestListener);
 800a9a4:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv+0x28>)
 800a9a6:	60bb      	str	r3, [r7, #8]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fa2c 	bl	800be12 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>
 800a9ba:	4603      	mov	r3, r0
    }
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	08018b9d 	.word	0x08018b9d

0800a9c8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>:
    operator T*() const { return ptr_; }
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <__tcf_4>:
    static Entry entry;
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	4801      	ldr	r0, [pc, #4]	; (800a9ec <__tcf_4+0xc>)
 800a9e6:	f7ff fb88 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20008500 	.word	0x20008500

0800a9f0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800a9f0:	b5b0      	push	{r4, r5, r7, lr}
 800a9f2:	b08e      	sub	sp, #56	; 0x38
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7fb fa2b 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e049      	b.n	800aa9e <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800aa0a:	4b27      	ldr	r3, [pc, #156]	; (800aaa8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d108      	bne.n	800aa28 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800aa16:	4825      	ldr	r0, [pc, #148]	; (800aaac <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800aa18:	f7fb fa0b 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800aa1c:	4b22      	ldr	r3, [pc, #136]	; (800aaa8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	4823      	ldr	r0, [pc, #140]	; (800aab0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800aa24:	f015 fdd0 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 800aa28:	4920      	ldr	r1, [pc, #128]	; (800aaac <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f009 fffc 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800aa36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 800aa3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa42:	e02c      	b.n	800aa9e <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800aa44:	f107 0320 	add.w	r3, r7, #32
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 fa05 	bl	800be58 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800aa4e:	f001 fa1f 	bl	800be90 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE19getDataTypeFullNameEv>
 800aa52:	4602      	mov	r2, r0
 800aa54:	f107 0320 	add.w	r3, r7, #32
 800aa58:	f107 0008 	add.w	r0, r7, #8
 800aa5c:	9200      	str	r2, [sp, #0]
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	2101      	movs	r1, #1
 800aa62:	f7fb f96f 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800aa66:	4b11      	ldr	r3, [pc, #68]	; (800aaac <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800aa68:	f103 0408 	add.w	r4, r3, #8
 800aa6c:	f107 0508 	add.w	r5, r7, #8
 800aa70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 800aa78:	490c      	ldr	r1, [pc, #48]	; (800aaac <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f009 ffd4 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800aa80:	4603      	mov	r3, r0
 800aa82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800aa86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 800aa8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa92:	e004      	b.n	800aa9e <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 800aa94:	4905      	ldr	r1, [pc, #20]	; (800aaac <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol5debug11LogMessage_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f00a f826 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800aa9c:	4603      	mov	r3, r0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3730      	adds	r7, #48	; 0x30
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bdb0      	pop	{r4, r5, r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20008520 	.word	0x20008520
 800aaac:	20008500 	.word	0x20008500
 800aab0:	0800a9e1 	.word	0x0800a9e1

0800aab4 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_EC1ERNS_5INodeENS_17MonotonicDurationES8_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b089      	sub	sp, #36	; 0x24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800aac2:	68fc      	ldr	r4, [r7, #12]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	f107 0310 	add.w	r3, r7, #16
 800aaca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aace:	e883 0003 	stmia.w	r3, {r0, r1}
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	f107 0318 	add.w	r3, r7, #24
 800aad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aadc:	e883 0003 	stmia.w	r3, {r0, r1}
 800aae0:	f107 0318 	add.w	r3, r7, #24
 800aae4:	f107 0210 	add.w	r2, r7, #16
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7fb fff7 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800aaf0:	f107 0318 	add.w	r3, r7, #24
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fb fbe0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800aafa:	f107 0310 	add.w	r3, r7, #16
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fb fbdb 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4618      	mov	r0, r3
 800ab08:	3724      	adds	r7, #36	; 0x24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd90      	pop	{r4, r7, pc}

0800ab0e <_ZN6uavcan8protocol5debug9LogLevel_ILi0EEC1Ev>:
    static const typename ::uavcan::StorageType< typename ConstantTypes::ERROR >::Type ERROR; // 3

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::value >::Type value;

    LogLevel_()
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
        : value()
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 800ab1c:	f7fa ff58 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<3 == MaxBitLen>::check();
#endif
    }
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEC1Ev>:
    Array() { }
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f001 f9b5 	bl	800bea4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEC1Ev>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEC1Ev>:
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f001 f9b9 	bl	800bec6 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEC1Ev>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <_ZN6uavcan16DynamicArrayBaseILj31EED1Ev>:
    ~DynamicArrayBase() { }
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <_ZN6uavcan16DynamicArrayBaseILj90EED1Ev>:
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E9checkInitEv>:
};

// ----------------------------------------------------------------------------

template <typename DataSpec, typename DataStruct>
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 800ab8a:	b590      	push	{r4, r7, lr}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
{
    if (isInited())
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f009 fd1b 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E9checkInitEv+0x1a>
    {
        return 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	e009      	b.n	800abb8 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E9checkInitEv+0x2e>
    }
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 800aba4:	687c      	ldr	r4, [r7, #4]
 800aba6:	f001 f973 	bl	800be90 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE19getDataTypeFullNameEv>
 800abaa:	4602      	mov	r2, r0
 800abac:	2300      	movs	r3, #0
 800abae:	2101      	movs	r1, #1
 800abb0:	4620      	mov	r0, r4
 800abb2:	f009 fd1a 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 800abb6:	4603      	mov	r3, r0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd90      	pop	{r4, r7, pc}

0800abc0 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id,
 800abc0:	b590      	push	{r4, r7, lr}
 800abc2:	b089      	sub	sp, #36	; 0x24
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	713b      	strb	r3, [r7, #4]
 800abcc:	4613      	mov	r3, r2
 800abce:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, UAVCAN_NULLPTR, blocking_deadline);
 800abd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd2:	f107 0310 	add.w	r3, r7, #16
 800abd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800abda:	e883 0003 	stmia.w	r3, {r0, r1}
 800abde:	79fa      	ldrb	r2, [r7, #7]
 800abe0:	f107 0310 	add.w	r3, r7, #16
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	2300      	movs	r3, #0
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	793b      	ldrb	r3, [r7, #4]
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f001 f9be 	bl	800bf70 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 800abf4:	4604      	mov	r4, r0
 800abf6:	f107 0310 	add.w	r3, r7, #16
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fb fa8a 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 800ac00:	4623      	mov	r3, r4
    }
 800ac02:	4618      	mov	r0, r3
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd90      	pop	{r4, r7, pc}
	...

0800ac0c <__tcf_5>:
    static Entry entry;
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__tcf_5+0xc>)
 800ac12:	f7ff fa72 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20008528 	.word	0x20008528

0800ac1c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800ac1c:	b5b0      	push	{r4, r5, r7, lr}
 800ac1e:	b08e      	sub	sp, #56	; 0x38
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7fb f915 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e049      	b.n	800acca <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800ac36:	4b27      	ldr	r3, [pc, #156]	; (800acd4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d108      	bne.n	800ac54 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800ac42:	4825      	ldr	r0, [pc, #148]	; (800acd8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800ac44:	f7fb f8f5 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800ac48:	4b22      	ldr	r3, [pc, #136]	; (800acd4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	4823      	ldr	r0, [pc, #140]	; (800acdc <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800ac50:	f015 fcba 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 800ac54:	4920      	ldr	r1, [pc, #128]	; (800acd8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f009 fee6 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800ac62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 800ac6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac6e:	e02c      	b.n	800acca <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800ac70:	f107 0320 	add.w	r3, r7, #32
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fc fc87 	bl	8007588 <_ZN6uavcan8protocol12RestartNode_20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800ac7a:	f7fc fc79 	bl	8007570 <_ZN6uavcan8protocol12RestartNode_19getDataTypeFullNameEv>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	f107 0320 	add.w	r3, r7, #32
 800ac84:	f107 0008 	add.w	r0, r7, #8
 800ac88:	9200      	str	r2, [sp, #0]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	f7fb f859 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800ac92:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800ac94:	f103 0408 	add.w	r4, r3, #8
 800ac98:	f107 0508 	add.w	r5, r7, #8
 800ac9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 800aca4:	490c      	ldr	r1, [pc, #48]	; (800acd8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f009 febe 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800acac:	4603      	mov	r3, r0
 800acae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800acb2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 800acba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800acbe:	e004      	b.n	800acca <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 800acc0:	4905      	ldr	r1, [pc, #20]	; (800acd8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol12RestartNode_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f009 ff10 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800acc8:	4603      	mov	r3, r0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3730      	adds	r7, #48	; 0x30
 800acce:	46bd      	mov	sp, r7
 800acd0:	bdb0      	pop	{r4, r5, r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20008548 	.word	0x20008548
 800acd8:	20008528 	.word	0x20008528
 800acdc:	0800ac0d 	.word	0x0800ac0d

0800ace0 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>:
    Ret safeget() const
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x1e>
            return Ret();
 800acf0:	f107 030c 	add.w	r3, r7, #12
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fa ff29 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 800acfa:	7b3b      	ldrb	r3, [r7, #12]
 800acfc:	e005      	b.n	800ad0a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fb fb19 	bl	800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>
 800ad08:	4603      	mov	r3, r0
    }
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>:
    static MonotonicDuration getDefaultTxTimeout() { return MonotonicDuration::fromMSec(1000); }
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad20:	f04f 0300 	mov.w	r3, #0
 800ad24:	4608      	mov	r0, r1
 800ad26:	f7fd fc99 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
	...

0800ad34 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>:
    explicit GenericSubscriber(INode& node) : GenericSubscriberBase(node)
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3304      	adds	r3, #4
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fb ff4e 	bl	8006be6 <_ZN6uavcan21GenericSubscriberBaseC1ERNS_5INodeE>
 800ad4a:	4a06      	ldr	r2, [pc, #24]	; (800ad64 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE+0x30>)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	330c      	adds	r3, #12
 800ad54:	4618      	mov	r0, r3
 800ad56:	f001 f95a 	bl	800c00e <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>
    { }
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	08025158 	.word	0x08025158

0800ad68 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>:
    virtual ~GenericSubscriber() { stop(); }
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	4a0a      	ldr	r2, [pc, #40]	; (800ad9c <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev+0x34>)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f881 	bl	800ae7e <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	330c      	adds	r3, #12
 800ad80:	4618      	mov	r0, r3
 800ad82:	f001 f95a 	bl	800c03a <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fb ff3e 	bl	8006c0c <_ZN6uavcan21GenericSubscriberBaseD1Ev>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	08025158 	.word	0x08025158

0800ada0 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEED0Ev>:
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ffdd 	bl	800ad68 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800adae:	2144      	movs	r1, #68	; 0x44
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f015 fbca 	bl	802054a <_ZdlPvj>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800adc0:	b590      	push	{r4, r7, lr}
 800adc2:	b089      	sub	sp, #36	; 0x24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800adce:	68fc      	ldr	r4, [r7, #12]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	f107 0310 	add.w	r3, r7, #16
 800add6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adda:	e883 0003 	stmia.w	r3, {r0, r1}
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	f107 0318 	add.w	r3, r7, #24
 800ade4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ade8:	e883 0003 	stmia.w	r3, {r0, r1}
 800adec:	f107 0318 	add.w	r3, r7, #24
 800adf0:	f107 0210 	add.w	r2, r7, #16
 800adf4:	68b9      	ldr	r1, [r7, #8]
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7fb fe71 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800adfc:	f107 0318 	add.w	r3, r7, #24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fb fa5a 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800ae06:	f107 0310 	add.w	r3, r7, #16
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fb fa55 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4618      	mov	r0, r3
 800ae14:	3724      	adds	r7, #36	; 0x24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd90      	pop	{r4, r7, pc}

0800ae1a <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEED1Ev>:
    ~GenericPublisher() { }
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fb fe9d 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEC1Ev>:
    MethodBinder()
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
        , fun_()
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	601a      	str	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	605a      	str	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	609a      	str	r2, [r3, #8]
    { }
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <_ZNK6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>:
    MonotonicDuration getTxTimeout() const { return publisher_.getTxTimeout(); }
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fb fe8c 	bl	8006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>:
    void stop()
 800ae7e:	b590      	push	{r4, r7, lr}
 800ae80:	b083      	sub	sp, #12
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
        GenericSubscriberBase::stop(forwarder_);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	1d1c      	adds	r4, r3, #4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	330c      	adds	r3, #12
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 f8df 	bl	800c052 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800ae94:	4603      	mov	r3, r0
 800ae96:	4619      	mov	r1, r3
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f009 fcef 	bl	801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>
    }
 800ae9e:	bf00      	nop
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd90      	pop	{r4, r7, pc}

0800aea6 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPKNS_20RestartRequestServerEMS2_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS7_9Response_ILi0EEEEEEEET_RKT0_RKSJ_>:
To coerceOrFallback(const From& from, const To& default_)
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 f8d8 	bl	800c06a <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPKNS_20RestartRequestServerEMS2_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS7_9Response_ILi0EEEEEEbE4implERKSI_RKbNS_11BooleanTypeILb1EEE>
 800aeba:	4603      	mov	r3, r0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE4initEv>:
    int init()
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
        return checkInit();
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 f8da 	bl	800c086 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE9checkInitEv>
 800aed2:	4603      	mov	r3, r0
    }
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>:
    int startAsServiceRequestListener()
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
        return genericStart(&Dispatcher::registerServiceRequestListener);
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv+0x28>)
 800aee6:	60bb      	str	r3, [r7, #8]
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	f107 0308 	add.w	r3, r7, #8
 800aef0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f8e1 	bl	800c0bc <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>
 800aefa:	4603      	mov	r3, r0
    }
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	08018b9d 	.word	0x08018b9d

0800af08 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.CANIfaceStats";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 800af10:	f107 0308 	add.w	r3, r7, #8
 800af14:	4618      	mov	r0, r3
 800af16:	f001 f8f3 	bl	800c100 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE20getDataTypeSignatureEv>
 800af1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f012 ff17 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 800af24:	bf00      	nop
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <__tcf_6>:
    static Entry entry;
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__tcf_6+0xc>)
 800af32:	f7ff f8e2 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20008550 	.word	0x20008550

0800af3c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800af3c:	b5b0      	push	{r4, r5, r7, lr}
 800af3e:	b08e      	sub	sp, #56	; 0x38
 800af40:	af02      	add	r7, sp, #8
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7fa ff85 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800af52:	2303      	movs	r3, #3
 800af54:	e049      	b.n	800afea <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800af56:	4b27      	ldr	r3, [pc, #156]	; (800aff4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d108      	bne.n	800af74 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800af62:	4825      	ldr	r0, [pc, #148]	; (800aff8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800af64:	f7fa ff65 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800af68:	4b22      	ldr	r3, [pc, #136]	; (800aff4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	4823      	ldr	r0, [pc, #140]	; (800affc <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800af70:	f015 fb2a 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 800af74:	4920      	ldr	r1, [pc, #128]	; (800aff8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f009 fd56 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800af82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 800af8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af8e:	e02c      	b.n	800afea <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800af90:	f107 0320 	add.w	r3, r7, #32
 800af94:	4618      	mov	r0, r3
 800af96:	f7fc fb87 	bl	80076a8 <_ZN6uavcan8protocol18GetTransportStats_20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800af9a:	f7fc fb79 	bl	8007690 <_ZN6uavcan8protocol18GetTransportStats_19getDataTypeFullNameEv>
 800af9e:	4602      	mov	r2, r0
 800afa0:	f107 0320 	add.w	r3, r7, #32
 800afa4:	f107 0008 	add.w	r0, r7, #8
 800afa8:	9200      	str	r2, [sp, #0]
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	2100      	movs	r1, #0
 800afae:	f7fa fec9 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800afb2:	4b11      	ldr	r3, [pc, #68]	; (800aff8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800afb4:	f103 0408 	add.w	r4, r3, #8
 800afb8:	f107 0508 	add.w	r5, r7, #8
 800afbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 800afc4:	490c      	ldr	r1, [pc, #48]	; (800aff8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f009 fd2e 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800afd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 800afda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800afde:	e004      	b.n	800afea <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 800afe0:	4905      	ldr	r1, [pc, #20]	; (800aff8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol18GetTransportStats_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f009 fd80 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800afe8:	4603      	mov	r3, r0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3730      	adds	r7, #48	; 0x30
 800afee:	46bd      	mov	sp, r7
 800aff0:	bdb0      	pop	{r4, r5, r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20008570 	.word	0x20008570
 800aff8:	20008550 	.word	0x20008550
 800affc:	0800af2d 	.word	0x0800af2d

0800b000 <_ZN6uavcan16DynamicArrayBaseILj3EE4growEv>:
    void grow()
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
        if (size_ >= MaxSize)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d904      	bls.n	800b01a <_ZN6uavcan16DynamicArrayBaseILj3EE4growEv+0x1a>
            (void)validateRange(MaxSize);  // Will throw, UAVCAN_ASSERT() or do nothing
 800b010:	2103      	movs	r1, #3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 f890 	bl	800c138 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh>
    }
 800b018:	e005      	b.n	800b026 <_ZN6uavcan16DynamicArrayBaseILj3EE4growEv+0x26>
            size_++;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	3301      	adds	r3, #1
 800b020:	b2da      	uxtb	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	701a      	strb	r2, [r3, #0]
    }
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
	...

0800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>:
    SizeType size() const
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d004      	beq.n	800b04a <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x1a>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	3b01      	subs	r3, #1
 800b046:	2b02      	cmp	r3, #2
 800b048:	d801      	bhi.n	800b04e <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x1e>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e000      	b.n	800b050 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x20>
 800b04e:	2300      	movs	r3, #0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x32>
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x40>)
 800b056:	4a07      	ldr	r2, [pc, #28]	; (800b074 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x44>)
 800b058:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b05c:	4806      	ldr	r0, [pc, #24]	; (800b078 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv+0x48>)
 800b05e:	f015 fa95 	bl	802058c <__assert_func>
        return size_;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	781b      	ldrb	r3, [r3, #0]
    }
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	08022010 	.word	0x08022010
 800b074:	080262c4 	.word	0x080262c4
 800b078:	08021f6c 	.word	0x08021f6c

0800b07c <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE2atEh>:
    ValueType& at(SizeType pos)             { return data_[Base::validateRange(pos)]; }
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	78fa      	ldrb	r2, [r7, #3]
 800b08c:	4611      	mov	r1, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f001 f852 	bl	800c138 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh>
 800b094:	4603      	mov	r3, r0
 800b096:	461a      	mov	r2, r3
 800b098:	4613      	mov	r3, r2
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	4413      	add	r3, r2
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE19getDefaultTxTimeoutEv>:
    static MonotonicDuration getDefaultTxTimeout() { return MonotonicDuration::fromMSec(1000); }
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0bc:	f04f 0300 	mov.w	r3, #0
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	f7fd facb 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE>:
    explicit GenericSubscriber(INode& node) : GenericSubscriberBase(node)
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fb fd80 	bl	8006be6 <_ZN6uavcan21GenericSubscriberBaseC1ERNS_5INodeE>
 800b0e6:	4a06      	ldr	r2, [pc, #24]	; (800b100 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEEC1ERNS_5INodeE+0x30>)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	330c      	adds	r3, #12
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 f83f 	bl	800c174 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>
    { }
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	08025118 	.word	0x08025118

0800b104 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>:
    virtual ~GenericSubscriber() { stop(); }
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	4a0a      	ldr	r2, [pc, #40]	; (800b138 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev+0x34>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f881 	bl	800b21a <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	330c      	adds	r3, #12
 800b11c:	4618      	mov	r0, r3
 800b11e:	f001 f83f 	bl	800c1a0 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3304      	adds	r3, #4
 800b126:	4618      	mov	r0, r3
 800b128:	f7fb fd70 	bl	8006c0c <_ZN6uavcan21GenericSubscriberBaseD1Ev>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	08025118 	.word	0x08025118

0800b13c <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEED0Ev>:
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7ff ffdd 	bl	800b104 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800b14a:	2144      	movs	r1, #68	; 0x44
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f015 f9fc 	bl	802054a <_ZdlPvj>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES8_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800b15c:	b590      	push	{r4, r7, lr}
 800b15e:	b089      	sub	sp, #36	; 0x24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800b16a:	68fc      	ldr	r4, [r7, #12]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	f107 0310 	add.w	r3, r7, #16
 800b172:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b176:	e883 0003 	stmia.w	r3, {r0, r1}
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	f107 0318 	add.w	r3, r7, #24
 800b180:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b184:	e883 0003 	stmia.w	r3, {r0, r1}
 800b188:	f107 0318 	add.w	r3, r7, #24
 800b18c:	f107 0210 	add.w	r2, r7, #16
 800b190:	68b9      	ldr	r1, [r7, #8]
 800b192:	4620      	mov	r0, r4
 800b194:	f7fb fca3 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800b198:	f107 0318 	add.w	r3, r7, #24
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fb f88c 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800b1a2:	f107 0310 	add.w	r3, r7, #16
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fb f887 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3724      	adds	r7, #36	; 0x24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd90      	pop	{r4, r7, pc}

0800b1b6 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEED1Ev>:
    ~GenericPublisher() { }
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fb fccf 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEC1Ev>:
    MethodBinder()
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
        , fun_()
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	605a      	str	r2, [r3, #4]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	609a      	str	r2, [r3, #8]
    { }
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <_ZNK6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE12getTxTimeoutEv>:
    MonotonicDuration getTxTimeout() const { return publisher_.getTxTimeout(); }
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4611      	mov	r1, r2
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fb fcbe 	bl	8006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>:
    void stop()
 800b21a:	b590      	push	{r4, r7, lr}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
        GenericSubscriberBase::stop(forwarder_);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	1d1c      	adds	r4, r3, #4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	330c      	adds	r3, #12
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 ffc4 	bl	800c1b8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800b230:	4603      	mov	r3, r0
 800b232:	4619      	mov	r1, r3
 800b234:	4620      	mov	r0, r4
 800b236:	f009 fb21 	bl	801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>
    }
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd90      	pop	{r4, r7, pc}

0800b242 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPKNS_22TransportStatsProviderEMS2_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS6_9Response_ILi0EEEEEEEET_RKT0_RKSH_>:
To coerceOrFallback(const From& from, const To& default_)
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800b24c:	461a      	mov	r2, r3
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 ffbd 	bl	800c1d0 <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPKNS_22TransportStatsProviderEMS2_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS6_9Response_ILi0EEEEEEbE4implERKSG_RKbNS_11BooleanTypeILb1EEE>
 800b256:	4603      	mov	r3, r0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE4initEv>:
    int init()
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
        return checkInit();
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 ffbf 	bl	800c1ec <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE9checkInitEv>
 800b26e:	4603      	mov	r3, r0
    }
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>:
    int startAsServiceRequestListener()
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
        return genericStart(&Dispatcher::registerServiceRequestListener);
 800b280:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv+0x28>)
 800b282:	60bb      	str	r3, [r7, #8]
 800b284:	2300      	movs	r3, #0
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	f107 0308 	add.w	r3, r7, #8
 800b28c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 ffc6 	bl	800c222 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>
 800b296:	4603      	mov	r3, r0
    }
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	08018b9d 	.word	0x08018b9d
 800b2a4:	00000000 	.word	0x00000000

0800b2a8 <_ZN6uavcan8protocol4file5Path_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Path_<_tmpl>::getDataTypeSignature()
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0x12AEFC50878A43E2ULL);
 800b2b0:	a307      	add	r3, pc, #28	; (adr r3, 800b2d0 <_ZN6uavcan8protocol4file5Path_ILi0EE20getDataTypeSignatureEv+0x28>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7fa fd0c 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::path::extendDataTypeSignature(signature);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 ffd2 	bl	800c266 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800b2c2:	bf00      	nop
}
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	f3af 8000 	nop.w
 800b2d0:	878a43e2 	.word	0x878a43e2
 800b2d4:	12aefc50 	.word	0x12aefc50

0800b2d8 <__tcf_7>:
    static Entry entry;
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	4801      	ldr	r0, [pc, #4]	; (800b2e4 <__tcf_7+0xc>)
 800b2de:	f7fe ff0c 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	20008578 	.word	0x20008578

0800b2e8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 800b2e8:	b5b0      	push	{r4, r5, r7, lr}
 800b2ea:	b08e      	sub	sp, #56	; 0x38
 800b2ec:	af02      	add	r7, sp, #8
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7fa fdaf 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e049      	b.n	800b396 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 800b302:	4b27      	ldr	r3, [pc, #156]	; (800b3a0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d108      	bne.n	800b320 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 800b30e:	4825      	ldr	r0, [pc, #148]	; (800b3a4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800b310:	f7fa fd8f 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 800b314:	4b22      	ldr	r3, [pc, #136]	; (800b3a0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 800b316:	2201      	movs	r2, #1
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	4823      	ldr	r0, [pc, #140]	; (800b3a8 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 800b31c:	f015 f954 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 800b320:	4920      	ldr	r1, [pc, #128]	; (800b3a4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f009 fb80 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800b328:	4603      	mov	r3, r0
 800b32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 800b32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b332:	2b00      	cmp	r3, #0
 800b334:	d002      	beq.n	800b33c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 800b336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b33a:	e02c      	b.n	800b396 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 800b33c:	f107 0320 	add.w	r3, r7, #32
 800b340:	4618      	mov	r0, r3
 800b342:	f7fc fd15 	bl	8007d70 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 800b346:	f7fc fd09 	bl	8007d5c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_19getDataTypeFullNameEv>
 800b34a:	4602      	mov	r2, r0
 800b34c:	f107 0320 	add.w	r3, r7, #32
 800b350:	f107 0008 	add.w	r0, r7, #8
 800b354:	9200      	str	r2, [sp, #0]
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	2100      	movs	r1, #0
 800b35a:	f7fa fcf3 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 800b35e:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800b360:	f103 0408 	add.w	r4, r3, #8
 800b364:	f107 0508 	add.w	r5, r7, #8
 800b368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 800b370:	490c      	ldr	r1, [pc, #48]	; (800b3a4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f009 fb58 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 800b378:	4603      	mov	r3, r0
 800b37a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 800b37e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 800b386:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b38a:	e004      	b.n	800b396 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 800b38c:	4905      	ldr	r1, [pc, #20]	; (800b3a4 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol4file20BeginFirmwareUpdate_EEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f009 fbaa 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 800b394:	4603      	mov	r3, r0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3730      	adds	r7, #48	; 0x30
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bdb0      	pop	{r4, r5, r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20008598 	.word	0x20008598
 800b3a4:	20008578 	.word	0x20008578
 800b3a8:	0800b2d9 	.word	0x0800b2d9

0800b3ac <_ZN6uavcan10ICanDriverC1Ev>:
class UAVCAN_EXPORT ICanDriver
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	4a04      	ldr	r2, [pc, #16]	; (800b3c8 <_ZN6uavcan10ICanDriverC1Ev+0x1c>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	08025234 	.word	0x08025234

0800b3cc <_ZN12uavcan_stm329CanDriverC1ILj128EEERA1_AT__NS_9CanRxItemE>:
    CanDriver(CanRxItem (&rx_queue_storage)[UAVCAN_STM32_NUM_IFACES][RxQueueCapacity])
 800b3cc:	b590      	push	{r4, r7, lr}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af02      	add	r7, sp, #8
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
        , if0_(bxcan::Can[0], update_event_, 0, rx_queue_storage[0], RxQueueCapacity)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff ffe7 	bl	800b3ac <_ZN6uavcan10ICanDriverC1Ev>
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7fa fafd 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800b3e4:	4a0f      	ldr	r2, [pc, #60]	; (800b424 <_ZN12uavcan_stm329CanDriverC1ILj128EEERA1_AT__NS_9CanRxItemE+0x58>)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7fc fbd6 	bl	8007ba2 <_ZN12uavcan_stm328BusEventC1ERNS_9CanDriverE>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f103 0010 	add.w	r0, r3, #16
 800b3fc:	4c0a      	ldr	r4, [pc, #40]	; (800b428 <_ZN12uavcan_stm329CanDriverC1ILj128EEERA1_AT__NS_9CanRxItemE+0x5c>)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	1d19      	adds	r1, r3, #4
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2280      	movs	r2, #128	; 0x80
 800b406:	9201      	str	r2, [sp, #4]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	2300      	movs	r3, #0
 800b40c:	460a      	mov	r2, r1
 800b40e:	4621      	mov	r1, r4
 800b410:	f7fc fc4a 	bl	8007ca8 <_ZN12uavcan_stm328CanIfaceC1EPNS_5bxcan7CanTypeERNS_8BusEventEhPNS_9CanRxItemEh>
        uavcan::StaticAssert<(RxQueueCapacity <= CanIface::MaxRxQueueCapacity)>::check();
 800b414:	f7fa fadc 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd90      	pop	{r4, r7, pc}
 800b422:	bf00      	nop
 800b424:	0802c808 	.word	0x0802c808
 800b428:	40006400 	.word	0x40006400

0800b42c <_ZN6uavcan13PoolAllocatorILj8192ELh56EcEC1Ev>:
 */
template <std::size_t PoolSize, uint8_t BlockSize, typename RaiiSynchronizer>
const uint16_t PoolAllocator<PoolSize, BlockSize, RaiiSynchronizer>::NumBlocks;

template <std::size_t PoolSize, uint8_t BlockSize, typename RaiiSynchronizer>
PoolAllocator<PoolSize, BlockSize, RaiiSynchronizer>::PoolAllocator() :
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
    free_list_(reinterpret_cast<Node*>(pool_.bytes)),
    used_(0),
    max_used_(0)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4618      	mov	r0, r3
 800b438:	f7fa fd8a 	bl	8005f50 <_ZN6uavcan14IPoolAllocatorC1Ev>
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7fa face 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800b442:	4a23      	ldr	r2, [pc, #140]	; (800b4d0 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcEC1Ev+0xa4>)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f103 0208 	add.w	r2, r3, #8
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	605a      	str	r2, [r3, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b458:	3308      	adds	r3, #8
 800b45a:	2200      	movs	r2, #0
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b464:	330a      	adds	r3, #10
 800b466:	2200      	movs	r2, #0
 800b468:	801a      	strh	r2, [r3, #0]
{
    // The limit is imposed by the width of the pool usage tracking variables.
    StaticAssert<((PoolSize / BlockSize) <= 0xFFFFU)>::check();
 800b46a:	f7fa fab1 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>

    (void)std::memset(pool_.bytes, 0, PoolSize);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3308      	adds	r3, #8
 800b472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f015 f902 	bl	8020682 <memset>
    for (unsigned i = 0; (i + 1) < (NumBlocks - 1 + 1); i++) // -Werror=type-limits
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3301      	adds	r3, #1
 800b486:	2b91      	cmp	r3, #145	; 0x91
 800b488:	d816      	bhi.n	800b4b8 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcEC1Ev+0x8c>
    {
        // coverity[dead_error_line : FALSE]
        free_list_[i].next = free_list_ + i + 1;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6859      	ldr	r1, [r3, #4]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	1c5a      	adds	r2, r3, #1
 800b492:	4613      	mov	r3, r2
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	1a9b      	subs	r3, r3, r2
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	461c      	mov	r4, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6858      	ldr	r0, [r3, #4]
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	1a9b      	subs	r3, r3, r2
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	4403      	add	r3, r0
 800b4ac:	190a      	adds	r2, r1, r4
 800b4ae:	601a      	str	r2, [r3, #0]
    for (unsigned i = 0; (i + 1) < (NumBlocks - 1 + 1); i++) // -Werror=type-limits
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	e7e4      	b.n	800b482 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcEC1Ev+0x56>
    }
    free_list_[NumBlocks - 1].next = UAVCAN_NULLPTR;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 800b4c0:	3318      	adds	r3, #24
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
}
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd90      	pop	{r4, r7, pc}
 800b4d0:	080250c0 	.word	0x080250c0

0800b4d4 <_ZN6uavcan4NodeILj8192EE10commonInitEv>:
    void commonInit()
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
        internal_failure_cnt_ = 0;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 800b4e2:	3318      	adds	r3, #24
 800b4e4:	f04f 0100 	mov.w	r1, #0
 800b4e8:	f04f 0200 	mov.w	r2, #0
 800b4ec:	e9c3 1200 	strd	r1, r2, [r3]
        started_ = false;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 800b4f6:	3320      	adds	r3, #32
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	701a      	strb	r2, [r3, #0]
    }
 800b4fc:	bf00      	nop
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>:
    ArrayImpl() { initialize<ValueType>(0); }
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 feb2 	bl	800c27c <_ZN6uavcan16DynamicArrayBaseILj80EEC1Ev>
 800b518:	2100      	movs	r1, #0
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 febc 	bl	800c298 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
	...

0800b52c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEpLEPKc>:

    /**
     * This operator can only be used with string-like arrays; otherwise it will fail to compile.
     * @ref c_str()
     */
    SelfType& operator+=(const char* chr)
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
    {
        StaticAssert<Base::IsStringLike>::check();
 800b536:	f7fa fa4b 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<IsDynamic>::check();
 800b53a:	f7fa fa49 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        if (chr == UAVCAN_NULLPTR)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEpLEPKc+0x1e>
        {
            handleFatalError("Array::operator+=(const char*)");
 800b544:	480b      	ldr	r0, [pc, #44]	; (800b574 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEpLEPKc+0x48>)
 800b546:	f012 fd1b 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
        }
        while (*chr)
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00b      	beq.n	800b56a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEpLEPKc+0x3e>
        {
            push_back(ValueType(*chr++));
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	1c5a      	adds	r2, r3, #1
 800b556:	603a      	str	r2, [r7, #0]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	73fb      	strb	r3, [r7, #15]
 800b55c:	f107 030f 	add.w	r3, r7, #15
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff f92d 	bl	800a7c2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE9push_backERKh>
        while (*chr)
 800b568:	e7ef      	b.n	800b54a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEpLEPKc+0x1e>
        }
        return *this;
 800b56a:	687b      	ldr	r3, [r7, #4]
    }
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	08022040 	.word	0x08022040

0800b578 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEEC1ERNS_5INodeE>:
    explicit GenericSubscriber(INode& node) : GenericSubscriberBase(node)
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3304      	adds	r3, #4
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fb fb2c 	bl	8006be6 <_ZN6uavcan21GenericSubscriberBaseC1ERNS_5INodeE>
 800b58e:	4a06      	ldr	r2, [pc, #24]	; (800b5a8 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEEC1ERNS_5INodeE+0x30>)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	330c      	adds	r3, #12
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fe88 	bl	800c2ae <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEC1Ev>
    { }
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	08025074 	.word	0x08025074

0800b5ac <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEED1Ev>:
    virtual ~GenericSubscriber() { stop(); }
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	4a0a      	ldr	r2, [pc, #40]	; (800b5e0 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEED1Ev+0x34>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fe99 	bl	800c2f2 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE4stopEv>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	330c      	adds	r3, #12
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fe88 	bl	800c2da <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEED1Ev>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fb fb1c 	bl	8006c0c <_ZN6uavcan21GenericSubscriberBaseD1Ev>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	08025074 	.word	0x08025074

0800b5e4 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEED0Ev>:
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff ffdd 	bl	800b5ac <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEED1Ev>
 800b5f2:	2148      	movs	r1, #72	; 0x48
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f014 ffa8 	bl	802054a <_ZdlPvj>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEED1Ev>:
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7fa f9f1 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4618      	mov	r0, r3
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEEC1ERNS_14IPoolAllocatorE>:
            return false;
        }
    };

public:
    Multiset(IPoolAllocator& allocator)
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
        : allocator_(allocator)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7fa f9d9 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3304      	adds	r3, #4
 800b630:	4618      	mov	r0, r3
 800b632:	f000 fe72 	bl	800c31a <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEEC1Ev>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	609a      	str	r2, [r3, #8]
    { }
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEED1Ev>:

    ~Multiset()
 800b646:	b580      	push	{r7, lr}
 800b648:	b082      	sub	sp, #8
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
    {
        clear();
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fe72 	bl	800c338 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5clearEv>
    }
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff ffd3 	bl	800b604 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEED1Ev>
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7fa f9c8 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEEC1ERNS_5INodeENS_17MonotonicDurationES9_>:
    GenericPublisher(INode& node, MonotonicDuration tx_timeout,
 800b66e:	b590      	push	{r4, r7, lr}
 800b670:	b089      	sub	sp, #36	; 0x24
 800b672:	af00      	add	r7, sp, #0
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	607a      	str	r2, [r7, #4]
 800b67a:	603b      	str	r3, [r7, #0]
        : GenericPublisherBase(node, tx_timeout, max_transfer_interval)
 800b67c:	68fc      	ldr	r4, [r7, #12]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	f107 0310 	add.w	r3, r7, #16
 800b684:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b688:	e883 0003 	stmia.w	r3, {r0, r1}
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	f107 0318 	add.w	r3, r7, #24
 800b692:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b696:	e883 0003 	stmia.w	r3, {r0, r1}
 800b69a:	f107 0318 	add.w	r3, r7, #24
 800b69e:	f107 0210 	add.w	r2, r7, #16
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f7fb fa1a 	bl	8006ade <_ZN6uavcan20GenericPublisherBaseC1ERNS_5INodeENS_17MonotonicDurationES3_>
 800b6aa:	f107 0318 	add.w	r3, r7, #24
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fa fe03 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 800b6b4:	f107 0310 	add.w	r3, r7, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fa fdfe 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    { }
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3724      	adds	r7, #36	; 0x24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd90      	pop	{r4, r7, pc}

0800b6c8 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEED1Ev>:
    ~GenericPublisher() { }
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fb fa46 	bl	8006b64 <_ZN6uavcan20GenericPublisherBaseD1Ev>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1ERKS9_>:
    function<_Res(_ArgTypes...)>::
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fb faba 	bl	8006c68 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800b6f4:	6838      	ldr	r0, [r7, #0]
 800b6f6:	f000 fe2b 	bl	800c350 <_ZNKSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEcvbEv>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00d      	beq.n	800b71c <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1ERKS9_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	2202      	movs	r2, #2
 800b70a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	68da      	ldr	r2, [r3, #12]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	609a      	str	r2, [r3, #8]
    }
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE11setPriorityENS_16TransferPriorityE>:
    void setPriority(const TransferPriority prio) { publisher_.setPriority(prio); }
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	7039      	strb	r1, [r7, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3380      	adds	r3, #128	; 0x80
 800b734:	7839      	ldrb	r1, [r7, #0]
 800b736:	4618      	mov	r0, r3
 800b738:	f7fb fa3b 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17setRequestTimeoutENS_17MonotonicDurationE>:
    void setRequestTimeout(MonotonicDuration timeout)
 800b744:	b580      	push	{r7, lr}
 800b746:	b08a      	sub	sp, #40	; 0x28
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
        timeout = max(timeout, getMinRequestTimeout());
 800b74e:	f107 0308 	add.w	r3, r7, #8
 800b752:	4618      	mov	r0, r3
 800b754:	f7fc fa05 	bl	8007b62 <_ZN6uavcan17ServiceClientBase20getMinRequestTimeoutEv>
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	4619      	mov	r1, r3
 800b75e:	6838      	ldr	r0, [r7, #0]
 800b760:	f7fd f8e7 	bl	8008932 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_>
 800b764:	4602      	mov	r2, r0
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b76c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b770:	f107 0308 	add.w	r3, r7, #8
 800b774:	4618      	mov	r0, r3
 800b776:	f7fa fda0 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        timeout = min(timeout, getMaxRequestTimeout());
 800b77a:	f107 0310 	add.w	r3, r7, #16
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fc f9ff 	bl	8007b82 <_ZN6uavcan17ServiceClientBase20getMaxRequestTimeoutEv>
 800b784:	f107 0310 	add.w	r3, r7, #16
 800b788:	4619      	mov	r1, r3
 800b78a:	6838      	ldr	r0, [r7, #0]
 800b78c:	f7fd f8bd 	bl	800890a <_ZN6uavcan3minINS_17MonotonicDurationEEERKT_S4_S4_>
 800b790:	4602      	mov	r2, r0
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b798:	e883 0003 	stmia.w	r3, {r0, r1}
 800b79c:	f107 0310 	add.w	r3, r7, #16
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fa fd8a 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        publisher_.setTxTimeout(timeout);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	f107 0318 	add.w	r3, r7, #24
 800b7b2:	c903      	ldmia	r1, {r0, r1}
 800b7b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7b8:	f107 0318 	add.w	r3, r7, #24
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f008 ffdd 	bl	801477e <_ZN6uavcan20GenericPublisherBase12setTxTimeoutENS_17MonotonicDurationE>
 800b7c4:	f107 0318 	add.w	r3, r7, #24
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fa fd76 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        request_timeout_ = max(timeout, publisher_.getTxTimeout());  // No less than TX timeout
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800b7d4:	f107 0320 	add.w	r3, r7, #32
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fb f9d7 	bl	8006b8e <_ZNK6uavcan20GenericPublisherBase12getTxTimeoutEv>
 800b7e0:	f107 0320 	add.w	r3, r7, #32
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6838      	ldr	r0, [r7, #0]
 800b7e8:	f7fd f8a3 	bl	8008932 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3368      	adds	r3, #104	; 0x68
 800b7f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7fa:	f107 0320 	add.w	r3, r7, #32
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fa fd5b 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    }
 800b804:	bf00      	nop
 800b806:	3728      	adds	r7, #40	; 0x28
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14cancelAllCallsEv>:
        SubscriberType::stop();
    }
}

template <typename DataType_, typename Callback_>
void ServiceClient<DataType_, Callback_>::cancelAllCalls()
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
{
    call_registry_.clear();
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3370      	adds	r3, #112	; 0x70
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 fd8d 	bl	800c338 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5clearEv>
    SubscriberType::stop();
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	f000 fd66 	bl	800c2f2 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE4stopEv>
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE4initEv>:
    int init()
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
        return checkInit();
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fd9a 	bl	800c370 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE9checkInitEv>
 800b83c:	4603      	mov	r3, r0
    }
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E21_M_not_empty_functionIS9_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
	  { return true; }
 800b84e:	2301      	movs	r3, #1
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E15_M_init_functorERSt9_Any_dataOS9_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800b85c:	b590      	push	{r4, r7, lr}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800b866:	6838      	ldr	r0, [r7, #0]
 800b868:	f7fe fae0 	bl	8009e2c <_ZSt4moveIRZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEE_EONSt16remove_referenceIT_E4typeEOSB_>
 800b86c:	4603      	mov	r3, r0
 800b86e:	4622      	mov	r2, r4
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fd97 	bl	800c3a6 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb1EE>
 800b878:	bf00      	nop
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}

0800b880 <_ZSt7forwardIRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4618      	mov	r0, r3
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <_ZNSt17_Function_handlerIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEZ16StartDefaultTaskEUlS7_E_E9_M_invokeERKSt9_Any_dataS7_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800b896:	b590      	push	{r4, r7, lr}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
	(*_Base::_M_get_pointer(__functor))(
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fd97 	bl	800c3d4 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E14_M_get_pointerERKSt9_Any_data>
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	6838      	ldr	r0, [r7, #0]
 800b8aa:	f7ff ffe9 	bl	800b880 <_ZSt7forwardIRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7fc fd2c 	bl	8008310 <_ZZ16StartDefaultTaskENKUlRKN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEE_clES6_>
      }
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd90      	pop	{r4, r7, pc}

0800b8c0 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800b8c0:	b5b0      	push	{r4, r5, r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d00d      	beq.n	800b8f0 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x30>
 800b8d4:	2b03      	cmp	r3, #3
 800b8d6:	d011      	beq.n	800b8fc <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x3c>
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d114      	bne.n	800b906 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 fd8a 	bl	800c3f6 <_ZNSt9_Any_data9_M_accessIPZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERT_v>
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	68b8      	ldr	r0, [r7, #8]
 800b8e6:	f000 fd75 	bl	800c3d4 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E14_M_get_pointerERKSt9_Any_data>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	6023      	str	r3, [r4, #0]
	      break;
 800b8ee:	e00a      	b.n	800b906 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	68b9      	ldr	r1, [r7, #8]
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 fd8a 	bl	800c40e <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb1EE>
	      break;
 800b8fa:	e004      	b.n	800b906 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 fd9c 	bl	800c43c <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800b904:	bf00      	nop
	  return false;
 800b906:	2300      	movs	r3, #0
	}
 800b908:	4618      	mov	r0, r3
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bdb0      	pop	{r4, r5, r7, pc}

0800b910 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEaSERKS9_>:
      operator=(const function& __x)
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff fede 	bl	800b6e2 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEC1ERKS9_>
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fd91 	bl	800c454 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEE4swapERS9_>
 800b932:	f107 0308 	add.w	r3, r7, #8
 800b936:	4618      	mov	r0, r3
 800b938:	f7fc fcdc 	bl	80082f4 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEED1Ev>
	return *this;
 800b93c:	687b      	ldr	r3, [r7, #4]
      }
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <_ZN6uavcan8protocol4file5Path_ILi0EEC1Ev>:
    Path_()
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
        : path()
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4618      	mov	r0, r3
 800b952:	f000 fda0 	bl	800c496 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EEC1Ev>
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 800b956:	f7fa f83b 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <_ZN6uavcan16DynamicArrayBaseILj200EED1Ev>:
    ~DynamicArrayBase() { }
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4618      	mov	r0, r3
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE>:
int ServiceClient<DataType_, Callback_>::call(NodeID server_node_id, const RequestType& request,
 800b97c:	b5b0      	push	{r4, r5, r7, lr}
 800b97e:	b08e      	sub	sp, #56	; 0x38
 800b980:	af02      	add	r7, sp, #8
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	7239      	strb	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
    if (!coerceOrFallback<bool>(callback_, true))
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	33a8      	adds	r3, #168	; 0xa8
 800b98e:	2201      	movs	r2, #1
 800b990:	75fa      	strb	r2, [r7, #23]
 800b992:	f107 0217 	add.w	r2, r7, #23
 800b996:	4611      	mov	r1, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 fd89 	bl	800c4b0 <_ZN6uavcan16coerceOrFallbackIbSt8functionIFvRKNS_17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEEEEET_RKT0_RKSB_>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f083 0301 	eor.w	r3, r3, #1
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x34>
        return -ErrInvalidConfiguration;
 800b9aa:	f06f 030c 	mvn.w	r3, #12
 800b9ae:	e083      	b.n	800bab8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x13c>
    const int prep_res =
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3304      	adds	r3, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fb f932 	bl	8006c24 <_ZNK6uavcan21GenericSubscriberBase7getNodeEv>
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	f7fc f9cb 	bl	8007d5c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_19getDataTypeFullNameEv>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	7a3b      	ldrb	r3, [r7, #8]
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f00a f921 	bl	8015c18 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE>
 800b9d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (prep_res < 0)
 800b9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da01      	bge.n	800b9e2 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x66>
        return prep_res;
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	e06a      	b.n	800bab8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x13c>
    const int call_state_res = addCallState(out_call_id);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781a      	ldrb	r2, [r3, #0]
 800b9e6:	785b      	ldrb	r3, [r3, #1]
 800b9e8:	021b      	lsls	r3, r3, #8
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f362 030f 	bfi	r3, r2, #0, #16
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 fd6a 	bl	800c4ce <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE>
 800b9fa:	62b8      	str	r0, [r7, #40]	; 0x28
    if (call_state_res < 0)
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da01      	bge.n	800ba06 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x8a>
        return call_state_res;
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	e058      	b.n	800bab8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x13c>
    TransferListenerWithFilter* const tl = SubscriberType::getTransferListener();
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fd9b 	bl	800c544 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE19getTransferListenerEv>
 800ba0e:	6278      	str	r0, [r7, #36]	; 0x24
    if (tl == UAVCAN_NULLPTR)
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0xa8>
        UAVCAN_ASSERT(0);  // Must have been created
 800ba16:	4b2a      	ldr	r3, [pc, #168]	; (800bac0 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x144>)
 800ba18:	4a2a      	ldr	r2, [pc, #168]	; (800bac4 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x148>)
 800ba1a:	f44f 7105 	mov.w	r1, #532	; 0x214
 800ba1e:	482a      	ldr	r0, [pc, #168]	; (800bac8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x14c>)
 800ba20:	f014 fdb4 	bl	802058c <__assert_func>
    tl->installAcceptanceFilter(this);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3348      	adds	r3, #72	; 0x48
 800ba28:	4619      	mov	r1, r3
 800ba2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba2c:	f7fa fd0a 	bl	8006444 <_ZN6uavcan26TransferListenerWithFilter23installAcceptanceFilterEPKNS_25ITransferAcceptanceFilterE>
    const int publisher_res = publisher_.publish(request, TransferTypeServiceRequest, server_node_id,
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f103 0580 	add.w	r5, r3, #128	; 0x80
 800ba36:	f04f 0300 	mov.w	r3, #0
 800ba3a:	f04f 0400 	mov.w	r4, #0
 800ba3e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800ba42:	f107 0318 	add.w	r3, r7, #24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fa fb57 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 800ba4c:	f107 0318 	add.w	r3, r7, #24
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	f88d 3000 	strb.w	r3, [sp]
 800ba5a:	7a3b      	ldrb	r3, [r7, #8]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	4628      	mov	r0, r5
 800ba62:	f000 fd9f 	bl	800c5a4 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE7publishERKS5_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>
 800ba66:	6238      	str	r0, [r7, #32]
 800ba68:	f107 0318 	add.w	r3, r7, #24
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fa fb51 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if (publisher_res < 0)
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	da0d      	bge.n	800ba94 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x118>
        cancelCall(out_call_id);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	785b      	ldrb	r3, [r3, #1]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	431a      	orrs	r2, r3
 800ba82:	2300      	movs	r3, #0
 800ba84:	f362 030f 	bfi	r3, r2, #0, #16
 800ba88:	4619      	mov	r1, r3
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 fd68 	bl	800c560 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE10cancelCallENS_13ServiceCallIDE>
        return publisher_res;
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	e011      	b.n	800bab8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x13c>
    UAVCAN_ASSERT(server_node_id == out_call_id.server_node_id);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	f107 0208 	add.w	r2, r7, #8
 800ba9a:	7819      	ldrb	r1, [r3, #0]
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	f7fa f8b6 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d106      	bne.n	800bab6 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x13a>
 800baa8:	4b08      	ldr	r3, [pc, #32]	; (800bacc <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x150>)
 800baaa:	4a06      	ldr	r2, [pc, #24]	; (800bac4 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x148>)
 800baac:	f240 2125 	movw	r1, #549	; 0x225
 800bab0:	4805      	ldr	r0, [pc, #20]	; (800bac8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE4callENS_6NodeIDERKNS3_8Request_ILi0EEERNS_13ServiceCallIDE+0x14c>)
 800bab2:	f014 fd6b 	bl	802058c <__assert_func>
    return publisher_res;
 800bab6:	6a3b      	ldr	r3, [r7, #32]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3730      	adds	r7, #48	; 0x30
 800babc:	46bd      	mov	sp, r7
 800babe:	bdb0      	pop	{r4, r5, r7, pc}
 800bac0:	08021b88 	.word	0x08021b88
 800bac4:	08028c74 	.word	0x08028c74
 800bac8:	08021cd4 	.word	0x08021cd4
 800bacc:	08022060 	.word	0x08022060

0800bad0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7isEmptyEv>:
    }

    /**
     * Complexity is O(1).
     */
    bool isEmpty() const { return find(YesPredicate()) == UAVCAN_NULLPTR; }
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fd88 	bl	800c5f0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPKS2_T_>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bf0c      	ite	eq
 800bae6:	2301      	moveq	r3, #1
 800bae8:	2300      	movne	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <_ZN6uavcan24OutgoingTransferRegistry5ValueD1Ev>:
    struct Value
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fa fb08 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>:
    struct KVPair
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff ffeb 	bl	800baf4 <_ZN6uavcan24OutgoingTransferRegistry5ValueD1Ev>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_>:
void Map<Key, Value>::removeAllWhere(Predicate predicate)
 800bb28:	b5b0      	push	{r4, r5, r7, lr}
 800bb2a:	b090      	sub	sp, #64	; 0x40
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	7039      	strb	r1, [r7, #0]
    unsigned num_removed = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	; 0x3c
    KVGroup* p = list_.get();
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fd66 	bl	800c60c <_ZNK6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE3getEv>
 800bb40:	63b8      	str	r0, [r7, #56]	; 0x38
    while (p != UAVCAN_NULLPTR)
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d054      	beq.n	800bbf2 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0xca>
        KVGroup* const next_group = p->getNextListNode();
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fd6a 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800bb50:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < KVGroup::NumKV; i++)
 800bb52:	2300      	movs	r3, #0
 800bb54:	637b      	str	r3, [r7, #52]	; 0x34
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	dc47      	bgt.n	800bbec <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0xc4>
            const KVPair* const kv = p->kvs + i;
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5e:	f103 0108 	add.w	r1, r3, #8
 800bb62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb64:	4613      	mov	r3, r2
 800bb66:	005b      	lsls	r3, r3, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	440b      	add	r3, r1
 800bb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (!kv->match(Key()))
 800bb70:	f107 0308 	add.w	r3, r7, #8
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fa fc73 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 800bb7a:	f107 0308 	add.w	r3, r7, #8
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb82:	f000 fd5b 	bl	800c63c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPair5matchERKS1_>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f083 0301 	eor.w	r3, r3, #1
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d028      	beq.n	800bbe4 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0xbc>
                if (predicate(kv->key, kv->value))
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	f103 0110 	add.w	r1, r3, #16
 800bb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 fd5d 	bl	800c65c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE12YesPredicateclERKS1_RKS3_>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d01d      	beq.n	800bbe4 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0xbc>
                    num_removed++;
 800bba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbaa:	3301      	adds	r3, #1
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    p->kvs[i] = KVPair();
 800bbae:	f107 0310 	add.w	r3, r7, #16
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 fd71 	bl	800c69a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1Ev>
 800bbb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bbba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	440b      	add	r3, r1
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	461d      	mov	r5, r3
 800bbca:	f107 0410 	add.w	r4, r7, #16
 800bbce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bbd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bbd6:	e885 0003 	stmia.w	r5, {r0, r1}
 800bbda:	f107 0310 	add.w	r3, r7, #16
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff ff95 	bl	800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>
        for (int i = 0; i < KVGroup::NumKV; i++)
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbea:	e7b4      	b.n	800bb56 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0x2e>
        p = next_group;
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	63bb      	str	r3, [r7, #56]	; 0x38
    while (p != UAVCAN_NULLPTR)
 800bbf0:	e7a7      	b.n	800bb42 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0x1a>
    if (num_removed > 0)
 800bbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS4_12YesPredicateEEEvT_+0xd6>
        compact();
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fd6a 	bl	800c6d2 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv>
}
 800bbfe:	bf00      	nop
 800bc00:	3740      	adds	r7, #64	; 0x40
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bc08 <_ZN6uavcan8protocol11NodeStatus_ILi0EE19getDataTypeFullNameEv>:
    static const char* getDataTypeFullName()
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
        return "uavcan.protocol.NodeStatus";
 800bc0c:	4b02      	ldr	r3, [pc, #8]	; (800bc18 <_ZN6uavcan8protocol11NodeStatus_ILi0EE19getDataTypeFullNameEv+0x10>)
    }
 800bc0e:	4618      	mov	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	08022090 	.word	0x08022090

0800bc1c <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7fd f8c8 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 800bc66:	bf00      	nop
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7fd f8bd 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>:
    LazyConstructor()
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
        : ptr_(UAVCAN_NULLPTR)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3334      	adds	r3, #52	; 0x34
 800bc98:	2200      	movs	r2, #0
 800bc9a:	73fa      	strb	r2, [r7, #15]
 800bc9c:	f107 020f 	add.w	r2, r7, #15
 800bca0:	4619      	mov	r1, r3
 800bca2:	f7fc fc95 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>:
    ~LazyConstructor() { destroy(); }
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fd5d 	bl	800c778 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>:
    void stop()
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
        GenericSubscriberBase::stop(forwarder_);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	1d1c      	adds	r4, r3, #4
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	330c      	adds	r3, #12
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 fd6f 	bl	800c7bc <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800bcde:	4603      	mov	r3, r0
 800bce0:	4619      	mov	r1, r3
 800bce2:	4620      	mov	r0, r4
 800bce4:	f008 fdca 	bl	801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>
    }
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd90      	pop	{r4, r7, pc}

0800bcf0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EEC1Ev>:
    Array() { }
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 fd6a 	bl	800c7d4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EEC1Ev>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4618      	mov	r0, r3
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EEC1Ev>:
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fd6d 	bl	800c7f4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EEC1Ev>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZN6uavcan16DynamicArrayBaseILj80EE4growEv>:
    void grow()
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
        if (size_ >= MaxSize)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b4f      	cmp	r3, #79	; 0x4f
 800bd32:	d904      	bls.n	800bd3e <_ZN6uavcan16DynamicArrayBaseILj80EE4growEv+0x1a>
            (void)validateRange(MaxSize);  // Will throw, UAVCAN_ASSERT() or do nothing
 800bd34:	2150      	movs	r1, #80	; 0x50
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fd6e 	bl	800c818 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh>
    }
 800bd3c:	e005      	b.n	800bd4a <_ZN6uavcan16DynamicArrayBaseILj80EE4growEv+0x26>
            size_++;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	3301      	adds	r3, #1
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	701a      	strb	r2, [r3, #0]
    }
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE2atEh>:
    ValueType& at(SizeType pos)             { return data_[Base::validateRange(pos)]; }
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b082      	sub	sp, #8
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	70fb      	strb	r3, [r7, #3]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	78fa      	ldrb	r2, [r7, #3]
 800bd62:	4611      	mov	r1, r2
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fd57 	bl	800c818 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	3301      	adds	r3, #1
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>:
    LazyConstructor()
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
        : ptr_(UAVCAN_NULLPTR)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	3334      	adds	r3, #52	; 0x34
 800bd90:	2200      	movs	r2, #0
 800bd92:	73fa      	strb	r2, [r7, #15]
 800bd94:	f107 020f 	add.w	r2, r7, #15
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f7fc fc19 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>:
    ~LazyConstructor() { destroy(); }
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fd71 	bl	800c898 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPNS_20DataTypeInfoProviderEMS2_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEbE4implERKSF_RKbNS_11BooleanTypeILb1EEE>:
    static To impl(const From& from, const To&, TrueType) { return To(from); }
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	713a      	strb	r2, [r7, #4]
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 fd85 	bl	800c8dc <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE9checkInitEv>:
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 800bddc:	b590      	push	{r4, r7, lr}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
    if (isInited())
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f008 fbf2 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE9checkInitEv+0x1a>
        return 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e009      	b.n	800be0a <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE9checkInitEv+0x2e>
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 800bdf6:	687c      	ldr	r4, [r7, #4]
 800bdf8:	f7fb f8aa 	bl	8006f50 <_ZN6uavcan8protocol16GetDataTypeInfo_19getDataTypeFullNameEv>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	2301      	movs	r3, #1
 800be00:	2100      	movs	r1, #0
 800be02:	4620      	mov	r0, r4
 800be04:	f008 fbf1 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 800be08:	4603      	mov	r3, r0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd90      	pop	{r4, r7, pc}

0800be12 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>:
     */
    handleReceivedDataStruct(rx_struct);
}

template <typename DataSpec, typename DataStruct, typename TransferListenerType>
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::
 800be12:	b590      	push	{r4, r7, lr}
 800be14:	b087      	sub	sp, #28
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	1d3b      	adds	r3, r7, #4
 800be1c:	e883 0006 	stmia.w	r3, {r1, r2}
genericStart(bool (Dispatcher::*registration_method)(TransferListener*))
{
    const int res = checkInit();
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 fd7f 	bl	800c924 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>
 800be26:	6178      	str	r0, [r7, #20]
    if (res < 0)
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	da01      	bge.n	800be32 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x20>
    {
        UAVCAN_TRACE("GenericSubscriber", "Initialization failure [%s]", DataSpec::getDataTypeFullName());
        return res;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	e00d      	b.n	800be4e <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x3c>
    }
    return GenericSubscriberBase::genericStart(forwarder_, registration_method);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	1d1c      	adds	r4, r3, #4
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	330c      	adds	r3, #12
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fdc4 	bl	800a9c8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800be40:	4601      	mov	r1, r0
 800be42:	1d3b      	adds	r3, r7, #4
 800be44:	cb0c      	ldmia	r3, {r2, r3}
 800be46:	4620      	mov	r0, r4
 800be48:	f008 fcd6 	bl	80147f8 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E>
 800be4c:	4603      	mov	r3, r0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	bd90      	pop	{r4, r7, pc}
	...

0800be58 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature LogMessage_<_tmpl>::getDataTypeSignature()
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0xE9862B78D38762BAULL);
 800be60:	a309      	add	r3, pc, #36	; (adr r3, 800be88 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE20getDataTypeSignatureEv+0x30>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7f9 ff34 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::level::extendDataTypeSignature(signature);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fd9f 	bl	800c9b0 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::source::extendDataTypeSignature(signature);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fdae 	bl	800c9d4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::text::extendDataTypeSignature(signature);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fdb6 	bl	800c9ea <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800be7e:	bf00      	nop
}
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	d38762ba 	.word	0xd38762ba
 800be8c:	e9862b78 	.word	0xe9862b78

0800be90 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE19getDataTypeFullNameEv>:
    static const char* getDataTypeFullName()
 800be90:	b480      	push	{r7}
 800be92:	af00      	add	r7, sp, #0
        return "uavcan.protocol.debug.LogMessage";
 800be94:	4b02      	ldr	r3, [pc, #8]	; (800bea0 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE19getDataTypeFullNameEv+0x10>)
    }
 800be96:	4618      	mov	r0, r3
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	080220ac 	.word	0x080220ac

0800bea4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEC1Ev>:
    ArrayImpl() { initialize<ValueType>(0); }
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 fda6 	bl	800ca00 <_ZN6uavcan16DynamicArrayBaseILj31EEC1Ev>
 800beb4:	2100      	movs	r1, #0
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fdb0 	bl	800ca1c <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEC1Ev>:
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 fdae 	bl	800ca32 <_ZN6uavcan16DynamicArrayBaseILj90EEC1Ev>
 800bed6:	2100      	movs	r1, #0
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fdb8 	bl	800ca4e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>:
class StaticTransferBufferImpl : public ITransferBuffer
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	4a05      	ldr	r2, [pc, #20]	; (800bf08 <_ZN6uavcan24StaticTransferBufferImplD1Ev+0x20>)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f9 ffb9 	bl	8005e70 <_ZN6uavcan15ITransferBufferD1Ev>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	0802b904 	.word	0x0802b904

0800bf0c <_ZN6uavcan24StaticTransferBufferImplD0Ev>:
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ffe7 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 800bf1a:	210c      	movs	r1, #12
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f014 fb14 	bl	802054a <_ZdlPvj>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <_ZN6uavcan20StaticTransferBufferILt123EED1Ev>:
class UAVCAN_EXPORT StaticTransferBuffer : public StaticTransferBufferImpl
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	4a05      	ldr	r2, [pc, #20]	; (800bf4c <_ZN6uavcan20StaticTransferBufferILt123EED1Ev+0x20>)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff ffd3 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4618      	mov	r0, r3
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	08025018 	.word	0x08025018

0800bf50 <_ZN6uavcan20StaticTransferBufferILt123EED0Ev>:
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f7ff ffe7 	bl	800bf2c <_ZN6uavcan20StaticTransferBufferILt123EED1Ev>
 800bf5e:	2188      	movs	r1, #136	; 0x88
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f014 faf2 	bl	802054a <_ZdlPvj>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
    }
    return encode_res;
}

template <typename DataSpec, typename DataStruct>
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b0ad      	sub	sp, #180	; 0xb4
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	713b      	strb	r3, [r7, #4]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	71fb      	strb	r3, [r7, #7]
                                                           NodeID dst_node_id, TransferID* tid,
                                                           MonotonicTime blocking_deadline)
{
    const int res = checkInit();
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f7fe fe02 	bl	800ab8a <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E9checkInitEv>
 800bf86:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (res < 0)
 800bf8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	da02      	bge.n	800bf98 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x28>
    {
        return res;
 800bf92:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800bf96:	e035      	b.n	800c004 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x94>
    }

    Buffer buffer;
 800bf98:	f107 0310 	add.w	r3, r7, #16
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 fd61 	bl	800ca64 <_ZN6uavcan20StaticTransferBufferILt123EEC1Ev>

    const int encode_res = doEncode(message, buffer);
 800bfa2:	f107 0310 	add.w	r3, r7, #16
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 fd72 	bl	800ca94 <_ZNK6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E8doEncodeERKS4_RNS_15ITransferBufferE>
 800bfb0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    if (encode_res < 0)
 800bfb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	da02      	bge.n	800bfc2 <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x52>
    {
        return encode_res;
 800bfbc:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800bfc0:	e01b      	b.n	800bffa <_ZN6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x8a>
    }

    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 800bfc2:	68fc      	ldr	r4, [r7, #12]
 800bfc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bfc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfd0:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfd4:	79fa      	ldrb	r2, [r7, #7]
 800bfd6:	f107 0110 	add.w	r1, r7, #16
 800bfda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	793b      	ldrb	r3, [r7, #4]
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f008 fb4f 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 800bfee:	4604      	mov	r4, r0
 800bff0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fa f88d 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 800bffa:	f107 0310 	add.w	r3, r7, #16
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff ff94 	bl	800bf2c <_ZN6uavcan20StaticTransferBufferILt123EED1Ev>
 800c004:	4623      	mov	r3, r4
}
 800c006:	4618      	mov	r0, r3
 800c008:	37ac      	adds	r7, #172	; 0xac
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd90      	pop	{r4, r7, pc}

0800c00e <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>:
    LazyConstructor()
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
        : ptr_(UAVCAN_NULLPTR)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3334      	adds	r3, #52	; 0x34
 800c022:	2200      	movs	r2, #0
 800c024:	73fa      	strb	r2, [r7, #15]
 800c026:	f107 020f 	add.w	r2, r7, #15
 800c02a:	4619      	mov	r1, r3
 800c02c:	f7fc fad0 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>:
    ~LazyConstructor() { destroy(); }
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b082      	sub	sp, #8
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fd78 	bl	800cb38 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>:
    operator T*() const { return ptr_; }
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05e:	4618      	mov	r0, r3
 800c060:	370c      	adds	r7, #12
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPKNS_20RestartRequestServerEMS2_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS7_9Response_ILi0EEEEEEbE4implERKSI_RKbNS_11BooleanTypeILb1EEE>:
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	60b9      	str	r1, [r7, #8]
 800c074:	713a      	strb	r2, [r7, #4]
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 fd80 	bl	800cb7c <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEcvbEv>
 800c07c:	4603      	mov	r3, r0
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE9checkInitEv>:
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 800c086:	b590      	push	{r4, r7, lr}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
    if (isInited())
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4618      	mov	r0, r3
 800c092:	f008 fa9d 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE9checkInitEv+0x1a>
        return 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	e009      	b.n	800c0b4 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE9checkInitEv+0x2e>
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 800c0a0:	687c      	ldr	r4, [r7, #4]
 800c0a2:	f7fb fa65 	bl	8007570 <_ZN6uavcan8protocol12RestartNode_19getDataTypeFullNameEv>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f008 fa9c 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 800c0b2:	4603      	mov	r3, r0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd90      	pop	{r4, r7, pc}

0800c0bc <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::
 800c0bc:	b590      	push	{r4, r7, lr}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	1d3b      	adds	r3, r7, #4
 800c0c6:	e883 0006 	stmia.w	r3, {r1, r2}
    const int res = checkInit();
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f000 fd7a 	bl	800cbc4 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>
 800c0d0:	6178      	str	r0, [r7, #20]
    if (res < 0)
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	da01      	bge.n	800c0dc <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x20>
        return res;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	e00d      	b.n	800c0f8 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x3c>
    return GenericSubscriberBase::genericStart(forwarder_, registration_method);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	1d1c      	adds	r4, r3, #4
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	330c      	adds	r3, #12
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff ffb4 	bl	800c052 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	1d3b      	adds	r3, r7, #4
 800c0ee:	cb0c      	ldmia	r3, {r2, r3}
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f008 fb81 	bl	80147f8 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E>
 800c0f6:	4603      	mov	r3, r0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd90      	pop	{r4, r7, pc}

0800c100 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature CANIfaceStats_<_tmpl>::getDataTypeSignature()
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0x13B106F0C44CA350ULL);
 800c108:	a309      	add	r3, pc, #36	; (adr r3, 800c130 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE20getDataTypeSignatureEv+0x30>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f9 fde0 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::frames_tx::extendDataTypeSignature(signature);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7fd f9b4 	bl	8009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::frames_rx::extendDataTypeSignature(signature);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7fd f9b1 	bl	8009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::errors::extendDataTypeSignature(signature);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7fd f9ae 	bl	8009482 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800c126:	bf00      	nop
}
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	c44ca350 	.word	0xc44ca350
 800c134:	13b106f0 	.word	0x13b106f0

0800c138 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d201      	bcs.n	800c152 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh+0x1a>
            return pos;
 800c14e:	78fb      	ldrb	r3, [r7, #3]
 800c150:	e005      	b.n	800c15e <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 800c152:	4b05      	ldr	r3, [pc, #20]	; (800c168 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh+0x30>)
 800c154:	4a05      	ldr	r2, [pc, #20]	; (800c16c <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh+0x34>)
 800c156:	21e6      	movs	r1, #230	; 0xe6
 800c158:	4805      	ldr	r0, [pc, #20]	; (800c170 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh+0x38>)
 800c15a:	f014 fa17 	bl	802058c <__assert_func>
    }
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	08021b88 	.word	0x08021b88
 800c16c:	080264b8 	.word	0x080264b8
 800c170:	08021f6c 	.word	0x08021f6c

0800c174 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEC1Ev>:
    LazyConstructor()
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
        : ptr_(UAVCAN_NULLPTR)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	3334      	adds	r3, #52	; 0x34
 800c188:	2200      	movs	r2, #0
 800c18a:	73fa      	strb	r2, [r7, #15]
 800c18c:	f107 020f 	add.w	r2, r7, #15
 800c190:	4619      	mov	r1, r3
 800c192:	f7fc fa1d 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEED1Ev>:
    ~LazyConstructor() { destroy(); }
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fd73 	bl	800cc94 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>:
    operator T*() const { return ptr_; }
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPKNS_22TransportStatsProviderEMS2_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS6_9Response_ILi0EEEEEEbE4implERKSG_RKbNS_11BooleanTypeILb1EEE>:
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	713a      	strb	r2, [r7, #4]
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 fd7b 	bl	800ccd8 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEcvbEv>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE9checkInitEv>:
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 800c1ec:	b590      	push	{r4, r7, lr}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
    if (isInited())
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f008 f9ea 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d001      	beq.n	800c206 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE9checkInitEv+0x1a>
        return 0;
 800c202:	2300      	movs	r3, #0
 800c204:	e009      	b.n	800c21a <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE9checkInitEv+0x2e>
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 800c206:	687c      	ldr	r4, [r7, #4]
 800c208:	f7fb fa42 	bl	8007690 <_ZN6uavcan8protocol18GetTransportStats_19getDataTypeFullNameEv>
 800c20c:	4602      	mov	r2, r0
 800c20e:	2301      	movs	r3, #1
 800c210:	2100      	movs	r1, #0
 800c212:	4620      	mov	r0, r4
 800c214:	f008 f9e9 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 800c218:	4603      	mov	r3, r0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd90      	pop	{r4, r7, pc}

0800c222 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::
 800c222:	b590      	push	{r4, r7, lr}
 800c224:	b087      	sub	sp, #28
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	1d3b      	adds	r3, r7, #4
 800c22c:	e883 0006 	stmia.w	r3, {r1, r2}
    const int res = checkInit();
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 fd75 	bl	800cd20 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>
 800c236:	6178      	str	r0, [r7, #20]
    if (res < 0)
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	da01      	bge.n	800c242 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x20>
        return res;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	e00d      	b.n	800c25e <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x3c>
    return GenericSubscriberBase::genericStart(forwarder_, registration_method);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	1d1c      	adds	r4, r3, #4
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	330c      	adds	r3, #12
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff ffb4 	bl	800c1b8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800c250:	4601      	mov	r1, r0
 800c252:	1d3b      	adds	r3, r7, #4
 800c254:	cb0c      	ldmia	r3, {r2, r3}
 800c256:	4620      	mov	r0, r4
 800c258:	f008 face 	bl	80147f8 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E>
 800c25c:	4603      	mov	r3, r0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	bd90      	pop	{r4, r7, pc}

0800c266 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 800c266:	b580      	push	{r7, lr}
 800c268:	b082      	sub	sp, #8
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7fc fdc1 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 800c274:	bf00      	nop
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <_ZN6uavcan16DynamicArrayBaseILj80EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
    }
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEC1Ev>:
    LazyConstructor()
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
        : ptr_(UAVCAN_NULLPTR)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	639a      	str	r2, [r3, #56]	; 0x38
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	3338      	adds	r3, #56	; 0x38
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	73fa      	strb	r2, [r7, #15]
 800c2c6:	f107 020f 	add.w	r2, r7, #15
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	f7fc f980 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEED1Ev>:
    ~LazyConstructor() { destroy(); }
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b082      	sub	sp, #8
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fda6 	bl	800ce34 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE7destroyEv>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE4stopEv>:
    void stop()
 800c2f2:	b590      	push	{r4, r7, lr}
 800c2f4:	b083      	sub	sp, #12
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
        GenericSubscriberBase::stop(forwarder_);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	1d1c      	adds	r4, r3, #4
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	330c      	adds	r3, #12
 800c302:	4618      	mov	r0, r3
 800c304:	f000 fdb8 	bl	800ce78 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEcvPS9_Ev>
 800c308:	4603      	mov	r3, r0
 800c30a:	4619      	mov	r1, r3
 800c30c:	4620      	mov	r0, r4
 800c30e:	f008 fab5 	bl	801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>
    }
 800c312:	bf00      	nop
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	bd90      	pop	{r4, r7, pc}

0800c31a <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEEC1Ev>:
    LinkedListRoot()
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7f9 fb5b 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	601a      	str	r2, [r3, #0]
    { }
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5clearEv>:
    void clear() { removeAllWhere(YesPredicate()); }
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fda4 	bl	800ce90 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE14removeAllWhereINS3_12YesPredicateEEEvT_>
 800c348:	bf00      	nop
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <_ZNKSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEcvbEv>:
      explicit operator bool() const noexcept
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fa fca5 	bl	8006caa <_ZNKSt14_Function_base8_M_emptyEv>
 800c360:	4603      	mov	r3, r0
 800c362:	f083 0301 	eor.w	r3, r3, #1
 800c366:	b2db      	uxtb	r3, r3
 800c368:	4618      	mov	r0, r3
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE9checkInitEv>:
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 800c370:	b590      	push	{r4, r7, lr}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
    if (isInited())
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f008 f928 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE9checkInitEv+0x1a>
        return 0;
 800c386:	2300      	movs	r3, #0
 800c388:	e009      	b.n	800c39e <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE9checkInitEv+0x2e>
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 800c38a:	687c      	ldr	r4, [r7, #4]
 800c38c:	f7fb fce6 	bl	8007d5c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_19getDataTypeFullNameEv>
 800c390:	4602      	mov	r2, r0
 800c392:	2301      	movs	r3, #1
 800c394:	2100      	movs	r1, #0
 800c396:	4620      	mov	r0, r4
 800c398:	f008 f927 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 800c39c:	4603      	mov	r3, r0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd90      	pop	{r4, r7, pc}

0800c3a6 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c3b2:	68b8      	ldr	r0, [r7, #8]
 800c3b4:	f7fd fd3a 	bl	8009e2c <_ZSt4moveIRZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEE_EONSt16remove_referenceIT_E4typeEOSB_>
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7fa fc3f 	bl	8006c3c <_ZNSt9_Any_data9_M_accessEv>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	f7f9 fd98 	bl	8005ef8 <_ZnwjPv>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	bf00      	nop
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fd65 	bl	800ceac <_ZNKSt9_Any_data9_M_accessIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERKT_v>
 800c3e2:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 fd6d 	bl	800cec4 <_ZSt11__addressofIKZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEE_EPT_RSA_>
 800c3ea:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
	}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <_ZNSt9_Any_data9_M_accessIPZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERT_v>:
      _M_access()
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7fa fc1c 	bl	8006c3c <_ZNSt9_Any_data9_M_accessEv>
 800c404:	4603      	mov	r3, r0
 800c406:	4618      	mov	r0, r3
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800c41a:	68b8      	ldr	r0, [r7, #8]
 800c41c:	f000 fd46 	bl	800ceac <_ZNKSt9_Any_data9_M_accessIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERKT_v>
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7fa fc0b 	bl	8006c3c <_ZNSt9_Any_data9_M_accessEv>
 800c426:	4603      	mov	r3, r0
 800c428:	4619      	mov	r1, r3
 800c42a:	2001      	movs	r0, #1
 800c42c:	f7f9 fd64 	bl	8005ef8 <_ZnwjPv>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
	}
 800c434:	bf00      	nop
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <_ZNSt14_Function_base13_Base_managerIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fd47 	bl	800ceda <_ZNSt9_Any_data9_M_accessIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERT_v>
	}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <_ZNSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEE4swapERS9_>:
      void swap(function& __x) noexcept
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	4611      	mov	r1, r2
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fd4f 	bl	800cf08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f103 0208 	add.w	r2, r3, #8
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	4619      	mov	r1, r3
 800c476:	4610      	mov	r0, r2
 800c478:	f000 fd78 	bl	800cf6c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f103 020c 	add.w	r2, r3, #12
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	330c      	adds	r3, #12
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f000 fd99 	bl	800cfc0 <_ZSt4swapIPFvRKSt9_Any_dataRKN6uavcan17ServiceCallResultINS3_8protocol4file20BeginFirmwareUpdate_EEEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISH_ESt18is_move_assignableISH_EEE5valueEvE4typeERSH_SR_>
      }
 800c48e:	bf00      	nop
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EEC1Ev>:
    Array() { }
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fdac 	bl	800cffe <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EEC1Ev>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <_ZN6uavcan16coerceOrFallbackIbSt8functionIFvRKNS_17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEEEEET_RKT0_RKSB_>:
To coerceOrFallback(const From& from, const To& default_)
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	6839      	ldr	r1, [r7, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fdae 	bl	800d020 <_ZN6uavcan20CoerceOrFallbackImplISt8functionIFvRKNS_17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEEEbE4implERKSA_RKbNS_11BooleanTypeILb0EEE>
 800c4c4:	4603      	mov	r3, r0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE>:
int ServiceClient<DataType_, Callback_>::addCallState(ServiceCallID call_id)
 800c4ce:	b590      	push	{r4, r7, lr}
 800c4d0:	b085      	sub	sp, #20
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	8039      	strh	r1, [r7, #0]
    if (call_registry_.isEmpty())
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3370      	adds	r3, #112	; 0x70
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7ff faf7 	bl	800bad0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7isEmptyEv>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d009      	beq.n	800c4fc <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE+0x2e>
        const int subscriber_res = SubscriberType::startAsServiceResponseListener();
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fda6 	bl	800d03c <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE30startAsServiceResponseListenerEv>
 800c4f0:	60f8      	str	r0, [r7, #12]
        if (subscriber_res < 0)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	da01      	bge.n	800c4fc <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE+0x2e>
            return subscriber_res;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	e01f      	b.n	800c53c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE+0x6e>
    if (UAVCAN_NULLPTR == call_registry_.template emplace<INode&, ServiceClientBase&,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3304      	adds	r3, #4
 800c506:	4618      	mov	r0, r3
 800c508:	f7fa fb8c 	bl	8006c24 <_ZNK6uavcan21GenericSubscriberBase7getNodeEv>
 800c50c:	4601      	mov	r1, r0
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	4620      	mov	r0, r4
 800c518:	f000 fda6 	bl	800d068 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	bf0c      	ite	eq
 800c522:	2301      	moveq	r3, #1
 800c524:	2300      	movne	r3, #0
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d006      	beq.n	800c53a <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE+0x6c>
        SubscriberType::stop();
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fedf 	bl	800c2f2 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE4stopEv>
        return -ErrMemory;
 800c534:	f06f 0302 	mvn.w	r3, #2
 800c538:	e000      	b.n	800c53c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE12addCallStateENS_13ServiceCallIDE+0x6e>
    return 0;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bd90      	pop	{r4, r7, pc}

0800c544 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE19getTransferListenerEv>:
    TransferListenerType* getTransferListener() { return forwarder_; }
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	330c      	adds	r3, #12
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fc91 	bl	800ce78 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEcvPS9_Ev>
 800c556:	4603      	mov	r3, r0
 800c558:	4618      	mov	r0, r3
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE10cancelCallENS_13ServiceCallIDE>:
void ServiceClient<DataType_, Callback_>::cancelCall(ServiceCallID call_id)
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	8039      	strh	r1, [r7, #0]
    call_registry_.removeFirstWhere(CallStateMatchingPredicate(call_id));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800c570:	f107 030c 	add.w	r3, r7, #12
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f7fb fa30 	bl	80079dc <_ZN6uavcan17ServiceClientBase26CallStateMatchingPredicateC1ENS_13ServiceCallIDE>
 800c57c:	68f9      	ldr	r1, [r7, #12]
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 fdae 	bl	800d0e0 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE16removeFirstWhereINS1_26CallStateMatchingPredicateEEEvT_>
    if (call_registry_.isEmpty())
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	3370      	adds	r3, #112	; 0x70
 800c588:	4618      	mov	r0, r3
 800c58a:	f7ff faa1 	bl	800bad0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7isEmptyEv>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE10cancelCallENS_13ServiceCallIDE+0x3c>
        SubscriberType::stop();
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff feab 	bl	800c2f2 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE4stopEv>
}
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd90      	pop	{r4, r7, pc}

0800c5a4 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE7publishERKS5_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id, TransferID tid,
 800c5a4:	b590      	push	{r4, r7, lr}
 800c5a6:	b089      	sub	sp, #36	; 0x24
 800c5a8:	af02      	add	r7, sp, #8
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	713b      	strb	r3, [r7, #4]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, &tid, blocking_deadline);
 800c5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5b6:	f107 0310 	add.w	r3, r7, #16
 800c5ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5be:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5c2:	79fa      	ldrb	r2, [r7, #7]
 800c5c4:	f107 0310 	add.w	r3, r7, #16
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	793b      	ldrb	r3, [r7, #4]
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f000 fdb3 	bl	800d140 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE14genericPublishERKS5_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 800c5da:	4604      	mov	r4, r0
 800c5dc:	f107 0310 	add.w	r3, r7, #16
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7f9 fd97 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 800c5e6:	4623      	mov	r3, r4
    }
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	371c      	adds	r7, #28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd90      	pop	{r4, r7, pc}

0800c5f0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPKS2_T_>:
    const T* find(Predicate predicate) const
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	7039      	strb	r1, [r7, #0]
        return const_cast<Multiset*>(this)->find<Predicate>(predicate);
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fdee 	bl	800d1de <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_>
 800c602:	4603      	mov	r3, r0
    }
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <_ZNK6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE3getEv>:

    T* get() const { return root_; }
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4618      	mov	r0, r3
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPair5matchERKS1_>:
        bool match(const Key& rhs) const { return rhs == key; }
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3310      	adds	r3, #16
 800c64a:	4619      	mov	r1, r3
 800c64c:	6838      	ldr	r0, [r7, #0]
 800c64e:	f7f9 ff1c 	bl	800648a <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_>
 800c652:	4603      	mov	r3, r0
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE12YesPredicateclERKS1_RKS3_>:
        bool operator()(const Key&, const Value&) const { return true; }
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	2301      	movs	r3, #1
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <_ZN6uavcan24OutgoingTransferRegistry5ValueC1Ev>:
 800c676:	b580      	push	{r7, lr}
 800c678:	b082      	sub	sp, #8
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4618      	mov	r0, r3
 800c682:	f7f9 fd3a 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3308      	adds	r3, #8
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7f9 fa1e 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1Ev>:
        KVPair() :
 800c69a:	b590      	push	{r4, r7, lr}
 800c69c:	b083      	sub	sp, #12
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
            key()
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	f04f 0300 	mov.w	r3, #0
 800c6a8:	f04f 0400 	mov.w	r4, #0
 800c6ac:	e9c2 3400 	strd	r3, r4, [r2]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	721a      	strb	r2, [r3, #8]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff ffdc 	bl	800c676 <_ZN6uavcan24OutgoingTransferRegistry5ValueC1Ev>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3310      	adds	r3, #16
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f9 fecc 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
        { }
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd90      	pop	{r4, r7, pc}

0800c6d2 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv>:
void Map<Key, Value>::compact()
 800c6d2:	b590      	push	{r4, r7, lr}
 800c6d4:	b089      	sub	sp, #36	; 0x24
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
    KVGroup* p = list_.get();
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff ff94 	bl	800c60c <_ZNK6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE3getEv>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	60bb      	str	r3, [r7, #8]
    while (p)
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d040      	beq.n	800c770 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x9e>
        KVGroup* const next = p->getNextListNode();
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff ff97 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800c6f6:	6178      	str	r0, [r7, #20]
        bool remove_this = true;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < KVGroup::NumKV; i++)
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	61bb      	str	r3, [r7, #24]
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	2b01      	cmp	r3, #1
 800c704:	dc1f      	bgt.n	800c746 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x74>
            if (!p->kvs[i].match(Key()))
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	69ba      	ldr	r2, [r7, #24]
 800c70a:	4613      	mov	r3, r2
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	4413      	add	r3, r2
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	3308      	adds	r3, #8
 800c714:	18cc      	adds	r4, r1, r3
 800c716:	f107 030c 	add.w	r3, r7, #12
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7f9 fea0 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 800c720:	f107 030c 	add.w	r3, r7, #12
 800c724:	4619      	mov	r1, r3
 800c726:	4620      	mov	r0, r4
 800c728:	f7ff ff88 	bl	800c63c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPair5matchERKS1_>
 800c72c:	4603      	mov	r3, r0
 800c72e:	f083 0301 	eor.w	r3, r3, #1
 800c732:	b2db      	uxtb	r3, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x6c>
                remove_this = false;
 800c738:	2300      	movs	r3, #0
 800c73a:	77fb      	strb	r3, [r7, #31]
                break;
 800c73c:	e003      	b.n	800c746 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x74>
        for (int i = 0; i < KVGroup::NumKV; i++)
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	3301      	adds	r3, #1
 800c742:	61bb      	str	r3, [r7, #24]
 800c744:	e7dc      	b.n	800c700 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x2e>
        if (remove_this)
 800c746:	7ffb      	ldrb	r3, [r7, #31]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00e      	beq.n	800c76a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x98>
            list_.remove(p);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3304      	adds	r3, #4
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fd8f 	bl	800d278 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_>
            KVGroup::destroy(p, allocator_);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	f107 0308 	add.w	r3, r7, #8
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f000 fdf4 	bl	800d352 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup7destroyERPS5_RNS_14IPoolAllocatorE>
        p = next;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	60bb      	str	r3, [r7, #8]
    while (p)
 800c76e:	e7bb      	b.n	800c6e8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv+0x16>
}
 800c770:	bf00      	nop
 800c772:	3724      	adds	r7, #36	; 0x24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd90      	pop	{r4, r7, pc}

0800c778 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>:
    void destroy()
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv+0x22>
            ptr_->~T();
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	3304      	adds	r3, #4
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4610      	mov	r0, r2
 800c798:	4798      	blx	r3
        ptr_ = UAVCAN_NULLPTR;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3334      	adds	r3, #52	; 0x34
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	73fa      	strb	r2, [r7, #15]
 800c7aa:	f107 020f 	add.w	r2, r7, #15
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	f7fb ff0e 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>:
    operator T*() const { return ptr_; }
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EEC1Ev>:
    ArrayImpl() { initialize<ValueType>(0); }
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fdd6 	bl	800d38e <_ZN6uavcan15StaticArrayBaseILj16EEC1Ev>
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fddd 	bl	800d3a4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EEC1Ev>:
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 fde3 	bl	800d3ca <_ZN6uavcan16DynamicArrayBaseILj255EEC1Ev>
 800c804:	2100      	movs	r1, #0
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fded 	bl	800d3e6 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	78fa      	ldrb	r2, [r7, #3]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d201      	bcs.n	800c832 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh+0x1a>
            return pos;
 800c82e:	78fb      	ldrb	r3, [r7, #3]
 800c830:	e005      	b.n	800c83e <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 800c832:	4b05      	ldr	r3, [pc, #20]	; (800c848 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh+0x30>)
 800c834:	4a05      	ldr	r2, [pc, #20]	; (800c84c <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh+0x34>)
 800c836:	21e6      	movs	r1, #230	; 0xe6
 800c838:	4805      	ldr	r0, [pc, #20]	; (800c850 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh+0x38>)
 800c83a:	f013 fea7 	bl	802058c <__assert_func>
    }
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	08021b88 	.word	0x08021b88
 800c84c:	08026f08 	.word	0x08026f08
 800c850:	08021f6c 	.word	0x08021f6c

0800c854 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>:
    class TransferForwarder : public TransferListenerType
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	4a05      	ldr	r2, [pc, #20]	; (800c874 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev+0x20>)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	f00f f9eb 	bl	801bc40 <_ZN6uavcan16TransferListenerD1Ev>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4618      	mov	r0, r3
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	080251ac 	.word	0x080251ac

0800c878 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD0Ev>:
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7ff ffe7 	bl	800c854 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>
 800c886:	2134      	movs	r1, #52	; 0x34
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f013 fe5e 	bl	802054a <_ZdlPvj>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4618      	mov	r0, r3
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>:
    void destroy()
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d008      	beq.n	800c8ba <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv+0x22>
            ptr_->~T();
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4610      	mov	r0, r2
 800c8b8:	4798      	blx	r3
        ptr_ = UAVCAN_NULLPTR;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3334      	adds	r3, #52	; 0x34
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	73fa      	strb	r2, [r7, #15]
 800c8ca:	f107 020f 	add.w	r2, r7, #15
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	f7fb fe7e 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv>:

    /**
     * Returns true if the binder is initialized (doesn't contain null pointers).
     */
    operator bool() const
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
    {
        return coerceOrFallback<bool>(obj_, true) && coerceOrFallback<bool>(fun_, true);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	73ba      	strb	r2, [r7, #14]
 800c8ea:	f107 020e 	add.w	r2, r7, #14
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 fd83 	bl	800d3fc <_ZN6uavcan16coerceOrFallbackIbPNS_20DataTypeInfoProviderEEET_RKT0_RKS3_>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00e      	beq.n	800c91a <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv+0x3e>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	3304      	adds	r3, #4
 800c900:	2201      	movs	r2, #1
 800c902:	73fa      	strb	r2, [r7, #15]
 800c904:	f107 020f 	add.w	r2, r7, #15
 800c908:	4611      	mov	r1, r2
 800c90a:	4618      	mov	r0, r3
 800c90c:	f000 fd85 	bl	800d41a <_ZN6uavcan16coerceOrFallbackIbMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEEET_RKT0_RKSD_>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv+0x3e>
 800c916:	2301      	movs	r3, #1
 800c918:	e000      	b.n	800c91c <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv+0x40>
 800c91a:	2300      	movs	r3, #0
    }
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::checkInit()
 800c924:	b590      	push	{r4, r7, lr}
 800c926:	b087      	sub	sp, #28
 800c928:	af02      	add	r7, sp, #8
 800c92a:	6078      	str	r0, [r7, #4]
    if (forwarder_)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	330c      	adds	r3, #12
 800c930:	4618      	mov	r0, r3
 800c932:	f7fe f849 	bl	800a9c8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bf14      	ite	ne
 800c93c:	2301      	movne	r3, #1
 800c93e:	2300      	moveq	r3, #0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x26>
        return 0;
 800c946:	2300      	movs	r3, #0
 800c948:	e02c      	b.n	800c9a4 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    GlobalDataTypeRegistry::instance().freeze();
 800c94a:	f008 f977 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800c94e:	4603      	mov	r3, r0
 800c950:	4618      	mov	r0, r3
 800c952:	f008 f98d 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>
        GlobalDataTypeRegistry::instance().find(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName());
 800c956:	f008 f971 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800c95a:	4604      	mov	r4, r0
    const DataTypeDescriptor* const descr =
 800c95c:	f7fa faf8 	bl	8006f50 <_ZN6uavcan8protocol16GetDataTypeInfo_19getDataTypeFullNameEv>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	2100      	movs	r1, #0
 800c966:	4620      	mov	r0, r4
 800c968:	f008 f9b0 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 800c96c:	60f8      	str	r0, [r7, #12]
    if (descr == UAVCAN_NULLPTR)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d102      	bne.n	800c97a <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x56>
        return -ErrUnknownDataType;
 800c974:	f06f 0304 	mvn.w	r3, #4
 800c978:	e014      	b.n	800c9a4 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f103 040c 	add.w	r4, r3, #12
        (*this, *descr, MaxBufferSize, node_.getAllocator());
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3308      	adds	r3, #8
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4610      	mov	r0, r2
 800c990:	4798      	blx	r3
 800c992:	4603      	mov	r3, r0
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x88>)
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	6879      	ldr	r1, [r7, #4]
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fd4b 	bl	800d438 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>
    return 0;
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd90      	pop	{r4, r7, pc}
 800c9ac:	08024ff0 	.word	0x08024ff0

0800c9b0 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.debug.LogLevel";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
    {
        signature.extend(getDataTypeSignature());
 800c9b8:	f107 0308 	add.w	r3, r7, #8
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fd63 	bl	800d488 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE20getDataTypeSignatureEv>
 800c9c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f011 f9c3 	bl	801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>
    }
 800c9cc:	bf00      	nop
 800c9ce:	3710      	adds	r7, #16
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7fc fa0a 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7fc f9ff 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <_ZN6uavcan16DynamicArrayBaseILj31EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
    }
 800ca26:	bf00      	nop
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <_ZN6uavcan16DynamicArrayBaseILj90EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 800ca32:	b480      	push	{r7}
 800ca34:	b083      	sub	sp, #12
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 800ca4e:	b480      	push	{r7}
 800ca50:	b085      	sub	sp, #20
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
    }
 800ca58:	bf00      	nop
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <_ZN6uavcan20StaticTransferBufferILt123EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	330c      	adds	r3, #12
 800ca72:	227b      	movs	r2, #123	; 0x7b
 800ca74:	4619      	mov	r1, r3
 800ca76:	f7f9 fb9b 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 800ca7a:	4a05      	ldr	r2, [pc, #20]	; (800ca90 <_ZN6uavcan20StaticTransferBufferILt123EEC1Ev+0x2c>)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 800ca80:	f7f8 ffa6 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4618      	mov	r0, r3
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	08025018 	.word	0x08025018

0800ca94 <_ZNK6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E8doEncodeERKS4_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08a      	sub	sp, #40	; 0x28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 800caa0:	f107 0318 	add.w	r3, r7, #24
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f9 fa02 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 800caac:	f107 0218 	add.w	r2, r7, #24
 800cab0:	f107 0314 	add.w	r3, r7, #20
 800cab4:	4611      	mov	r1, r2
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f9 fa0f 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 800cabc:	f107 0314 	add.w	r3, r7, #20
 800cac0:	2201      	movs	r2, #1
 800cac2:	4619      	mov	r1, r3
 800cac4:	68b8      	ldr	r0, [r7, #8]
 800cac6:	f000 fcf7 	bl	800d4b8 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800caca:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dc05      	bgt.n	800cade <_ZNK6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E8doEncodeERKS4_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <_ZNK6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E8doEncodeERKS4_RNS_15ITransferBufferE+0x54>)
 800cad4:	4a05      	ldr	r2, [pc, #20]	; (800caec <_ZNK6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E8doEncodeERKS4_RNS_15ITransferBufferE+0x58>)
 800cad6:	21ab      	movs	r1, #171	; 0xab
 800cad8:	4805      	ldr	r0, [pc, #20]	; (800caf0 <_ZNK6uavcan16GenericPublisherINS_8protocol5debug11LogMessage_ILi0EEES4_E8doEncodeERKS4_RNS_15ITransferBufferE+0x5c>)
 800cada:	f013 fd57 	bl	802058c <__assert_func>
    return encode_res;
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3728      	adds	r7, #40	; 0x28
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	08021b88 	.word	0x08021b88
 800caec:	08025758 	.word	0x08025758
 800caf0:	080220d0 	.word	0x080220d0

0800caf4 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>:
    class TransferForwarder : public TransferListenerType
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	4a05      	ldr	r2, [pc, #20]	; (800cb14 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev+0x20>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f00f f89b 	bl	801bc40 <_ZN6uavcan16TransferListenerD1Ev>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	0802516c 	.word	0x0802516c

0800cb18 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD0Ev>:
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ffe7 	bl	800caf4 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>
 800cb26:	2134      	movs	r1, #52	; 0x34
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f013 fd0e 	bl	802054a <_ZdlPvj>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>:
    void destroy()
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d008      	beq.n	800cb5a <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv+0x22>
            ptr_->~T();
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3304      	adds	r3, #4
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4610      	mov	r0, r2
 800cb58:	4798      	blx	r3
        ptr_ = UAVCAN_NULLPTR;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3334      	adds	r3, #52	; 0x34
 800cb66:	2200      	movs	r2, #0
 800cb68:	73fa      	strb	r2, [r7, #15]
 800cb6a:	f107 020f 	add.w	r2, r7, #15
 800cb6e:	4619      	mov	r1, r3
 800cb70:	f7fb fd2e 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800cb74:	bf00      	nop
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEcvbEv>:
    operator bool() const
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
        return coerceOrFallback<bool>(obj_, true) && coerceOrFallback<bool>(fun_, true);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	73ba      	strb	r2, [r7, #14]
 800cb8a:	f107 020e 	add.w	r2, r7, #14
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 fcc0 	bl	800d516 <_ZN6uavcan16coerceOrFallbackIbPKNS_20RestartRequestServerEEET_RKT0_RKS4_>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00e      	beq.n	800cbba <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEcvbEv+0x3e>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	2201      	movs	r2, #1
 800cba2:	73fa      	strb	r2, [r7, #15]
 800cba4:	f107 020f 	add.w	r2, r7, #15
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 fcc2 	bl	800d534 <_ZN6uavcan16coerceOrFallbackIbMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEEET_RKT0_RKSF_>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEcvbEv+0x3e>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e000      	b.n	800cbbc <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEcvbEv+0x40>
 800cbba:	2300      	movs	r3, #0
    }
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::checkInit()
 800cbc4:	b590      	push	{r4, r7, lr}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af02      	add	r7, sp, #8
 800cbca:	6078      	str	r0, [r7, #4]
    if (forwarder_)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	330c      	adds	r3, #12
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fa3e 	bl	800c052 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bf14      	ite	ne
 800cbdc:	2301      	movne	r3, #1
 800cbde:	2300      	moveq	r3, #0
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x26>
        return 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e02c      	b.n	800cc44 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    GlobalDataTypeRegistry::instance().freeze();
 800cbea:	f008 f827 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f008 f83d 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>
        GlobalDataTypeRegistry::instance().find(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName());
 800cbf6:	f008 f821 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800cbfa:	4604      	mov	r4, r0
    const DataTypeDescriptor* const descr =
 800cbfc:	f7fa fcb8 	bl	8007570 <_ZN6uavcan8protocol12RestartNode_19getDataTypeFullNameEv>
 800cc00:	4603      	mov	r3, r0
 800cc02:	461a      	mov	r2, r3
 800cc04:	2100      	movs	r1, #0
 800cc06:	4620      	mov	r0, r4
 800cc08:	f008 f860 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 800cc0c:	60f8      	str	r0, [r7, #12]
    if (descr == UAVCAN_NULLPTR)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x56>
        return -ErrUnknownDataType;
 800cc14:	f06f 0304 	mvn.w	r3, #4
 800cc18:	e014      	b.n	800cc44 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f103 040c 	add.w	r4, r3, #12
        (*this, *descr, MaxBufferSize, node_.getAllocator());
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4610      	mov	r0, r2
 800cc30:	4798      	blx	r3
 800cc32:	4603      	mov	r3, r0
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x88>)
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	6879      	ldr	r1, [r7, #4]
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 fc88 	bl	800d552 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>
    return 0;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd90      	pop	{r4, r7, pc}
 800cc4c:	08024ff2 	.word	0x08024ff2

0800cc50 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>:
    class TransferForwarder : public TransferListenerType
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	4a05      	ldr	r2, [pc, #20]	; (800cc70 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev+0x20>)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f00e ffed 	bl	801bc40 <_ZN6uavcan16TransferListenerD1Ev>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	0802512c 	.word	0x0802512c

0800cc74 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD0Ev>:
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff ffe7 	bl	800cc50 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>
 800cc82:	2134      	movs	r1, #52	; 0x34
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f013 fc60 	bl	802054a <_ZdlPvj>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv>:
    void destroy()
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d008      	beq.n	800ccb6 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE7destroyEv+0x22>
            ptr_->~T();
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4798      	blx	r3
        ptr_ = UAVCAN_NULLPTR;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	635a      	str	r2, [r3, #52]	; 0x34
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	3334      	adds	r3, #52	; 0x34
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	73fa      	strb	r2, [r7, #15]
 800ccc6:	f107 020f 	add.w	r2, r7, #15
 800ccca:	4619      	mov	r1, r3
 800cccc:	f7fb fc80 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800ccd0:	bf00      	nop
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEcvbEv>:
    operator bool() const
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
        return coerceOrFallback<bool>(obj_, true) && coerceOrFallback<bool>(fun_, true);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	73ba      	strb	r2, [r7, #14]
 800cce6:	f107 020e 	add.w	r2, r7, #14
 800ccea:	4611      	mov	r1, r2
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fc55 	bl	800d59c <_ZN6uavcan16coerceOrFallbackIbPKNS_22TransportStatsProviderEEET_RKT0_RKS4_>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d00e      	beq.n	800cd16 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEcvbEv+0x3e>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	73fa      	strb	r2, [r7, #15]
 800cd00:	f107 020f 	add.w	r2, r7, #15
 800cd04:	4611      	mov	r1, r2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f000 fc57 	bl	800d5ba <_ZN6uavcan16coerceOrFallbackIbMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEEET_RKT0_RKSD_>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEcvbEv+0x3e>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e000      	b.n	800cd18 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEcvbEv+0x40>
 800cd16:	2300      	movs	r3, #0
    }
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::checkInit()
 800cd20:	b590      	push	{r4, r7, lr}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	6078      	str	r0, [r7, #4]
    if (forwarder_)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fa43 	bl	800c1b8 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bf14      	ite	ne
 800cd38:	2301      	movne	r3, #1
 800cd3a:	2300      	moveq	r3, #0
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d001      	beq.n	800cd46 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x26>
        return 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	e02c      	b.n	800cda0 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    GlobalDataTypeRegistry::instance().freeze();
 800cd46:	f007 ff79 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f007 ff8f 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>
        GlobalDataTypeRegistry::instance().find(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName());
 800cd52:	f007 ff73 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800cd56:	4604      	mov	r4, r0
    const DataTypeDescriptor* const descr =
 800cd58:	f7fa fc9a 	bl	8007690 <_ZN6uavcan8protocol18GetTransportStats_19getDataTypeFullNameEv>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	461a      	mov	r2, r3
 800cd60:	2100      	movs	r1, #0
 800cd62:	4620      	mov	r0, r4
 800cd64:	f007 ffb2 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 800cd68:	60f8      	str	r0, [r7, #12]
    if (descr == UAVCAN_NULLPTR)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x56>
        return -ErrUnknownDataType;
 800cd70:	f06f 0304 	mvn.w	r3, #4
 800cd74:	e014      	b.n	800cda0 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f103 040c 	add.w	r4, r3, #12
        (*this, *descr, MaxBufferSize, node_.getAllocator());
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3308      	adds	r3, #8
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	4798      	blx	r3
 800cd8e:	4603      	mov	r3, r0
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x88>)
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fc1d 	bl	800d5d8 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>
    return 0;
 800cd9e:	2300      	movs	r3, #0
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd90      	pop	{r4, r7, pc}
 800cda8:	08024ff4 	.word	0x08024ff4

0800cdac <_ZN6uavcan26TransferListenerWithFilterD1Ev>:
class UAVCAN_EXPORT TransferListenerWithFilter : public TransferListener
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	4a05      	ldr	r2, [pc, #20]	; (800cdcc <_ZN6uavcan26TransferListenerWithFilterD1Ev+0x20>)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f00e ff3f 	bl	801bc40 <_ZN6uavcan16TransferListenerD1Ev>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	0802bdf4 	.word	0x0802bdf4

0800cdd0 <_ZN6uavcan26TransferListenerWithFilterD0Ev>:
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f7ff ffe7 	bl	800cdac <_ZN6uavcan26TransferListenerWithFilterD1Ev>
 800cdde:	2134      	movs	r1, #52	; 0x34
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f013 fbb2 	bl	802054a <_ZdlPvj>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4618      	mov	r0, r3
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderD1Ev>:
    class TransferForwarder : public TransferListenerType
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	4a05      	ldr	r2, [pc, #20]	; (800ce10 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderD1Ev+0x20>)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7ff ffd3 	bl	800cdac <_ZN6uavcan26TransferListenerWithFilterD1Ev>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	08025088 	.word	0x08025088

0800ce14 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderD0Ev>:
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7ff ffe7 	bl	800cdf0 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderD1Ev>
 800ce22:	2138      	movs	r1, #56	; 0x38
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f013 fb90 	bl	802054a <_ZdlPvj>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE7destroyEv>:
    void destroy()
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d008      	beq.n	800ce56 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE7destroyEv+0x22>
            ptr_->~T();
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4610      	mov	r0, r2
 800ce54:	4798      	blx	r3
        ptr_ = UAVCAN_NULLPTR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	639a      	str	r2, [r3, #56]	; 0x38
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3338      	adds	r3, #56	; 0x38
 800ce62:	2200      	movs	r2, #0
 800ce64:	73fa      	strb	r2, [r7, #15]
 800ce66:	f107 020f 	add.w	r2, r7, #15
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	f7fb fbb0 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEcvPS9_Ev>:
    operator T*() const { return ptr_; }
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce84:	4618      	mov	r0, r3
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE14removeAllWhereINS3_12YesPredicateEEEvT_>:
    void removeAllWhere(Predicate predicate) { removeWhere<Predicate>(predicate, RemoveAll); }
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	7039      	strb	r1, [r7, #0]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fbbf 	bl	800d622 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE>
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZNKSt9_Any_data9_M_accessIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERKT_v>:
      _M_access() const
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7f9 fecc 	bl	8006c52 <_ZNKSt9_Any_data9_M_accessEv>
 800ceba:	4603      	mov	r3, r0
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <_ZSt11__addressofIKZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEE_EPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4618      	mov	r0, r3
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr

0800ceda <_ZNSt9_Any_data9_M_accessIZ16StartDefaultTaskEUlRKN6uavcan17ServiceCallResultINS1_8protocol4file20BeginFirmwareUpdate_EEEE_EERT_v>:
      _M_access()
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b082      	sub	sp, #8
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7f9 feaa 	bl	8006c3c <_ZNSt9_Any_data9_M_accessEv>
 800cee8:	4603      	mov	r3, r0
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800cef2:	b480      	push	{r7}
 800cef4:	b083      	sub	sp, #12
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff ffed 	bl	800cef2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf22:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800cf26:	6838      	ldr	r0, [r7, #0]
 800cf28:	f7ff ffe3 	bl	800cef2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf34:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800cf38:	f107 0308 	add.w	r3, r7, #8
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff ffd8 	bl	800cef2 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800cf42:	4602      	mov	r2, r0
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cf4e:	bf00      	nop
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800cf56:	b480      	push	{r7}
 800cf58:	b083      	sub	sp, #12
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4618      	mov	r0, r3
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff ffed 	bl	800cf56 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800cf82:	6838      	ldr	r0, [r7, #0]
 800cf84:	f7ff ffe7 	bl	800cf56 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800cf90:	f107 030c 	add.w	r3, r7, #12
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff ffde 	bl	800cf56 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	601a      	str	r2, [r3, #0]
    }
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <_ZSt4moveIRPFvRKSt9_Any_dataRKN6uavcan17ServiceCallResultINS3_8protocol4file20BeginFirmwareUpdate_EEEEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800cfaa:	b480      	push	{r7}
 800cfac:	b083      	sub	sp, #12
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <_ZSt4swapIPFvRKSt9_Any_dataRKN6uavcan17ServiceCallResultINS3_8protocol4file20BeginFirmwareUpdate_EEEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISH_ESt18is_move_assignableISH_EEE5valueEvE4typeERSH_SR_>:
    swap(_Tp& __a, _Tp& __b)
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff ffed 	bl	800cfaa <_ZSt4moveIRPFvRKSt9_Any_dataRKN6uavcan17ServiceCallResultINS3_8protocol4file20BeginFirmwareUpdate_EEEEEONSt16remove_referenceIT_E4typeEOSF_>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800cfd6:	6838      	ldr	r0, [r7, #0]
 800cfd8:	f7ff ffe7 	bl	800cfaa <_ZSt4moveIRPFvRKSt9_Any_dataRKN6uavcan17ServiceCallResultINS3_8protocol4file20BeginFirmwareUpdate_EEEEEONSt16remove_referenceIT_E4typeEOSF_>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800cfe4:	f107 030c 	add.w	r3, r7, #12
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff ffde 	bl	800cfaa <_ZSt4moveIRPFvRKSt9_Any_dataRKN6uavcan17ServiceCallResultINS3_8protocol4file20BeginFirmwareUpdate_EEEEEONSt16remove_referenceIT_E4typeEOSF_>
 800cfee:	4603      	mov	r3, r0
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	601a      	str	r2, [r3, #0]
    }
 800cff6:	bf00      	nop
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EEC1Ev>:
    ArrayImpl() { initialize<ValueType>(0); }
 800cffe:	b580      	push	{r7, lr}
 800d000:	b082      	sub	sp, #8
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fb61 	bl	800d6d0 <_ZN6uavcan16DynamicArrayBaseILj200EEC1Ev>
 800d00e:	2100      	movs	r1, #0
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fb6b 	bl	800d6ec <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <_ZN6uavcan20CoerceOrFallbackImplISt8functionIFvRKNS_17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEEEbE4implERKSA_RKbNS_11BooleanTypeILb0EEE>:
    static To impl(const From&, const To& default_, FalseType) { return default_; }
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	713a      	strb	r2, [r7, #4]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	4618      	mov	r0, r3
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE30startAsServiceResponseListenerEv>:
    int startAsServiceResponseListener()
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
        return genericStart(&Dispatcher::registerServiceResponseListener);
 800d044:	4b07      	ldr	r3, [pc, #28]	; (800d064 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE30startAsServiceResponseListenerEv+0x28>)
 800d046:	60bb      	str	r3, [r7, #8]
 800d048:	2300      	movs	r3, #0
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	f107 0308 	add.w	r3, r7, #8
 800d050:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fb54 	bl	800d702 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE12genericStartEMNS_10DispatcherEFbPNS_16TransferListenerEE>
 800d05a:	4603      	mov	r3, r0
    }
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	08018bf9 	.word	0x08018bf9

0800d068 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_>:
    T* emplace(P1 p1, P2 p2, P3 p3)
 800d068:	b590      	push	{r4, r7, lr}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	803b      	strh	r3, [r7, #0]
        Item* const item = findOrCreateFreeSlot();
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f000 fb65 	bl	800d746 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv>
 800d07c:	6178      	str	r0, [r7, #20]
        if (item == UAVCAN_NULLPTR)
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x20>
            return UAVCAN_NULLPTR;
 800d084:	2300      	movs	r3, #0
 800d086:	e021      	b.n	800d0cc <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x64>
        UAVCAN_ASSERT(item->ptr == UAVCAN_NULLPTR);
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x34>
 800d090:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x6c>)
 800d092:	4a11      	ldr	r2, [pc, #68]	; (800d0d8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x70>)
 800d094:	21fb      	movs	r1, #251	; 0xfb
 800d096:	4811      	ldr	r0, [pc, #68]	; (800d0dc <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x74>)
 800d098:	f013 fa78 	bl	802058c <__assert_func>
        item->ptr = new (item->pool) T(p1, p2, p3);
 800d09c:	883b      	ldrh	r3, [r7, #0]
 800d09e:	823b      	strh	r3, [r7, #16]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	3308      	adds	r3, #8
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	2020      	movs	r0, #32
 800d0a8:	f7f8 ff26 	bl	8005ef8 <_ZnwjPv>
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	2c00      	cmp	r4, #0
 800d0b0:	d007      	beq.n	800d0c2 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x5a>
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f7fa fc11 	bl	80078e0 <_ZN6uavcan17ServiceClientBase9CallStateC1ERNS_5INodeERS0_NS_13ServiceCallIDE>
 800d0be:	4622      	mov	r2, r4
 800d0c0:	e000      	b.n	800d0c4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7emplaceIRNS_5INodeERS1_NS_13ServiceCallIDEEEPS2_T_T0_T1_+0x5c>
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	601a      	str	r2, [r3, #0]
        return item->ptr;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	681b      	ldr	r3, [r3, #0]
    }
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	371c      	adds	r7, #28
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd90      	pop	{r4, r7, pc}
 800d0d4:	0802211c 	.word	0x0802211c
 800d0d8:	080291c0 	.word	0x080291c0
 800d0dc:	08022134 	.word	0x08022134

0800d0e0 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE16removeFirstWhereINS1_26CallStateMatchingPredicateEEEvT_>:
    void removeFirstWhere(Predicate predicate) { removeWhere<Predicate>(predicate, RemoveOne); }
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	8039      	strh	r1, [r7, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fb5c 	bl	800d7ac <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE>
 800d0f4:	bf00      	nop
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <_ZN6uavcan20StaticTransferBufferILt202EED1Ev>:
class UAVCAN_EXPORT StaticTransferBuffer : public StaticTransferBufferImpl
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	4a05      	ldr	r2, [pc, #20]	; (800d11c <_ZN6uavcan20StaticTransferBufferILt202EED1Ev+0x20>)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe feeb 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	08025000 	.word	0x08025000

0800d120 <_ZN6uavcan20StaticTransferBufferILt202EED0Ev>:
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff ffe7 	bl	800d0fc <_ZN6uavcan20StaticTransferBufferILt202EED1Ev>
 800d12e:	21d8      	movs	r1, #216	; 0xd8
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f013 fa0a 	bl	802054a <_ZdlPvj>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4618      	mov	r0, r3
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE14genericPublishERKS5_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b0c1      	sub	sp, #260	; 0x104
 800d144:	af02      	add	r7, sp, #8
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	713b      	strb	r3, [r7, #4]
 800d14c:	4613      	mov	r3, r2
 800d14e:	71fb      	strb	r3, [r7, #7]
    const int res = checkInit();
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff f90d 	bl	800c370 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE9checkInitEv>
 800d156:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (res < 0)
 800d15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d15e:	2b00      	cmp	r3, #0
 800d160:	da02      	bge.n	800d168 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE14genericPublishERKS5_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x28>
        return res;
 800d162:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800d166:	e035      	b.n	800d1d4 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE14genericPublishERKS5_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x94>
    Buffer buffer;
 800d168:	f107 0310 	add.w	r3, r7, #16
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fb75 	bl	800d85c <_ZN6uavcan20StaticTransferBufferILt202EEC1Ev>
    const int encode_res = doEncode(message, buffer);
 800d172:	f107 0310 	add.w	r3, r7, #16
 800d176:	461a      	mov	r2, r3
 800d178:	68b9      	ldr	r1, [r7, #8]
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f000 fb86 	bl	800d88c <_ZNK6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE8doEncodeERKS5_RNS_15ITransferBufferE>
 800d180:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if (encode_res < 0)
 800d184:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	da02      	bge.n	800d192 <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE14genericPublishERKS5_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x52>
        return encode_res;
 800d18c:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 800d190:	e01b      	b.n	800d1ca <_ZN6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE14genericPublishERKS5_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x8a>
    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 800d192:	68fc      	ldr	r4, [r7, #12]
 800d194:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800d198:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d19c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1a0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d1a4:	79fa      	ldrb	r2, [r7, #7]
 800d1a6:	f107 0110 	add.w	r1, r7, #16
 800d1aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d1ae:	9301      	str	r3, [sp, #4]
 800d1b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	793b      	ldrb	r3, [r7, #4]
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f007 fa67 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f8 ffa5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 800d1ca:	f107 0310 	add.w	r3, r7, #16
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7ff ff94 	bl	800d0fc <_ZN6uavcan20StaticTransferBufferILt202EED1Ev>
 800d1d4:	4623      	mov	r3, r4
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	37fc      	adds	r7, #252	; 0xfc
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd90      	pop	{r4, r7, pc}

0800d1de <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_>:
    }
}

template <typename T>
template <typename Predicate>
T* Multiset<T>::find(Predicate predicate)
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b086      	sub	sp, #24
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	7039      	strb	r1, [r7, #0]
{
    Chunk* p = list_.get();
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f000 fb7d 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 800d1f2:	6178      	str	r0, [r7, #20]
    while (p != UAVCAN_NULLPTR)
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d039      	beq.n	800d26e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x90>
    {
        Chunk* const next_chunk = p->getNextListNode(); // For the case if the current entry gets modified
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 fb81 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800d202:	60f8      	str	r0, [r7, #12]

        for (int i = 0; i < Chunk::NumItems; i++)
 800d204:	2300      	movs	r3, #0
 800d206:	613b      	str	r3, [r7, #16]
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dc2c      	bgt.n	800d268 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x8a>
        {
            if (p->items[i].isConstructed())
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	3308      	adds	r3, #8
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	4413      	add	r3, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 fb7c 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d01a      	beq.n	800d260 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x82>
            {
                if (predicate(*p->items[i].ptr))
 800d22a:	6979      	ldr	r1, [r7, #20]
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	4613      	mov	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	440b      	add	r3, r1
 800d238:	3308      	adds	r3, #8
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	463b      	mov	r3, r7
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f000 fb7c 	bl	800d93e <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE12YesPredicateclERKS2_>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x82>
                {
                    return p->items[i].ptr;
 800d24c:	6979      	ldr	r1, [r7, #20]
 800d24e:	693a      	ldr	r2, [r7, #16]
 800d250:	4613      	mov	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	440b      	add	r3, r1
 800d25a:	3308      	adds	r3, #8
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	e007      	b.n	800d270 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x92>
        for (int i = 0; i < Chunk::NumItems; i++)
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	3301      	adds	r3, #1
 800d264:	613b      	str	r3, [r7, #16]
 800d266:	e7cf      	b.n	800d208 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x2a>
                }
            }
        }

        p = next_chunk;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	617b      	str	r3, [r7, #20]
    while (p != UAVCAN_NULLPTR)
 800d26c:	e7c2      	b.n	800d1f4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS3_12YesPredicateEEEPS2_T_+0x16>
    }
    return UAVCAN_NULLPTR;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3718      	adds	r7, #24
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_>:
        p->setNextListNode(node);
    }
}

template <typename T>
void LinkedListRoot<T>::remove(const T* node)
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
{
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d041      	beq.n	800d30e <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x96>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d03e      	beq.n	800d30e <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x96>
    {
        return;
    }

    if (root_ == node)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	429a      	cmp	r2, r3
 800d298:	d108      	bne.n	800d2ac <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x34>
    {
        root_ = root_->getNextListNode();
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff f9c0 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	e031      	b.n	800d310 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x98>
    }
    else
    {
        T* p = root_;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff f9b5 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	bf14      	ite	ne
 800d2c0:	2301      	movne	r3, #1
 800d2c2:	2300      	moveq	r3, #0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d022      	beq.n	800d310 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x98>
        {
            if (p->getNextListNode() == node)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff f9a9 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	bf0c      	ite	eq
 800d2da:	2301      	moveq	r3, #1
 800d2dc:	2300      	movne	r3, #0
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00e      	beq.n	800d302 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x8a>
            {
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 800d2e4:	68fc      	ldr	r4, [r7, #12]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff f99b 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff f997 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fb2b 	bl	800d956 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15setNextListNodeEPS6_>
                break;
 800d300:	e006      	b.n	800d310 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x98>
            }
            p = p->getNextListNode();
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff f98d 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 800d30a:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 800d30c:	e7d1      	b.n	800d2b2 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_+0x3a>
        return;
 800d30e:	bf00      	nop
        }
    }
}
 800d310:	3714      	adds	r7, #20
 800d312:	46bd      	mov	sp, r7
 800d314:	bd90      	pop	{r4, r7, pc}

0800d316 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupD1Ev>:
    struct KVGroup : LinkedListNode<KVGroup>
 800d316:	b590      	push	{r4, r7, lr}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3308      	adds	r3, #8
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00c      	beq.n	800d340 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupD1Ev+0x2a>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3308      	adds	r3, #8
 800d32a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3308      	adds	r3, #8
 800d332:	429c      	cmp	r4, r3
 800d334:	d004      	beq.n	800d340 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupD1Ev+0x2a>
 800d336:	3c18      	subs	r4, #24
 800d338:	4620      	mov	r0, r4
 800d33a:	f7fe fbe8 	bl	800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>
 800d33e:	e7f6      	b.n	800d32e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupD1Ev+0x18>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4618      	mov	r0, r3
 800d344:	f000 fb15 	bl	800d972 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEED1Ev>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd90      	pop	{r4, r7, pc}

0800d352 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup7destroyERPS5_RNS_14IPoolAllocatorE>:
        static void destroy(KVGroup*& obj, IPoolAllocator& allocator)
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
            if (obj != UAVCAN_NULLPTR)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d010      	beq.n	800d386 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup7destroyERPS5_RNS_14IPoolAllocatorE+0x34>
                obj->~KVGroup();
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff ffd4 	bl	800d316 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupD1Ev>
                allocator.deallocate(obj);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	330c      	adds	r3, #12
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	6812      	ldr	r2, [r2, #0]
 800d37a:	4611      	mov	r1, r2
 800d37c:	6838      	ldr	r0, [r7, #0]
 800d37e:	4798      	blx	r3
                obj = UAVCAN_NULLPTR;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	601a      	str	r2, [r3, #0]
        }
 800d386:	bf00      	nop
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <_ZN6uavcan15StaticArrayBaseILj16EEC1Ev>:
    StaticArrayBase() { }
 800d38e:	b480      	push	{r7}
 800d390:	b083      	sub	sp, #12
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
            ::uavcan::fill(data_, data_ + MaxSize, U());
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3310      	adds	r3, #16
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	73fa      	strb	r2, [r7, #15]
 800d3b8:	f107 020f 	add.w	r2, r7, #15
 800d3bc:	4619      	mov	r1, r3
 800d3be:	f7fb f907 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 800d3c2:	bf00      	nop
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <_ZN6uavcan16DynamicArrayBaseILj255EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 800d3ca:	b480      	push	{r7}
 800d3cc:	b083      	sub	sp, #12
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	701a      	strb	r2, [r3, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 800d3e6:	b480      	push	{r7}
 800d3e8:	b085      	sub	sp, #20
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
    }
 800d3f0:	bf00      	nop
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <_ZN6uavcan16coerceOrFallbackIbPNS_20DataTypeInfoProviderEEET_RKT0_RKS3_>:
To coerceOrFallback(const From& from, const To& default_)
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800d406:	461a      	mov	r2, r3
 800d408:	6839      	ldr	r1, [r7, #0]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fabd 	bl	800d98a <_ZN6uavcan20CoerceOrFallbackImplIPNS_20DataTypeInfoProviderEbE4implERKS2_RKbNS_11BooleanTypeILb1EEE>
 800d410:	4603      	mov	r3, r0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <_ZN6uavcan16coerceOrFallbackIbMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEEET_RKT0_RKSD_>:
To coerceOrFallback(const From& from, const To& default_)
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b084      	sub	sp, #16
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800d424:	461a      	mov	r2, r3
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fac1 	bl	800d9b0 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE>
 800d42e:	4603      	mov	r3, r0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>:
        ensureNotConstructed();
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3);
    }

    template<typename P1, typename P2, typename P3, typename P4>
    void construct(typename ParameterType<P1>::Type p1, typename ParameterType<P2>::Type p2,
 800d438:	b590      	push	{r4, r7, lr}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
                   typename ParameterType<P3>::Type p3, typename ParameterType<P4>::Type p4)
    {
        ensureNotConstructed();
 800d446:	68f8      	ldr	r0, [r7, #12]
 800d448:	f000 facc 	bl	800d9e4 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3, p4);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4619      	mov	r1, r3
 800d450:	2034      	movs	r0, #52	; 0x34
 800d452:	f7f8 fd51 	bl	8005ef8 <_ZnwjPv>
 800d456:	4604      	mov	r4, r0
 800d458:	2c00      	cmp	r4, #0
 800d45a:	d00b      	beq.n	800d474 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3c>
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	881a      	ldrh	r2, [r3, #0]
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	4613      	mov	r3, r2
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	68b9      	ldr	r1, [r7, #8]
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 facc 	bl	800da08 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800d470:	4622      	mov	r2, r4
 800d472:	e000      	b.n	800d476 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3e>
 800d474:	4622      	mov	r2, r4
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd90      	pop	{r4, r7, pc}
 800d482:	0000      	movs	r0, r0
 800d484:	0000      	movs	r0, r0
	...

0800d488 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature LogLevel_<_tmpl>::getDataTypeSignature()
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0x711BF141AF572346ULL);
 800d490:	a307      	add	r3, pc, #28	; (adr r3, 800d4b0 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE20getDataTypeSignatureEv+0x28>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7f8 fc1c 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::value::extendDataTypeSignature(signature);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7fe fbd1 	bl	800bc44 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 800d4a2:	bf00      	nop
}
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	f3af 8000 	nop.w
 800d4b0:	af572346 	.word	0xaf572346
 800d4b4:	711bf141 	.word	0x711bf141

0800d4b8 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int LogMessage_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]
    res = FieldTypes::level::encode(self.level, codec,  ::uavcan::TailArrayOptDisabled);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 fac1 	bl	800da58 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800d4d6:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	dc01      	bgt.n	800d4e2 <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2a>
        return res;
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	e015      	b.n	800d50e <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x56>
    res = FieldTypes::source::encode(self.source, codec,  ::uavcan::TailArrayOptDisabled);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 faca 	bl	800da84 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800d4f0:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dc01      	bgt.n	800d4fc <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x44>
        return res;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	e008      	b.n	800d50e <_ZN6uavcan8protocol5debug11LogMessage_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x56>
    res = FieldTypes::text::encode(self.text, codec,  tao_mode);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	3322      	adds	r3, #34	; 0x22
 800d500:	79fa      	ldrb	r2, [r7, #7]
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	4618      	mov	r0, r3
 800d506:	f000 facf 	bl	800daa8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800d50a:	6178      	str	r0, [r7, #20]
    return res;
 800d50c:	697b      	ldr	r3, [r7, #20]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <_ZN6uavcan16coerceOrFallbackIbPKNS_20RestartRequestServerEEET_RKT0_RKS4_>:
To coerceOrFallback(const From& from, const To& default_)
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
 800d51e:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800d520:	461a      	mov	r2, r3
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fad1 	bl	800dacc <_ZN6uavcan20CoerceOrFallbackImplIPKNS_20RestartRequestServerEbE4implERKS3_RKbNS_11BooleanTypeILb1EEE>
 800d52a:	4603      	mov	r3, r0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <_ZN6uavcan16coerceOrFallbackIbMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEEET_RKT0_RKSF_>:
To coerceOrFallback(const From& from, const To& default_)
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800d53e:	461a      	mov	r2, r3
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fad5 	bl	800daf2 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEbE4implERKSE_RKbNS_11BooleanTypeILb1EEE>
 800d548:	4603      	mov	r3, r0
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>:
    void construct(typename ParameterType<P1>::Type p1, typename ParameterType<P2>::Type p2,
 800d552:	b590      	push	{r4, r7, lr}
 800d554:	b087      	sub	sp, #28
 800d556:	af02      	add	r7, sp, #8
 800d558:	60f8      	str	r0, [r7, #12]
 800d55a:	60b9      	str	r1, [r7, #8]
 800d55c:	607a      	str	r2, [r7, #4]
 800d55e:	603b      	str	r3, [r7, #0]
        ensureNotConstructed();
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f000 fadf 	bl	800db24 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3, p4);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	4619      	mov	r1, r3
 800d56a:	2034      	movs	r0, #52	; 0x34
 800d56c:	f7f8 fcc4 	bl	8005ef8 <_ZnwjPv>
 800d570:	4604      	mov	r4, r0
 800d572:	2c00      	cmp	r4, #0
 800d574:	d00b      	beq.n	800d58e <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3c>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	881a      	ldrh	r2, [r3, #0]
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	4613      	mov	r3, r2
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	68b9      	ldr	r1, [r7, #8]
 800d584:	4620      	mov	r0, r4
 800d586:	f000 fadf 	bl	800db48 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800d58a:	4622      	mov	r2, r4
 800d58c:	e000      	b.n	800d590 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3e>
 800d58e:	4622      	mov	r2, r4
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd90      	pop	{r4, r7, pc}

0800d59c <_ZN6uavcan16coerceOrFallbackIbPKNS_22TransportStatsProviderEEET_RKT0_RKS4_>:
To coerceOrFallback(const From& from, const To& default_)
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 faf4 	bl	800db98 <_ZN6uavcan20CoerceOrFallbackImplIPKNS_22TransportStatsProviderEbE4implERKS3_RKbNS_11BooleanTypeILb1EEE>
 800d5b0:	4603      	mov	r3, r0
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <_ZN6uavcan16coerceOrFallbackIbMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEEET_RKT0_RKSD_>:
To coerceOrFallback(const From& from, const To& default_)
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b084      	sub	sp, #16
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 faf8 	bl	800dbbe <_ZN6uavcan20CoerceOrFallbackImplIMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE>
 800d5ce:	4603      	mov	r3, r0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>:
    void construct(typename ParameterType<P1>::Type p1, typename ParameterType<P2>::Type p2,
 800d5d8:	b590      	push	{r4, r7, lr}
 800d5da:	b087      	sub	sp, #28
 800d5dc:	af02      	add	r7, sp, #8
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	603b      	str	r3, [r7, #0]
        ensureNotConstructed();
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 fb02 	bl	800dbf0 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3, p4);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	2034      	movs	r0, #52	; 0x34
 800d5f2:	f7f8 fc81 	bl	8005ef8 <_ZnwjPv>
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	2c00      	cmp	r4, #0
 800d5fa:	d00b      	beq.n	800d614 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3c>
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	881a      	ldrh	r2, [r3, #0]
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	4613      	mov	r3, r2
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 fb02 	bl	800dc14 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800d610:	4622      	mov	r2, r4
 800d612:	e000      	b.n	800d616 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3e>
 800d614:	4622      	mov	r2, r4
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800d61a:	bf00      	nop
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd90      	pop	{r4, r7, pc}

0800d622 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE>:
void Multiset<T>::removeWhere(Predicate predicate, const RemoveStrategy strategy)
 800d622:	b580      	push	{r7, lr}
 800d624:	b088      	sub	sp, #32
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	7039      	strb	r1, [r7, #0]
 800d62c:	4613      	mov	r3, r2
 800d62e:	70fb      	strb	r3, [r7, #3]
    unsigned num_removed = 0;
 800d630:	2300      	movs	r3, #0
 800d632:	61fb      	str	r3, [r7, #28]
    Chunk* p = list_.get();
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3304      	adds	r3, #4
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 f957 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 800d63e:	61b8      	str	r0, [r7, #24]
    while (p != UAVCAN_NULLPTR)
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d03a      	beq.n	800d6bc <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x9a>
        Chunk* const next_chunk = p->getNextListNode(); // For the case if the current entry gets modified
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 f95b 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800d64e:	6138      	str	r0, [r7, #16]
        if ((num_removed > 0) && (strategy == RemoveOne))
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x3a>
 800d656:	78fb      	ldrb	r3, [r7, #3]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d02e      	beq.n	800d6ba <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x98>
        for (int i = 0; i < Chunk::NumItems; i++)
 800d65c:	2300      	movs	r3, #0
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	dc26      	bgt.n	800d6b4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x92>
            Item& item = p->items[i];
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	4613      	mov	r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	4413      	add	r3, r2
 800d66e:	00db      	lsls	r3, r3, #3
 800d670:	3308      	adds	r3, #8
 800d672:	69ba      	ldr	r2, [r7, #24]
 800d674:	4413      	add	r3, r2
 800d676:	60fb      	str	r3, [r7, #12]
            if (item.isConstructed())
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 f94f 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d012      	beq.n	800d6aa <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x88>
                if (predicate(*item.ptr))
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	463b      	mov	r3, r7
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 f956 	bl	800d93e <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE12YesPredicateclERKS2_>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d008      	beq.n	800d6aa <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x88>
                    num_removed++;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	3301      	adds	r3, #1
 800d69c:	61fb      	str	r3, [r7, #28]
                    item.destroy();
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 fae0 	bl	800dc64 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item7destroyEv>
                    if (strategy == RemoveOne)
 800d6a4:	78fb      	ldrb	r3, [r7, #3]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x90>
        for (int i = 0; i < Chunk::NumItems; i++)
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
 800d6b0:	e7d6      	b.n	800d660 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x3e>
                        break;
 800d6b2:	bf00      	nop
        p = next_chunk;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	61bb      	str	r3, [r7, #24]
    while (p != UAVCAN_NULLPTR)
 800d6b8:	e7c2      	b.n	800d640 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0x1e>
            break;
 800d6ba:	bf00      	nop
    if (num_removed > 0)
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d002      	beq.n	800d6c8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS3_12YesPredicateEEEvT_NS3_14RemoveStrategyE+0xa6>
        compact();
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 faef 	bl	800dca6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv>
}
 800d6c8:	bf00      	nop
 800d6ca:	3720      	adds	r7, #32
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <_ZN6uavcan16DynamicArrayBaseILj200EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	701a      	strb	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
    }
 800d6f6:	bf00      	nop
 800d6f8:	3714      	adds	r7, #20
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE12genericStartEMNS_10DispatcherEFbPNS_16TransferListenerEE>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::
 800d702:	b590      	push	{r4, r7, lr}
 800d704:	b087      	sub	sp, #28
 800d706:	af00      	add	r7, sp, #0
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	1d3b      	adds	r3, r7, #4
 800d70c:	e883 0006 	stmia.w	r3, {r1, r2}
    const int res = checkInit();
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 fb11 	bl	800dd38 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv>
 800d716:	6178      	str	r0, [r7, #20]
    if (res < 0)
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	da01      	bge.n	800d722 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE12genericStartEMNS_10DispatcherEFbPNS_16TransferListenerEE+0x20>
        return res;
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	e00d      	b.n	800d73e <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE12genericStartEMNS_10DispatcherEFbPNS_16TransferListenerEE+0x3c>
    return GenericSubscriberBase::genericStart(forwarder_, registration_method);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	1d1c      	adds	r4, r3, #4
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	330c      	adds	r3, #12
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fba4 	bl	800ce78 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEcvPS9_Ev>
 800d730:	4601      	mov	r1, r0
 800d732:	1d3b      	adds	r3, r7, #4
 800d734:	cb0c      	ldmia	r3, {r2, r3}
 800d736:	4620      	mov	r0, r4
 800d738:	f007 f85e 	bl	80147f8 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E>
 800d73c:	4603      	mov	r3, r0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	371c      	adds	r7, #28
 800d742:	46bd      	mov	sp, r7
 800d744:	bd90      	pop	{r4, r7, pc}

0800d746 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv>:
typename Multiset<T>::Item* Multiset<T>::findOrCreateFreeSlot()
 800d746:	b580      	push	{r7, lr}
 800d748:	b086      	sub	sp, #24
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
        Chunk* p = list_.get();
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	3304      	adds	r3, #4
 800d752:	4618      	mov	r0, r3
 800d754:	f000 f8ca 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 800d758:	6178      	str	r0, [r7, #20]
        while (p)
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00e      	beq.n	800d77e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv+0x38>
            Item* const dyn = p->findFreeSlot();
 800d760:	6978      	ldr	r0, [r7, #20]
 800d762:	f000 fb2f 	bl	800ddc4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk12findFreeSlotEv>
 800d766:	6138      	str	r0, [r7, #16]
            if (dyn != UAVCAN_NULLPTR)
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv+0x2c>
                return dyn;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	e018      	b.n	800d7a4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv+0x5e>
            p = p->getNextListNode();
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	4618      	mov	r0, r3
 800d776:	f000 f8c5 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800d77a:	6178      	str	r0, [r7, #20]
        while (p)
 800d77c:	e7ed      	b.n	800d75a <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv+0x14>
    Chunk* const chunk = Chunk::instantiate(allocator_);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 fb4b 	bl	800de1e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk11instantiateERNS_14IPoolAllocatorE>
 800d788:	60f8      	str	r0, [r7, #12]
    if (chunk == UAVCAN_NULLPTR)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv+0x4e>
        return UAVCAN_NULLPTR;
 800d790:	2300      	movs	r3, #0
 800d792:	e007      	b.n	800d7a4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE20findOrCreateFreeSlotEv+0x5e>
    list_.insert(chunk);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3304      	adds	r3, #4
 800d798:	68f9      	ldr	r1, [r7, #12]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fb62 	bl	800de64 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6insertEPS5_>
    return &chunk->items[0];
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3308      	adds	r3, #8
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE>:
void Multiset<T>::removeWhere(Predicate predicate, const RemoveStrategy strategy)
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08a      	sub	sp, #40	; 0x28
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	8139      	strh	r1, [r7, #8]
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	71fb      	strb	r3, [r7, #7]
    unsigned num_removed = 0;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
    Chunk* p = list_.get();
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 f892 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 800d7c8:	6238      	str	r0, [r7, #32]
    while (p != UAVCAN_NULLPTR)
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d03b      	beq.n	800d848 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x9c>
        Chunk* const next_chunk = p->getNextListNode(); // For the case if the current entry gets modified
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f000 f896 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800d7d8:	61b8      	str	r0, [r7, #24]
        if ((num_removed > 0) && (strategy == RemoveOne))
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d002      	beq.n	800d7e6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x3a>
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d02f      	beq.n	800d846 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x9a>
        for (int i = 0; i < Chunk::NumItems; i++)
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	61fb      	str	r3, [r7, #28]
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	dc27      	bgt.n	800d840 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x94>
            Item& item = p->items[i];
 800d7f0:	69fa      	ldr	r2, [r7, #28]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	6a3a      	ldr	r2, [r7, #32]
 800d7fe:	4413      	add	r3, r2
 800d800:	617b      	str	r3, [r7, #20]
            if (item.isConstructed())
 800d802:	6978      	ldr	r0, [r7, #20]
 800d804:	f000 f88a 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d013      	beq.n	800d836 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x8a>
                if (predicate(*item.ptr))
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	f107 0308 	add.w	r3, r7, #8
 800d816:	4611      	mov	r1, r2
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fa f8f0 	bl	80079fe <_ZNK6uavcan17ServiceClientBase26CallStateMatchingPredicateclERKNS0_9CallStateE>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d008      	beq.n	800d836 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x8a>
                    num_removed++;
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	3301      	adds	r3, #1
 800d828:	627b      	str	r3, [r7, #36]	; 0x24
                    item.destroy();
 800d82a:	6978      	ldr	r0, [r7, #20]
 800d82c:	f000 fa1a 	bl	800dc64 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item7destroyEv>
                    if (strategy == RemoveOne)
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x92>
        for (int i = 0; i < Chunk::NumItems; i++)
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	3301      	adds	r3, #1
 800d83a:	61fb      	str	r3, [r7, #28]
 800d83c:	e7d5      	b.n	800d7ea <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x3e>
                        break;
 800d83e:	bf00      	nop
        p = next_chunk;
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	623b      	str	r3, [r7, #32]
    while (p != UAVCAN_NULLPTR)
 800d844:	e7c1      	b.n	800d7ca <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0x1e>
            break;
 800d846:	bf00      	nop
    if (num_removed > 0)
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d002      	beq.n	800d854 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereINS1_26CallStateMatchingPredicateEEEvT_NS3_14RemoveStrategyE+0xa8>
        compact();
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 fa29 	bl	800dca6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv>
}
 800d854:	bf00      	nop
 800d856:	3728      	adds	r7, #40	; 0x28
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <_ZN6uavcan20StaticTransferBufferILt202EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	330c      	adds	r3, #12
 800d86a:	22ca      	movs	r2, #202	; 0xca
 800d86c:	4619      	mov	r1, r3
 800d86e:	f7f8 fc9f 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 800d872:	4a05      	ldr	r2, [pc, #20]	; (800d888 <_ZN6uavcan20StaticTransferBufferILt202EEC1Ev+0x2c>)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 800d878:	f7f8 f8aa 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	08025000 	.word	0x08025000

0800d88c <_ZNK6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE8doEncodeERKS5_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	; 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 800d898:	f107 0318 	add.w	r3, r7, #24
 800d89c:	6879      	ldr	r1, [r7, #4]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7f8 fb06 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 800d8a4:	f107 0218 	add.w	r2, r7, #24
 800d8a8:	f107 0314 	add.w	r3, r7, #20
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7f8 fb13 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 800d8b4:	f107 0314 	add.w	r3, r7, #20
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	68b8      	ldr	r0, [r7, #8]
 800d8be:	f000 faf7 	bl	800deb0 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EE6encodeERKS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800d8c2:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	dc05      	bgt.n	800d8d6 <_ZNK6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE8doEncodeERKS5_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 800d8ca:	4b05      	ldr	r3, [pc, #20]	; (800d8e0 <_ZNK6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE8doEncodeERKS5_RNS_15ITransferBufferE+0x54>)
 800d8cc:	4a05      	ldr	r2, [pc, #20]	; (800d8e4 <_ZNK6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE8doEncodeERKS5_RNS_15ITransferBufferE+0x58>)
 800d8ce:	21ab      	movs	r1, #171	; 0xab
 800d8d0:	4805      	ldr	r0, [pc, #20]	; (800d8e8 <_ZNK6uavcan16GenericPublisherINS_8protocol4file20BeginFirmwareUpdate_ENS3_8Request_ILi0EEEE8doEncodeERKS5_RNS_15ITransferBufferE+0x5c>)
 800d8d2:	f012 fe5b 	bl	802058c <__assert_func>
    return encode_res;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	; 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	08021b88 	.word	0x08021b88
 800d8e4:	080293ac 	.word	0x080293ac
 800d8e8:	080220d0 	.word	0x080220d0

0800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>:
    T* get() const { return root_; }
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4618      	mov	r0, r3
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>:
        bool isConstructed() const { return ptr != UAVCAN_NULLPTR; }
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	bf14      	ite	ne
 800d92c:	2301      	movne	r3, #1
 800d92e:	2300      	moveq	r3, #0
 800d930:	b2db      	uxtb	r3, r3
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE12YesPredicateclERKS2_>:
        bool operator()(const T&) const { return true; }
 800d93e:	b480      	push	{r7}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	6039      	str	r1, [r7, #0]
 800d948:	2301      	movs	r3, #1
 800d94a:	4618      	mov	r0, r3
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15setNextListNodeEPS6_>:
    void setNextListNode(T* node)
 800d956:	b480      	push	{r7}
 800d958:	b083      	sub	sp, #12
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	6039      	str	r1, [r7, #0]
        next_ = node;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	601a      	str	r2, [r3, #0]
    }
 800d966:	bf00      	nop
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEED1Ev>:
    ~LinkedListNode() { }
 800d972:	b580      	push	{r7, lr}
 800d974:	b082      	sub	sp, #8
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7f8 f83a 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <_ZN6uavcan20CoerceOrFallbackImplIPNS_20DataTypeInfoProviderEbE4implERKS2_RKbNS_11BooleanTypeILb1EEE>:
    static To impl(const From& from, const To&, TrueType) { return To(from); }
 800d98a:	b480      	push	{r7}
 800d98c:	b085      	sub	sp, #20
 800d98e:	af00      	add	r7, sp, #0
 800d990:	60f8      	str	r0, [r7, #12]
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	713a      	strb	r2, [r7, #4]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	bf14      	ite	ne
 800d99e:	2301      	movne	r3, #1
 800d9a0:	2300      	moveq	r3, #0
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE>:
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	713a      	strb	r2, [r7, #4]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d105      	bne.n	800d9d0 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x20>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x24>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e000      	b.n	800d9d6 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20DataTypeInfoProviderEFvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x26>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
	...

0800d9e4 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>:
    void ensureNotConstructed() const
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 800d9f4:	4803      	ldr	r0, [pc, #12]	; (800da04 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x20>)
 800d9f6:	f010 fac3 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 800d9fa:	bf00      	nop
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	bf00      	nop
 800da04:	08022178 	.word	0x08022178

0800da08 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
        TransferForwarder(SelfType& obj,
 800da08:	b590      	push	{r4, r7, lr}
 800da0a:	b087      	sub	sp, #28
 800da0c:	af02      	add	r7, sp, #8
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
 800da14:	807b      	strh	r3, [r7, #2]
            obj_(obj)
 800da16:	68fc      	ldr	r4, [r7, #12]
            TransferListenerType(obj.node_.getDispatcher().getTransferPerfCounter(),
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7f8 ff91 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800da22:	4603      	mov	r3, r0
            obj_(obj)
 800da24:	4618      	mov	r0, r3
 800da26:	f7f8 fe5c 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800da2a:	4601      	mov	r1, r0
 800da2c:	887a      	ldrh	r2, [r7, #2]
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	4613      	mov	r3, r2
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	4620      	mov	r0, r4
 800da38:	f7f8 fc8c 	bl	8006354 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800da3c:	4a05      	ldr	r2, [pc, #20]	; (800da54 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x4c>)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	631a      	str	r2, [r3, #48]	; 0x30
        { }
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4618      	mov	r0, r3
 800da4c:	3714      	adds	r7, #20
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd90      	pop	{r4, r7, pc}
 800da52:	bf00      	nop
 800da54:	080251ac 	.word	0x080251ac

0800da58 <_ZN6uavcan8protocol5debug9LogLevel_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int LogLevel_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	4613      	mov	r3, r2
 800da64:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 800da66:	2301      	movs	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
    res = FieldTypes::value::encode(self.value, codec,  tao_mode);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	79fa      	ldrb	r2, [r7, #7]
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 fa3f 	bl	800def6 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800da78:	6178      	str	r0, [r7, #20]
    return res;
 800da7a:	697b      	ldr	r3, [r7, #20]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 800da84:	b590      	push	{r4, r7, lr}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	4613      	mov	r3, r2
 800da90:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 800da92:	79fa      	ldrb	r2, [r7, #7]
 800da94:	4623      	mov	r3, r4
 800da96:	68b9      	ldr	r1, [r7, #8]
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f000 fa44 	bl	800df26 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 800da9e:	4603      	mov	r3, r0
    }
 800daa0:	4618      	mov	r0, r3
 800daa2:	371c      	adds	r7, #28
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd90      	pop	{r4, r7, pc}

0800daa8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	4613      	mov	r3, r2
 800dab4:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 800dab6:	79fa      	ldrb	r2, [r7, #7]
 800dab8:	4623      	mov	r3, r4
 800daba:	68b9      	ldr	r1, [r7, #8]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f000 fa76 	bl	800dfae <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 800dac2:	4603      	mov	r3, r0
    }
 800dac4:	4618      	mov	r0, r3
 800dac6:	371c      	adds	r7, #28
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd90      	pop	{r4, r7, pc}

0800dacc <_ZN6uavcan20CoerceOrFallbackImplIPKNS_20RestartRequestServerEbE4implERKS3_RKbNS_11BooleanTypeILb1EEE>:
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	713a      	strb	r2, [r7, #4]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	bf14      	ite	ne
 800dae0:	2301      	movne	r3, #1
 800dae2:	2300      	moveq	r3, #0
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	4618      	mov	r0, r3
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr

0800daf2 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEbE4implERKSE_RKbNS_11BooleanTypeILb1EEE>:
 800daf2:	b480      	push	{r7}
 800daf4:	b085      	sub	sp, #20
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	60f8      	str	r0, [r7, #12]
 800dafa:	60b9      	str	r1, [r7, #8]
 800dafc:	713a      	strb	r2, [r7, #4]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d105      	bne.n	800db12 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEbE4implERKSE_RKbNS_11BooleanTypeILb1EEE+0x20>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEbE4implERKSE_RKbNS_11BooleanTypeILb1EEE+0x24>
 800db12:	2301      	movs	r3, #1
 800db14:	e000      	b.n	800db18 <_ZN6uavcan20CoerceOrFallbackImplIMNS_20RestartRequestServerEKFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS4_9Response_ILi0EEEEbE4implERKSE_RKbNS_11BooleanTypeILb1EEE+0x26>
 800db16:	2300      	movs	r3, #0
 800db18:	4618      	mov	r0, r3
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>:
    void ensureNotConstructed() const
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 800db34:	4803      	ldr	r0, [pc, #12]	; (800db44 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12RestartNode_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x20>)
 800db36:	f010 fa23 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 800db3a:	bf00      	nop
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	08022178 	.word	0x08022178

0800db48 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
        TransferForwarder(SelfType& obj,
 800db48:	b590      	push	{r4, r7, lr}
 800db4a:	b087      	sub	sp, #28
 800db4c:	af02      	add	r7, sp, #8
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
 800db54:	807b      	strh	r3, [r7, #2]
            obj_(obj)
 800db56:	68fc      	ldr	r4, [r7, #12]
            TransferListenerType(obj.node_.getDispatcher().getTransferPerfCounter(),
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7f8 fef1 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800db62:	4603      	mov	r3, r0
            obj_(obj)
 800db64:	4618      	mov	r0, r3
 800db66:	f7f8 fdbc 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800db6a:	4601      	mov	r1, r0
 800db6c:	887a      	ldrh	r2, [r7, #2]
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	4613      	mov	r3, r2
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	4620      	mov	r0, r4
 800db78:	f7f8 fbec 	bl	8006354 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800db7c:	4a05      	ldr	r2, [pc, #20]	; (800db94 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x4c>)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	631a      	str	r2, [r3, #48]	; 0x30
        { }
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd90      	pop	{r4, r7, pc}
 800db92:	bf00      	nop
 800db94:	0802516c 	.word	0x0802516c

0800db98 <_ZN6uavcan20CoerceOrFallbackImplIPKNS_22TransportStatsProviderEbE4implERKS3_RKbNS_11BooleanTypeILb1EEE>:
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	713a      	strb	r2, [r7, #4]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	bf14      	ite	ne
 800dbac:	2301      	movne	r3, #1
 800dbae:	2300      	moveq	r3, #0
 800dbb0:	b2db      	uxtb	r3, r3
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <_ZN6uavcan20CoerceOrFallbackImplIMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE>:
 800dbbe:	b480      	push	{r7}
 800dbc0:	b085      	sub	sp, #20
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	60f8      	str	r0, [r7, #12]
 800dbc6:	60b9      	str	r1, [r7, #8]
 800dbc8:	713a      	strb	r2, [r7, #4]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d105      	bne.n	800dbde <_ZN6uavcan20CoerceOrFallbackImplIMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x20>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <_ZN6uavcan20CoerceOrFallbackImplIMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x24>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e000      	b.n	800dbe4 <_ZN6uavcan20CoerceOrFallbackImplIMNS_22TransportStatsProviderEKFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x26>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>:
    void ensureNotConstructed() const
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d002      	beq.n	800dc06 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 800dc00:	4803      	ldr	r0, [pc, #12]	; (800dc10 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol18GetTransportStats_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x20>)
 800dc02:	f010 f9bd 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 800dc06:	bf00      	nop
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	08022178 	.word	0x08022178

0800dc14 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
        TransferForwarder(SelfType& obj,
 800dc14:	b590      	push	{r4, r7, lr}
 800dc16:	b087      	sub	sp, #28
 800dc18:	af02      	add	r7, sp, #8
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	807b      	strh	r3, [r7, #2]
            obj_(obj)
 800dc22:	68fc      	ldr	r4, [r7, #12]
            TransferListenerType(obj.node_.getDispatcher().getTransferPerfCounter(),
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7f8 fe8b 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800dc2e:	4603      	mov	r3, r0
            obj_(obj)
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f8 fd56 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800dc36:	4601      	mov	r1, r0
 800dc38:	887a      	ldrh	r2, [r7, #2]
 800dc3a:	6a3b      	ldr	r3, [r7, #32]
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	4620      	mov	r0, r4
 800dc44:	f7f8 fb86 	bl	8006354 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800dc48:	4a05      	ldr	r2, [pc, #20]	; (800dc60 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x4c>)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	631a      	str	r2, [r3, #48]	; 0x30
        { }
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd90      	pop	{r4, r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	0802512c 	.word	0x0802512c

0800dc64 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item7destroyEv>:
        void destroy()
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
            if (ptr != UAVCAN_NULLPTR)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d014      	beq.n	800dc9e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item7destroyEv+0x3a>
                ptr->~T();
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4610      	mov	r0, r2
 800dc82:	4798      	blx	r3
                ptr = UAVCAN_NULLPTR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
                fill_n(pool, sizeof(pool), static_cast<unsigned char>(0));
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3308      	adds	r3, #8
 800dc8e:	2200      	movs	r2, #0
 800dc90:	73fa      	strb	r2, [r7, #15]
 800dc92:	f107 020f 	add.w	r2, r7, #15
 800dc96:	2120      	movs	r1, #32
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 f9cc 	bl	800e036 <_ZN6uavcan6fill_nIPhhEEvT_jRKT0_>
        }
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv>:
void Multiset<T>::compact()
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b086      	sub	sp, #24
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
    Chunk* p = list_.get();
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff fe1a 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	60bb      	str	r3, [r7, #8]
    while (p)
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d035      	beq.n	800dd2e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x88>
        Chunk* const next = p->getNextListNode();
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7ff fe1d 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800dcca:	60f8      	str	r0, [r7, #12]
        bool remove_this = true;
 800dccc:	2301      	movs	r3, #1
 800dcce:	75fb      	strb	r3, [r7, #23]
        for (int i = 0; i < Chunk::NumItems; i++)
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	613b      	str	r3, [r7, #16]
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	dc14      	bgt.n	800dd04 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x5e>
            if (p->items[i].isConstructed())
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	4613      	mov	r3, r2
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	4413      	add	r3, r2
 800dce4:	00db      	lsls	r3, r3, #3
 800dce6:	3308      	adds	r3, #8
 800dce8:	440b      	add	r3, r1
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff fe16 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x56>
                remove_this = false;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	75fb      	strb	r3, [r7, #23]
                break;
 800dcfa:	e003      	b.n	800dd04 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x5e>
        for (int i = 0; i < Chunk::NumItems; i++)
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	613b      	str	r3, [r7, #16]
 800dd02:	e7e7      	b.n	800dcd4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x2e>
        if (remove_this)
 800dd04:	7dfb      	ldrb	r3, [r7, #23]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00e      	beq.n	800dd28 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x82>
            list_.remove(p);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	4611      	mov	r1, r2
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 f9ac 	bl	800e070 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_>
            Chunk::destroy(p, allocator_);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	689a      	ldr	r2, [r3, #8]
 800dd1c:	f107 0308 	add.w	r3, r7, #8
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 fa11 	bl	800e14a <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk7destroyERPS4_RNS_14IPoolAllocatorE>
        p = next;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	60bb      	str	r3, [r7, #8]
    while (p)
 800dd2c:	e7c6      	b.n	800dcbc <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv+0x16>
}
 800dd2e:	bf00      	nop
 800dd30:	3718      	adds	r7, #24
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
	...

0800dd38 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::checkInit()
 800dd38:	b590      	push	{r4, r7, lr}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af02      	add	r7, sp, #8
 800dd3e:	6078      	str	r0, [r7, #4]
    if (forwarder_)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	330c      	adds	r3, #12
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff f897 	bl	800ce78 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEEcvPS9_Ev>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	bf14      	ite	ne
 800dd50:	2301      	movne	r3, #1
 800dd52:	2300      	moveq	r3, #0
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv+0x26>
        return 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e02c      	b.n	800ddb8 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv+0x80>
    GlobalDataTypeRegistry::instance().freeze();
 800dd5e:	f006 ff6d 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800dd62:	4603      	mov	r3, r0
 800dd64:	4618      	mov	r0, r3
 800dd66:	f006 ff83 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>
        GlobalDataTypeRegistry::instance().find(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName());
 800dd6a:	f006 ff67 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 800dd6e:	4604      	mov	r4, r0
    const DataTypeDescriptor* const descr =
 800dd70:	f7f9 fff4 	bl	8007d5c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_19getDataTypeFullNameEv>
 800dd74:	4603      	mov	r3, r0
 800dd76:	461a      	mov	r2, r3
 800dd78:	2100      	movs	r1, #0
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f006 ffa6 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 800dd80:	60f8      	str	r0, [r7, #12]
    if (descr == UAVCAN_NULLPTR)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv+0x56>
        return -ErrUnknownDataType;
 800dd88:	f06f 0304 	mvn.w	r3, #4
 800dd8c:	e014      	b.n	800ddb8 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv+0x80>
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f103 040c 	add.w	r4, r3, #12
        (*this, *descr, MaxBufferSize, node_.getAllocator());
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685a      	ldr	r2, [r3, #4]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	3308      	adds	r3, #8
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4610      	mov	r0, r2
 800dda4:	4798      	blx	r3
 800dda6:	4603      	mov	r3, r0
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE9checkInitEv+0x88>)
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 f9e8 	bl	800e186 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE9constructIRS8_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSI_IT0_E4TypeENSI_IT1_E4TypeENSI_IT2_E4TypeE>
    return 0;
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3714      	adds	r7, #20
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd90      	pop	{r4, r7, pc}
 800ddc0:	08024ff6 	.word	0x08024ff6

0800ddc4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk12findFreeSlotEv>:
        Item* findFreeSlot()
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
            for (unsigned i = 0; i < static_cast<unsigned>(NumItems); i++)
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d11e      	bne.n	800de14 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk12findFreeSlotEv+0x50>
                if (!items[i].isConstructed())
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	3308      	adds	r3, #8
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	4413      	add	r3, r2
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff fd98 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 800ddec:	4603      	mov	r3, r0
 800ddee:	f083 0301 	eor.w	r3, r3, #1
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d009      	beq.n	800de0c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk12findFreeSlotEv+0x48>
                    return items + i;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f103 0108 	add.w	r1, r3, #8
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4613      	mov	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4413      	add	r3, r2
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	440b      	add	r3, r1
 800de0a:	e004      	b.n	800de16 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk12findFreeSlotEv+0x52>
            for (unsigned i = 0; i < static_cast<unsigned>(NumItems); i++)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	3301      	adds	r3, #1
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e7dd      	b.n	800ddd0 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk12findFreeSlotEv+0xc>
            return UAVCAN_NULLPTR;
 800de14:	2300      	movs	r3, #0
        }
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk11instantiateERNS_14IPoolAllocatorE>:
        static Chunk* instantiate(IPoolAllocator& allocator)
 800de1e:	b590      	push	{r4, r7, lr}
 800de20:	b085      	sub	sp, #20
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
            void* const praw = allocator.allocate(sizeof(Chunk));
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3308      	adds	r3, #8
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2130      	movs	r1, #48	; 0x30
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	4798      	blx	r3
 800de34:	60f8      	str	r0, [r7, #12]
            if (praw == UAVCAN_NULLPTR)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d101      	bne.n	800de40 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk11instantiateERNS_14IPoolAllocatorE+0x22>
                return UAVCAN_NULLPTR;
 800de3c:	2300      	movs	r3, #0
 800de3e:	e00d      	b.n	800de5c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk11instantiateERNS_14IPoolAllocatorE+0x3e>
            return new (praw) Chunk();
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	4619      	mov	r1, r3
 800de44:	2030      	movs	r0, #48	; 0x30
 800de46:	f7f8 f857 	bl	8005ef8 <_ZnwjPv>
 800de4a:	4604      	mov	r4, r0
 800de4c:	2c00      	cmp	r4, #0
 800de4e:	d004      	beq.n	800de5a <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk11instantiateERNS_14IPoolAllocatorE+0x3c>
 800de50:	4620      	mov	r0, r4
 800de52:	f000 f9bd 	bl	800e1d0 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev>
 800de56:	4623      	mov	r3, r4
 800de58:	e000      	b.n	800de5c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk11instantiateERNS_14IPoolAllocatorE+0x3e>
 800de5a:	4623      	mov	r3, r4
        }
 800de5c:	4618      	mov	r0, r3
 800de5e:	3714      	adds	r7, #20
 800de60:	46bd      	mov	sp, r7
 800de62:	bd90      	pop	{r4, r7, pc}

0800de64 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6insertEPS5_>:
void LinkedListRoot<T>::insert(T* node)
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
    if (node == UAVCAN_NULLPTR)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d105      	bne.n	800de80 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6insertEPS5_+0x1c>
        UAVCAN_ASSERT(0);
 800de74:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6insertEPS5_+0x40>)
 800de76:	4a0c      	ldr	r2, [pc, #48]	; (800dea8 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6insertEPS5_+0x44>)
 800de78:	216a      	movs	r1, #106	; 0x6a
 800de7a:	480c      	ldr	r0, [pc, #48]	; (800deac <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6insertEPS5_+0x48>)
 800de7c:	f012 fb86 	bl	802058c <__assert_func>
    remove(node);  // Making sure there will be no loops
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f8f4 	bl	800e070 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_>
    node->setNextListNode(root_);
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4619      	mov	r1, r3
 800de90:	4610      	mov	r0, r2
 800de92:	f000 f9d1 	bl	800e238 <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15setNextListNodeEPS5_>
    root_ = node;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	683a      	ldr	r2, [r7, #0]
 800de9a:	601a      	str	r2, [r3, #0]
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	08021b88 	.word	0x08021b88
 800dea8:	080292c4 	.word	0x080292c4
 800deac:	0802218c 	.word	0x0802218c

0800deb0 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EE6encodeERKS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int BeginFirmwareUpdate_::Request_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	4613      	mov	r3, r2
 800debc:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 800debe:	2301      	movs	r3, #1
 800dec0:	617b      	str	r3, [r7, #20]
    res = FieldTypes::source_node_id::encode(self.source_node_id, codec,  ::uavcan::TailArrayOptDisabled);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	2200      	movs	r2, #0
 800dec8:	68b9      	ldr	r1, [r7, #8]
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f9c2 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800ded0:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	dc01      	bgt.n	800dedc <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EE6encodeERKS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	e008      	b.n	800deee <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_8Request_ILi0EE6encodeERKS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x3e>
    res = FieldTypes::image_file_remote_path::encode(self.image_file_remote_path, codec,  tao_mode);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3301      	adds	r3, #1
 800dee0:	79fa      	ldrb	r2, [r7, #7]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 f9cd 	bl	800e284 <_ZN6uavcan8protocol4file5Path_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800deea:	6178      	str	r0, [r7, #20]
    return res;
 800deec:	697b      	ldr	r3, [r7, #20]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3718      	adds	r7, #24
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 800def6:	b580      	push	{r7, lr}
 800def8:	b082      	sub	sp, #8
 800defa:	af00      	add	r7, sp, #0
 800defc:	4603      	mov	r3, r0
 800defe:	6039      	str	r1, [r7, #0]
 800df00:	71fb      	strb	r3, [r7, #7]
 800df02:	4613      	mov	r3, r2
 800df04:	71bb      	strb	r3, [r7, #6]
        validate();
 800df06:	f000 f9d3 	bl	800e2b0 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 800df0a:	1dfb      	adds	r3, r7, #7
 800df0c:	4618      	mov	r0, r3
 800df0e:	f000 f9fb 	bl	800e308 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>
        return codec.encode<BitLen>(value);
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	4619      	mov	r1, r3
 800df16:	6838      	ldr	r0, [r7, #0]
 800df18:	f000 fa23 	bl	800e362 <_ZN6uavcan11ScalarCodec6encodeILj3EhEEiT0_>
 800df1c:	4603      	mov	r3, r0
    }
 800df1e:	4618      	mov	r0, r3
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType) const   /// Dynamic
 800df26:	b590      	push	{r4, r7, lr}
 800df28:	b089      	sub	sp, #36	; 0x24
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	60f8      	str	r0, [r7, #12]
 800df2e:	60b9      	str	r1, [r7, #8]
 800df30:	713b      	strb	r3, [r7, #4]
 800df32:	4613      	mov	r3, r2
 800df34:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 800df36:	f7f7 fd4b 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        const bool self_tao_enabled = isOptimizedTailArray(tao_mode);
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f000 fa31 	bl	800e3a4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 800df42:	4603      	mov	r3, r0
 800df44:	77fb      	strb	r3, [r7, #31]
        if (!self_tao_enabled)
 800df46:	7ffb      	ldrb	r3, [r7, #31]
 800df48:	f083 0301 	eor.w	r3, r3, #1
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00f      	beq.n	800df72 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                Base::RawEncodedSizeType::encode(typename StorageType<typename Base::RawEncodedSizeType>::Type(size()),
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fa4f 	bl	800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>
 800df5a:	4603      	mov	r3, r0
            const int res_sz =
 800df5c:	2200      	movs	r2, #0
 800df5e:	68b9      	ldr	r1, [r7, #8]
 800df60:	4618      	mov	r0, r3
 800df62:	f000 fa30 	bl	800e3c6 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800df66:	61b8      	str	r0, [r7, #24]
            if (res_sz <= 0)
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dc01      	bgt.n	800df72 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                return res_sz;
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	e019      	b.n	800dfa6 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        if (size() == 0)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	4618      	mov	r0, r3
 800df76:	f000 fa3f 	bl	800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x68>
            return 1;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e00b      	b.n	800dfa6 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        return encodeImpl(codec, self_tao_enabled ? TailArrayOptDisabled : tao_mode, FalseType());
 800df8e:	7ffb      	ldrb	r3, [r7, #31]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x72>
 800df94:	2200      	movs	r2, #0
 800df96:	e000      	b.n	800df9a <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x74>
 800df98:	79fa      	ldrb	r2, [r7, #7]
 800df9a:	4623      	mov	r3, r4
 800df9c:	68b9      	ldr	r1, [r7, #8]
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f000 fa50 	bl	800e444 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 800dfa4:	4603      	mov	r3, r0
    }
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3724      	adds	r7, #36	; 0x24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd90      	pop	{r4, r7, pc}

0800dfae <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType) const   /// Dynamic
 800dfae:	b590      	push	{r4, r7, lr}
 800dfb0:	b089      	sub	sp, #36	; 0x24
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	713b      	strb	r3, [r7, #4]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 800dfbe:	f7f7 fd07 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        const bool self_tao_enabled = isOptimizedTailArray(tao_mode);
 800dfc2:	79fb      	ldrb	r3, [r7, #7]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fa97 	bl	800e4f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	77fb      	strb	r3, [r7, #31]
        if (!self_tao_enabled)
 800dfce:	7ffb      	ldrb	r3, [r7, #31]
 800dfd0:	f083 0301 	eor.w	r3, r3, #1
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00f      	beq.n	800dffa <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                Base::RawEncodedSizeType::encode(typename StorageType<typename Base::RawEncodedSizeType>::Type(size()),
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 fab5 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 800dfe2:	4603      	mov	r3, r0
            const int res_sz =
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 fa96 	bl	800e51a <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800dfee:	61b8      	str	r0, [r7, #24]
            if (res_sz <= 0)
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	dc01      	bgt.n	800dffa <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                return res_sz;
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	e019      	b.n	800e02e <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        if (size() == 0)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 faa5 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	bf0c      	ite	eq
 800e008:	2301      	moveq	r3, #1
 800e00a:	2300      	movne	r3, #0
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x68>
            return 1;
 800e012:	2301      	movs	r3, #1
 800e014:	e00b      	b.n	800e02e <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        return encodeImpl(codec, self_tao_enabled ? TailArrayOptDisabled : tao_mode, FalseType());
 800e016:	7ffb      	ldrb	r3, [r7, #31]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x72>
 800e01c:	2200      	movs	r2, #0
 800e01e:	e000      	b.n	800e022 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x74>
 800e020:	79fa      	ldrb	r2, [r7, #7]
 800e022:	4623      	mov	r3, r4
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f000 fab6 	bl	800e598 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 800e02c:	4603      	mov	r3, r0
    }
 800e02e:	4618      	mov	r0, r3
 800e030:	3724      	adds	r7, #36	; 0x24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd90      	pop	{r4, r7, pc}

0800e036 <_ZN6uavcan6fill_nIPhhEEvT_jRKT0_>:
void fill_n(OutputIt first, std::size_t n, const T& value)
 800e036:	b480      	push	{r7}
 800e038:	b085      	sub	sp, #20
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	607a      	str	r2, [r7, #4]
    while (n--)
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	1e5a      	subs	r2, r3, #1
 800e046:	60ba      	str	r2, [r7, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	bf14      	ite	ne
 800e04c:	2301      	movne	r3, #1
 800e04e:	2300      	moveq	r3, #0
 800e050:	b2db      	uxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d006      	beq.n	800e064 <_ZN6uavcan6fill_nIPhhEEvT_jRKT0_+0x2e>
        *first++ = value;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	60fa      	str	r2, [r7, #12]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	7812      	ldrb	r2, [r2, #0]
 800e060:	701a      	strb	r2, [r3, #0]
    while (n--)
 800e062:	e7ee      	b.n	800e042 <_ZN6uavcan6fill_nIPhhEEvT_jRKT0_+0xc>
}
 800e064:	bf00      	nop
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_>:
void LinkedListRoot<T>::remove(const T* node)
 800e070:	b590      	push	{r4, r7, lr}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d041      	beq.n	800e106 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x96>
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d03e      	beq.n	800e106 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x96>
    if (root_ == node)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	683a      	ldr	r2, [r7, #0]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d108      	bne.n	800e0a4 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x34>
        root_ = root_->getNextListNode();
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fc34 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800e09c:	4602      	mov	r2, r0
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	e031      	b.n	800e108 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x98>
        T* p = root_;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff fc29 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bf14      	ite	ne
 800e0b8:	2301      	movne	r3, #1
 800e0ba:	2300      	moveq	r3, #0
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d022      	beq.n	800e108 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x98>
            if (p->getNextListNode() == node)
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fc1d 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	bf0c      	ite	eq
 800e0d2:	2301      	moveq	r3, #1
 800e0d4:	2300      	movne	r3, #0
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d00e      	beq.n	800e0fa <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x8a>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 800e0dc:	68fc      	ldr	r4, [r7, #12]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff fc0f 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff fc0b 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 f8a0 	bl	800e238 <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15setNextListNodeEPS5_>
                break;
 800e0f8:	e006      	b.n	800e108 <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x98>
            p = p->getNextListNode();
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7ff fc01 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 800e102:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 800e104:	e7d1      	b.n	800e0aa <_ZN6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE6removeEPKS5_+0x3a>
        return;
 800e106:	bf00      	nop
}
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd90      	pop	{r4, r7, pc}

0800e10e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkD1Ev>:
    struct Chunk : LinkedListNode<Chunk>
 800e10e:	b590      	push	{r4, r7, lr}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3308      	adds	r3, #8
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00c      	beq.n	800e138 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkD1Ev+0x2a>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	3308      	adds	r3, #8
 800e122:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	3308      	adds	r3, #8
 800e12a:	429c      	cmp	r4, r3
 800e12c:	d004      	beq.n	800e138 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkD1Ev+0x2a>
 800e12e:	3c28      	subs	r4, #40	; 0x28
 800e130:	4620      	mov	r0, r4
 800e132:	f000 fa97 	bl	800e664 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4ItemD1Ev>
 800e136:	e7f6      	b.n	800e126 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkD1Ev+0x18>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f000 fa86 	bl	800e64c <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEED1Ev>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4618      	mov	r0, r3
 800e144:	370c      	adds	r7, #12
 800e146:	46bd      	mov	sp, r7
 800e148:	bd90      	pop	{r4, r7, pc}

0800e14a <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk7destroyERPS4_RNS_14IPoolAllocatorE>:
        static void destroy(Chunk*& obj, IPoolAllocator& allocator)
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	6039      	str	r1, [r7, #0]
            if (obj != UAVCAN_NULLPTR)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d010      	beq.n	800e17e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5Chunk7destroyERPS4_RNS_14IPoolAllocatorE+0x34>
                obj->~Chunk();
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff ffd4 	bl	800e10e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkD1Ev>
                allocator.deallocate(obj);
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	330c      	adds	r3, #12
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	4611      	mov	r1, r2
 800e174:	6838      	ldr	r0, [r7, #0]
 800e176:	4798      	blx	r3
                obj = UAVCAN_NULLPTR;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	601a      	str	r2, [r3, #0]
        }
 800e17e:	bf00      	nop
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE9constructIRS8_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSI_IT0_E4TypeENSI_IT1_E4TypeENSI_IT2_E4TypeE>:
    void construct(typename ParameterType<P1>::Type p1, typename ParameterType<P2>::Type p2,
 800e186:	b590      	push	{r4, r7, lr}
 800e188:	b087      	sub	sp, #28
 800e18a:	af02      	add	r7, sp, #8
 800e18c:	60f8      	str	r0, [r7, #12]
 800e18e:	60b9      	str	r1, [r7, #8]
 800e190:	607a      	str	r2, [r7, #4]
 800e192:	603b      	str	r3, [r7, #0]
        ensureNotConstructed();
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 fa75 	bl	800e684 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE20ensureNotConstructedEv>
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3, p4);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	4619      	mov	r1, r3
 800e19e:	2038      	movs	r0, #56	; 0x38
 800e1a0:	f7f7 feaa 	bl	8005ef8 <_ZnwjPv>
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	2c00      	cmp	r4, #0
 800e1a8:	d00b      	beq.n	800e1c2 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE9constructIRS8_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSI_IT0_E4TypeENSI_IT1_E4TypeENSI_IT2_E4TypeE+0x3c>
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	881a      	ldrh	r2, [r3, #0]
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fa75 	bl	800e6a8 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderC1ERS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800e1be:	4622      	mov	r2, r4
 800e1c0:	e000      	b.n	800e1c4 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE9constructIRS8_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSI_IT0_E4TypeENSI_IT1_E4TypeENSI_IT2_E4TypeE+0x3e>
 800e1c2:	4622      	mov	r2, r4
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800e1c8:	bf00      	nop
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd90      	pop	{r4, r7, pc}

0800e1d0 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev>:
        Chunk()
 800e1d0:	b5b0      	push	{r4, r5, r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
        {
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 fa8c 	bl	800e6f8 <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEEC1Ev>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	2400      	movs	r4, #0
 800e1e6:	461d      	mov	r5, r3
 800e1e8:	2c00      	cmp	r4, #0
 800e1ea:	db05      	blt.n	800e1f8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev+0x28>
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f000 fa92 	bl	800e716 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4ItemC1Ev>
 800e1f2:	3528      	adds	r5, #40	; 0x28
 800e1f4:	3c01      	subs	r4, #1
 800e1f6:	e7f7      	b.n	800e1e8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev+0x18>
            StaticAssert<(static_cast<unsigned>(NumItems) > 0)>::check();
 800e1f8:	f7f7 fbea 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
            IsDynamicallyAllocatable<Chunk>::check();
 800e1fc:	f000 faa4 	bl	800e748 <_ZN6uavcan24IsDynamicallyAllocatableINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE5checkEv>
            UAVCAN_ASSERT(!items[0].isConstructed());
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3308      	adds	r3, #8
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff fb89 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 800e20a:	4603      	mov	r3, r0
 800e20c:	f083 0301 	eor.w	r3, r3, #1
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d105      	bne.n	800e222 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev+0x52>
 800e216:	4b05      	ldr	r3, [pc, #20]	; (800e22c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev+0x5c>)
 800e218:	4a05      	ldr	r2, [pc, #20]	; (800e230 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev+0x60>)
 800e21a:	2152      	movs	r1, #82	; 0x52
 800e21c:	4805      	ldr	r0, [pc, #20]	; (800e234 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE5ChunkC1Ev+0x64>)
 800e21e:	f012 f9b5 	bl	802058c <__assert_func>
        }
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4618      	mov	r0, r3
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bdb0      	pop	{r4, r5, r7, pc}
 800e22c:	080221d4 	.word	0x080221d4
 800e230:	08029270 	.word	0x08029270
 800e234:	08022134 	.word	0x08022134

0800e238 <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15setNextListNodeEPS5_>:
    void setNextListNode(T* node)
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
        next_ = node;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	601a      	str	r2, [r3, #0]
    }
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	6039      	str	r1, [r7, #0]
 800e25e:	71fb      	strb	r3, [r7, #7]
 800e260:	4613      	mov	r3, r2
 800e262:	71bb      	strb	r3, [r7, #6]
        validate();
 800e264:	f000 fa7c 	bl	800e760 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 800e268:	1dfb      	adds	r3, r7, #7
 800e26a:	4618      	mov	r0, r3
 800e26c:	f000 faa4 	bl	800e7b8 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>
        return codec.encode<BitLen>(value);
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	4619      	mov	r1, r3
 800e274:	6838      	ldr	r0, [r7, #0]
 800e276:	f000 facc 	bl	800e812 <_ZN6uavcan11ScalarCodec6encodeILj8EhEEiT0_>
 800e27a:	4603      	mov	r3, r0
    }
 800e27c:	4618      	mov	r0, r3
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <_ZN6uavcan8protocol4file5Path_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int Path_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	4613      	mov	r3, r2
 800e290:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 800e292:	2301      	movs	r3, #1
 800e294:	617b      	str	r3, [r7, #20]
    res = FieldTypes::path::encode(self.path, codec,  tao_mode);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	79fa      	ldrb	r2, [r7, #7]
 800e29a:	68b9      	ldr	r1, [r7, #8]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 fad9 	bl	800e854 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800e2a2:	6178      	str	r0, [r7, #20]
    return res;
 800e2a4:	697b      	ldr	r3, [r7, #20]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3718      	adds	r7, #24
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 800e2b0:	b598      	push	{r3, r4, r7, lr}
 800e2b2:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 800e2b4:	f7f7 fb8c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 800e2b8:	f000 fade 	bl	800e878 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	461c      	mov	r4, r3
 800e2c0:	f7f7 fba3 	bl	8005a0a <_ZN6uavcan13NumericTraitsIhE3maxEv>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	429c      	cmp	r4, r3
 800e2c8:	d905      	bls.n	800e2d6 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x26>
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	; (800e2f8 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 800e2cc:	4a0b      	ldr	r2, [pc, #44]	; (800e2fc <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800e2ce:	2164      	movs	r1, #100	; 0x64
 800e2d0:	480b      	ldr	r0, [pc, #44]	; (800e300 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800e2d2:	f012 f95b 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 800e2d6:	f000 fad6 	bl	800e886 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	461c      	mov	r4, r3
 800e2de:	f7f7 fb9c 	bl	8005a1a <_ZN6uavcan13NumericTraitsIhE3minEv>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	429c      	cmp	r4, r3
 800e2e6:	d205      	bcs.n	800e2f4 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>
 800e2e8:	4b06      	ldr	r3, [pc, #24]	; (800e304 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 800e2ea:	4a04      	ldr	r2, [pc, #16]	; (800e2fc <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800e2ec:	2166      	movs	r1, #102	; 0x66
 800e2ee:	4804      	ldr	r0, [pc, #16]	; (800e300 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800e2f0:	f012 f94c 	bl	802058c <__assert_func>
    }
 800e2f4:	bf00      	nop
 800e2f6:	bd98      	pop	{r3, r4, r7, pc}
 800e2f8:	080221f0 	.word	0x080221f0
 800e2fc:	08025838 	.word	0x08025838
 800e300:	0802221c 	.word	0x0802221c
 800e304:	08022268 	.word	0x08022268

0800e308 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>:
    static void saturate(StorageType& value)
 800e308:	b590      	push	{r4, r7, lr}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
        if (value > max())
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	781c      	ldrb	r4, [r3, #0]
 800e314:	f000 fab0 	bl	800e878 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e318:	4603      	mov	r3, r0
 800e31a:	429c      	cmp	r4, r3
 800e31c:	bf8c      	ite	hi
 800e31e:	2301      	movhi	r3, #1
 800e320:	2300      	movls	r3, #0
 800e322:	b2db      	uxtb	r3, r3
 800e324:	2b00      	cmp	r3, #0
 800e326:	d006      	beq.n	800e336 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x2e>
            value = max();
 800e328:	f000 faa6 	bl	800e878 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461a      	mov	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	701a      	strb	r2, [r3, #0]
    }
 800e334:	e011      	b.n	800e35a <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	781c      	ldrb	r4, [r3, #0]
 800e33a:	f000 faa4 	bl	800e886 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e33e:	4603      	mov	r3, r0
 800e340:	429c      	cmp	r4, r3
 800e342:	bf94      	ite	ls
 800e344:	2301      	movls	r3, #1
 800e346:	2300      	movhi	r3, #0
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
            value = min();
 800e34e:	f000 fa9a 	bl	800e886 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e352:	4603      	mov	r3, r0
 800e354:	461a      	mov	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	701a      	strb	r2, [r3, #0]
    }
 800e35a:	bf00      	nop
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd90      	pop	{r4, r7, pc}

0800e362 <_ZN6uavcan11ScalarCodec6encodeILj3EhEEiT0_>:
};

// ----------------------------------------------------------------------------

template <unsigned BitLen, typename T>
int ScalarCodec::encode(const T value)
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	70fb      	strb	r3, [r7, #3]
{
    validate<BitLen, T>();
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fa91 	bl	800e896 <_ZN6uavcan11ScalarCodec8validateILj3EhEEvv>
    union ByteUnion
    {
        T value;
        uint8_t bytes[sizeof(T)];
    } byte_union;
    byte_union.value = value;
 800e374:	78fb      	ldrb	r3, [r7, #3]
 800e376:	733b      	strb	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 800e378:	f107 030c 	add.w	r3, r7, #12
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 fa98 	bl	800e8b2 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj3EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 800e382:	f107 030c 	add.w	r3, r7, #12
 800e386:	4618      	mov	r0, r3
 800e388:	f000 faa4 	bl	800e8d4 <_ZN6uavcan11ScalarCodec16convertByteOrderILj3ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 800e38c:	f107 030c 	add.w	r3, r7, #12
 800e390:	2203      	movs	r2, #3
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f006 f847 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 800e39a:	4603      	mov	r3, r0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	bf0c      	ite	eq
 800e3b4:	2301      	moveq	r3, #1
 800e3b6:	2300      	movne	r3, #0
 800e3b8:	b2db      	uxtb	r3, r3
    }
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	370c      	adds	r7, #12
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr

0800e3c6 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b082      	sub	sp, #8
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	6039      	str	r1, [r7, #0]
 800e3d0:	71fb      	strb	r3, [r7, #7]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71bb      	strb	r3, [r7, #6]
        validate();
 800e3d6:	f000 fa87 	bl	800e8e8 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 800e3da:	1dfb      	adds	r3, r7, #7
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 faaf 	bl	800e940 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>
        return codec.encode<BitLen>(value);
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6838      	ldr	r0, [r7, #0]
 800e3e8:	f000 fad7 	bl	800e99a <_ZN6uavcan11ScalarCodec6encodeILj5EhEEiT0_>
 800e3ec:	4603      	mov	r3, r0
    }
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>:
    SizeType size() const
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x1a>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	2b1e      	cmp	r3, #30
 800e410:	d801      	bhi.n	800e416 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x1e>
 800e412:	2301      	movs	r3, #1
 800e414:	e000      	b.n	800e418 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x20>
 800e416:	2300      	movs	r3, #0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d106      	bne.n	800e42a <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x32>
 800e41c:	4b06      	ldr	r3, [pc, #24]	; (800e438 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x40>)
 800e41e:	4a07      	ldr	r2, [pc, #28]	; (800e43c <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x44>)
 800e420:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e424:	4806      	ldr	r0, [pc, #24]	; (800e440 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv+0x48>)
 800e426:	f012 f8b1 	bl	802058c <__assert_func>
        return size_;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	781b      	ldrb	r3, [r3, #0]
    }
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	08022010 	.word	0x08022010
 800e43c:	080253f4 	.word	0x080253f4
 800e440:	08021f6c 	.word	0x08021f6c

0800e444 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 800e444:	b590      	push	{r4, r7, lr}
 800e446:	b087      	sub	sp, #28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	713b      	strb	r3, [r7, #4]
 800e450:	4613      	mov	r3, r2
 800e452:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	4618      	mov	r0, r3
 800e458:	f7ff ffce 	bl	800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d106      	bne.n	800e470 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 800e462:	4b22      	ldr	r3, [pc, #136]	; (800e4ec <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 800e464:	4a22      	ldr	r2, [pc, #136]	; (800e4f0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xac>)
 800e466:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800e46a:	4822      	ldr	r0, [pc, #136]	; (800e4f4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 800e46c:	f012 f88e 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 800e470:	2300      	movs	r3, #0
 800e472:	75fb      	strb	r3, [r7, #23]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff ffbe 	bl	800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	7dfb      	ldrb	r3, [r7, #23]
 800e482:	4293      	cmp	r3, r2
 800e484:	bf34      	ite	cc
 800e486:	2301      	movcc	r3, #1
 800e488:	2300      	movcs	r3, #0
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d027      	beq.n	800e4e0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9c>
            const bool last_item = i == (size() - 1);
 800e490:	7dfc      	ldrb	r4, [r7, #23]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	4618      	mov	r0, r3
 800e496:	f7ff ffaf 	bl	800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>
 800e49a:	4603      	mov	r3, r0
 800e49c:	3b01      	subs	r3, #1
 800e49e:	429c      	cmp	r4, r3
 800e4a0:	bf0c      	ite	eq
 800e4a2:	2301      	moveq	r3, #1
 800e4a4:	2300      	movne	r3, #0
 800e4a6:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	7dfa      	ldrb	r2, [r7, #23]
 800e4ac:	4611      	mov	r1, r2
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f000 fa94 	bl	800e9dc <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE2atEh>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	7818      	ldrb	r0, [r3, #0]
 800e4b8:	7dbb      	ldrb	r3, [r7, #22]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7e>
 800e4be:	79fb      	ldrb	r3, [r7, #7]
 800e4c0:	e000      	b.n	800e4c4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x80>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	68b9      	ldr	r1, [r7, #8]
 800e4c8:	f7ff fec4 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800e4cc:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dc01      	bgt.n	800e4d8 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x94>
                return res;
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	e004      	b.n	800e4e2 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9e>
        for (SizeType i = 0; i < size(); i++)
 800e4d8:	7dfb      	ldrb	r3, [r7, #23]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	75fb      	strb	r3, [r7, #23]
 800e4de:	e7c9      	b.n	800e474 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 800e4e0:	2301      	movs	r3, #1
    }
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	371c      	adds	r7, #28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd90      	pop	{r4, r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	08022294 	.word	0x08022294
 800e4f0:	080259e0 	.word	0x080259e0
 800e4f4:	08021f6c 	.word	0x08021f6c

0800e4f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	4603      	mov	r3, r0
 800e500:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	2b01      	cmp	r3, #1
 800e506:	bf0c      	ite	eq
 800e508:	2301      	moveq	r3, #1
 800e50a:	2300      	movne	r3, #0
 800e50c:	b2db      	uxtb	r3, r3
    }
 800e50e:	4618      	mov	r0, r3
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	4603      	mov	r3, r0
 800e522:	6039      	str	r1, [r7, #0]
 800e524:	71fb      	strb	r3, [r7, #7]
 800e526:	4613      	mov	r3, r2
 800e528:	71bb      	strb	r3, [r7, #6]
        validate();
 800e52a:	f000 fa6d 	bl	800ea08 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 800e52e:	1dfb      	adds	r3, r7, #7
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fa95 	bl	800ea60 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>
        return codec.encode<BitLen>(value);
 800e536:	79fb      	ldrb	r3, [r7, #7]
 800e538:	4619      	mov	r1, r3
 800e53a:	6838      	ldr	r0, [r7, #0]
 800e53c:	f000 fabd 	bl	800eaba <_ZN6uavcan11ScalarCodec6encodeILj7EhEEiT0_>
 800e540:	4603      	mov	r3, r0
    }
 800e542:	4618      	mov	r0, r3
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
	...

0800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>:
    SizeType size() const
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d004      	beq.n	800e566 <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x1a>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	3b01      	subs	r3, #1
 800e562:	2b59      	cmp	r3, #89	; 0x59
 800e564:	d801      	bhi.n	800e56a <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x1e>
 800e566:	2301      	movs	r3, #1
 800e568:	e000      	b.n	800e56c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x20>
 800e56a:	2300      	movs	r3, #0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d106      	bne.n	800e57e <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x32>
 800e570:	4b06      	ldr	r3, [pc, #24]	; (800e58c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x40>)
 800e572:	4a07      	ldr	r2, [pc, #28]	; (800e590 <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x44>)
 800e574:	f44f 7182 	mov.w	r1, #260	; 0x104
 800e578:	4806      	ldr	r0, [pc, #24]	; (800e594 <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv+0x48>)
 800e57a:	f012 f807 	bl	802058c <__assert_func>
        return size_;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	781b      	ldrb	r3, [r3, #0]
    }
 800e582:	4618      	mov	r0, r3
 800e584:	3708      	adds	r7, #8
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	08022010 	.word	0x08022010
 800e590:	080255ac 	.word	0x080255ac
 800e594:	08021f6c 	.word	0x08021f6c

0800e598 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 800e598:	b590      	push	{r4, r7, lr}
 800e59a:	b087      	sub	sp, #28
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	713b      	strb	r3, [r7, #4]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff ffce 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 800e5b6:	4b22      	ldr	r3, [pc, #136]	; (800e640 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 800e5b8:	4a22      	ldr	r2, [pc, #136]	; (800e644 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xac>)
 800e5ba:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800e5be:	4822      	ldr	r0, [pc, #136]	; (800e648 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 800e5c0:	f011 ffe4 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	75fb      	strb	r3, [r7, #23]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff ffbe 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	7dfb      	ldrb	r3, [r7, #23]
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	bf34      	ite	cc
 800e5da:	2301      	movcc	r3, #1
 800e5dc:	2300      	movcs	r3, #0
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d027      	beq.n	800e634 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9c>
            const bool last_item = i == (size() - 1);
 800e5e4:	7dfc      	ldrb	r4, [r7, #23]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff ffaf 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	429c      	cmp	r4, r3
 800e5f4:	bf0c      	ite	eq
 800e5f6:	2301      	moveq	r3, #1
 800e5f8:	2300      	movne	r3, #0
 800e5fa:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	7dfa      	ldrb	r2, [r7, #23]
 800e600:	4611      	mov	r1, r2
 800e602:	4618      	mov	r0, r3
 800e604:	f000 fa7a 	bl	800eafc <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE2atEh>
 800e608:	4603      	mov	r3, r0
 800e60a:	7818      	ldrb	r0, [r3, #0]
 800e60c:	7dbb      	ldrb	r3, [r7, #22]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7e>
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	e000      	b.n	800e618 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x80>
 800e616:	2300      	movs	r3, #0
 800e618:	461a      	mov	r2, r3
 800e61a:	68b9      	ldr	r1, [r7, #8]
 800e61c:	f7ff fe1a 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800e620:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	dc01      	bgt.n	800e62c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x94>
                return res;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	e004      	b.n	800e636 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9e>
        for (SizeType i = 0; i < size(); i++)
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
 800e62e:	3301      	adds	r3, #1
 800e630:	75fb      	strb	r3, [r7, #23]
 800e632:	e7c9      	b.n	800e5c8 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 800e634:	2301      	movs	r3, #1
    }
 800e636:	4618      	mov	r0, r3
 800e638:	371c      	adds	r7, #28
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd90      	pop	{r4, r7, pc}
 800e63e:	bf00      	nop
 800e640:	08022294 	.word	0x08022294
 800e644:	08025ce0 	.word	0x08025ce0
 800e648:	08021f6c 	.word	0x08021f6c

0800e64c <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEED1Ev>:
    ~LinkedListNode() { }
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7f7 f9cd 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4618      	mov	r0, r3
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4ItemD1Ev>:
        ~Item() { destroy(); }
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7ff faf9 	bl	800dc64 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item7destroyEv>
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f7f7 f9be 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4618      	mov	r0, r3
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
	...

0800e684 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE20ensureNotConstructedEv>:
    void ensureNotConstructed() const
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
        if (ptr_)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE20ensureNotConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 800e694:	4803      	ldr	r0, [pc, #12]	; (800e6a4 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS4_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderEE20ensureNotConstructedEv+0x20>)
 800e696:	f00f fc73 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 800e69a:	bf00      	nop
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	08022178 	.word	0x08022178

0800e6a8 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderC1ERS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
        TransferForwarder(SelfType& obj,
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	807b      	strh	r3, [r7, #2]
            obj_(obj)
 800e6b6:	68fc      	ldr	r4, [r7, #12]
            TransferListenerType(obj.node_.getDispatcher().getTransferPerfCounter(),
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7f8 f941 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800e6c2:	4603      	mov	r3, r0
            obj_(obj)
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f8 f80c 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	887a      	ldrh	r2, [r7, #2]
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f7f7 fe96 	bl	8006408 <_ZN6uavcan26TransferListenerWithFilterC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 800e6dc:	4a05      	ldr	r2, [pc, #20]	; (800e6f4 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarderC1ERS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x4c>)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	635a      	str	r2, [r3, #52]	; 0x34
        { }
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd90      	pop	{r4, r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	08025088 	.word	0x08025088

0800e6f8 <_ZN6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEEC1Ev>:
    LinkedListNode()
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f7f7 f96c 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	601a      	str	r2, [r3, #0]
    { }
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4ItemC1Ev>:
        Item()
 800e716:	b580      	push	{r7, lr}
 800e718:	b084      	sub	sp, #16
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
            : ptr(UAVCAN_NULLPTR)
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7f7 f95d 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	601a      	str	r2, [r3, #0]
            fill_n(pool, sizeof(pool), static_cast<unsigned char>(0));
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3308      	adds	r3, #8
 800e72e:	2200      	movs	r2, #0
 800e730:	73fa      	strb	r2, [r7, #15]
 800e732:	f107 020f 	add.w	r2, r7, #15
 800e736:	2120      	movs	r1, #32
 800e738:	4618      	mov	r0, r3
 800e73a:	f7ff fc7c 	bl	800e036 <_ZN6uavcan6fill_nIPhhEEvT_jRKT0_>
        }
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4618      	mov	r0, r3
 800e742:	3710      	adds	r7, #16
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <_ZN6uavcan24IsDynamicallyAllocatableINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE5checkEv>:
 * If the check fails, compilation fails.
 */
template <typename T>
struct UAVCAN_EXPORT IsDynamicallyAllocatable
{
    static void check()
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
    {
        char dummy[(sizeof(T) <= MemPoolBlockSize) ? 1 : -1] = { '0' };
 800e74e:	2330      	movs	r3, #48	; 0x30
 800e750:	713b      	strb	r3, [r7, #4]
        (void)dummy;
    }
 800e752:	bf00      	nop
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
	...

0800e760 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 800e760:	b598      	push	{r3, r4, r7, lr}
 800e762:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 800e764:	f7f7 f934 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 800e768:	f000 f9dd 	bl	800eb26 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e76c:	4603      	mov	r3, r0
 800e76e:	461c      	mov	r4, r3
 800e770:	f7f7 f94b 	bl	8005a0a <_ZN6uavcan13NumericTraitsIhE3maxEv>
 800e774:	4603      	mov	r3, r0
 800e776:	429c      	cmp	r4, r3
 800e778:	d905      	bls.n	800e786 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x26>
 800e77a:	4b0b      	ldr	r3, [pc, #44]	; (800e7a8 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 800e77c:	4a0b      	ldr	r2, [pc, #44]	; (800e7ac <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800e77e:	2164      	movs	r1, #100	; 0x64
 800e780:	480b      	ldr	r0, [pc, #44]	; (800e7b0 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800e782:	f011 ff03 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 800e786:	f000 f9d5 	bl	800eb34 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e78a:	4603      	mov	r3, r0
 800e78c:	461c      	mov	r4, r3
 800e78e:	f7f7 f944 	bl	8005a1a <_ZN6uavcan13NumericTraitsIhE3minEv>
 800e792:	4603      	mov	r3, r0
 800e794:	429c      	cmp	r4, r3
 800e796:	d205      	bcs.n	800e7a4 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>
 800e798:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 800e79a:	4a04      	ldr	r2, [pc, #16]	; (800e7ac <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800e79c:	2166      	movs	r1, #102	; 0x66
 800e79e:	4804      	ldr	r0, [pc, #16]	; (800e7b0 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800e7a0:	f011 fef4 	bl	802058c <__assert_func>
    }
 800e7a4:	bf00      	nop
 800e7a6:	bd98      	pop	{r3, r4, r7, pc}
 800e7a8:	080221f0 	.word	0x080221f0
 800e7ac:	08025b38 	.word	0x08025b38
 800e7b0:	0802221c 	.word	0x0802221c
 800e7b4:	08022268 	.word	0x08022268

0800e7b8 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>:
    static void saturate(StorageType& value)
 800e7b8:	b590      	push	{r4, r7, lr}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
        if (value > max())
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	781c      	ldrb	r4, [r3, #0]
 800e7c4:	f000 f9af 	bl	800eb26 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	429c      	cmp	r4, r3
 800e7cc:	bf8c      	ite	hi
 800e7ce:	2301      	movhi	r3, #1
 800e7d0:	2300      	movls	r3, #0
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d006      	beq.n	800e7e6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x2e>
            value = max();
 800e7d8:	f000 f9a5 	bl	800eb26 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	461a      	mov	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	701a      	strb	r2, [r3, #0]
    }
 800e7e4:	e011      	b.n	800e80a <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	781c      	ldrb	r4, [r3, #0]
 800e7ea:	f000 f9a3 	bl	800eb34 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	429c      	cmp	r4, r3
 800e7f2:	bf94      	ite	ls
 800e7f4:	2301      	movls	r3, #1
 800e7f6:	2300      	movhi	r3, #0
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d005      	beq.n	800e80a <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
            value = min();
 800e7fe:	f000 f999 	bl	800eb34 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	701a      	strb	r2, [r3, #0]
    }
 800e80a:	bf00      	nop
 800e80c:	370c      	adds	r7, #12
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd90      	pop	{r4, r7, pc}

0800e812 <_ZN6uavcan11ScalarCodec6encodeILj8EhEEiT0_>:
int ScalarCodec::encode(const T value)
 800e812:	b580      	push	{r7, lr}
 800e814:	b084      	sub	sp, #16
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	460b      	mov	r3, r1
 800e81c:	70fb      	strb	r3, [r7, #3]
    validate<BitLen, T>();
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f990 	bl	800eb44 <_ZN6uavcan11ScalarCodec8validateILj8EhEEvv>
    byte_union.value = value;
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	733b      	strb	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 800e828:	f107 030c 	add.w	r3, r7, #12
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 f997 	bl	800eb60 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj8EhEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 800e832:	f107 030c 	add.w	r3, r7, #12
 800e836:	4618      	mov	r0, r3
 800e838:	f000 f99c 	bl	800eb74 <_ZN6uavcan11ScalarCodec16convertByteOrderILj8ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 800e83c:	f107 030c 	add.w	r3, r7, #12
 800e840:	2208      	movs	r2, #8
 800e842:	4619      	mov	r1, r3
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f005 fdef 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 800e84a:	4603      	mov	r3, r0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 800e854:	b590      	push	{r4, r7, lr}
 800e856:	b087      	sub	sp, #28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	4613      	mov	r3, r2
 800e860:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 800e862:	79fa      	ldrb	r2, [r7, #7]
 800e864:	4623      	mov	r3, r4
 800e866:	68b9      	ldr	r1, [r7, #8]
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f000 f98d 	bl	800eb88 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 800e86e:	4603      	mov	r3, r0
    }
 800e870:	4618      	mov	r0, r3
 800e872:	371c      	adds	r7, #28
 800e874:	46bd      	mov	sp, r7
 800e876:	bd90      	pop	{r4, r7, pc}

0800e878 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	f000 f9c8 	bl	800ec10 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 800e880:	4603      	mov	r3, r0
 800e882:	4618      	mov	r0, r3
 800e884:	bd80      	pop	{r7, pc}

0800e886 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 800e886:	b480      	push	{r7}
 800e888:	af00      	add	r7, sp, #0
 800e88a:	2300      	movs	r3, #0
 800e88c:	4618      	mov	r0, r3
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <_ZN6uavcan11ScalarCodec8validateILj3EhEEvv>:
    void validate()
 800e896:	b580      	push	{r7, lr}
 800e898:	b082      	sub	sp, #8
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 800e89e:	f7f7 f897 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 800e8a2:	f7f7 f895 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 800e8a6:	f7f7 f893 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj3EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T& value)
 800e8b2:	b480      	push	{r7}
 800e8b4:	b083      	sub	sp, #12
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
        value &= (T(1) << BitLen) - 1;  // Signedness doesn't matter
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	f003 0307 	and.w	r3, r3, #7
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	701a      	strb	r2, [r3, #0]
    }
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <_ZN6uavcan11ScalarCodec16convertByteOrderILj3ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&)[Size]) { }
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 800e8e8:	b598      	push	{r3, r4, r7, lr}
 800e8ea:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 800e8ec:	f7f7 f870 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 800e8f0:	f000 f995 	bl	800ec1e <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	461c      	mov	r4, r3
 800e8f8:	f7f7 f887 	bl	8005a0a <_ZN6uavcan13NumericTraitsIhE3maxEv>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	429c      	cmp	r4, r3
 800e900:	d905      	bls.n	800e90e <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x26>
 800e902:	4b0b      	ldr	r3, [pc, #44]	; (800e930 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 800e904:	4a0b      	ldr	r2, [pc, #44]	; (800e934 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800e906:	2164      	movs	r1, #100	; 0x64
 800e908:	480b      	ldr	r0, [pc, #44]	; (800e938 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800e90a:	f011 fe3f 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 800e90e:	f000 f98d 	bl	800ec2c <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e912:	4603      	mov	r3, r0
 800e914:	461c      	mov	r4, r3
 800e916:	f7f7 f880 	bl	8005a1a <_ZN6uavcan13NumericTraitsIhE3minEv>
 800e91a:	4603      	mov	r3, r0
 800e91c:	429c      	cmp	r4, r3
 800e91e:	d205      	bcs.n	800e92c <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>
 800e920:	4b06      	ldr	r3, [pc, #24]	; (800e93c <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 800e922:	4a04      	ldr	r2, [pc, #16]	; (800e934 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800e924:	2166      	movs	r1, #102	; 0x66
 800e926:	4804      	ldr	r0, [pc, #16]	; (800e938 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800e928:	f011 fe30 	bl	802058c <__assert_func>
    }
 800e92c:	bf00      	nop
 800e92e:	bd98      	pop	{r3, r4, r7, pc}
 800e930:	080221f0 	.word	0x080221f0
 800e934:	0802590c 	.word	0x0802590c
 800e938:	0802221c 	.word	0x0802221c
 800e93c:	08022268 	.word	0x08022268

0800e940 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>:
    static void saturate(StorageType& value)
 800e940:	b590      	push	{r4, r7, lr}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
        if (value > max())
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	781c      	ldrb	r4, [r3, #0]
 800e94c:	f000 f967 	bl	800ec1e <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e950:	4603      	mov	r3, r0
 800e952:	429c      	cmp	r4, r3
 800e954:	bf8c      	ite	hi
 800e956:	2301      	movhi	r3, #1
 800e958:	2300      	movls	r3, #0
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d006      	beq.n	800e96e <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x2e>
            value = max();
 800e960:	f000 f95d 	bl	800ec1e <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800e964:	4603      	mov	r3, r0
 800e966:	461a      	mov	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	701a      	strb	r2, [r3, #0]
    }
 800e96c:	e011      	b.n	800e992 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	781c      	ldrb	r4, [r3, #0]
 800e972:	f000 f95b 	bl	800ec2c <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e976:	4603      	mov	r3, r0
 800e978:	429c      	cmp	r4, r3
 800e97a:	bf94      	ite	ls
 800e97c:	2301      	movls	r3, #1
 800e97e:	2300      	movhi	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d005      	beq.n	800e992 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
            value = min();
 800e986:	f000 f951 	bl	800ec2c <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800e98a:	4603      	mov	r3, r0
 800e98c:	461a      	mov	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	701a      	strb	r2, [r3, #0]
    }
 800e992:	bf00      	nop
 800e994:	370c      	adds	r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	bd90      	pop	{r4, r7, pc}

0800e99a <_ZN6uavcan11ScalarCodec6encodeILj5EhEEiT0_>:
int ScalarCodec::encode(const T value)
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b084      	sub	sp, #16
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	70fb      	strb	r3, [r7, #3]
    validate<BitLen, T>();
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 f948 	bl	800ec3c <_ZN6uavcan11ScalarCodec8validateILj5EhEEvv>
    byte_union.value = value;
 800e9ac:	78fb      	ldrb	r3, [r7, #3]
 800e9ae:	733b      	strb	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 800e9b0:	f107 030c 	add.w	r3, r7, #12
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f000 f94f 	bl	800ec58 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj5EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 800e9ba:	f107 030c 	add.w	r3, r7, #12
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 f95b 	bl	800ec7a <_ZN6uavcan11ScalarCodec16convertByteOrderILj5ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 800e9c4:	f107 030c 	add.w	r3, r7, #12
 800e9c8:	2205      	movs	r2, #5
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f005 fd2b 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 800e9d2:	4603      	mov	r3, r0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3710      	adds	r7, #16
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE2atEh>:
    const ValueType& at(SizeType pos) const { return data_[Base::validateRange(pos)]; }
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	70fb      	strb	r3, [r7, #3]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	78fa      	ldrb	r2, [r7, #3]
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 f94e 	bl	800ec90 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
	...

0800ea08 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 800ea08:	b598      	push	{r3, r4, r7, lr}
 800ea0a:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 800ea0c:	f7f6 ffe0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 800ea10:	f000 f95c 	bl	800eccc <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800ea14:	4603      	mov	r3, r0
 800ea16:	461c      	mov	r4, r3
 800ea18:	f7f6 fff7 	bl	8005a0a <_ZN6uavcan13NumericTraitsIhE3maxEv>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	429c      	cmp	r4, r3
 800ea20:	d905      	bls.n	800ea2e <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x26>
 800ea22:	4b0b      	ldr	r3, [pc, #44]	; (800ea50 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 800ea24:	4a0b      	ldr	r2, [pc, #44]	; (800ea54 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800ea26:	2164      	movs	r1, #100	; 0x64
 800ea28:	480b      	ldr	r0, [pc, #44]	; (800ea58 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800ea2a:	f011 fdaf 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 800ea2e:	f000 f954 	bl	800ecda <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800ea32:	4603      	mov	r3, r0
 800ea34:	461c      	mov	r4, r3
 800ea36:	f7f6 fff0 	bl	8005a1a <_ZN6uavcan13NumericTraitsIhE3minEv>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	429c      	cmp	r4, r3
 800ea3e:	d205      	bcs.n	800ea4c <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>
 800ea40:	4b06      	ldr	r3, [pc, #24]	; (800ea5c <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 800ea42:	4a04      	ldr	r2, [pc, #16]	; (800ea54 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 800ea44:	2166      	movs	r1, #102	; 0x66
 800ea46:	4804      	ldr	r0, [pc, #16]	; (800ea58 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 800ea48:	f011 fda0 	bl	802058c <__assert_func>
    }
 800ea4c:	bf00      	nop
 800ea4e:	bd98      	pop	{r3, r4, r7, pc}
 800ea50:	080221f0 	.word	0x080221f0
 800ea54:	08025c0c 	.word	0x08025c0c
 800ea58:	0802221c 	.word	0x0802221c
 800ea5c:	08022268 	.word	0x08022268

0800ea60 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>:
    static void saturate(StorageType& value)
 800ea60:	b590      	push	{r4, r7, lr}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
        if (value > max())
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	781c      	ldrb	r4, [r3, #0]
 800ea6c:	f000 f92e 	bl	800eccc <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800ea70:	4603      	mov	r3, r0
 800ea72:	429c      	cmp	r4, r3
 800ea74:	bf8c      	ite	hi
 800ea76:	2301      	movhi	r3, #1
 800ea78:	2300      	movls	r3, #0
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d006      	beq.n	800ea8e <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x2e>
            value = max();
 800ea80:	f000 f924 	bl	800eccc <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 800ea84:	4603      	mov	r3, r0
 800ea86:	461a      	mov	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	701a      	strb	r2, [r3, #0]
    }
 800ea8c:	e011      	b.n	800eab2 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	781c      	ldrb	r4, [r3, #0]
 800ea92:	f000 f922 	bl	800ecda <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800ea96:	4603      	mov	r3, r0
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	bf94      	ite	ls
 800ea9c:	2301      	movls	r3, #1
 800ea9e:	2300      	movhi	r3, #0
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d005      	beq.n	800eab2 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
            value = min();
 800eaa6:	f000 f918 	bl	800ecda <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	461a      	mov	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	701a      	strb	r2, [r3, #0]
    }
 800eab2:	bf00      	nop
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd90      	pop	{r4, r7, pc}

0800eaba <_ZN6uavcan11ScalarCodec6encodeILj7EhEEiT0_>:
int ScalarCodec::encode(const T value)
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	460b      	mov	r3, r1
 800eac4:	70fb      	strb	r3, [r7, #3]
    validate<BitLen, T>();
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f90f 	bl	800ecea <_ZN6uavcan11ScalarCodec8validateILj7EhEEvv>
    byte_union.value = value;
 800eacc:	78fb      	ldrb	r3, [r7, #3]
 800eace:	733b      	strb	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 800ead0:	f107 030c 	add.w	r3, r7, #12
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 f916 	bl	800ed06 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj7EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 800eada:	f107 030c 	add.w	r3, r7, #12
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 f922 	bl	800ed28 <_ZN6uavcan11ScalarCodec16convertByteOrderILj7ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 800eae4:	f107 030c 	add.w	r3, r7, #12
 800eae8:	2207      	movs	r2, #7
 800eaea:	4619      	mov	r1, r3
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f005 fc9b 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 800eaf2:	4603      	mov	r3, r0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE2atEh>:
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	70fb      	strb	r3, [r7, #3]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	78fa      	ldrb	r2, [r7, #3]
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 f914 	bl	800ed3c <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh>
 800eb14:	4603      	mov	r3, r0
 800eb16:	461a      	mov	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 800eb26:	b580      	push	{r7, lr}
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	f000 f925 	bl	800ed78 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	4618      	mov	r0, r3
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 800eb34:	b480      	push	{r7}
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	2300      	movs	r3, #0
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <_ZN6uavcan11ScalarCodec8validateILj8EhEEvv>:
    void validate()
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 800eb4c:	f7f6 ff40 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 800eb50:	f7f6 ff3e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 800eb54:	f7f6 ff3c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800eb58:	bf00      	nop
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj8EhEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T&) { }
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <_ZN6uavcan11ScalarCodec16convertByteOrderILj8ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&)[Size]) { }
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType) const   /// Dynamic
 800eb88:	b590      	push	{r4, r7, lr}
 800eb8a:	b089      	sub	sp, #36	; 0x24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	713b      	strb	r3, [r7, #4]
 800eb94:	4613      	mov	r3, r2
 800eb96:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 800eb98:	f7f6 ff1a 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        const bool self_tao_enabled = isOptimizedTailArray(tao_mode);
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f000 f8f1 	bl	800ed86 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 800eba4:	4603      	mov	r3, r0
 800eba6:	77fb      	strb	r3, [r7, #31]
        if (!self_tao_enabled)
 800eba8:	7ffb      	ldrb	r3, [r7, #31]
 800ebaa:	f083 0301 	eor.w	r3, r3, #1
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00f      	beq.n	800ebd4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                Base::RawEncodedSizeType::encode(typename StorageType<typename Base::RawEncodedSizeType>::Type(size()),
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f000 f8f6 	bl	800eda8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv>
 800ebbc:	4603      	mov	r3, r0
            const int res_sz =
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	68b9      	ldr	r1, [r7, #8]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7ff fb46 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800ebc8:	61b8      	str	r0, [r7, #24]
            if (res_sz <= 0)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	dc01      	bgt.n	800ebd4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                return res_sz;
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	e019      	b.n	800ec08 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        if (size() == 0)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 f8e6 	bl	800eda8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	bf0c      	ite	eq
 800ebe2:	2301      	moveq	r3, #1
 800ebe4:	2300      	movne	r3, #0
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x68>
            return 1;
 800ebec:	2301      	movs	r3, #1
 800ebee:	e00b      	b.n	800ec08 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        return encodeImpl(codec, self_tao_enabled ? TailArrayOptDisabled : tao_mode, FalseType());
 800ebf0:	7ffb      	ldrb	r3, [r7, #31]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x72>
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	e000      	b.n	800ebfc <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x74>
 800ebfa:	79fa      	ldrb	r2, [r7, #7]
 800ebfc:	4623      	mov	r3, r4
 800ebfe:	68b9      	ldr	r1, [r7, #8]
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f000 f8f7 	bl	800edf4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 800ec06:	4603      	mov	r3, r0
    }
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3724      	adds	r7, #36	; 0x24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd90      	pop	{r4, r7, pc}

0800ec10 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 800ec10:	b580      	push	{r7, lr}
 800ec12:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 800ec14:	f7f6 fedc 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 800ec18:	2307      	movs	r3, #7
        }
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	f000 f941 	bl	800eea8 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 800ec26:	4603      	mov	r3, r0
 800ec28:	4618      	mov	r0, r3
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 800ec2c:	b480      	push	{r7}
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	2300      	movs	r3, #0
 800ec32:	4618      	mov	r0, r3
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <_ZN6uavcan11ScalarCodec8validateILj5EhEEvv>:
    void validate()
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 800ec44:	f7f6 fec4 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 800ec48:	f7f6 fec2 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 800ec4c:	f7f6 fec0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800ec50:	bf00      	nop
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj5EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T& value)
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
        value &= (T(1) << BitLen) - 1;  // Signedness doesn't matter
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	f003 031f 	and.w	r3, r3, #31
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	701a      	strb	r2, [r3, #0]
    }
 800ec6e:	bf00      	nop
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <_ZN6uavcan11ScalarCodec16convertByteOrderILj5ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&)[Size]) { }
 800ec7a:	b480      	push	{r7}
 800ec7c:	b083      	sub	sp, #12
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
 800ec82:	bf00      	nop
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
	...

0800ec90 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	78fa      	ldrb	r2, [r7, #3]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d201      	bcs.n	800ecaa <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh+0x1a>
            return pos;
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	e005      	b.n	800ecb6 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 800ecaa:	4b05      	ldr	r3, [pc, #20]	; (800ecc0 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh+0x30>)
 800ecac:	4a05      	ldr	r2, [pc, #20]	; (800ecc4 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh+0x34>)
 800ecae:	21e6      	movs	r1, #230	; 0xe6
 800ecb0:	4805      	ldr	r0, [pc, #20]	; (800ecc8 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh+0x38>)
 800ecb2:	f011 fc6b 	bl	802058c <__assert_func>
    }
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	08021b88 	.word	0x08021b88
 800ecc4:	08025304 	.word	0x08025304
 800ecc8:	08021f6c 	.word	0x08021f6c

0800eccc <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 800eccc:	b580      	push	{r7, lr}
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	f000 f8f1 	bl	800eeb6 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 800ecda:	b480      	push	{r7}
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	2300      	movs	r3, #0
 800ece0:	4618      	mov	r0, r3
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <_ZN6uavcan11ScalarCodec8validateILj7EhEEvv>:
    void validate()
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b082      	sub	sp, #8
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 800ecf2:	f7f6 fe6d 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 800ecf6:	f7f6 fe6b 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 800ecfa:	f7f6 fe69 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 800ecfe:	bf00      	nop
 800ed00:	3708      	adds	r7, #8
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj7EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T& value)
 800ed06:	b480      	push	{r7}
 800ed08:	b083      	sub	sp, #12
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
        value &= (T(1) << BitLen) - 1;  // Signedness doesn't matter
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	701a      	strb	r2, [r3, #0]
    }
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <_ZN6uavcan11ScalarCodec16convertByteOrderILj7ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&)[Size]) { }
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	78fa      	ldrb	r2, [r7, #3]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d201      	bcs.n	800ed56 <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh+0x1a>
            return pos;
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	e005      	b.n	800ed62 <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 800ed56:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh+0x30>)
 800ed58:	4a05      	ldr	r2, [pc, #20]	; (800ed70 <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh+0x34>)
 800ed5a:	21e6      	movs	r1, #230	; 0xe6
 800ed5c:	4805      	ldr	r0, [pc, #20]	; (800ed74 <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh+0x38>)
 800ed5e:	f011 fc15 	bl	802058c <__assert_func>
    }
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	08021b88 	.word	0x08021b88
 800ed70:	08025668 	.word	0x08025668
 800ed74:	08021f6c 	.word	0x08021f6c

0800ed78 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 800ed7c:	f7f6 fe28 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 800ed80:	23ff      	movs	r3, #255	; 0xff
        }
 800ed82:	4618      	mov	r0, r3
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 800ed86:	b480      	push	{r7}
 800ed88:	b083      	sub	sp, #12
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	2b01      	cmp	r3, #1
 800ed94:	bf0c      	ite	eq
 800ed96:	2301      	moveq	r3, #1
 800ed98:	2300      	movne	r3, #0
 800ed9a:	b2db      	uxtb	r3, r3
    }
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv>:
    SizeType size() const
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d004      	beq.n	800edc2 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x1a>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	3b01      	subs	r3, #1
 800edbe:	2bc7      	cmp	r3, #199	; 0xc7
 800edc0:	d801      	bhi.n	800edc6 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x1e>
 800edc2:	2301      	movs	r3, #1
 800edc4:	e000      	b.n	800edc8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x20>
 800edc6:	2300      	movs	r3, #0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d106      	bne.n	800edda <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x32>
 800edcc:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x40>)
 800edce:	4a07      	ldr	r2, [pc, #28]	; (800edec <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x44>)
 800edd0:	f44f 7182 	mov.w	r1, #260	; 0x104
 800edd4:	4806      	ldr	r0, [pc, #24]	; (800edf0 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv+0x48>)
 800edd6:	f011 fbd9 	bl	802058c <__assert_func>
        return size_;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	781b      	ldrb	r3, [r3, #0]
    }
 800edde:	4618      	mov	r0, r3
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	08022010 	.word	0x08022010
 800edec:	080294a4 	.word	0x080294a4
 800edf0:	08021f6c 	.word	0x08021f6c

0800edf4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 800edf4:	b590      	push	{r4, r7, lr}
 800edf6:	b087      	sub	sp, #28
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	713b      	strb	r3, [r7, #4]
 800ee00:	4613      	mov	r3, r2
 800ee02:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff ffce 	bl	800eda8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d106      	bne.n	800ee20 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 800ee12:	4b22      	ldr	r3, [pc, #136]	; (800ee9c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 800ee14:	4a22      	ldr	r2, [pc, #136]	; (800eea0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xac>)
 800ee16:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800ee1a:	4822      	ldr	r0, [pc, #136]	; (800eea4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 800ee1c:	f011 fbb6 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 800ee20:	2300      	movs	r3, #0
 800ee22:	75fb      	strb	r3, [r7, #23]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7ff ffbe 	bl	800eda8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	461a      	mov	r2, r3
 800ee30:	7dfb      	ldrb	r3, [r7, #23]
 800ee32:	4293      	cmp	r3, r2
 800ee34:	bf34      	ite	cc
 800ee36:	2301      	movcc	r3, #1
 800ee38:	2300      	movcs	r3, #0
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d027      	beq.n	800ee90 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9c>
            const bool last_item = i == (size() - 1);
 800ee40:	7dfc      	ldrb	r4, [r7, #23]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff ffaf 	bl	800eda8 <_ZNK6uavcan16DynamicArrayBaseILj200EE4sizeEv>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	429c      	cmp	r4, r3
 800ee50:	bf0c      	ite	eq
 800ee52:	2301      	moveq	r3, #1
 800ee54:	2300      	movne	r3, #0
 800ee56:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	7dfa      	ldrb	r2, [r7, #23]
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f000 f830 	bl	800eec4 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE2atEh>
 800ee64:	4603      	mov	r3, r0
 800ee66:	7818      	ldrb	r0, [r3, #0]
 800ee68:	7dbb      	ldrb	r3, [r7, #22]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7e>
 800ee6e:	79fb      	ldrb	r3, [r7, #7]
 800ee70:	e000      	b.n	800ee74 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x80>
 800ee72:	2300      	movs	r3, #0
 800ee74:	461a      	mov	r2, r3
 800ee76:	68b9      	ldr	r1, [r7, #8]
 800ee78:	f7ff f9ec 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800ee7c:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	dc01      	bgt.n	800ee88 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x94>
                return res;
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	e004      	b.n	800ee92 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9e>
        for (SizeType i = 0; i < size(); i++)
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	75fb      	strb	r3, [r7, #23]
 800ee8e:	e7c9      	b.n	800ee24 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 800ee90:	2301      	movs	r3, #1
    }
 800ee92:	4618      	mov	r0, r3
 800ee94:	371c      	adds	r7, #28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd90      	pop	{r4, r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08022294 	.word	0x08022294
 800eea0:	08029560 	.word	0x08029560
 800eea4:	08021f6c 	.word	0x08021f6c

0800eea8 <_ZN6uavcan11IntegerSpecILj5ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 800eeac:	f7f6 fd90 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 800eeb0:	231f      	movs	r3, #31
        }
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 800eeba:	f7f6 fd89 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 800eebe:	237f      	movs	r3, #127	; 0x7f
        }
 800eec0:	4618      	mov	r0, r3
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj200EE2atEh>:
    const ValueType& at(SizeType pos) const { return data_[Base::validateRange(pos)]; }
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	460b      	mov	r3, r1
 800eece:	70fb      	strb	r3, [r7, #3]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	78fa      	ldrb	r2, [r7, #3]
 800eed4:	4611      	mov	r1, r2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f000 f80a 	bl	800eef0 <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh>
 800eedc:	4603      	mov	r3, r0
 800eede:	461a      	mov	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4413      	add	r3, r2
 800eee4:	3301      	adds	r3, #1
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
	...

0800eef0 <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	460b      	mov	r3, r1
 800eefa:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	78fa      	ldrb	r2, [r7, #3]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d201      	bcs.n	800ef0a <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh+0x1a>
            return pos;
 800ef06:	78fb      	ldrb	r3, [r7, #3]
 800ef08:	e005      	b.n	800ef16 <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 800ef0a:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh+0x30>)
 800ef0c:	4a05      	ldr	r2, [pc, #20]	; (800ef24 <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh+0x34>)
 800ef0e:	21e6      	movs	r1, #230	; 0xe6
 800ef10:	4805      	ldr	r0, [pc, #20]	; (800ef28 <_ZNK6uavcan16DynamicArrayBaseILj200EE13validateRangeEh+0x38>)
 800ef12:	f011 fb3b 	bl	802058c <__assert_func>
    }
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	08021b88 	.word	0x08021b88
 800ef24:	080296b8 	.word	0x080296b8
 800ef28:	08021f6c 	.word	0x08021f6c

0800ef2c <_ZN6uavcan4NodeILj8192EED1Ev>:
class UAVCAN_EXPORT Node : public INode
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	4a1c      	ldr	r2, [pc, #112]	; (800efa8 <_ZN6uavcan4NodeILj8192EED1Ev+0x7c>)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	601a      	str	r2, [r3, #0]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f503 5315 	add.w	r3, r3, #9536	; 0x2540
 800ef40:	3318      	adds	r3, #24
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fa fd5b 	bl	80099fe <_ZN6uavcan22TransportStatsProviderD1Ev>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800ef4e:	3310      	adds	r3, #16
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fa fd44 	bl	80099de <_ZN6uavcan20RestartRequestServerD1Ev>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800ef5c:	3320      	adds	r3, #32
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fa fd2b 	bl	80099ba <_ZN6uavcan6LoggerD1Ev>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 800ef6a:	3320      	adds	r3, #32
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fa fd14 	bl	800999a <_ZN6uavcan20DataTypeInfoProviderD1Ev>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fa fcd7 	bl	800992c <_ZN6uavcan18NodeStatusProviderD1Ev>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ef84:	3318      	adds	r3, #24
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fa fca7 	bl	80098da <_ZN6uavcan9SchedulerD1Ev>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	3308      	adds	r3, #8
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7fa fc7b 	bl	800988c <_ZN6uavcan13PoolAllocatorILj8192ELh56EcED1Ev>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f7 fcb3 	bl	8006904 <_ZN6uavcan5INodeD1Ev>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	080250a0 	.word	0x080250a0

0800efac <_ZN6uavcan4NodeILj8192EED0Ev>:
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7ff ffb9 	bl	800ef2c <_ZN6uavcan4NodeILj8192EED1Ev>
 800efba:	f242 51e8 	movw	r1, #9704	; 0x25e8
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f011 fac3 	bl	802054a <_ZdlPvj>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
	...

0800efd0 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>:
class UAVCAN_EXPORT ServiceServer
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	4a08      	ldr	r2, [pc, #32]	; (800effc <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev+0x2c>)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	3348      	adds	r3, #72	; 0x48
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fc f8e7 	bl	800b1b6 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEED1Ev>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4618      	mov	r0, r3
 800efec:	f7fc f88a 	bl	800b104 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	08025104 	.word	0x08025104

0800f000 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED0Ev>:
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff ffe1 	bl	800efd0 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>
 800f00e:	2180      	movs	r1, #128	; 0x80
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f011 fa9a 	bl	802054a <_ZdlPvj>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEED1Ev>:
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	4a08      	ldr	r2, [pc, #32]	; (800f04c <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEED1Ev+0x2c>)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	3348      	adds	r3, #72	; 0x48
 800f032:	4618      	mov	r0, r3
 800f034:	f7fb fef1 	bl	800ae1a <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEED1Ev>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fb fe94 	bl	800ad68 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	08025144 	.word	0x08025144

0800f050 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEED0Ev>:
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7ff ffe1 	bl	800f020 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEED1Ev>
 800f05e:	2180      	movs	r1, #128	; 0x80
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f011 fa72 	bl	802054a <_ZdlPvj>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>:
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	4a08      	ldr	r2, [pc, #32]	; (800f09c <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev+0x2c>)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	3348      	adds	r3, #72	; 0x48
 800f082:	4618      	mov	r0, r3
 800f084:	f7fb fc3d 	bl	800a902 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEED1Ev>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fb fbe0 	bl	800a850 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	3708      	adds	r7, #8
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	08025184 	.word	0x08025184

0800f0a0 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED0Ev>:
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7ff ffe1 	bl	800f070 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>
 800f0ae:	2180      	movs	r1, #128	; 0x80
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f011 fa4a 	bl	802054a <_ZdlPvj>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>:
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	4a08      	ldr	r2, [pc, #32]	; (800f0ec <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev+0x2c>)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	3348      	adds	r3, #72	; 0x48
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fb fa0b 	bl	800a4ee <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEED1Ev>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fb f9ae 	bl	800a43c <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEED1Ev>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	080251c4 	.word	0x080251c4

0800f0f0 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED0Ev>:
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f7ff ffe1 	bl	800f0c0 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEED1Ev>
 800f0fe:	2180      	movs	r1, #128	; 0x80
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f011 fa22 	bl	802054a <_ZdlPvj>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4618      	mov	r0, r3
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <_ZN12uavcan_stm3213CanInitHelperILj128EED1Ev>:
class CanInitHelper
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fa fb52 	bl	80097c8 <_ZN12uavcan_stm329CanDriverD1Ev>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
	...

0800f130 <_Z41__static_initialization_and_destruction_0ii>:
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d11c      	bne.n	800f17a <_Z41__static_initialization_and_destruction_0ii+0x4a>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f146:	4293      	cmp	r3, r2
 800f148:	d117      	bne.n	800f17a <_Z41__static_initialization_and_destruction_0ii+0x4a>
typedef NodeStatus_<0> NodeStatus;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::NodeStatus > _uavcan_gdtr_registrator_NodeStatus;
 800f14a:	4813      	ldr	r0, [pc, #76]	; (800f198 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800f14c:	f7f9 fcae 	bl	8008aac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev>
typedef GetNodeInfo_ GetNodeInfo;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetNodeInfo > _uavcan_gdtr_registrator_GetNodeInfo;
 800f150:	4812      	ldr	r0, [pc, #72]	; (800f19c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800f152:	f7f9 fd0f 	bl	8008b74 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev>
typedef GetDataTypeInfo_ GetDataTypeInfo;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetDataTypeInfo > _uavcan_gdtr_registrator_GetDataTypeInfo;
 800f156:	4812      	ldr	r0, [pc, #72]	; (800f1a0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800f158:	f7f9 fe58 	bl	8008e0c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev>
typedef LogMessage_<0> LogMessage;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::debug::LogMessage > _uavcan_gdtr_registrator_LogMessage;
 800f15c:	4811      	ldr	r0, [pc, #68]	; (800f1a4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800f15e:	f7f9 ffa7 	bl	80090b0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev>
typedef RestartNode_ RestartNode;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::RestartNode > _uavcan_gdtr_registrator_RestartNode;
 800f162:	4811      	ldr	r0, [pc, #68]	; (800f1a8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800f164:	f7fa f8aa 	bl	80092bc <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev>
typedef GetTransportStats_ GetTransportStats;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetTransportStats > _uavcan_gdtr_registrator_GetTransportStats;
 800f168:	4810      	ldr	r0, [pc, #64]	; (800f1ac <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f16a:	f7fa f99f 	bl	80094ac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev>
typedef BeginFirmwareUpdate_ BeginFirmwareUpdate;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::file::BeginFirmwareUpdate > _uavcan_gdtr_registrator_BeginFirmwareUpdate;
 800f16e:	4810      	ldr	r0, [pc, #64]	; (800f1b0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f170:	f7fa fad4 	bl	800971c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol4file20BeginFirmwareUpdate_EEC1Ev>
uavcan_stm32::CanInitHelper<> can;
 800f174:	480f      	ldr	r0, [pc, #60]	; (800f1b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f176:	f7fa fb51 	bl	800981c <_ZN12uavcan_stm3213CanInitHelperILj128EEC1Ev>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f186:	4293      	cmp	r3, r2
 800f188:	d102      	bne.n	800f190 <_Z41__static_initialization_and_destruction_0ii+0x60>
 800f18a:	480a      	ldr	r0, [pc, #40]	; (800f1b4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f18c:	f7ff ffc0 	bl	800f110 <_ZN12uavcan_stm3213CanInitHelperILj128EED1Ev>
}
 800f190:	bf00      	nop
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	20004034 	.word	0x20004034
 800f19c:	20004038 	.word	0x20004038
 800f1a0:	2000403c 	.word	0x2000403c
 800f1a4:	20004040 	.word	0x20004040
 800f1a8:	20004044 	.word	0x20004044
 800f1ac:	20004048 	.word	0x20004048
 800f1b0:	2000404c 	.word	0x2000404c
 800f1b4:	20004df8 	.word	0x20004df8

0800f1b8 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EED1Ev>:
class UAVCAN_EXPORT ServiceCallResult : Noncopyable
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f7f6 fc17 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3708      	adds	r7, #8
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE>:
void ServiceClient<DataType_, Callback_>::handleReceivedDataStruct(ReceivedDataStructure<ResponseType>& response)
 800f1d0:	b590      	push	{r4, r7, lr}
 800f1d2:	b087      	sub	sp, #28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
 800f1d8:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(response.getTransferType() == TransferTypeServiceResponse);
 800f1da:	6838      	ldr	r0, [r7, #0]
 800f1dc:	f000 fcc4 	bl	800fb68 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE15getTransferTypeEv>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d006      	beq.n	800f1f4 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x24>
 800f1e6:	4b17      	ldr	r3, [pc, #92]	; (800f244 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x74>)
 800f1e8:	4a17      	ldr	r2, [pc, #92]	; (800f248 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x78>)
 800f1ea:	f240 11af 	movw	r1, #431	; 0x1af
 800f1ee:	4817      	ldr	r0, [pc, #92]	; (800f24c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x7c>)
 800f1f0:	f011 f9cc 	bl	802058c <__assert_func>
    ServiceCallID call_id(response.getSrcNodeID(), response.getTransferID());
 800f1f4:	6838      	ldr	r0, [r7, #0]
 800f1f6:	f000 fcc3 	bl	800fb80 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE12getSrcNodeIDEv>
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	6838      	ldr	r0, [r7, #0]
 800f1fe:	f000 fccb 	bl	800fb98 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE13getTransferIDEv>
 800f202:	4602      	mov	r2, r0
 800f204:	f107 0314 	add.w	r3, r7, #20
 800f208:	4621      	mov	r1, r4
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f8 fb28 	bl	8007860 <_ZN6uavcan13ServiceCallIDC1ENS_6NodeIDENS_10TransferIDE>
    cancelCall(call_id);
 800f210:	6979      	ldr	r1, [r7, #20]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7fd f9a4 	bl	800c560 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE10cancelCallENS_13ServiceCallIDE>
    ServiceCallResultType result(ServiceCallResultType::Success, call_id, response);    // Mutable!
 800f218:	f107 000c 	add.w	r0, r7, #12
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	2100      	movs	r1, #0
 800f222:	f000 fcc5 	bl	800fbb0 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE>
    invokeCallback(result);
 800f226:	f107 030c 	add.w	r3, r7, #12
 800f22a:	4619      	mov	r1, r3
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 fcff 	bl	800fc30 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14invokeCallbackERS6_>
    ServiceCallResultType result(ServiceCallResultType::Success, call_id, response);    // Mutable!
 800f232:	f107 030c 	add.w	r3, r7, #12
 800f236:	4618      	mov	r0, r3
 800f238:	f7ff ffbe 	bl	800f1b8 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EED1Ev>
}
 800f23c:	bf00      	nop
 800f23e:	371c      	adds	r7, #28
 800f240:	46bd      	mov	sp, r7
 800f242:	bd90      	pop	{r4, r7, pc}
 800f244:	080222a0 	.word	0x080222a0
 800f248:	08028ab8 	.word	0x08028ab8
 800f24c:	08021cd4 	.word	0x08021cd4

0800f250 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE>:
bool ServiceClient<DataType_, Callback_>::shouldAcceptFrame(const RxFrame& frame) const
 800f250:	b5b0      	push	{r4, r5, r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(frame.getTransferType() == TransferTypeServiceResponse); // Other types filtered out by dispatcher
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7f6 ff73 	bl	8006148 <_ZNK6uavcan5Frame15getTransferTypeEv>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d006      	beq.n	800f276 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE+0x26>
 800f268:	4b16      	ldr	r3, [pc, #88]	; (800f2c4 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE+0x74>)
 800f26a:	4a17      	ldr	r2, [pc, #92]	; (800f2c8 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE+0x78>)
 800f26c:	f240 11a5 	movw	r1, #421	; 0x1a5
 800f270:	4816      	ldr	r0, [pc, #88]	; (800f2cc <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE+0x7c>)
 800f272:	f011 f98b 	bl	802058c <__assert_func>
    return UAVCAN_NULLPTR != call_registry_.find(CallStateMatchingPredicate(ServiceCallID(frame.getSrcNodeID(),
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f103 0470 	add.w	r4, r3, #112	; 0x70
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7f6 ff6e 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 800f284:	4605      	mov	r5, r0
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7f6 ff75 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 800f28e:	4602      	mov	r2, r0
 800f290:	f107 030c 	add.w	r3, r7, #12
 800f294:	4629      	mov	r1, r5
 800f296:	4618      	mov	r0, r3
 800f298:	f7f8 fae2 	bl	8007860 <_ZN6uavcan13ServiceCallIDC1ENS_6NodeIDENS_10TransferIDE>
 800f29c:	f107 0308 	add.w	r3, r7, #8
 800f2a0:	68f9      	ldr	r1, [r7, #12]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7f8 fb9a 	bl	80079dc <_ZN6uavcan17ServiceClientBase26CallStateMatchingPredicateC1ENS_13ServiceCallIDE>
 800f2a8:	68b9      	ldr	r1, [r7, #8]
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f000 fce2 	bl	800fc74 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPKS2_T_>
 800f2b0:	4603      	mov	r3, r0
                                                                                          frame.getTransferID())));
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	bf14      	ite	ne
 800f2b6:	2301      	movne	r3, #1
 800f2b8:	2300      	moveq	r3, #0
 800f2ba:	b2db      	uxtb	r3, r3
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3710      	adds	r7, #16
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bdb0      	pop	{r4, r5, r7, pc}
 800f2c4:	080222dc 	.word	0x080222dc
 800f2c8:	08028790 	.word	0x08028790
 800f2cc:	08021cd4 	.word	0x08021cd4

0800f2d0 <_ZThn72_NK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE>:
bool ServiceClient<DataType_, Callback_>::shouldAcceptFrame(const RxFrame& frame) const
 800f2d0:	f1a0 0048 	sub.w	r0, r0, #72	; 0x48
 800f2d4:	e7bc      	b.n	800f250 <_ZNK6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE17shouldAcceptFrameERKNS_7RxFrameE>
 800f2d6:	bf00      	nop

0800f2d8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14handleDeadlineENS_13MonotonicTimeE>:
void ServiceClient<DataType_, Callback_>::handleDeadline(MonotonicTime)
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
    TimeoutCallbackCaller callback_caller(*this);
 800f2e2:	f107 030c 	add.w	r3, r7, #12
 800f2e6:	6879      	ldr	r1, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 fcd1 	bl	800fc90 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE21TimeoutCallbackCallerC1ERSB_>
    call_registry_.template forEach<TimeoutCallbackCaller&>(callback_caller);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	3370      	adds	r3, #112	; 0x70
 800f2f2:	f107 020c 	add.w	r2, r7, #12
 800f2f6:	4611      	mov	r1, r2
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f000 fce4 	bl	800fcc6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7forEachIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEEEvT_>
    call_registry_.removeAllWhere(&CallState::hasTimedOutPredicate);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3370      	adds	r3, #112	; 0x70
 800f302:	490a      	ldr	r1, [pc, #40]	; (800f32c <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14handleDeadlineENS_13MonotonicTimeE+0x54>)
 800f304:	4618      	mov	r0, r3
 800f306:	f000 fcf8 	bl	800fcfa <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE14removeAllWhereIPFbRKS2_EEEvT_>
    if (call_registry_.isEmpty())
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	3370      	adds	r3, #112	; 0x70
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fc fbde 	bl	800bad0 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7isEmptyEv>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d003      	beq.n	800f322 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14handleDeadlineENS_13MonotonicTimeE+0x4a>
        SubscriberType::stop();
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fc ffe8 	bl	800c2f2 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE4stopEv>
}
 800f322:	bf00      	nop
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	080079c5 	.word	0x080079c5

0800f330 <_ZThn80_N6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14handleDeadlineENS_13MonotonicTimeE>:
void ServiceClient<DataType_, Callback_>::handleDeadline(MonotonicTime)
 800f330:	f1a0 0050 	sub.w	r0, r0, #80	; 0x50
 800f334:	e7d0      	b.n	800f2d8 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14handleDeadlineENS_13MonotonicTimeE>
 800f336:	bf00      	nop

0800f338 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE17TransferForwarder22handleIncomingTransferERNS_16IncomingTransferE>:
        void handleIncomingTransfer(IncomingTransfer& transfer)
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
            obj_.handleIncomingTransfer(transfer);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	4618      	mov	r0, r3
 800f34a:	f000 fd1c 	bl	800fd86 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE22handleIncomingTransferERNS_16IncomingTransferE>
        }
 800f34e:	bf00      	nop
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <_ZN6uavcan4NodeILj8192EE12getAllocatorEv>:
    virtual typename RemoveReference<Allocator>::Type& getAllocator() { return pool_allocator_; }
 800f356:	b480      	push	{r7}
 800f358:	b083      	sub	sp, #12
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	3308      	adds	r3, #8
 800f362:	4618      	mov	r0, r3
 800f364:	370c      	adds	r7, #12
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <_ZN6uavcan4NodeILj8192EE12getSchedulerEv>:
    virtual Scheduler& getScheduler() { return scheduler_; }
 800f36e:	b480      	push	{r7}
 800f370:	b083      	sub	sp, #12
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f37c:	3318      	adds	r3, #24
 800f37e:	4618      	mov	r0, r3
 800f380:	370c      	adds	r7, #12
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <_ZNK6uavcan4NodeILj8192EE12getSchedulerEv>:
    virtual const Scheduler& getScheduler() const { return scheduler_; }
 800f38a:	b480      	push	{r7}
 800f38c:	b083      	sub	sp, #12
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f398:	3318      	adds	r3, #24
 800f39a:	4618      	mov	r0, r3
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
	...

0800f3a8 <_ZN6uavcan4NodeILj8192EE23registerInternalFailureEPKc>:
    virtual void registerInternalFailure(const char* msg)
 800f3a8:	b590      	push	{r4, r7, lr}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
        internal_failure_cnt_++;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 800f3b8:	3318      	adds	r3, #24
 800f3ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f3be:	1c59      	adds	r1, r3, #1
 800f3c0:	f144 0200 	adc.w	r2, r4, #0
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f503 5317 	add.w	r3, r3, #9664	; 0x25c0
 800f3ca:	3318      	adds	r3, #24
 800f3cc:	e9c3 1200 	strd	r1, r2, [r3]
        (void)getLogger().log(protocol::debug::LogLevel::ERROR, "UAVCAN", msg);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fd2e 	bl	800fe32 <_ZN6uavcan4NodeILj8192EE9getLoggerEv>
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	4a03      	ldr	r2, [pc, #12]	; (800f3e8 <_ZN6uavcan4NodeILj8192EE23registerInternalFailureEPKc+0x40>)
 800f3da:	2103      	movs	r1, #3
 800f3dc:	f000 fd37 	bl	800fe4e <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_>
    }
 800f3e0:	bf00      	nop
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd90      	pop	{r4, r7, pc}
 800f3e8:	08022314 	.word	0x08022314

0800f3ec <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj>:

template <std::size_t PoolSize, uint8_t BlockSize, typename RaiiSynchronizer>
void* PoolAllocator<PoolSize, BlockSize, RaiiSynchronizer>::allocate(std::size_t size)
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
{
    if (free_list_ == UAVCAN_NULLPTR || size > BlockSize)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d002      	beq.n	800f404 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x18>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b38      	cmp	r3, #56	; 0x38
 800f402:	d901      	bls.n	800f408 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x1c>
    {
        return UAVCAN_NULLPTR;
 800f404:	2300      	movs	r3, #0
 800f406:	e037      	b.n	800f478 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x8c>
    }

    RaiiSynchronizer lock;
    (void)lock;

    void* pmem = free_list_;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	60fb      	str	r3, [r7, #12]
    free_list_ = free_list_->next;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	605a      	str	r2, [r3, #4]

    // Statistics
    UAVCAN_ASSERT(used_ < NumBlocks);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f41e:	3308      	adds	r3, #8
 800f420:	881b      	ldrh	r3, [r3, #0]
 800f422:	2b91      	cmp	r3, #145	; 0x91
 800f424:	d905      	bls.n	800f432 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x46>
 800f426:	4b16      	ldr	r3, [pc, #88]	; (800f480 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x94>)
 800f428:	4a16      	ldr	r2, [pc, #88]	; (800f484 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x98>)
 800f42a:	21ae      	movs	r1, #174	; 0xae
 800f42c:	4816      	ldr	r0, [pc, #88]	; (800f488 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x9c>)
 800f42e:	f011 f8ad 	bl	802058c <__assert_func>
    used_++;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f438:	3308      	adds	r3, #8
 800f43a:	881b      	ldrh	r3, [r3, #0]
 800f43c:	3301      	adds	r3, #1
 800f43e:	b29a      	uxth	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f446:	3308      	adds	r3, #8
 800f448:	801a      	strh	r2, [r3, #0]
    if (used_ > max_used_)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f450:	3308      	adds	r3, #8
 800f452:	881a      	ldrh	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f45a:	330a      	adds	r3, #10
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d909      	bls.n	800f476 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE8allocateEj+0x8a>
    {
        max_used_ = used_;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f468:	3308      	adds	r3, #8
 800f46a:	881a      	ldrh	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f472:	330a      	adds	r3, #10
 800f474:	801a      	strh	r2, [r3, #0]
    }

    return pmem;
 800f476:	68fb      	ldr	r3, [r7, #12]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	0802231c 	.word	0x0802231c
 800f484:	08027968 	.word	0x08027968
 800f488:	08022330 	.word	0x08022330

0800f48c <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv>:

template <std::size_t PoolSize, uint8_t BlockSize, typename RaiiSynchronizer>
void PoolAllocator<PoolSize, BlockSize, RaiiSynchronizer>::deallocate(const void* ptr)
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
{
    if (ptr == UAVCAN_NULLPTR)
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d022      	beq.n	800f4e2 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv+0x56>
    }

    RaiiSynchronizer lock;
    (void)lock;

    Node* p = static_cast<Node*>(const_cast<void*>(ptr));
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	60fb      	str	r3, [r7, #12]
    p->next = free_list_;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	601a      	str	r2, [r3, #0]
    free_list_ = p;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	605a      	str	r2, [r3, #4]

    // Statistics
    UAVCAN_ASSERT(used_ > 0);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f4b4:	3308      	adds	r3, #8
 800f4b6:	881b      	ldrh	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d105      	bne.n	800f4c8 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv+0x3c>
 800f4bc:	4b0b      	ldr	r3, [pc, #44]	; (800f4ec <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv+0x60>)
 800f4be:	4a0c      	ldr	r2, [pc, #48]	; (800f4f0 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv+0x64>)
 800f4c0:	21c8      	movs	r1, #200	; 0xc8
 800f4c2:	480c      	ldr	r0, [pc, #48]	; (800f4f4 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv+0x68>)
 800f4c4:	f011 f862 	bl	802058c <__assert_func>
    used_--;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f4dc:	3308      	adds	r3, #8
 800f4de:	801a      	strh	r2, [r3, #0]
 800f4e0:	e000      	b.n	800f4e4 <_ZN6uavcan13PoolAllocatorILj8192ELh56EcE10deallocateEPKv+0x58>
        return;
 800f4e2:	bf00      	nop
}
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	08022374 	.word	0x08022374
 800f4f0:	080278b0 	.word	0x080278b0
 800f4f4:	08022330 	.word	0x08022330

0800f4f8 <_ZNK6uavcan13PoolAllocatorILj8192ELh56EcE16getBlockCapacityEv>:
    virtual uint16_t getBlockCapacity() const { return NumBlocks; }
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	2392      	movs	r3, #146	; 0x92
 800f502:	4618      	mov	r0, r3
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EED1Ev>:
class UAVCAN_EXPORT Array : public ArrayImpl<T, ArrayMode, MaxSize_>
 800f50e:	b580      	push	{r7, lr}
 800f510:	b082      	sub	sp, #8
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4618      	mov	r0, r3
 800f51a:	f000 fcfb 	bl	800ff14 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EED1Ev>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4618      	mov	r0, r3
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EED1Ev>:
    struct Response_
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	3318      	adds	r3, #24
 800f534:	4618      	mov	r0, r3
 800f536:	f7ff ffea 	bl	800f50e <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EED1Ev>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4618      	mov	r0, r3
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEED1Ev>:
class ServiceResponseDataStructure : public ResponseDataType_
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff ffea 	bl	800f528 <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EED1Ev>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
	...

0800f560 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE>:
    virtual void handleReceivedDataStruct(ReceivedDataStructure<RequestType>& request)
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	b0a6      	sub	sp, #152	; 0x98
 800f566:	af02      	add	r7, sp, #8
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	6039      	str	r1, [r7, #0]
        UAVCAN_ASSERT(request.getTransferType() == TransferTypeServiceRequest);
 800f56c:	6838      	ldr	r0, [r7, #0]
 800f56e:	f000 fcb4 	bl	800feda <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE15getTransferTypeEv>
 800f572:	4603      	mov	r3, r0
 800f574:	2b01      	cmp	r3, #1
 800f576:	d005      	beq.n	800f584 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x24>
 800f578:	4b49      	ldr	r3, [pc, #292]	; (800f6a0 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x140>)
 800f57a:	4a4a      	ldr	r2, [pc, #296]	; (800f6a4 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x144>)
 800f57c:	216d      	movs	r1, #109	; 0x6d
 800f57e:	484a      	ldr	r0, [pc, #296]	; (800f6a8 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x148>)
 800f580:	f011 f804 	bl	802058c <__assert_func>
        ServiceResponseDataStructure<ResponseType> response;
 800f584:	f107 0308 	add.w	r3, r7, #8
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fcb2 	bl	800fef2 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEEC1Ev>
        if (coerceOrFallback<bool>(callback_, true))
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3370      	adds	r3, #112	; 0x70
 800f592:	2201      	movs	r2, #1
 800f594:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 800f598:	f107 027f 	add.w	r2, r7, #127	; 0x7f
 800f59c:	4611      	mov	r1, r2
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fb fe4f 	bl	800b242 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPKNS_22TransportStatsProviderEMS2_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS6_9Response_ILi0EEEEEEEET_RKT0_RKSH_>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d01e      	beq.n	800f5e8 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x88>
            UAVCAN_ASSERT(response.isResponseEnabled());  // Enabled by default
 800f5aa:	f107 0308 	add.w	r3, r7, #8
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 fcbd 	bl	800ff2e <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEE17isResponseEnabledEv>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d105      	bne.n	800f5c6 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x66>
 800f5ba:	4b3c      	ldr	r3, [pc, #240]	; (800f6ac <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x14c>)
 800f5bc:	4a39      	ldr	r2, [pc, #228]	; (800f6a4 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x144>)
 800f5be:	2173      	movs	r1, #115	; 0x73
 800f5c0:	4839      	ldr	r0, [pc, #228]	; (800f6a8 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x148>)
 800f5c2:	f010 ffe3 	bl	802058c <__assert_func>
            callback_(request, response);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3370      	adds	r3, #112	; 0x70
 800f5ca:	f107 0208 	add.w	r2, r7, #8
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fcb9 	bl	800ff48 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS7_EENS_28ServiceResponseDataStructureISB_EEEEvRT_RT0_>
        if (response.isResponseEnabled())
 800f5d6:	f107 0308 	add.w	r3, r7, #8
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fca7 	bl	800ff2e <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEE17isResponseEnabledEv>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d051      	beq.n	800f68a <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x12a>
 800f5e6:	e002      	b.n	800f5ee <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x8e>
            handleFatalError("Srv serv clbk");
 800f5e8:	4831      	ldr	r0, [pc, #196]	; (800f6b0 <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x150>)
 800f5ea:	f00e fcc9 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
            publisher_.setPriority(request.getPriority());      // Responding at the same priority.
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800f5f4:	6838      	ldr	r0, [r7, #0]
 800f5f6:	f000 fcd1 	bl	800ff9c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE11getPriorityEv>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	4620      	mov	r0, r4
 800f600:	f7f7 fad7 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>
            const int res = publisher_.publish(response, TransferTypeServiceResponse, request.getSrcNodeID(),
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800f60a:	6838      	ldr	r0, [r7, #0]
 800f60c:	f000 fcd2 	bl	800ffb4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE12getSrcNodeIDEv>
 800f610:	4680      	mov	r8, r0
 800f612:	6838      	ldr	r0, [r7, #0]
 800f614:	f000 fcda 	bl	800ffcc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE13getTransferIDEv>
 800f618:	4606      	mov	r6, r0
 800f61a:	f04f 0300 	mov.w	r3, #0
 800f61e:	f04f 0400 	mov.w	r4, #0
 800f622:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800f626:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7f6 fd65 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 800f630:	f107 0108 	add.w	r1, r7, #8
 800f634:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	f88d 6000 	strb.w	r6, [sp]
 800f63e:	4643      	mov	r3, r8
 800f640:	2200      	movs	r2, #0
 800f642:	4628      	mov	r0, r5
 800f644:	f000 fcce 	bl	800ffe4 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>
 800f648:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800f64c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f650:	4618      	mov	r0, r3
 800f652:	f7f6 fd5f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (res < 0)
 800f656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da15      	bge.n	800f68a <_ZN6uavcan13ServiceServerINS_8protocol18GetTransportStats_ENS_12MethodBinderIPKNS_22TransportStatsProviderEMS4_KFvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS8_EE+0x12a>
                publisher_.getNode().getDispatcher().getTransferPerfCounter().addError();
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	3348      	adds	r3, #72	; 0x48
 800f662:	4618      	mov	r0, r3
 800f664:	f7f7 fab3 	bl	8006bce <_ZNK6uavcan20GenericPublisherBase7getNodeEv>
 800f668:	4603      	mov	r3, r0
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7f7 f96a 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800f670:	4603      	mov	r3, r0
 800f672:	4618      	mov	r0, r3
 800f674:	f7f7 f835 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800f678:	4603      	mov	r3, r0
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7f6 fc99 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
                response_failure_count_++;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f684:	1c5a      	adds	r2, r3, #1
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	67da      	str	r2, [r3, #124]	; 0x7c
        ServiceResponseDataStructure<ResponseType> response;
 800f68a:	f107 0308 	add.w	r3, r7, #8
 800f68e:	4618      	mov	r0, r3
 800f690:	f7ff ff58 	bl	800f544 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEED1Ev>
    }
 800f694:	bf00      	nop
 800f696:	3790      	adds	r7, #144	; 0x90
 800f698:	46bd      	mov	sp, r7
 800f69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f69e:	bf00      	nop
 800f6a0:	08022380 	.word	0x08022380
 800f6a4:	08025e38 	.word	0x08025e38
 800f6a8:	08021f08 	.word	0x08021f08
 800f6ac:	080223b8 	.word	0x080223b8
 800f6b0:	080223d8 	.word	0x080223d8

0800f6b4 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarder22handleIncomingTransferERNS_16IncomingTransferE>:
        void handleIncomingTransfer(IncomingTransfer& transfer)
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
            obj_.handleIncomingTransfer(transfer);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6c2:	6839      	ldr	r1, [r7, #0]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 fccc 	bl	8010062 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>
        }
 800f6ca:	bf00      	nop
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_>:
    virtual void handleReceivedDataStruct(ReceivedDataStructure<RequestType>& request)
 800f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	b08a      	sub	sp, #40	; 0x28
 800f6da:	af02      	add	r7, sp, #8
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	6039      	str	r1, [r7, #0]
        UAVCAN_ASSERT(request.getTransferType() == TransferTypeServiceRequest);
 800f6e0:	6838      	ldr	r0, [r7, #0]
 800f6e2:	f000 fd12 	bl	801010a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE15getTransferTypeEv>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d005      	beq.n	800f6f8 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x24>
 800f6ec:	4b45      	ldr	r3, [pc, #276]	; (800f804 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x130>)
 800f6ee:	4a46      	ldr	r2, [pc, #280]	; (800f808 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x134>)
 800f6f0:	216d      	movs	r1, #109	; 0x6d
 800f6f2:	4846      	ldr	r0, [pc, #280]	; (800f80c <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x138>)
 800f6f4:	f010 ff4a 	bl	802058c <__assert_func>
        ServiceResponseDataStructure<ResponseType> response;
 800f6f8:	f107 030c 	add.w	r3, r7, #12
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 fd10 	bl	8010122 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol12RestartNode_9Response_ILi0EEEEC1Ev>
        if (coerceOrFallback<bool>(callback_, true))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	3370      	adds	r3, #112	; 0x70
 800f706:	2201      	movs	r2, #1
 800f708:	73fa      	strb	r2, [r7, #15]
 800f70a:	f107 020f 	add.w	r2, r7, #15
 800f70e:	4611      	mov	r1, r2
 800f710:	4618      	mov	r0, r3
 800f712:	f7fb fbc8 	bl	800aea6 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPKNS_20RestartRequestServerEMS2_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS7_9Response_ILi0EEEEEEEET_RKT0_RKSJ_>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d01e      	beq.n	800f75a <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x86>
            UAVCAN_ASSERT(response.isResponseEnabled());  // Enabled by default
 800f71c:	f107 030c 	add.w	r3, r7, #12
 800f720:	4618      	mov	r0, r3
 800f722:	f000 fd0e 	bl	8010142 <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol12RestartNode_9Response_ILi0EEEE17isResponseEnabledEv>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d105      	bne.n	800f738 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x64>
 800f72c:	4b38      	ldr	r3, [pc, #224]	; (800f810 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x13c>)
 800f72e:	4a36      	ldr	r2, [pc, #216]	; (800f808 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x134>)
 800f730:	2173      	movs	r1, #115	; 0x73
 800f732:	4836      	ldr	r0, [pc, #216]	; (800f80c <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x138>)
 800f734:	f010 ff2a 	bl	802058c <__assert_func>
            callback_(request, response);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	3370      	adds	r3, #112	; 0x70
 800f73c:	f107 020c 	add.w	r2, r7, #12
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	4618      	mov	r0, r3
 800f744:	f000 fd09 	bl	801015a <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEclIS9_NS_28ServiceResponseDataStructureISD_EEEEvRT_RT0_>
        if (response.isResponseEnabled())
 800f748:	f107 030c 	add.w	r3, r7, #12
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 fcf8 	bl	8010142 <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol12RestartNode_9Response_ILi0EEEE17isResponseEnabledEv>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d04f      	beq.n	800f7f8 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x124>
 800f758:	e002      	b.n	800f760 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x8c>
            handleFatalError("Srv serv clbk");
 800f75a:	482e      	ldr	r0, [pc, #184]	; (800f814 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x140>)
 800f75c:	f00e fc10 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
            publisher_.setPriority(request.getPriority());      // Responding at the same priority.
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800f766:	6838      	ldr	r0, [r7, #0]
 800f768:	f000 fd21 	bl	80101ae <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE11getPriorityEv>
 800f76c:	4603      	mov	r3, r0
 800f76e:	4619      	mov	r1, r3
 800f770:	4620      	mov	r0, r4
 800f772:	f7f7 fa1e 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>
            const int res = publisher_.publish(response, TransferTypeServiceResponse, request.getSrcNodeID(),
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800f77c:	6838      	ldr	r0, [r7, #0]
 800f77e:	f7f9 fdbd 	bl	80092fc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE12getSrcNodeIDEv>
 800f782:	4680      	mov	r8, r0
 800f784:	6838      	ldr	r0, [r7, #0]
 800f786:	f000 fd1e 	bl	80101c6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE13getTransferIDEv>
 800f78a:	4606      	mov	r6, r0
 800f78c:	f04f 0300 	mov.w	r3, #0
 800f790:	f04f 0400 	mov.w	r4, #0
 800f794:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800f798:	f107 0310 	add.w	r3, r7, #16
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7f6 fcac 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 800f7a2:	f107 010c 	add.w	r1, r7, #12
 800f7a6:	f107 0310 	add.w	r3, r7, #16
 800f7aa:	9301      	str	r3, [sp, #4]
 800f7ac:	f88d 6000 	strb.w	r6, [sp]
 800f7b0:	4643      	mov	r3, r8
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f000 fd12 	bl	80101de <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>
 800f7ba:	61f8      	str	r0, [r7, #28]
 800f7bc:	f107 0310 	add.w	r3, r7, #16
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7f6 fca7 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (res < 0)
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	da15      	bge.n	800f7f8 <_ZN6uavcan13ServiceServerINS_8protocol12RestartNode_ENS_12MethodBinderIPKNS_20RestartRequestServerEMS4_KFvRKNS_21ReceivedDataStructureINS2_8Request_ILi0EEEEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERSA_+0x124>
                publisher_.getNode().getDispatcher().getTransferPerfCounter().addError();
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	3348      	adds	r3, #72	; 0x48
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7f7 f9fc 	bl	8006bce <_ZNK6uavcan20GenericPublisherBase7getNodeEv>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7f7 f8b3 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7f6 ff7e 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7f6 fbe2 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
                response_failure_count_++;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }
 800f7f8:	bf00      	nop
 800f7fa:	3720      	adds	r7, #32
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f802:	bf00      	nop
 800f804:	08022380 	.word	0x08022380
 800f808:	080265a8 	.word	0x080265a8
 800f80c:	08021f08 	.word	0x08021f08
 800f810:	080223b8 	.word	0x080223b8
 800f814:	080223d8 	.word	0x080223d8

0800f818 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarder22handleIncomingTransferERNS_16IncomingTransferE>:
        void handleIncomingTransfer(IncomingTransfer& transfer)
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
            obj_.handleIncomingTransfer(transfer);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	4618      	mov	r0, r3
 800f82a:	f000 fd17 	bl	801025c <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>
        }
 800f82e:	bf00      	nop
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EED1Ev>:
    struct Response_
 800f836:	b580      	push	{r7, lr}
 800f838:	b082      	sub	sp, #8
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	330c      	adds	r3, #12
 800f842:	4618      	mov	r0, r3
 800f844:	f7f7 faee 	bl	8006e24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}

0800f852 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEED1Ev>:
class ServiceResponseDataStructure : public ResponseDataType_
 800f852:	b580      	push	{r7, lr}
 800f854:	b082      	sub	sp, #8
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff ffea 	bl	800f836 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EED1Ev>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE>:
    virtual void handleReceivedDataStruct(ReceivedDataStructure<RequestType>& request)
 800f86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f870:	b0a2      	sub	sp, #136	; 0x88
 800f872:	af02      	add	r7, sp, #8
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	6039      	str	r1, [r7, #0]
        UAVCAN_ASSERT(request.getTransferType() == TransferTypeServiceRequest);
 800f878:	6838      	ldr	r0, [r7, #0]
 800f87a:	f000 fd43 	bl	8010304 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE15getTransferTypeEv>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b01      	cmp	r3, #1
 800f882:	d005      	beq.n	800f890 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x24>
 800f884:	4b48      	ldr	r3, [pc, #288]	; (800f9a8 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x13c>)
 800f886:	4a49      	ldr	r2, [pc, #292]	; (800f9ac <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x140>)
 800f888:	216d      	movs	r1, #109	; 0x6d
 800f88a:	4849      	ldr	r0, [pc, #292]	; (800f9b0 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x144>)
 800f88c:	f010 fe7e 	bl	802058c <__assert_func>
        ServiceResponseDataStructure<ResponseType> response;
 800f890:	f107 0308 	add.w	r3, r7, #8
 800f894:	4618      	mov	r0, r3
 800f896:	f000 fd41 	bl	801031c <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEEC1Ev>
        if (coerceOrFallback<bool>(callback_, true))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	3370      	adds	r3, #112	; 0x70
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 800f8a4:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fb f85b 	bl	800a966 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPNS_20DataTypeInfoProviderEMS2_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEEET_RKT0_RKSG_>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d01e      	beq.n	800f8f4 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x88>
            UAVCAN_ASSERT(response.isResponseEnabled());  // Enabled by default
 800f8b6:	f107 0308 	add.w	r3, r7, #8
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 fd3f 	bl	801033e <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEE17isResponseEnabledEv>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d105      	bne.n	800f8d2 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x66>
 800f8c6:	4b3b      	ldr	r3, [pc, #236]	; (800f9b4 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x148>)
 800f8c8:	4a38      	ldr	r2, [pc, #224]	; (800f9ac <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x140>)
 800f8ca:	2173      	movs	r1, #115	; 0x73
 800f8cc:	4838      	ldr	r0, [pc, #224]	; (800f9b0 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x144>)
 800f8ce:	f010 fe5d 	bl	802058c <__assert_func>
            callback_(request, response);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3370      	adds	r3, #112	; 0x70
 800f8d6:	f107 0208 	add.w	r2, r7, #8
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f000 fd3b 	bl	8010358 <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_>
        if (response.isResponseEnabled())
 800f8e2:	f107 0308 	add.w	r3, r7, #8
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f000 fd29 	bl	801033e <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEE17isResponseEnabledEv>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d04f      	beq.n	800f992 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x126>
 800f8f2:	e002      	b.n	800f8fa <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x8e>
            handleFatalError("Srv serv clbk");
 800f8f4:	4830      	ldr	r0, [pc, #192]	; (800f9b8 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x14c>)
 800f8f6:	f00e fb43 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
            publisher_.setPriority(request.getPriority());      // Responding at the same priority.
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800f900:	6838      	ldr	r0, [r7, #0]
 800f902:	f000 fd53 	bl	80103ac <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE11getPriorityEv>
 800f906:	4603      	mov	r3, r0
 800f908:	4619      	mov	r1, r3
 800f90a:	4620      	mov	r0, r4
 800f90c:	f7f7 f951 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>
            const int res = publisher_.publish(response, TransferTypeServiceResponse, request.getSrcNodeID(),
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800f916:	6838      	ldr	r0, [r7, #0]
 800f918:	f000 fd54 	bl	80103c4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE12getSrcNodeIDEv>
 800f91c:	4680      	mov	r8, r0
 800f91e:	6838      	ldr	r0, [r7, #0]
 800f920:	f000 fd5c 	bl	80103dc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE13getTransferIDEv>
 800f924:	4606      	mov	r6, r0
 800f926:	f04f 0300 	mov.w	r3, #0
 800f92a:	f04f 0400 	mov.w	r4, #0
 800f92e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 800f932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f936:	4618      	mov	r0, r3
 800f938:	f7f6 fbdf 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 800f93c:	f107 0108 	add.w	r1, r7, #8
 800f940:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f944:	9301      	str	r3, [sp, #4]
 800f946:	f88d 6000 	strb.w	r6, [sp]
 800f94a:	4643      	mov	r3, r8
 800f94c:	2200      	movs	r2, #0
 800f94e:	4628      	mov	r0, r5
 800f950:	f000 fd50 	bl	80103f4 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>
 800f954:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7f6 fbda 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (res < 0)
 800f960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f962:	2b00      	cmp	r3, #0
 800f964:	da15      	bge.n	800f992 <_ZN6uavcan13ServiceServerINS_8protocol16GetDataTypeInfo_ENS_12MethodBinderIPNS_20DataTypeInfoProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x126>
                publisher_.getNode().getDispatcher().getTransferPerfCounter().addError();
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3348      	adds	r3, #72	; 0x48
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7f7 f92f 	bl	8006bce <_ZNK6uavcan20GenericPublisherBase7getNodeEv>
 800f970:	4603      	mov	r3, r0
 800f972:	4618      	mov	r0, r3
 800f974:	f7f6 ffe6 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800f978:	4603      	mov	r3, r0
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7f6 feb1 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800f980:	4603      	mov	r3, r0
 800f982:	4618      	mov	r0, r3
 800f984:	f7f6 fb15 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
                response_failure_count_++;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	67da      	str	r2, [r3, #124]	; 0x7c
        ServiceResponseDataStructure<ResponseType> response;
 800f992:	f107 0308 	add.w	r3, r7, #8
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff ff5b 	bl	800f852 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEED1Ev>
    }
 800f99c:	bf00      	nop
 800f99e:	3780      	adds	r7, #128	; 0x80
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9a6:	bf00      	nop
 800f9a8:	08022380 	.word	0x08022380
 800f9ac:	08026884 	.word	0x08026884
 800f9b0:	08021f08 	.word	0x08021f08
 800f9b4:	080223b8 	.word	0x080223b8
 800f9b8:	080223d8 	.word	0x080223d8

0800f9bc <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarder22handleIncomingTransferERNS_16IncomingTransferE>:
        void handleIncomingTransfer(IncomingTransfer& transfer)
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
            obj_.handleIncomingTransfer(transfer);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ca:	6839      	ldr	r1, [r7, #0]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f000 fd62 	bl	8010496 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>
        }
 800f9d2:	bf00      	nop
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEED1Ev>:
class ServiceResponseDataStructure : public ResponseDataType_
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b082      	sub	sp, #8
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7f7 fa2a 	bl	8006e3e <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EED1Ev>
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE>:
    virtual void handleReceivedDataStruct(ReceivedDataStructure<RequestType>& request)
 800f9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f8:	b0ec      	sub	sp, #432	; 0x1b0
 800f9fa:	af02      	add	r7, sp, #8
 800f9fc:	1d3b      	adds	r3, r7, #4
 800f9fe:	6018      	str	r0, [r3, #0]
 800fa00:	463b      	mov	r3, r7
 800fa02:	6019      	str	r1, [r3, #0]
        UAVCAN_ASSERT(request.getTransferType() == TransferTypeServiceRequest);
 800fa04:	463b      	mov	r3, r7
 800fa06:	6818      	ldr	r0, [r3, #0]
 800fa08:	f000 fd99 	bl	801053e <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE15getTransferTypeEv>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d005      	beq.n	800fa1e <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x2a>
 800fa12:	4b50      	ldr	r3, [pc, #320]	; (800fb54 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x160>)
 800fa14:	4a50      	ldr	r2, [pc, #320]	; (800fb58 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x164>)
 800fa16:	216d      	movs	r1, #109	; 0x6d
 800fa18:	4850      	ldr	r0, [pc, #320]	; (800fb5c <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x168>)
 800fa1a:	f010 fdb7 	bl	802058c <__assert_func>
        ServiceResponseDataStructure<ResponseType> response;
 800fa1e:	f107 0308 	add.w	r3, r7, #8
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 fd97 	bl	8010556 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEEC1Ev>
        if (coerceOrFallback<bool>(callback_, true))
 800fa28:	1d3b      	adds	r3, r7, #4
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	3370      	adds	r3, #112	; 0x70
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f887 2197 	strb.w	r2, [r7, #407]	; 0x197
 800fa34:	f207 1297 	addw	r2, r7, #407	; 0x197
 800fa38:	4611      	mov	r1, r2
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f000 fd9c 	bl	8010578 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPNS_18NodeStatusProviderEMS2_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEEET_RKT0_RKSG_>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d020      	beq.n	800fa88 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x94>
            UAVCAN_ASSERT(response.isResponseEnabled());  // Enabled by default
 800fa46:	f107 0308 	add.w	r3, r7, #8
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f000 fda3 	bl	8010596 <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEE17isResponseEnabledEv>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d105      	bne.n	800fa62 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x6e>
 800fa56:	4b42      	ldr	r3, [pc, #264]	; (800fb60 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x16c>)
 800fa58:	4a3f      	ldr	r2, [pc, #252]	; (800fb58 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x164>)
 800fa5a:	2173      	movs	r1, #115	; 0x73
 800fa5c:	483f      	ldr	r0, [pc, #252]	; (800fb5c <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x168>)
 800fa5e:	f010 fd95 	bl	802058c <__assert_func>
            callback_(request, response);
 800fa62:	1d3b      	adds	r3, r7, #4
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fa6a:	f107 0208 	add.w	r2, r7, #8
 800fa6e:	463b      	mov	r3, r7
 800fa70:	6819      	ldr	r1, [r3, #0]
 800fa72:	f000 fd9d 	bl	80105b0 <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_>
        if (response.isResponseEnabled())
 800fa76:	f107 0308 	add.w	r3, r7, #8
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f000 fd8b 	bl	8010596 <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEE17isResponseEnabledEv>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d05b      	beq.n	800fb3e <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x14a>
 800fa86:	e002      	b.n	800fa8e <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x9a>
            handleFatalError("Srv serv clbk");
 800fa88:	4836      	ldr	r0, [pc, #216]	; (800fb64 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x170>)
 800fa8a:	f00e fa79 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
            publisher_.setPriority(request.getPriority());      // Responding at the same priority.
 800fa8e:	1d3b      	adds	r3, r7, #4
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800fa96:	463b      	mov	r3, r7
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	f000 fdb3 	bl	8010604 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE11getPriorityEv>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	4619      	mov	r1, r3
 800faa2:	4620      	mov	r0, r4
 800faa4:	f7f7 f885 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>
            const int res = publisher_.publish(response, TransferTypeServiceResponse, request.getSrcNodeID(),
 800faa8:	1d3b      	adds	r3, r7, #4
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f103 0548 	add.w	r5, r3, #72	; 0x48
 800fab0:	463b      	mov	r3, r7
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	f000 fdb2 	bl	801061c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE12getSrcNodeIDEv>
 800fab8:	4680      	mov	r8, r0
 800faba:	463b      	mov	r3, r7
 800fabc:	6818      	ldr	r0, [r3, #0]
 800fabe:	f000 fdb9 	bl	8010634 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE13getTransferIDEv>
 800fac2:	4606      	mov	r6, r0
 800fac4:	f04f 0300 	mov.w	r3, #0
 800fac8:	f04f 0400 	mov.w	r4, #0
 800facc:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800fad0:	e9c2 3400 	strd	r3, r4, [r2]
 800fad4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f6 fb0e 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 800fade:	f107 0108 	add.w	r1, r7, #8
 800fae2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	f88d 6000 	strb.w	r6, [sp]
 800faec:	4643      	mov	r3, r8
 800faee:	2200      	movs	r2, #0
 800faf0:	4628      	mov	r0, r5
 800faf2:	f000 fdab 	bl	801064c <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>
 800faf6:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 800fafa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7f6 fb08 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (res < 0)
 800fb04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	da18      	bge.n	800fb3e <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE24handleReceivedDataStructERNS_21ReceivedDataStructureIS7_EE+0x14a>
                publisher_.getNode().getDispatcher().getTransferPerfCounter().addError();
 800fb0c:	1d3b      	adds	r3, r7, #4
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	3348      	adds	r3, #72	; 0x48
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f7 f85b 	bl	8006bce <_ZNK6uavcan20GenericPublisherBase7getNodeEv>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7f6 ff12 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800fb20:	4603      	mov	r3, r0
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f6 fddd 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f6 fa41 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
                response_failure_count_++;
 800fb30:	1d3b      	adds	r3, r7, #4
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb36:	1c5a      	adds	r2, r3, #1
 800fb38:	1d3b      	adds	r3, r7, #4
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	67da      	str	r2, [r3, #124]	; 0x7c
        ServiceResponseDataStructure<ResponseType> response;
 800fb3e:	f107 0308 	add.w	r3, r7, #8
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff ff49 	bl	800f9da <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEED1Ev>
    }
 800fb48:	bf00      	nop
 800fb4a:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb54:	08022380 	.word	0x08022380
 800fb58:	08026ff8 	.word	0x08026ff8
 800fb5c:	08021f08 	.word	0x08021f08
 800fb60:	080223b8 	.word	0x080223b8
 800fb64:	080223d8 	.word	0x080223d8

0800fb68 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE15getTransferTypeEv>:
    TransferType getTransferType()   const { return safeget<TransferType, &IncomingTransfer::getTransferType>(); }
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fd91 	bl	8010698 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>
 800fb76:	4603      	mov	r3, r0
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE12getSrcNodeIDEv>:
    NodeID getSrcNodeID()            const { return safeget<NodeID, &IncomingTransfer::getSrcNodeID>(); }
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 fd9b 	bl	80106c4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	4618      	mov	r0, r3
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE13getTransferIDEv>:
    TransferID getTransferID()       const { return safeget<TransferID, &IncomingTransfer::getTransferID>(); }
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 fdaa 	bl	80106fa <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>
 800fba6:	4603      	mov	r3, r0
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3708      	adds	r7, #8
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE>:
    ServiceCallResult(Status arg_status, ServiceCallID arg_call_id, ResponseFieldType& arg_response)
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	80ba      	strh	r2, [r7, #4]
 800fbba:	603b      	str	r3, [r7, #0]
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	72fb      	strb	r3, [r7, #11]
        , response_(arg_response)
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7f5 ff0c 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	7afa      	ldrb	r2, [r7, #11]
 800fbca:	701a      	strb	r2, [r3, #0]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	1d3a      	adds	r2, r7, #4
 800fbd2:	8812      	ldrh	r2, [r2, #0]
 800fbd4:	801a      	strh	r2, [r3, #0]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	605a      	str	r2, [r3, #4]
        UAVCAN_ASSERT(call_id_.isValid());
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7f7 fe6f 	bl	80078c4 <_ZNK6uavcan13ServiceCallID7isValidEv>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d105      	bne.n	800fbf8 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x48>
 800fbec:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x70>)
 800fbee:	4a0d      	ldr	r2, [pc, #52]	; (800fc24 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x74>)
 800fbf0:	2148      	movs	r1, #72	; 0x48
 800fbf2:	480d      	ldr	r0, [pc, #52]	; (800fc28 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x78>)
 800fbf4:	f010 fcca 	bl	802058c <__assert_func>
        UAVCAN_ASSERT((status_ == Success) || (status_ == ErrorTimeout));
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d009      	beq.n	800fc14 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x64>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d005      	beq.n	800fc14 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x64>
 800fc08:	4b08      	ldr	r3, [pc, #32]	; (800fc2c <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x7c>)
 800fc0a:	4a06      	ldr	r2, [pc, #24]	; (800fc24 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x74>)
 800fc0c:	2149      	movs	r1, #73	; 0x49
 800fc0e:	4806      	ldr	r0, [pc, #24]	; (800fc28 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE+0x78>)
 800fc10:	f010 fcbc 	bl	802058c <__assert_func>
    }
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	080223e8 	.word	0x080223e8
 800fc24:	080288a4 	.word	0x080288a4
 800fc28:	08021cd4 	.word	0x08021cd4
 800fc2c:	080223fc 	.word	0x080223fc

0800fc30 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14invokeCallbackERS6_>:
void ServiceClient<DataType_, Callback_>::invokeCallback(ServiceCallResultType& result)
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
    if (coerceOrFallback<bool>(callback_, true))
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	33a8      	adds	r3, #168	; 0xa8
 800fc3e:	2201      	movs	r2, #1
 800fc40:	73fa      	strb	r2, [r7, #15]
 800fc42:	f107 020f 	add.w	r2, r7, #15
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7fc fc31 	bl	800c4b0 <_ZN6uavcan16coerceOrFallbackIbSt8functionIFvRKNS_17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEEEEEET_RKT0_RKSB_>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d006      	beq.n	800fc62 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14invokeCallbackERS6_+0x32>
        callback_(result);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	33a8      	adds	r3, #168	; 0xa8
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f000 fd68 	bl	8010730 <_ZNKSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEclES7_>
}
 800fc60:	e002      	b.n	800fc68 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14invokeCallbackERS6_+0x38>
        handleFatalError("Srv client clbk");
 800fc62:	4803      	ldr	r0, [pc, #12]	; (800fc70 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14invokeCallbackERS6_+0x40>)
 800fc64:	f00e f98c 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
}
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	08022430 	.word	0x08022430

0800fc74 <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPKS2_T_>:
    const T* find(Predicate predicate) const
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	8039      	strh	r1, [r7, #0]
        return const_cast<Multiset*>(this)->find<Predicate>(predicate);
 800fc7e:	6839      	ldr	r1, [r7, #0]
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fd71 	bl	8010768 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_>
 800fc86:	4603      	mov	r3, r0
    }
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE21TimeoutCallbackCallerC1ERSB_>:
        TimeoutCallbackCaller(ServiceClient& arg_owner) : owner(arg_owner) { }
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	683a      	ldr	r2, [r7, #0]
 800fc9e:	601a      	str	r2, [r3, #0]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4618      	mov	r0, r3
 800fca4:	370c      	adds	r7, #12
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr

0800fcae <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEED1Ev>:
    struct OperatorToFalsePredicateAdapter : ::uavcan::Noncopyable
 800fcae:	b580      	push	{r7, lr}
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7f5 fe9c 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}

0800fcc6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7forEachIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEEEvT_>:
    void forEach(Operator oper)
 800fcc6:	b580      	push	{r7, lr}
 800fcc8:	b084      	sub	sp, #16
 800fcca:	af00      	add	r7, sp, #0
 800fccc:	6078      	str	r0, [r7, #4]
 800fcce:	6039      	str	r1, [r7, #0]
        OperatorToFalsePredicateAdapter<Operator> adapter(oper);
 800fcd0:	f107 030c 	add.w	r3, r7, #12
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 fd93 	bl	8010802 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEEC1ESI_>
        (void)find<OperatorToFalsePredicateAdapter<Operator>&>(adapter);
 800fcdc:	f107 030c 	add.w	r3, r7, #12
 800fce0:	4619      	mov	r1, r3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fd9d 	bl	8010822 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_>
        OperatorToFalsePredicateAdapter<Operator> adapter(oper);
 800fce8:	f107 030c 	add.w	r3, r7, #12
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff ffde 	bl	800fcae <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEED1Ev>
    }
 800fcf2:	bf00      	nop
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE14removeAllWhereIPFbRKS2_EEEvT_>:
    void removeAllWhere(Predicate predicate) { removeWhere<Predicate>(predicate, RemoveAll); }
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b082      	sub	sp, #8
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	6039      	str	r1, [r7, #0]
 800fd04:	2201      	movs	r2, #1
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 fdd6 	bl	80108ba <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE>
 800fd0e:	bf00      	nop
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EED1Ev>:
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f000 fe2e 	bl	8010982 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EED1Ev>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3708      	adds	r7, #8
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EED1Ev>:
    struct Response_
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff ffea 	bl	800fd16 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EED1Ev>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEED1Ev>:
class UAVCAN_EXPORT ReceivedDataStructure : public DataType_, Noncopyable
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7f5 fe4d 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff ffe7 	bl	800fd30 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EED1Ev>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecD1Ev>:
    struct ReceivedDataStructureSpec : public ReceivedDataStructure<DataStruct>
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7ff ffe8 	bl	800fd4c <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEED1Ev>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}

0800fd86 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE22handleIncomingTransferERNS_16IncomingTransferE>:
void GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::handleIncomingTransfer(IncomingTransfer& transfer)
 800fd86:	b590      	push	{r4, r7, lr}
 800fd88:	b0ab      	sub	sp, #172	; 0xac
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
 800fd8e:	6039      	str	r1, [r7, #0]
    ReceivedDataStructureSpec rx_struct(&transfer);
 800fd90:	f107 031c 	add.w	r3, r7, #28
 800fd94:	6839      	ldr	r1, [r7, #0]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f000 fde4 	bl	8010964 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>
    BitStream bitstream(transfer);
 800fd9c:	683a      	ldr	r2, [r7, #0]
 800fd9e:	f107 0310 	add.w	r3, r7, #16
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f6 f883 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 800fdaa:	f107 0210 	add.w	r2, r7, #16
 800fdae:	f107 030c 	add.w	r3, r7, #12
 800fdb2:	4611      	mov	r1, r2
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7f6 f890 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int decode_res = DataStruct::decode(rx_struct, codec);
 800fdba:	f107 010c 	add.w	r1, r7, #12
 800fdbe:	f107 031c 	add.w	r3, r7, #28
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 fde9 	bl	801099c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EE6decodeERS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 800fdca:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    transfer.release();
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3310      	adds	r3, #16
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6838      	ldr	r0, [r7, #0]
 800fdd8:	4798      	blx	r3
    if (decode_res <= 0)
 800fdda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	dc13      	bgt.n	800fe0a <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE22handleIncomingTransferERNS_16IncomingTransferE+0x84>
        failure_count_++;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	1c5a      	adds	r2, r3, #1
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	609a      	str	r2, [r3, #8]
        node_.getDispatcher().getTransferPerfCounter().addError();
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7f6 fda7 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f6 fc72 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7f6 f8d6 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
 800fe06:	2400      	movs	r4, #0
        return;
 800fe08:	e009      	b.n	800fe1e <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE22handleIncomingTransferERNS_16IncomingTransferE+0x98>
    handleReceivedDataStruct(rx_struct);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3308      	adds	r3, #8
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f107 021c 	add.w	r2, r7, #28
 800fe16:	4611      	mov	r1, r2
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	4798      	blx	r3
 800fe1c:	2401      	movs	r4, #1
 800fe1e:	f107 031c 	add.w	r3, r7, #28
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7ff ffa2 	bl	800fd6c <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecD1Ev>
 800fe28:	2c01      	cmp	r4, #1
    ReceivedDataStructureSpec rx_struct(&transfer);
 800fe2a:	bf00      	nop
}
 800fe2c:	37ac      	adds	r7, #172	; 0xac
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd90      	pop	{r4, r7, pc}

0800fe32 <_ZN6uavcan4NodeILj8192EE9getLoggerEv>:
    Logger& getLogger() { return proto_logger_; }
 800fe32:	b480      	push	{r7}
 800fe34:	b083      	sub	sp, #12
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800fe40:	3320      	adds	r3, #32
 800fe42:	4618      	mov	r0, r3
 800fe44:	370c      	adds	r7, #12
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_>:
};

#if UAVCAN_CPP_VERSION >= UAVCAN_CPP11

template <typename... Args>
int Logger::log(LogLevel level, const char* source, const char* format, Args... args) UAVCAN_NOEXCEPT
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b086      	sub	sp, #24
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	60f8      	str	r0, [r7, #12]
 800fe56:	607a      	str	r2, [r7, #4]
 800fe58:	603b      	str	r3, [r7, #0]
 800fe5a:	460b      	mov	r3, r1
 800fe5c:	72fb      	strb	r3, [r7, #11]
{
#if UAVCAN_EXCEPTIONS
    try
#endif
    {
        if (level >= level_ || level >= getExternalSinkLevel())
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 800fe64:	7afa      	ldrb	r2, [r7, #11]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d207      	bcs.n	800fe7a <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_+0x2c>
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7f7 fa3e 	bl	80072ec <_ZNK6uavcan6Logger20getExternalSinkLevelEv>
 800fe70:	4603      	mov	r3, r0
 800fe72:	461a      	mov	r2, r3
 800fe74:	7afb      	ldrb	r3, [r7, #11]
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d301      	bcc.n	800fe7e <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_+0x30>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e000      	b.n	800fe80 <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_+0x32>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d025      	beq.n	800fed0 <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_+0x82>
        {
            msg_buf_.level.value = level;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	7afa      	ldrb	r2, [r7, #11]
 800fe88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            msg_buf_.source = source;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3329      	adds	r3, #41	; 0x29
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f000 fda4 	bl	80109e0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEaSEPKc>
            msg_buf_.text.clear();
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	334a      	adds	r3, #74	; 0x4a
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f000 fdc9 	bl	8010a34 <_ZN6uavcan16DynamicArrayBaseILj90EE5clearEv>
            CharArrayFormatter<typename protocol::debug::LogMessage::FieldTypes::text> formatter(msg_buf_.text);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 800fea8:	f107 0314 	add.w	r3, r7, #20
 800feac:	4611      	mov	r1, r2
 800feae:	4618      	mov	r0, r3
 800feb0:	f000 fdcd 	bl	8010a4e <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEEC1ERS7_>
            formatter.write(format, args...);
 800feb4:	f107 0314 	add.w	r3, r7, #20
 800feb8:	6839      	ldr	r1, [r7, #0]
 800feba:	4618      	mov	r0, r3
 800febc:	f000 fdd6 	bl	8010a6c <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEE5writeEPKc>
            return log(msg_buf_);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	3328      	adds	r3, #40	; 0x28
 800fec4:	4619      	mov	r1, r3
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f7f7 faf5 	bl	80074b6 <_ZN6uavcan6Logger3logERKNS_8protocol5debug11LogMessage_ILi0EEE>
 800fecc:	4603      	mov	r3, r0
 800fece:	e000      	b.n	800fed2 <_ZN6uavcan6Logger3logIJEEEihPKcS3_DpT_+0x84>
        }
        return 0;
 800fed0:	2300      	movs	r3, #0
    catch (...)
    {
        return -ErrFailure;
    }
#endif
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE15getTransferTypeEv>:
    TransferType getTransferType()   const { return safeget<TransferType, &IncomingTransfer::getTransferType>(); }
 800feda:	b580      	push	{r7, lr}
 800fedc:	b082      	sub	sp, #8
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fdcf 	bl	8010a86 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>
 800fee8:	4603      	mov	r3, r0
 800feea:	4618      	mov	r0, r3
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEEC1Ev>:
    ServiceResponseDataStructure()
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b082      	sub	sp, #8
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
        : _enabled_(true)
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fdd6 	bl	8010aae <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EEC1Ev>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    { }
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EED1Ev>:
    ~ArrayImpl() { }
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f000 fdea 	bl	8010af8 <_ZN6uavcan16DynamicArrayBaseILj3EED1Ev>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4618      	mov	r0, r3
 800ff28:	3708      	adds	r7, #8
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol18GetTransportStats_9Response_ILi0EEEE17isResponseEnabledEv>:
    bool isResponseEnabled() const { return _enabled_; }
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS7_EENS_28ServiceResponseDataStructureISB_EEEEvRT_RT0_>:

    /**
     * Will raise a fatal error if either method pointer or object pointer are null.
     */
    template <typename Par1, typename Par2>
    void operator()(Par1& p1, Par2& p2)
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
    {
        validateBeforeCall();
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f000 fddb 	bl	8010b10 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEE18validateBeforeCallEv>
        (obj_->*fun_)(p1, p2);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	6892      	ldr	r2, [r2, #8]
 800ff62:	1052      	asrs	r2, r2, #1
 800ff64:	1898      	adds	r0, r3, r2
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	f003 0301 	and.w	r3, r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d102      	bne.n	800ff78 <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS7_EENS_28ServiceResponseDataStructureISB_EEEEvRT_RT0_+0x30>
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	e00a      	b.n	800ff8e <_ZN6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS7_EENS_28ServiceResponseDataStructureISB_EEEEvRT_RT0_+0x46>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	6892      	ldr	r2, [r2, #8]
 800ff80:	1052      	asrs	r2, r2, #1
 800ff82:	4413      	add	r3, r2
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	68fa      	ldr	r2, [r7, #12]
 800ff88:	6852      	ldr	r2, [r2, #4]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	68b9      	ldr	r1, [r7, #8]
 800ff92:	4798      	blx	r3
    }
 800ff94:	bf00      	nop
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE11getPriorityEv>:
    TransferPriority getPriority()   const { return safeget<TransferPriority, &IncomingTransfer::getPriority>(); }
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f000 fdc9 	bl	8010b3c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE12getSrcNodeIDEv>:
    NodeID getSrcNodeID()            const { return safeget<NodeID, &IncomingTransfer::getSrcNodeID>(); }
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 fdd6 	bl	8010b6e <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE13getTransferIDEv>:
    TransferID getTransferID()       const { return safeget<TransferID, &IncomingTransfer::getTransferID>(); }
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 fde3 	bl	8010ba0 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id, TransferID tid,
 800ffe4:	b590      	push	{r4, r7, lr}
 800ffe6:	b089      	sub	sp, #36	; 0x24
 800ffe8:	af02      	add	r7, sp, #8
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	713b      	strb	r3, [r7, #4]
 800fff0:	4613      	mov	r3, r2
 800fff2:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, &tid, blocking_deadline);
 800fff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fff6:	f107 0310 	add.w	r3, r7, #16
 800fffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fffe:	e883 0003 	stmia.w	r3, {r0, r1}
 8010002:	79fa      	ldrb	r2, [r7, #7]
 8010004:	f107 0310 	add.w	r3, r7, #16
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801000e:	9300      	str	r3, [sp, #0]
 8010010:	793b      	ldrb	r3, [r7, #4]
 8010012:	68b9      	ldr	r1, [r7, #8]
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f000 fdff 	bl	8010c18 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 801001a:	4604      	mov	r4, r0
 801001c:	f107 0310 	add.w	r3, r7, #16
 8010020:	4618      	mov	r0, r3
 8010022:	f7f6 f877 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8010026:	4623      	mov	r3, r4
    }
 8010028:	4618      	mov	r0, r3
 801002a:	371c      	adds	r7, #28
 801002c:	46bd      	mov	sp, r7
 801002e:	bd90      	pop	{r4, r7, pc}

08010030 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEED1Ev>:
class UAVCAN_EXPORT ReceivedDataStructure : public DataType_, Noncopyable
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7f5 fcdb 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>:
    struct ReceivedDataStructureSpec : public ReceivedDataStructure<DataStruct>
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4618      	mov	r0, r3
 8010054:	f7ff ffec 	bl	8010030 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEED1Ev>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	4618      	mov	r0, r3
 801005c:	3708      	adds	r7, #8
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>:
void GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::handleIncomingTransfer(IncomingTransfer& transfer)
 8010062:	b590      	push	{r4, r7, lr}
 8010064:	b089      	sub	sp, #36	; 0x24
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	6039      	str	r1, [r7, #0]
    ReceivedDataStructureSpec rx_struct(&transfer);
 801006c:	f107 0318 	add.w	r3, r7, #24
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	4618      	mov	r0, r3
 8010074:	f000 fe19 	bl	8010caa <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>
    BitStream bitstream(transfer);
 8010078:	683a      	ldr	r2, [r7, #0]
 801007a:	f107 030c 	add.w	r3, r7, #12
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f7f5 ff15 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 8010086:	f107 020c 	add.w	r2, r7, #12
 801008a:	f107 0308 	add.w	r3, r7, #8
 801008e:	4611      	mov	r1, r2
 8010090:	4618      	mov	r0, r3
 8010092:	f7f5 ff22 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int decode_res = DataStruct::decode(rx_struct, codec);
 8010096:	f107 0108 	add.w	r1, r7, #8
 801009a:	f107 0318 	add.w	r3, r7, #24
 801009e:	2201      	movs	r2, #1
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fe11 	bl	8010cc8 <_ZN6uavcan8protocol18GetTransportStats_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80100a6:	61f8      	str	r0, [r7, #28]
    transfer.release();
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	3310      	adds	r3, #16
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	6838      	ldr	r0, [r7, #0]
 80100b2:	4798      	blx	r3
    if (decode_res <= 0)
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	dc13      	bgt.n	80100e2 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x80>
        failure_count_++;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	1c5a      	adds	r2, r3, #1
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	609a      	str	r2, [r3, #8]
        node_.getDispatcher().getTransferPerfCounter().addError();
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7f6 fc3b 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 80100ce:	4603      	mov	r3, r0
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7f6 fb06 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 80100d6:	4603      	mov	r3, r0
 80100d8:	4618      	mov	r0, r3
 80100da:	f7f5 ff6a 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
 80100de:	2400      	movs	r4, #0
        return;
 80100e0:	e009      	b.n	80100f6 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x94>
    handleReceivedDataStruct(rx_struct);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	3308      	adds	r3, #8
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f107 0218 	add.w	r2, r7, #24
 80100ee:	4611      	mov	r1, r2
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	4798      	blx	r3
 80100f4:	2401      	movs	r4, #1
 80100f6:	f107 0318 	add.w	r3, r7, #24
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7ff ffa4 	bl	8010048 <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>
 8010100:	2c01      	cmp	r4, #1
    ReceivedDataStructureSpec rx_struct(&transfer);
 8010102:	bf00      	nop
}
 8010104:	3724      	adds	r7, #36	; 0x24
 8010106:	46bd      	mov	sp, r7
 8010108:	bd90      	pop	{r4, r7, pc}

0801010a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE15getTransferTypeEv>:
    TransferType getTransferType()   const { return safeget<TransferType, &IncomingTransfer::getTransferType>(); }
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 fde8 	bl	8010ce8 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>
 8010118:	4603      	mov	r3, r0
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol12RestartNode_9Response_ILi0EEEEC1Ev>:
    ServiceResponseDataStructure()
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
        : _enabled_(true)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fdef 	bl	8010d10 <_ZN6uavcan8protocol12RestartNode_9Response_ILi0EEC1Ev>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	705a      	strb	r2, [r3, #1]
    { }
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol12RestartNode_9Response_ILi0EEEE17isResponseEnabledEv>:
    bool isResponseEnabled() const { return _enabled_; }
 8010142:	b480      	push	{r7}
 8010144:	b083      	sub	sp, #12
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	785b      	ldrb	r3, [r3, #1]
 801014e:	4618      	mov	r0, r3
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEclIS9_NS_28ServiceResponseDataStructureISD_EEEEvRT_RT0_>:
    void operator()(Par1& p1, Par2& p2)
 801015a:	b580      	push	{r7, lr}
 801015c:	b084      	sub	sp, #16
 801015e:	af00      	add	r7, sp, #0
 8010160:	60f8      	str	r0, [r7, #12]
 8010162:	60b9      	str	r1, [r7, #8]
 8010164:	607a      	str	r2, [r7, #4]
        validateBeforeCall();
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f000 fde0 	bl	8010d2c <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEE18validateBeforeCallEv>
        (obj_->*fun_)(p1, p2);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	6892      	ldr	r2, [r2, #8]
 8010174:	1052      	asrs	r2, r2, #1
 8010176:	1898      	adds	r0, r3, r2
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	f003 0301 	and.w	r3, r3, #1
 8010180:	2b00      	cmp	r3, #0
 8010182:	d102      	bne.n	801018a <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEclIS9_NS_28ServiceResponseDataStructureISD_EEEEvRT_RT0_+0x30>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	e00a      	b.n	80101a0 <_ZN6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEclIS9_NS_28ServiceResponseDataStructureISD_EEEEvRT_RT0_+0x46>
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	6892      	ldr	r2, [r2, #8]
 8010192:	1052      	asrs	r2, r2, #1
 8010194:	4413      	add	r3, r2
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	6852      	ldr	r2, [r2, #4]
 801019c:	4413      	add	r3, r2
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	4798      	blx	r3
    }
 80101a6:	bf00      	nop
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE11getPriorityEv>:
    TransferPriority getPriority()   const { return safeget<TransferPriority, &IncomingTransfer::getPriority>(); }
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fdce 	bl	8010d58 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>
 80101bc:	4603      	mov	r3, r0
 80101be:	4618      	mov	r0, r3
 80101c0:	3708      	adds	r7, #8
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}

080101c6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE13getTransferIDEv>:
    TransferID getTransferID()       const { return safeget<TransferID, &IncomingTransfer::getTransferID>(); }
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b082      	sub	sp, #8
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 fddb 	bl	8010d8a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>
 80101d4:	4603      	mov	r3, r0
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}

080101de <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id, TransferID tid,
 80101de:	b590      	push	{r4, r7, lr}
 80101e0:	b089      	sub	sp, #36	; 0x24
 80101e2:	af02      	add	r7, sp, #8
 80101e4:	60f8      	str	r0, [r7, #12]
 80101e6:	60b9      	str	r1, [r7, #8]
 80101e8:	713b      	strb	r3, [r7, #4]
 80101ea:	4613      	mov	r3, r2
 80101ec:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, &tid, blocking_deadline);
 80101ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101f0:	f107 0310 	add.w	r3, r7, #16
 80101f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80101fc:	79fa      	ldrb	r2, [r7, #7]
 80101fe:	f107 0310 	add.w	r3, r7, #16
 8010202:	9301      	str	r3, [sp, #4]
 8010204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	793b      	ldrb	r3, [r7, #4]
 801020c:	68b9      	ldr	r1, [r7, #8]
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 fdf6 	bl	8010e00 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8010214:	4604      	mov	r4, r0
 8010216:	f107 0310 	add.w	r3, r7, #16
 801021a:	4618      	mov	r0, r3
 801021c:	f7f5 ff7a 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8010220:	4623      	mov	r3, r4
    }
 8010222:	4618      	mov	r0, r3
 8010224:	371c      	adds	r7, #28
 8010226:	46bd      	mov	sp, r7
 8010228:	bd90      	pop	{r4, r7, pc}

0801022a <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEED1Ev>:
class UAVCAN_EXPORT ReceivedDataStructure : public DataType_, Noncopyable
 801022a:	b580      	push	{r7, lr}
 801022c:	b082      	sub	sp, #8
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7f5 fbde 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>:
    struct ReceivedDataStructureSpec : public ReceivedDataStructure<DataStruct>
 8010242:	b580      	push	{r7, lr}
 8010244:	b082      	sub	sp, #8
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4618      	mov	r0, r3
 801024e:	f7ff ffec 	bl	801022a <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEED1Ev>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>:
void GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::handleIncomingTransfer(IncomingTransfer& transfer)
 801025c:	b590      	push	{r4, r7, lr}
 801025e:	b08d      	sub	sp, #52	; 0x34
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
    ReceivedDataStructureSpec rx_struct(&transfer);
 8010266:	f107 0318 	add.w	r3, r7, #24
 801026a:	6839      	ldr	r1, [r7, #0]
 801026c:	4618      	mov	r0, r3
 801026e:	f000 fe0e 	bl	8010e8e <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>
    BitStream bitstream(transfer);
 8010272:	683a      	ldr	r2, [r7, #0]
 8010274:	f107 030c 	add.w	r3, r7, #12
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f7f5 fe18 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 8010280:	f107 020c 	add.w	r2, r7, #12
 8010284:	f107 0308 	add.w	r3, r7, #8
 8010288:	4611      	mov	r1, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f7f5 fe25 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int decode_res = DataStruct::decode(rx_struct, codec);
 8010290:	f107 0108 	add.w	r1, r7, #8
 8010294:	f107 0318 	add.w	r3, r7, #24
 8010298:	2201      	movs	r2, #1
 801029a:	4618      	mov	r0, r3
 801029c:	f000 fe06 	bl	8010eac <_ZN6uavcan8protocol12RestartNode_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80102a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    transfer.release();
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	3310      	adds	r3, #16
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	6838      	ldr	r0, [r7, #0]
 80102ac:	4798      	blx	r3
    if (decode_res <= 0)
 80102ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	dc13      	bgt.n	80102dc <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x80>
        failure_count_++;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	1c5a      	adds	r2, r3, #1
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	609a      	str	r2, [r3, #8]
        node_.getDispatcher().getTransferPerfCounter().addError();
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7f6 fb3e 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 80102c8:	4603      	mov	r3, r0
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7f6 fa09 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 80102d0:	4603      	mov	r3, r0
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7f5 fe6d 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
 80102d8:	2400      	movs	r4, #0
        return;
 80102da:	e009      	b.n	80102f0 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x94>
    handleReceivedDataStruct(rx_struct);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3308      	adds	r3, #8
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f107 0218 	add.w	r2, r7, #24
 80102e8:	4611      	mov	r1, r2
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	4798      	blx	r3
 80102ee:	2401      	movs	r4, #1
 80102f0:	f107 0318 	add.w	r3, r7, #24
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff ffa4 	bl	8010242 <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>
 80102fa:	2c01      	cmp	r4, #1
    ReceivedDataStructureSpec rx_struct(&transfer);
 80102fc:	bf00      	nop
}
 80102fe:	3734      	adds	r7, #52	; 0x34
 8010300:	46bd      	mov	sp, r7
 8010302:	bd90      	pop	{r4, r7, pc}

08010304 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE15getTransferTypeEv>:
    TransferType getTransferType()   const { return safeget<TransferType, &IncomingTransfer::getTransferType>(); }
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fde2 	bl	8010ed6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>
 8010312:	4603      	mov	r3, r0
 8010314:	4618      	mov	r0, r3
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEEC1Ev>:
    ServiceResponseDataStructure()
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
        : _enabled_(true)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4618      	mov	r0, r3
 8010328:	f000 fde9 	bl	8010efe <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EEC1Ev>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2201      	movs	r2, #1
 8010330:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    { }
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol16GetDataTypeInfo_9Response_ILi0EEEE17isResponseEnabledEv>:
    bool isResponseEnabled() const { return _enabled_; }
 801033e:	b480      	push	{r7}
 8010340:	b083      	sub	sp, #12
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 801034c:	4618      	mov	r0, r3
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_>:
    void operator()(Par1& p1, Par2& p2)
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	607a      	str	r2, [r7, #4]
        validateBeforeCall();
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f000 fded 	bl	8010f44 <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv>
        (obj_->*fun_)(p1, p2);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	6892      	ldr	r2, [r2, #8]
 8010372:	1052      	asrs	r2, r2, #1
 8010374:	1898      	adds	r0, r3, r2
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	f003 0301 	and.w	r3, r3, #1
 801037e:	2b00      	cmp	r3, #0
 8010380:	d102      	bne.n	8010388 <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_+0x30>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	e00a      	b.n	801039e <_ZN6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_+0x46>
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	6892      	ldr	r2, [r2, #8]
 8010390:	1052      	asrs	r2, r2, #1
 8010392:	4413      	add	r3, r2
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	6852      	ldr	r2, [r2, #4]
 801039a:	4413      	add	r3, r2
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68b9      	ldr	r1, [r7, #8]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	4798      	blx	r3
    }
 80103a4:	bf00      	nop
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE11getPriorityEv>:
    TransferPriority getPriority()   const { return safeget<TransferPriority, &IncomingTransfer::getPriority>(); }
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 fddb 	bl	8010f70 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>
 80103ba:	4603      	mov	r3, r0
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE12getSrcNodeIDEv>:
    NodeID getSrcNodeID()            const { return safeget<NodeID, &IncomingTransfer::getSrcNodeID>(); }
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f000 fde8 	bl	8010fa2 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>
 80103d2:	4603      	mov	r3, r0
 80103d4:	4618      	mov	r0, r3
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE13getTransferIDEv>:
    TransferID getTransferID()       const { return safeget<TransferID, &IncomingTransfer::getTransferID>(); }
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 fdf5 	bl	8010fd4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4618      	mov	r0, r3
 80103ee:	3708      	adds	r7, #8
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id, TransferID tid,
 80103f4:	b590      	push	{r4, r7, lr}
 80103f6:	b089      	sub	sp, #36	; 0x24
 80103f8:	af02      	add	r7, sp, #8
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	713b      	strb	r3, [r7, #4]
 8010400:	4613      	mov	r3, r2
 8010402:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, &tid, blocking_deadline);
 8010404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010406:	f107 0310 	add.w	r3, r7, #16
 801040a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801040e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010412:	79fa      	ldrb	r2, [r7, #7]
 8010414:	f107 0310 	add.w	r3, r7, #16
 8010418:	9301      	str	r3, [sp, #4]
 801041a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	793b      	ldrb	r3, [r7, #4]
 8010422:	68b9      	ldr	r1, [r7, #8]
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f000 fe11 	bl	801104c <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 801042a:	4604      	mov	r4, r0
 801042c:	f107 0310 	add.w	r3, r7, #16
 8010430:	4618      	mov	r0, r3
 8010432:	f7f5 fe6f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8010436:	4623      	mov	r3, r4
    }
 8010438:	4618      	mov	r0, r3
 801043a:	371c      	adds	r7, #28
 801043c:	46bd      	mov	sp, r7
 801043e:	bd90      	pop	{r4, r7, pc}

08010440 <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EED1Ev>:
    struct Request_
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	3303      	adds	r3, #3
 801044c:	4618      	mov	r0, r3
 801044e:	f7f6 fce9 	bl	8006e24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EED1Ev>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEED1Ev>:
class UAVCAN_EXPORT ReceivedDataStructure : public DataType_, Noncopyable
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f7f5 fac5 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff ffe7 	bl	8010440 <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EED1Ev>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>:
    struct ReceivedDataStructureSpec : public ReceivedDataStructure<DataStruct>
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff ffe8 	bl	801045c <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEED1Ev>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4618      	mov	r0, r3
 8010490:	3708      	adds	r7, #8
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>:
void GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::handleIncomingTransfer(IncomingTransfer& transfer)
 8010496:	b590      	push	{r4, r7, lr}
 8010498:	b09f      	sub	sp, #124	; 0x7c
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
 801049e:	6039      	str	r1, [r7, #0]
    ReceivedDataStructureSpec rx_struct(&transfer);
 80104a0:	f107 0318 	add.w	r3, r7, #24
 80104a4:	6839      	ldr	r1, [r7, #0]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f000 fe1f 	bl	80110ea <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>
    BitStream bitstream(transfer);
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	f107 030c 	add.w	r3, r7, #12
 80104b2:	4611      	mov	r1, r2
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7f5 fcfb 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 80104ba:	f107 020c 	add.w	r2, r7, #12
 80104be:	f107 0308 	add.w	r3, r7, #8
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7f5 fd08 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int decode_res = DataStruct::decode(rx_struct, codec);
 80104ca:	f107 0108 	add.w	r1, r7, #8
 80104ce:	f107 0318 	add.w	r3, r7, #24
 80104d2:	2201      	movs	r2, #1
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 fe17 	bl	8011108 <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80104da:	6778      	str	r0, [r7, #116]	; 0x74
    transfer.release();
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3310      	adds	r3, #16
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	6838      	ldr	r0, [r7, #0]
 80104e6:	4798      	blx	r3
    if (decode_res <= 0)
 80104e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	dc13      	bgt.n	8010516 <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x80>
        failure_count_++;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	1c5a      	adds	r2, r3, #1
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	609a      	str	r2, [r3, #8]
        node_.getDispatcher().getTransferPerfCounter().addError();
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7f6 fa21 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8010502:	4603      	mov	r3, r0
 8010504:	4618      	mov	r0, r3
 8010506:	f7f6 f8ec 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 801050a:	4603      	mov	r3, r0
 801050c:	4618      	mov	r0, r3
 801050e:	f7f5 fd50 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
 8010512:	2400      	movs	r4, #0
        return;
 8010514:	e009      	b.n	801052a <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x94>
    handleReceivedDataStruct(rx_struct);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	3308      	adds	r3, #8
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f107 0218 	add.w	r2, r7, #24
 8010522:	4611      	mov	r1, r2
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	4798      	blx	r3
 8010528:	2401      	movs	r4, #1
 801052a:	f107 0318 	add.w	r3, r7, #24
 801052e:	4618      	mov	r0, r3
 8010530:	f7ff ffa4 	bl	801047c <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>
 8010534:	2c01      	cmp	r4, #1
    ReceivedDataStructureSpec rx_struct(&transfer);
 8010536:	bf00      	nop
}
 8010538:	377c      	adds	r7, #124	; 0x7c
 801053a:	46bd      	mov	sp, r7
 801053c:	bd90      	pop	{r4, r7, pc}

0801053e <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE15getTransferTypeEv>:
    TransferType getTransferType()   const { return safeget<TransferType, &IncomingTransfer::getTransferType>(); }
 801053e:	b580      	push	{r7, lr}
 8010540:	b082      	sub	sp, #8
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fe0d 	bl	8011166 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>
 801054c:	4603      	mov	r3, r0
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <_ZN6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEEC1Ev>:
    ServiceResponseDataStructure()
 8010556:	b580      	push	{r7, lr}
 8010558:	b082      	sub	sp, #8
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
        : _enabled_(true)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	f7f8 fbdd 	bl	8008d20 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EEC1Ev>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2201      	movs	r2, #1
 801056a:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
    { }
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPNS_18NodeStatusProviderEMS2_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEEET_RKT0_RKSG_>:
To coerceOrFallback(const From& from, const To& default_)
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 8010582:	461a      	mov	r2, r3
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 fe01 	bl	801118e <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPNS_18NodeStatusProviderEMS2_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEbE4implERKSF_RKbNS_11BooleanTypeILb1EEE>
 801058c:	4603      	mov	r3, r0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <_ZNK6uavcan28ServiceResponseDataStructureINS_8protocol12GetNodeInfo_9Response_ILi0EEEE17isResponseEnabledEv>:
    bool isResponseEnabled() const { return _enabled_; }
 8010596:	b480      	push	{r7}
 8010598:	b083      	sub	sp, #12
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 80105a4:	4618      	mov	r0, r3
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_>:
    void operator()(Par1& p1, Par2& p2)
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
        validateBeforeCall();
 80105bc:	68f8      	ldr	r0, [r7, #12]
 80105be:	f000 fdf5 	bl	80111ac <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv>
        (obj_->*fun_)(p1, p2);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	6892      	ldr	r2, [r2, #8]
 80105ca:	1052      	asrs	r2, r2, #1
 80105cc:	1898      	adds	r0, r3, r2
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	f003 0301 	and.w	r3, r3, #1
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d102      	bne.n	80105e0 <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_+0x30>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	e00a      	b.n	80105f6 <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEclINS_21ReceivedDataStructureIS6_EENS_28ServiceResponseDataStructureISA_EEEEvRT_RT0_+0x46>
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	68fa      	ldr	r2, [r7, #12]
 80105e6:	6892      	ldr	r2, [r2, #8]
 80105e8:	1052      	asrs	r2, r2, #1
 80105ea:	4413      	add	r3, r2
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	68fa      	ldr	r2, [r7, #12]
 80105f0:	6852      	ldr	r2, [r2, #4]
 80105f2:	4413      	add	r3, r2
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	68b9      	ldr	r1, [r7, #8]
 80105fa:	4798      	blx	r3
    }
 80105fc:	bf00      	nop
 80105fe:	3710      	adds	r7, #16
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE11getPriorityEv>:
    TransferPriority getPriority()   const { return safeget<TransferPriority, &IncomingTransfer::getPriority>(); }
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fde3 	bl	80111d8 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>
 8010612:	4603      	mov	r3, r0
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE12getSrcNodeIDEv>:
    NodeID getSrcNodeID()            const { return safeget<NodeID, &IncomingTransfer::getSrcNodeID>(); }
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 fdf0 	bl	801120a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>
 801062a:	4603      	mov	r3, r0
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE13getTransferIDEv>:
    TransferID getTransferID()       const { return safeget<TransferID, &IncomingTransfer::getTransferID>(); }
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 fdfd 	bl	801123c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>
 8010642:	4603      	mov	r3, r0
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE7publishERKS4_NS_12TransferTypeENS_6NodeIDENS_10TransferIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id, TransferID tid,
 801064c:	b590      	push	{r4, r7, lr}
 801064e:	b089      	sub	sp, #36	; 0x24
 8010650:	af02      	add	r7, sp, #8
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	713b      	strb	r3, [r7, #4]
 8010658:	4613      	mov	r3, r2
 801065a:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, &tid, blocking_deadline);
 801065c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801065e:	f107 0310 	add.w	r3, r7, #16
 8010662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010666:	e883 0003 	stmia.w	r3, {r0, r1}
 801066a:	79fa      	ldrb	r2, [r7, #7]
 801066c:	f107 0310 	add.w	r3, r7, #16
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	793b      	ldrb	r3, [r7, #4]
 801067a:	68b9      	ldr	r1, [r7, #8]
 801067c:	68f8      	ldr	r0, [r7, #12]
 801067e:	f000 fe1a 	bl	80112b6 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8010682:	4604      	mov	r4, r0
 8010684:	f107 0310 	add.w	r3, r7, #16
 8010688:	4618      	mov	r0, r3
 801068a:	f7f5 fd43 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801068e:	4623      	mov	r3, r4
    }
 8010690:	4618      	mov	r0, r3
 8010692:	371c      	adds	r7, #28
 8010694:	46bd      	mov	sp, r7
 8010696:	bd90      	pop	{r4, r7, pc}

08010698 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>:
    Ret safeget() const
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d101      	bne.n	80106ae <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x16>
            return Ret();
 80106aa:	2300      	movs	r3, #0
 80106ac:	e006      	b.n	80106bc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x24>
        return (_transfer_->*Fun)();
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f5 fe28 	bl	800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>
 80106ba:	4603      	mov	r3, r0
    }
 80106bc:	4618      	mov	r0, r3
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>:
    Ret safeget() const
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d106      	bne.n	80106e4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x20>
            return Ret();
 80106d6:	f107 030c 	add.w	r3, r7, #12
 80106da:	4618      	mov	r0, r3
 80106dc:	f7f5 fa36 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 80106e0:	7b3b      	ldrb	r3, [r7, #12]
 80106e2:	e006      	b.n	80106f2 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x2e>
        return (_transfer_->*Fun)();
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f5 fe25 	bl	800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>
 80106f0:	4603      	mov	r3, r0
    }
 80106f2:	4618      	mov	r0, r3
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>:
    Ret safeget() const
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010708:	2b00      	cmp	r3, #0
 801070a:	d106      	bne.n	801071a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x20>
            return Ret();
 801070c:	f107 030c 	add.w	r3, r7, #12
 8010710:	4618      	mov	r0, r3
 8010712:	f7f5 f9db 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8010716:	7b3b      	ldrb	r3, [r7, #12]
 8010718:	e006      	b.n	8010728 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x2e>
        return (_transfer_->*Fun)();
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010720:	4618      	mov	r0, r3
 8010722:	f7f5 fdfe 	bl	8006322 <_ZNK6uavcan16IncomingTransfer13getTransferIDEv>
 8010726:	4603      	mov	r3, r0
    }
 8010728:	4618      	mov	r0, r3
 801072a:	3710      	adds	r7, #16
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <_ZNKSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEclES7_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8010730:	b5b0      	push	{r4, r5, r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4618      	mov	r0, r3
 801073e:	f7f6 fab4 	bl	8006caa <_ZNKSt14_Function_base8_M_emptyEv>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <_ZNKSt8functionIFvRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEEclES7_+0x1c>
	__throw_bad_function_call();
 8010748:	f00f ff15 	bl	8020576 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	68dc      	ldr	r4, [r3, #12]
 8010750:	687d      	ldr	r5, [r7, #4]
 8010752:	6838      	ldr	r0, [r7, #0]
 8010754:	f7fb f894 	bl	800b880 <_ZSt7forwardIRKN6uavcan17ServiceCallResultINS0_8protocol4file20BeginFirmwareUpdate_EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8010758:	4603      	mov	r3, r0
 801075a:	4619      	mov	r1, r3
 801075c:	4628      	mov	r0, r5
 801075e:	47a0      	blx	r4
 8010760:	bf00      	nop
    }
 8010762:	3708      	adds	r7, #8
 8010764:	46bd      	mov	sp, r7
 8010766:	bdb0      	pop	{r4, r5, r7, pc}

08010768 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_>:
T* Multiset<T>::find(Predicate predicate)
 8010768:	b580      	push	{r7, lr}
 801076a:	b086      	sub	sp, #24
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	8039      	strh	r1, [r7, #0]
    Chunk* p = list_.get();
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	3304      	adds	r3, #4
 8010776:	4618      	mov	r0, r3
 8010778:	f7fd f8b8 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 801077c:	6178      	str	r0, [r7, #20]
    while (p != UAVCAN_NULLPTR)
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d039      	beq.n	80107f8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x90>
        Chunk* const next_chunk = p->getNextListNode(); // For the case if the current entry gets modified
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	4618      	mov	r0, r3
 8010788:	f7fd f8bc 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 801078c:	60f8      	str	r0, [r7, #12]
        for (int i = 0; i < Chunk::NumItems; i++)
 801078e:	2300      	movs	r3, #0
 8010790:	613b      	str	r3, [r7, #16]
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	2b00      	cmp	r3, #0
 8010796:	dc2c      	bgt.n	80107f2 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x8a>
            if (p->items[i].isConstructed())
 8010798:	693a      	ldr	r2, [r7, #16]
 801079a:	4613      	mov	r3, r2
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	4413      	add	r3, r2
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	3308      	adds	r3, #8
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	4413      	add	r3, r2
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fd f8b7 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d01a      	beq.n	80107ea <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x82>
                if (predicate(*p->items[i].ptr))
 80107b4:	6979      	ldr	r1, [r7, #20]
 80107b6:	693a      	ldr	r2, [r7, #16]
 80107b8:	4613      	mov	r3, r2
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4413      	add	r3, r2
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	440b      	add	r3, r1
 80107c2:	3308      	adds	r3, #8
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	463b      	mov	r3, r7
 80107c8:	4611      	mov	r1, r2
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7f7 f917 	bl	80079fe <_ZNK6uavcan17ServiceClientBase26CallStateMatchingPredicateclERKNS0_9CallStateE>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d009      	beq.n	80107ea <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x82>
                    return p->items[i].ptr;
 80107d6:	6979      	ldr	r1, [r7, #20]
 80107d8:	693a      	ldr	r2, [r7, #16]
 80107da:	4613      	mov	r3, r2
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	4413      	add	r3, r2
 80107e0:	00db      	lsls	r3, r3, #3
 80107e2:	440b      	add	r3, r1
 80107e4:	3308      	adds	r3, #8
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	e007      	b.n	80107fa <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x92>
        for (int i = 0; i < Chunk::NumItems; i++)
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	3301      	adds	r3, #1
 80107ee:	613b      	str	r3, [r7, #16]
 80107f0:	e7cf      	b.n	8010792 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x2a>
        p = next_chunk;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	617b      	str	r3, [r7, #20]
    while (p != UAVCAN_NULLPTR)
 80107f6:	e7c2      	b.n	801077e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findINS1_26CallStateMatchingPredicateEEEPS2_T_+0x16>
    return UAVCAN_NULLPTR;
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3718      	adds	r7, #24
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEEC1ESI_>:
        OperatorToFalsePredicateAdapter(Operator o)
 8010802:	b580      	push	{r7, lr}
 8010804:	b082      	sub	sp, #8
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
            : oper(o)
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7f5 f8e6 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	683a      	ldr	r2, [r7, #0]
 8010816:	601a      	str	r2, [r3, #0]
        { }
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_>:
T* Multiset<T>::find(Predicate predicate)
 8010822:	b580      	push	{r7, lr}
 8010824:	b086      	sub	sp, #24
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	6039      	str	r1, [r7, #0]
    Chunk* p = list_.get();
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3304      	adds	r3, #4
 8010830:	4618      	mov	r0, r3
 8010832:	f7fd f85b 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 8010836:	6178      	str	r0, [r7, #20]
    while (p != UAVCAN_NULLPTR)
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d038      	beq.n	80108b0 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x8e>
        Chunk* const next_chunk = p->getNextListNode(); // For the case if the current entry gets modified
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd f85f 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 8010846:	60f8      	str	r0, [r7, #12]
        for (int i = 0; i < Chunk::NumItems; i++)
 8010848:	2300      	movs	r3, #0
 801084a:	613b      	str	r3, [r7, #16]
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	2b00      	cmp	r3, #0
 8010850:	dc2b      	bgt.n	80108aa <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x88>
            if (p->items[i].isConstructed())
 8010852:	693a      	ldr	r2, [r7, #16]
 8010854:	4613      	mov	r3, r2
 8010856:	009b      	lsls	r3, r3, #2
 8010858:	4413      	add	r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	3308      	adds	r3, #8
 801085e:	697a      	ldr	r2, [r7, #20]
 8010860:	4413      	add	r3, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd f85a 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d019      	beq.n	80108a2 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x80>
                if (predicate(*p->items[i].ptr))
 801086e:	6979      	ldr	r1, [r7, #20]
 8010870:	693a      	ldr	r2, [r7, #16]
 8010872:	4613      	mov	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	440b      	add	r3, r1
 801087c:	3308      	adds	r3, #8
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4619      	mov	r1, r3
 8010882:	6838      	ldr	r0, [r7, #0]
 8010884:	f000 fd78 	bl	8011378 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEEclERS2_>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d009      	beq.n	80108a2 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x80>
                    return p->items[i].ptr;
 801088e:	6979      	ldr	r1, [r7, #20]
 8010890:	693a      	ldr	r2, [r7, #16]
 8010892:	4613      	mov	r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	4413      	add	r3, r2
 8010898:	00db      	lsls	r3, r3, #3
 801089a:	440b      	add	r3, r1
 801089c:	3308      	adds	r3, #8
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	e007      	b.n	80108b2 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x90>
        for (int i = 0; i < Chunk::NumItems; i++)
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	3301      	adds	r3, #1
 80108a6:	613b      	str	r3, [r7, #16]
 80108a8:	e7d0      	b.n	801084c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x2a>
        p = next_chunk;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	617b      	str	r3, [r7, #20]
    while (p != UAVCAN_NULLPTR)
 80108ae:	e7c3      	b.n	8010838 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4findIRNS3_31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS9_EEEEE21TimeoutCallbackCallerEEEEEPS2_T_+0x16>
    return UAVCAN_NULLPTR;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3718      	adds	r7, #24
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE>:
void Multiset<T>::removeWhere(Predicate predicate, const RemoveStrategy strategy)
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b08a      	sub	sp, #40	; 0x28
 80108be:	af00      	add	r7, sp, #0
 80108c0:	60f8      	str	r0, [r7, #12]
 80108c2:	60b9      	str	r1, [r7, #8]
 80108c4:	4613      	mov	r3, r2
 80108c6:	71fb      	strb	r3, [r7, #7]
    unsigned num_removed = 0;
 80108c8:	2300      	movs	r3, #0
 80108ca:	627b      	str	r3, [r7, #36]	; 0x24
    Chunk* p = list_.get();
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	3304      	adds	r3, #4
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fd f80b 	bl	800d8ec <_ZNK6uavcan14LinkedListRootINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE3getEv>
 80108d6:	6238      	str	r0, [r7, #32]
    while (p != UAVCAN_NULLPTR)
 80108d8:	6a3b      	ldr	r3, [r7, #32]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d038      	beq.n	8010950 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x96>
        Chunk* const next_chunk = p->getNextListNode(); // For the case if the current entry gets modified
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fd f80f 	bl	800d904 <_ZNK6uavcan14LinkedListNodeINS_8MultisetINS_17ServiceClientBase9CallStateEE5ChunkEE15getNextListNodeEv>
 80108e6:	61b8      	str	r0, [r7, #24]
        if ((num_removed > 0) && (strategy == RemoveOne))
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d002      	beq.n	80108f4 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x3a>
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d02c      	beq.n	801094e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x94>
        for (int i = 0; i < Chunk::NumItems; i++)
 80108f4:	2300      	movs	r3, #0
 80108f6:	61fb      	str	r3, [r7, #28]
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dc24      	bgt.n	8010948 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x8e>
            Item& item = p->items[i];
 80108fe:	69fa      	ldr	r2, [r7, #28]
 8010900:	4613      	mov	r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	4413      	add	r3, r2
 8010906:	00db      	lsls	r3, r3, #3
 8010908:	3308      	adds	r3, #8
 801090a:	6a3a      	ldr	r2, [r7, #32]
 801090c:	4413      	add	r3, r2
 801090e:	617b      	str	r3, [r7, #20]
            if (item.isConstructed())
 8010910:	6978      	ldr	r0, [r7, #20]
 8010912:	f7fd f803 	bl	800d91c <_ZNK6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item13isConstructedEv>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d010      	beq.n	801093e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x84>
                if (predicate(*item.ptr))
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	4610      	mov	r0, r2
 8010924:	4798      	blx	r3
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d008      	beq.n	801093e <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x84>
                    num_removed++;
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	3301      	adds	r3, #1
 8010930:	627b      	str	r3, [r7, #36]	; 0x24
                    item.destroy();
 8010932:	6978      	ldr	r0, [r7, #20]
 8010934:	f7fd f996 	bl	800dc64 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE4Item7destroyEv>
                    if (strategy == RemoveOne)
 8010938:	79fb      	ldrb	r3, [r7, #7]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d003      	beq.n	8010946 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x8c>
        for (int i = 0; i < Chunk::NumItems; i++)
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	3301      	adds	r3, #1
 8010942:	61fb      	str	r3, [r7, #28]
 8010944:	e7d8      	b.n	80108f8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x3e>
                        break;
 8010946:	bf00      	nop
        p = next_chunk;
 8010948:	69bb      	ldr	r3, [r7, #24]
 801094a:	623b      	str	r3, [r7, #32]
    while (p != UAVCAN_NULLPTR)
 801094c:	e7c4      	b.n	80108d8 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0x1e>
            break;
 801094e:	bf00      	nop
    if (num_removed > 0)
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	2b00      	cmp	r3, #0
 8010954:	d002      	beq.n	801095c <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE11removeWhereIPFbRKS2_EEEvT_NS3_14RemoveStrategyE+0xa2>
        compact();
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	f7fd f9a5 	bl	800dca6 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE7compactEv>
}
 801095c:	bf00      	nop
 801095e:	3728      	adds	r7, #40	; 0x28
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>:
        ReceivedDataStructureSpec(const IncomingTransfer* arg_transfer) :
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
            ReceivedDataStructure<DataStruct>(arg_transfer)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	4618      	mov	r0, r3
 8010974:	f000 fd10 	bl	8011398 <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1EPKNS_16IncomingTransferE>
        { }
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EED1Ev>:
 8010982:	b580      	push	{r7, lr}
 8010984:	b082      	sub	sp, #8
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fd27 	bl	80113e0 <_ZN6uavcan16DynamicArrayBaseILj127EED1Ev>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EE6decodeERS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int BeginFirmwareUpdate_::Response_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
 801099c:	b580      	push	{r7, lr}
 801099e:	b086      	sub	sp, #24
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	4613      	mov	r3, r2
 80109a8:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 80109aa:	2301      	movs	r3, #1
 80109ac:	617b      	str	r3, [r7, #20]
    res = FieldTypes::error::decode(self.error, codec,  ::uavcan::TailArrayOptDisabled);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2200      	movs	r2, #0
 80109b2:	68b9      	ldr	r1, [r7, #8]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f000 fd1e 	bl	80113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80109ba:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	dc01      	bgt.n	80109c6 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EE6decodeERS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2a>
        return res;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	e008      	b.n	80109d8 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EE6decodeERS4_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x3c>
    res = FieldTypes::optional_error_message::decode(self.optional_error_message, codec,  tao_mode);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	3301      	adds	r3, #1
 80109ca:	79fa      	ldrb	r2, [r7, #7]
 80109cc:	68b9      	ldr	r1, [r7, #8]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f000 fd23 	bl	801141a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6decodeERS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80109d4:	6178      	str	r0, [r7, #20]
    return res;
 80109d6:	697b      	ldr	r3, [r7, #20]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEaSEPKc>:
    SelfType& operator=(const char* chr)
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
        StaticAssert<Base::IsStringLike>::check();
 80109ea:	f7f4 fff1 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<IsDynamic>::check();
 80109ee:	f7f4 ffef 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        Base::clear();
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f000 fd22 	bl	801143e <_ZN6uavcan16DynamicArrayBaseILj31EE5clearEv>
        if (chr == UAVCAN_NULLPTR)
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d102      	bne.n	8010a06 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEaSEPKc+0x26>
            handleFatalError("Array::operator=(const char*)");
 8010a00:	480b      	ldr	r0, [pc, #44]	; (8010a30 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEaSEPKc+0x50>)
 8010a02:	f00d fabd 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
        while (*chr)
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00b      	beq.n	8010a26 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEaSEPKc+0x46>
            push_back(ValueType(*chr++));  // Value type is likely to be unsigned char, so conversion may be required.
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	1c5a      	adds	r2, r3, #1
 8010a12:	603a      	str	r2, [r7, #0]
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	73fb      	strb	r3, [r7, #15]
 8010a18:	f107 030f 	add.w	r3, r7, #15
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fd1a 	bl	8011458 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE9push_backERKh>
        while (*chr)
 8010a24:	e7ef      	b.n	8010a06 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EEaSEPKc+0x26>
        return *this;
 8010a26:	687b      	ldr	r3, [r7, #4]
    }
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3710      	adds	r7, #16
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08021fb0 	.word	0x08021fb0

08010a34 <_ZN6uavcan16DynamicArrayBaseILj90EE5clearEv>:
    void clear() { size_ = 0; }
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	701a      	strb	r2, [r3, #0]
 8010a42:	bf00      	nop
 8010a44:	370c      	adds	r7, #12
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr

08010a4e <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEEC1ERS7_>:
    }

public:
    typedef ArrayType_ ArrayType;

    explicit CharArrayFormatter(ArrayType& array)
 8010a4e:	b480      	push	{r7}
 8010a50:	b083      	sub	sp, #12
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
 8010a56:	6039      	str	r1, [r7, #0]
        : array_(array)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	683a      	ldr	r2, [r7, #0]
 8010a5c:	601a      	str	r2, [r3, #0]
    { }
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEE5writeEPKc>:

    ArrayType& getArray() { return array_; }
    const ArrayType& getArray() const { return array_; }

    void write(const char* text)
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
    {
        writeValue(text);
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 fd0b 	bl	8011494 <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEE10writeValueEPKc>
    }
 8010a7e:	bf00      	nop
 8010a80:	3708      	adds	r7, #8
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}

08010a86 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>:
    Ret safeget() const
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b082      	sub	sp, #8
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x14>
            return Ret();
 8010a96:	2300      	movs	r3, #0
 8010a98:	e005      	b.n	8010aa6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x20>
        return (_transfer_->*Fun)();
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7f5 fc33 	bl	800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>
 8010aa4:	4603      	mov	r3, r0
    }
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EEC1Ev>:
        Response_()
 8010aae:	b590      	push	{r4, r7, lr}
 8010ab0:	b083      	sub	sp, #12
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
            , can_iface_stats()
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	f04f 0300 	mov.w	r3, #0
 8010abc:	f04f 0400 	mov.w	r4, #0
 8010ac0:	e9c2 3400 	strd	r3, r4, [r2]
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	f04f 0300 	mov.w	r3, #0
 8010aca:	f04f 0400 	mov.w	r4, #0
 8010ace:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	f04f 0300 	mov.w	r3, #0
 8010ad8:	f04f 0400 	mov.w	r4, #0
 8010adc:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3318      	adds	r3, #24
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f000 fce7 	bl	80114b8 <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EEC1Ev>
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8010aea:	f7f4 ff71 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	4618      	mov	r0, r3
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}

08010af8 <_ZN6uavcan16DynamicArrayBaseILj3EED1Ev>:
    ~DynamicArrayBase() { }
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4618      	mov	r0, r3
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
	...

08010b10 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEE18validateBeforeCallEv>:
    void validateBeforeCall() const
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
        if (!operator bool())
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7fc f8dd 	bl	800ccd8 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEEcvbEv>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	f083 0301 	eor.w	r3, r3, #1
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d002      	beq.n	8010b30 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEE18validateBeforeCallEv+0x20>
            handleFatalError("Null binder");
 8010b2a:	4803      	ldr	r0, [pc, #12]	; (8010b38 <_ZNK6uavcan12MethodBinderIPKNS_22TransportStatsProviderEMS1_KFvRKNS_8protocol18GetTransportStats_8Request_ILi0EEERNS5_9Response_ILi0EEEEE18validateBeforeCallEv+0x28>)
 8010b2c:	f00d fa28 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8010b30:	bf00      	nop
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	08022440 	.word	0x08022440

08010b3c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>:
    Ret safeget() const
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d106      	bne.n	8010b5a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x1e>
            return Ret();
 8010b4c:	f107 030c 	add.w	r3, r7, #12
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f4 ffad 	bl	8005ab0 <_ZN6uavcan16TransferPriorityC1Ev>
 8010b56:	7b3b      	ldrb	r3, [r7, #12]
 8010b58:	e005      	b.n	8010b66 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7f5 fbc7 	bl	80062f2 <_ZNK6uavcan16IncomingTransfer11getPriorityEv>
 8010b64:	4603      	mov	r3, r0
    }
 8010b66:	4618      	mov	r0, r3
 8010b68:	3710      	adds	r7, #16
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>:
    Ret safeget() const
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b084      	sub	sp, #16
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d106      	bne.n	8010b8c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x1e>
            return Ret();
 8010b7e:	f107 030c 	add.w	r3, r7, #12
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7f4 ffe2 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 8010b88:	7b3b      	ldrb	r3, [r7, #12]
 8010b8a:	e005      	b.n	8010b98 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7f5 fbd2 	bl	800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>
 8010b96:	4603      	mov	r3, r0
    }
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>:
    Ret safeget() const
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d106      	bne.n	8010bbe <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x1e>
            return Ret();
 8010bb0:	f107 030c 	add.w	r3, r7, #12
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7f4 ff89 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8010bba:	7b3b      	ldrb	r3, [r7, #12]
 8010bbc:	e005      	b.n	8010bca <_ZNK6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7f5 fbad 	bl	8006322 <_ZNK6uavcan16IncomingTransfer13getTransferIDEv>
 8010bc8:	4603      	mov	r3, r0
    }
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
	...

08010bd4 <_ZN6uavcan20StaticTransferBufferILt73EED1Ev>:
class UAVCAN_EXPORT StaticTransferBuffer : public StaticTransferBufferImpl
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	4a05      	ldr	r2, [pc, #20]	; (8010bf4 <_ZN6uavcan20StaticTransferBufferILt73EED1Ev+0x20>)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fb f97f 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4618      	mov	r0, r3
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	080252f4 	.word	0x080252f4

08010bf8 <_ZN6uavcan20StaticTransferBufferILt73EED0Ev>:
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7ff ffe7 	bl	8010bd4 <_ZN6uavcan20StaticTransferBufferILt73EED1Ev>
 8010c06:	2158      	movs	r1, #88	; 0x58
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f00f fc9e 	bl	802054a <_ZdlPvj>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b0a1      	sub	sp, #132	; 0x84
 8010c1c:	af02      	add	r7, sp, #8
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	713b      	strb	r3, [r7, #4]
 8010c24:	4613      	mov	r3, r2
 8010c26:	71fb      	strb	r3, [r7, #7]
    const int res = checkInit();
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7fb fadf 	bl	800c1ec <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE9checkInitEv>
 8010c2e:	6778      	str	r0, [r7, #116]	; 0x74
    if (res < 0)
 8010c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	da01      	bge.n	8010c3a <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x22>
        return res;
 8010c36:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8010c38:	e032      	b.n	8010ca0 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x88>
    Buffer buffer;
 8010c3a:	f107 0310 	add.w	r3, r7, #16
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f000 fc48 	bl	80114d4 <_ZN6uavcan20StaticTransferBufferILt73EEC1Ev>
    const int encode_res = doEncode(message, buffer);
 8010c44:	f107 0310 	add.w	r3, r7, #16
 8010c48:	461a      	mov	r2, r3
 8010c4a:	68b9      	ldr	r1, [r7, #8]
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	f000 fc59 	bl	8011504 <_ZNK6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>
 8010c52:	6738      	str	r0, [r7, #112]	; 0x70
    if (encode_res < 0)
 8010c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	da01      	bge.n	8010c5e <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x46>
        return encode_res;
 8010c5a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8010c5c:	e01b      	b.n	8010c96 <_ZN6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x7e>
    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 8010c5e:	68fc      	ldr	r4, [r7, #12]
 8010c60:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010c64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c70:	79fa      	ldrb	r2, [r7, #7]
 8010c72:	f107 0110 	add.w	r1, r7, #16
 8010c76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c7a:	9301      	str	r3, [sp, #4]
 8010c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	793b      	ldrb	r3, [r7, #4]
 8010c84:	4620      	mov	r0, r4
 8010c86:	f003 fd01 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7f5 fa3f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 8010c96:	f107 0310 	add.w	r3, r7, #16
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7ff ff9a 	bl	8010bd4 <_ZN6uavcan20StaticTransferBufferILt73EED1Ev>
 8010ca0:	4623      	mov	r3, r4
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	377c      	adds	r7, #124	; 0x7c
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd90      	pop	{r4, r7, pc}

08010caa <_ZN6uavcan17GenericSubscriberINS_8protocol18GetTransportStats_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>:
        ReceivedDataStructureSpec(const IncomingTransfer* arg_transfer) :
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b082      	sub	sp, #8
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
 8010cb2:	6039      	str	r1, [r7, #0]
            ReceivedDataStructure<DataStruct>(arg_transfer)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6839      	ldr	r1, [r7, #0]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f000 fc53 	bl	8011564 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>
        { }
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <_ZN6uavcan8protocol18GetTransportStats_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int GetTransportStats_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
 8010cc8:	b480      	push	{r7}
 8010cca:	b087      	sub	sp, #28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	617b      	str	r3, [r7, #20]
    return res;
 8010cda:	697b      	ldr	r3, [r7, #20]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	371c      	adds	r7, #28
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>:
    Ret safeget() const
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	689b      	ldr	r3, [r3, #8]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d101      	bne.n	8010cfc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x14>
            return Ret();
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	e005      	b.n	8010d08 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x20>
        return (_transfer_->*Fun)();
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	689b      	ldr	r3, [r3, #8]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7f5 fb02 	bl	800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>
 8010d06:	4603      	mov	r3, r0
    }
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <_ZN6uavcan8protocol12RestartNode_9Response_ILi0EEC1Ev>:
        Response_()
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
            : ok()
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	701a      	strb	r2, [r3, #0]
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8010d1e:	f7f4 fe57 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	4618      	mov	r0, r3
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEE18validateBeforeCallEv>:
    void validateBeforeCall() const
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
        if (!operator bool())
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7fb ff21 	bl	800cb7c <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEEcvbEv>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	f083 0301 	eor.w	r3, r3, #1
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEE18validateBeforeCallEv+0x20>
            handleFatalError("Null binder");
 8010d46:	4803      	ldr	r0, [pc, #12]	; (8010d54 <_ZNK6uavcan12MethodBinderIPKNS_20RestartRequestServerEMS1_KFvRKNS_21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEERNS6_9Response_ILi0EEEEE18validateBeforeCallEv+0x28>)
 8010d48:	f00d f91a 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8010d4c:	bf00      	nop
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	08022440 	.word	0x08022440

08010d58 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>:
    Ret safeget() const
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d106      	bne.n	8010d76 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x1e>
            return Ret();
 8010d68:	f107 030c 	add.w	r3, r7, #12
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f7f4 fe9f 	bl	8005ab0 <_ZN6uavcan16TransferPriorityC1Ev>
 8010d72:	7b3b      	ldrb	r3, [r7, #12]
 8010d74:	e005      	b.n	8010d82 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	689b      	ldr	r3, [r3, #8]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7f5 fab9 	bl	80062f2 <_ZNK6uavcan16IncomingTransfer11getPriorityEv>
 8010d80:	4603      	mov	r3, r0
    }
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>:
    Ret safeget() const
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x1e>
            return Ret();
 8010d9a:	f107 030c 	add.w	r3, r7, #12
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f4 fe94 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8010da4:	7b3b      	ldrb	r3, [r7, #12]
 8010da6:	e005      	b.n	8010db4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f5 fab8 	bl	8006322 <_ZNK6uavcan16IncomingTransfer13getTransferIDEv>
 8010db2:	4603      	mov	r3, r0
    }
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <_ZN6uavcan20StaticTransferBufferILt1EED1Ev>:
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	4a05      	ldr	r2, [pc, #20]	; (8010ddc <_ZN6uavcan20StaticTransferBufferILt1EED1Ev+0x20>)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	601a      	str	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7fb f88b 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3708      	adds	r7, #8
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	080252dc 	.word	0x080252dc

08010de0 <_ZN6uavcan20StaticTransferBufferILt1EED0Ev>:
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f7ff ffe7 	bl	8010dbc <_ZN6uavcan20StaticTransferBufferILt1EED1Ev>
 8010dee:	2110      	movs	r1, #16
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f00f fbaa 	bl	802054a <_ZdlPvj>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 8010e00:	b590      	push	{r4, r7, lr}
 8010e02:	b08f      	sub	sp, #60	; 0x3c
 8010e04:	af02      	add	r7, sp, #8
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	713b      	strb	r3, [r7, #4]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	71fb      	strb	r3, [r7, #7]
    const int res = checkInit();
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f7fb f938 	bl	800c086 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE9checkInitEv>
 8010e16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (res < 0)
 8010e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	da01      	bge.n	8010e22 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x22>
        return res;
 8010e1e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8010e20:	e030      	b.n	8010e84 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x84>
    Buffer buffer;
 8010e22:	f107 0310 	add.w	r3, r7, #16
 8010e26:	4618      	mov	r0, r3
 8010e28:	f000 fbbe 	bl	80115a8 <_ZN6uavcan20StaticTransferBufferILt1EEC1Ev>
    const int encode_res = doEncode(message, buffer);
 8010e2c:	f107 0310 	add.w	r3, r7, #16
 8010e30:	461a      	mov	r2, r3
 8010e32:	68b9      	ldr	r1, [r7, #8]
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f000 fbcf 	bl	80115d8 <_ZNK6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>
 8010e3a:	62b8      	str	r0, [r7, #40]	; 0x28
    if (encode_res < 0)
 8010e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	da01      	bge.n	8010e46 <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x46>
        return encode_res;
 8010e42:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8010e44:	e019      	b.n	8010e7a <_ZN6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x7a>
    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 8010e46:	68fc      	ldr	r4, [r7, #12]
 8010e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e4a:	f107 0320 	add.w	r3, r7, #32
 8010e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e52:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e56:	79fa      	ldrb	r2, [r7, #7]
 8010e58:	f107 0110 	add.w	r1, r7, #16
 8010e5c:	f107 0320 	add.w	r3, r7, #32
 8010e60:	9301      	str	r3, [sp, #4]
 8010e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e64:	9300      	str	r3, [sp, #0]
 8010e66:	793b      	ldrb	r3, [r7, #4]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f003 fc0f 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8010e6e:	4604      	mov	r4, r0
 8010e70:	f107 0320 	add.w	r3, r7, #32
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7f5 f94d 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 8010e7a:	f107 0310 	add.w	r3, r7, #16
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7ff ff9c 	bl	8010dbc <_ZN6uavcan20StaticTransferBufferILt1EED1Ev>
 8010e84:	4623      	mov	r3, r4
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3734      	adds	r7, #52	; 0x34
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd90      	pop	{r4, r7, pc}

08010e8e <_ZN6uavcan17GenericSubscriberINS_8protocol12RestartNode_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>:
        ReceivedDataStructureSpec(const IncomingTransfer* arg_transfer) :
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	6039      	str	r1, [r7, #0]
            ReceivedDataStructure<DataStruct>(arg_transfer)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6839      	ldr	r1, [r7, #0]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f000 fbcb 	bl	8011638 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>
        { }
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <_ZN6uavcan8protocol12RestartNode_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int RestartNode_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b086      	sub	sp, #24
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	617b      	str	r3, [r7, #20]
    res = FieldTypes::magic_number::decode(self.magic_number, codec,  tao_mode);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	79fa      	ldrb	r2, [r7, #7]
 8010ec2:	68b9      	ldr	r1, [r7, #8]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f000 fbdb 	bl	8011680 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8010eca:	6178      	str	r0, [r7, #20]
    return res;
 8010ecc:	697b      	ldr	r3, [r7, #20]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>:
    Ret safeget() const
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b082      	sub	sp, #8
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x14>
            return Ret();
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e005      	b.n	8010ef6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x20>
        return (_transfer_->*Fun)();
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7f5 fa0b 	bl	800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>
 8010ef4:	4603      	mov	r3, r0
    }
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3708      	adds	r7, #8
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EEC1Ev>:
        Response_()
 8010efe:	b590      	push	{r4, r7, lr}
 8010f00:	b083      	sub	sp, #12
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
            , name()
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	f04f 0300 	mov.w	r3, #0
 8010f0c:	f04f 0400 	mov.w	r4, #0
 8010f10:	e9c2 3400 	strd	r3, r4, [r2]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2200      	movs	r2, #0
 8010f18:	811a      	strh	r2, [r3, #8]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	330a      	adds	r3, #10
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f000 fbc0 	bl	80116a4 <_ZN6uavcan8protocol13DataTypeKind_ILi0EEC1Ev>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	72da      	strb	r2, [r3, #11]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	330c      	adds	r3, #12
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7f9 fb62 	bl	800a5f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8010f34:	f7f4 fd4c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd90      	pop	{r4, r7, pc}
	...

08010f44 <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv>:
    void validateBeforeCall() const
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
        if (!operator bool())
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7fb fcc5 	bl	800c8dc <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv>
 8010f52:	4603      	mov	r3, r0
 8010f54:	f083 0301 	eor.w	r3, r3, #1
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d002      	beq.n	8010f64 <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv+0x20>
            handleFatalError("Null binder");
 8010f5e:	4803      	ldr	r0, [pc, #12]	; (8010f6c <_ZNK6uavcan12MethodBinderIPNS_20DataTypeInfoProviderEMS1_FvRKNS_8protocol16GetDataTypeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv+0x28>)
 8010f60:	f00d f80e 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	08022440 	.word	0x08022440

08010f70 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>:
    Ret safeget() const
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d106      	bne.n	8010f8e <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x1e>
            return Ret();
 8010f80:	f107 030c 	add.w	r3, r7, #12
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f4 fd93 	bl	8005ab0 <_ZN6uavcan16TransferPriorityC1Ev>
 8010f8a:	7b3b      	ldrb	r3, [r7, #12]
 8010f8c:	e005      	b.n	8010f9a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7f5 f9ad 	bl	80062f2 <_ZNK6uavcan16IncomingTransfer11getPriorityEv>
 8010f98:	4603      	mov	r3, r0
    }
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3710      	adds	r7, #16
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>:
    Ret safeget() const
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b084      	sub	sp, #16
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d106      	bne.n	8010fc0 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x1e>
            return Ret();
 8010fb2:	f107 030c 	add.w	r3, r7, #12
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f4 fdc8 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 8010fbc:	7b3b      	ldrb	r3, [r7, #12]
 8010fbe:	e005      	b.n	8010fcc <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7f5 f9b8 	bl	800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>
 8010fca:	4603      	mov	r3, r0
    }
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>:
    Ret safeget() const
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d106      	bne.n	8010ff2 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x1e>
            return Ret();
 8010fe4:	f107 030c 	add.w	r3, r7, #12
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f4 fd6f 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8010fee:	7b3b      	ldrb	r3, [r7, #12]
 8010ff0:	e005      	b.n	8010ffe <_ZNK6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7f5 f993 	bl	8006322 <_ZNK6uavcan16IncomingTransfer13getTransferIDEv>
 8010ffc:	4603      	mov	r3, r0
    }
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}
	...

08011008 <_ZN6uavcan20StaticTransferBufferILt93EED1Ev>:
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	4a05      	ldr	r2, [pc, #20]	; (8011028 <_ZN6uavcan20StaticTransferBufferILt93EED1Ev+0x20>)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	601a      	str	r2, [r3, #0]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4618      	mov	r0, r3
 801101a:	f7fa ff65 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	080252c4 	.word	0x080252c4

0801102c <_ZN6uavcan20StaticTransferBufferILt93EED0Ev>:
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f7ff ffe7 	bl	8011008 <_ZN6uavcan20StaticTransferBufferILt93EED1Ev>
 801103a:	216c      	movs	r1, #108	; 0x6c
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f00f fa84 	bl	802054a <_ZdlPvj>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 801104c:	b590      	push	{r4, r7, lr}
 801104e:	b0a7      	sub	sp, #156	; 0x9c
 8011050:	af02      	add	r7, sp, #8
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	713b      	strb	r3, [r7, #4]
 8011058:	4613      	mov	r3, r2
 801105a:	71fb      	strb	r3, [r7, #7]
    const int res = checkInit();
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f7fa febd 	bl	800bddc <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE9checkInitEv>
 8011062:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if (res < 0)
 8011066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801106a:	2b00      	cmp	r3, #0
 801106c:	da02      	bge.n	8011074 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x28>
        return res;
 801106e:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 8011072:	e035      	b.n	80110e0 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x94>
    Buffer buffer;
 8011074:	f107 0314 	add.w	r3, r7, #20
 8011078:	4618      	mov	r0, r3
 801107a:	f000 fb21 	bl	80116c0 <_ZN6uavcan20StaticTransferBufferILt93EEC1Ev>
    const int encode_res = doEncode(message, buffer);
 801107e:	f107 0314 	add.w	r3, r7, #20
 8011082:	461a      	mov	r2, r3
 8011084:	68b9      	ldr	r1, [r7, #8]
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	f000 fb32 	bl	80116f0 <_ZNK6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>
 801108c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    if (encode_res < 0)
 8011090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011094:	2b00      	cmp	r3, #0
 8011096:	da02      	bge.n	801109e <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x52>
        return encode_res;
 8011098:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 801109c:	e01b      	b.n	80110d6 <_ZN6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x8a>
    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 801109e:	68fc      	ldr	r4, [r7, #12]
 80110a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80110a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80110a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80110b0:	79fa      	ldrb	r2, [r7, #7]
 80110b2:	f107 0114 	add.w	r1, r7, #20
 80110b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80110ba:	9301      	str	r3, [sp, #4]
 80110bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	793b      	ldrb	r3, [r7, #4]
 80110c4:	4620      	mov	r0, r4
 80110c6:	f003 fae1 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 80110ca:	4604      	mov	r4, r0
 80110cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7f5 f81f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 80110d6:	f107 0314 	add.w	r3, r7, #20
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ff ff94 	bl	8011008 <_ZN6uavcan20StaticTransferBufferILt93EED1Ev>
 80110e0:	4623      	mov	r3, r4
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3794      	adds	r7, #148	; 0x94
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd90      	pop	{r4, r7, pc}

080110ea <_ZN6uavcan17GenericSubscriberINS_8protocol16GetDataTypeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>:
        ReceivedDataStructureSpec(const IncomingTransfer* arg_transfer) :
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b082      	sub	sp, #8
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	6039      	str	r1, [r7, #0]
            ReceivedDataStructure<DataStruct>(arg_transfer)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6839      	ldr	r1, [r7, #0]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f000 fb29 	bl	8011750 <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>
        { }
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4618      	mov	r0, r3
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int GetDataTypeInfo_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	4613      	mov	r3, r2
 8011114:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8011116:	2301      	movs	r3, #1
 8011118:	617b      	str	r3, [r7, #20]
    res = FieldTypes::id::decode(self.id, codec,  ::uavcan::TailArrayOptDisabled);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2200      	movs	r2, #0
 801111e:	68b9      	ldr	r1, [r7, #8]
 8011120:	4618      	mov	r0, r3
 8011122:	f000 fb39 	bl	8011798 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERtRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011126:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	2b00      	cmp	r3, #0
 801112c:	dc01      	bgt.n	8011132 <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2a>
        return res;
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	e015      	b.n	801115e <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x56>
    res = FieldTypes::kind::decode(self.kind, codec,  ::uavcan::TailArrayOptDisabled);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	3302      	adds	r3, #2
 8011136:	2200      	movs	r2, #0
 8011138:	68b9      	ldr	r1, [r7, #8]
 801113a:	4618      	mov	r0, r3
 801113c:	f000 fb3e 	bl	80117bc <_ZN6uavcan8protocol13DataTypeKind_ILi0EE6decodeERS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011140:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dc01      	bgt.n	801114c <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x44>
        return res;
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	e008      	b.n	801115e <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x56>
    res = FieldTypes::name::decode(self.name, codec,  tao_mode);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	3303      	adds	r3, #3
 8011150:	79fa      	ldrb	r2, [r7, #7]
 8011152:	68b9      	ldr	r1, [r7, #8]
 8011154:	4618      	mov	r0, r3
 8011156:	f000 fb46 	bl	80117e6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6decodeERS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 801115a:	6178      	str	r0, [r7, #20]
    return res;
 801115c:	697b      	ldr	r3, [r7, #20]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3718      	adds	r7, #24
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v>:
    Ret safeget() const
 8011166:	b580      	push	{r7, lr}
 8011168:	b082      	sub	sp, #8
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d101      	bne.n	801117a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x14>
            return Ret();
 8011176:	2300      	movs	r3, #0
 8011178:	e005      	b.n	8011186 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_12TransferTypeEXadL_ZNKS_16IncomingTransfer15getTransferTypeEvEEEET_v+0x20>
        return (_transfer_->*Fun)();
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4618      	mov	r0, r3
 8011180:	f7f5 f8c3 	bl	800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>
 8011184:	4603      	mov	r3, r0
    }
 8011186:	4618      	mov	r0, r3
 8011188:	3708      	adds	r7, #8
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}

0801118e <_ZN6uavcan20CoerceOrFallbackImplINS_12MethodBinderIPNS_18NodeStatusProviderEMS2_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEbE4implERKSF_RKbNS_11BooleanTypeILb1EEE>:
    static To impl(const From& from, const To&, TrueType) { return To(from); }
 801118e:	b580      	push	{r7, lr}
 8011190:	b084      	sub	sp, #16
 8011192:	af00      	add	r7, sp, #0
 8011194:	60f8      	str	r0, [r7, #12]
 8011196:	60b9      	str	r1, [r7, #8]
 8011198:	713a      	strb	r2, [r7, #4]
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f000 fb35 	bl	801180a <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv>
 80111a0:	4603      	mov	r3, r0
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
	...

080111ac <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv>:
    void validateBeforeCall() const
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
        if (!operator bool())
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f000 fb28 	bl	801180a <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv>
 80111ba:	4603      	mov	r3, r0
 80111bc:	f083 0301 	eor.w	r3, r3, #1
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d002      	beq.n	80111cc <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv+0x20>
            handleFatalError("Null binder");
 80111c6:	4803      	ldr	r0, [pc, #12]	; (80111d4 <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEE18validateBeforeCallEv+0x28>)
 80111c8:	f00c feda 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 80111cc:	bf00      	nop
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	08022440 	.word	0x08022440

080111d8 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v>:
    Ret safeget() const
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d106      	bne.n	80111f6 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x1e>
            return Ret();
 80111e8:	f107 030c 	add.w	r3, r7, #12
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7f4 fc5f 	bl	8005ab0 <_ZN6uavcan16TransferPriorityC1Ev>
 80111f2:	7b3b      	ldrb	r3, [r7, #12]
 80111f4:	e005      	b.n	8011202 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_16TransferPriorityEXadL_ZNKS_16IncomingTransfer11getPriorityEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7f5 f879 	bl	80062f2 <_ZNK6uavcan16IncomingTransfer11getPriorityEv>
 8011200:	4603      	mov	r3, r0
    }
 8011202:	4618      	mov	r0, r3
 8011204:	3710      	adds	r7, #16
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v>:
    Ret safeget() const
 801120a:	b580      	push	{r7, lr}
 801120c:	b084      	sub	sp, #16
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x1e>
            return Ret();
 801121a:	f107 030c 	add.w	r3, r7, #12
 801121e:	4618      	mov	r0, r3
 8011220:	f7f4 fc94 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 8011224:	7b3b      	ldrb	r3, [r7, #12]
 8011226:	e005      	b.n	8011234 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_6NodeIDEXadL_ZNKS_16IncomingTransfer12getSrcNodeIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4618      	mov	r0, r3
 801122e:	f7f5 f884 	bl	800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>
 8011232:	4603      	mov	r3, r0
    }
 8011234:	4618      	mov	r0, r3
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v>:
    Ret safeget() const
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
        if (_transfer_ == UAVCAN_NULLPTR)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d106      	bne.n	801125a <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x1e>
            return Ret();
 801124c:	f107 030c 	add.w	r3, r7, #12
 8011250:	4618      	mov	r0, r3
 8011252:	f7f4 fc3b 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8011256:	7b3b      	ldrb	r3, [r7, #12]
 8011258:	e005      	b.n	8011266 <_ZNK6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEE7safegetINS_10TransferIDEXadL_ZNKS_16IncomingTransfer13getTransferIDEvEEEET_v+0x2a>
        return (_transfer_->*Fun)();
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4618      	mov	r0, r3
 8011260:	f7f5 f85f 	bl	8006322 <_ZNK6uavcan16IncomingTransfer13getTransferIDEv>
 8011264:	4603      	mov	r3, r0
    }
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
	...

08011270 <_ZN6uavcan20StaticTransferBufferILt377EED1Ev>:
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	4a05      	ldr	r2, [pc, #20]	; (8011290 <_ZN6uavcan20StaticTransferBufferILt377EED1Ev+0x20>)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	4618      	mov	r0, r3
 8011282:	f7fa fe31 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	080252ac 	.word	0x080252ac

08011294 <_ZN6uavcan20StaticTransferBufferILt377EED0Ev>:
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffe7 	bl	8011270 <_ZN6uavcan20StaticTransferBufferILt377EED1Ev>
 80112a2:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f00f f94f 	bl	802054a <_ZdlPvj>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	4618      	mov	r0, r3
 80112b0:	3708      	adds	r7, #8
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}

080112b6 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 80112b6:	b590      	push	{r4, r7, lr}
 80112b8:	b0ed      	sub	sp, #436	; 0x1b4
 80112ba:	af02      	add	r7, sp, #8
 80112bc:	f107 040c 	add.w	r4, r7, #12
 80112c0:	6020      	str	r0, [r4, #0]
 80112c2:	f107 0008 	add.w	r0, r7, #8
 80112c6:	6001      	str	r1, [r0, #0]
 80112c8:	4611      	mov	r1, r2
 80112ca:	1d3a      	adds	r2, r7, #4
 80112cc:	7013      	strb	r3, [r2, #0]
 80112ce:	1dfb      	adds	r3, r7, #7
 80112d0:	460a      	mov	r2, r1
 80112d2:	701a      	strb	r2, [r3, #0]
    const int res = checkInit();
 80112d4:	f107 030c 	add.w	r3, r7, #12
 80112d8:	6818      	ldr	r0, [r3, #0]
 80112da:	f000 faba 	bl	8011852 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE9checkInitEv>
 80112de:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
    if (res < 0)
 80112e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	da02      	bge.n	80112f0 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x3a>
        return res;
 80112ea:	f8d7 41a4 	ldr.w	r4, [r7, #420]	; 0x1a4
 80112ee:	e03d      	b.n	801136c <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0xb6>
    Buffer buffer;
 80112f0:	f107 0310 	add.w	r3, r7, #16
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 fac7 	bl	8011888 <_ZN6uavcan20StaticTransferBufferILt377EEC1Ev>
    const int encode_res = doEncode(message, buffer);
 80112fa:	f107 0210 	add.w	r2, r7, #16
 80112fe:	f107 0108 	add.w	r1, r7, #8
 8011302:	f107 030c 	add.w	r3, r7, #12
 8011306:	6809      	ldr	r1, [r1, #0]
 8011308:	6818      	ldr	r0, [r3, #0]
 801130a:	f000 fad5 	bl	80118b8 <_ZNK6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>
 801130e:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
    if (encode_res < 0)
 8011312:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8011316:	2b00      	cmp	r3, #0
 8011318:	da02      	bge.n	8011320 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x6a>
        return encode_res;
 801131a:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 801131e:	e020      	b.n	8011362 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE14genericPublishERKS4_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0xac>
    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 8011320:	f107 030c 	add.w	r3, r7, #12
 8011324:	681c      	ldr	r4, [r3, #0]
 8011326:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801132a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801132e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011332:	e883 0003 	stmia.w	r3, {r0, r1}
 8011336:	1d3b      	adds	r3, r7, #4
 8011338:	1dfa      	adds	r2, r7, #7
 801133a:	7810      	ldrb	r0, [r2, #0]
 801133c:	f107 0110 	add.w	r1, r7, #16
 8011340:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8011344:	9201      	str	r2, [sp, #4]
 8011346:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801134a:	9200      	str	r2, [sp, #0]
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	4602      	mov	r2, r0
 8011350:	4620      	mov	r0, r4
 8011352:	f003 f99b 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8011356:	4604      	mov	r4, r0
 8011358:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801135c:	4618      	mov	r0, r3
 801135e:	f7f4 fed9 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 8011362:	f107 0310 	add.w	r3, r7, #16
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff ff82 	bl	8011270 <_ZN6uavcan20StaticTransferBufferILt377EED1Ev>
 801136c:	4623      	mov	r3, r4
}
 801136e:	4618      	mov	r0, r3
 8011370:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8011374:	46bd      	mov	sp, r7
 8011376:	bd90      	pop	{r4, r7, pc}

08011378 <_ZN6uavcan8MultisetINS_17ServiceClientBase9CallStateEE31OperatorToFalsePredicateAdapterIRNS_13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS8_EEEEE21TimeoutCallbackCallerEEclERS2_>:
        bool operator()(T& item)
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
            oper(item);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	6839      	ldr	r1, [r7, #0]
 8011388:	4618      	mov	r0, r3
 801138a:	f000 fac5 	bl	8011918 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE21TimeoutCallbackCallerclERKNS_17ServiceClientBase9CallStateE>
            return false;
 801138e:	2300      	movs	r3, #0
        }
 8011390:	4618      	mov	r0, r3
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1EPKNS_16IncomingTransferE>:
    ReceivedDataStructure(const IncomingTransfer* arg_transfer)
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
        : _transfer_(arg_transfer)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	4618      	mov	r0, r3
 80113a6:	f000 faec 	bl	8011982 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEC1Ev>
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7f4 fb17 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	683a      	ldr	r2, [r7, #0]
 80113b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        UAVCAN_ASSERT(arg_transfer != UAVCAN_NULLPTR);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d105      	bne.n	80113ca <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1EPKNS_16IncomingTransferE+0x32>
 80113be:	4b05      	ldr	r3, [pc, #20]	; (80113d4 <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1EPKNS_16IncomingTransferE+0x3c>)
 80113c0:	4a05      	ldr	r2, [pc, #20]	; (80113d8 <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1EPKNS_16IncomingTransferE+0x40>)
 80113c2:	213d      	movs	r1, #61	; 0x3d
 80113c4:	4805      	ldr	r0, [pc, #20]	; (80113dc <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1EPKNS_16IncomingTransferE+0x44>)
 80113c6:	f00f f8e1 	bl	802058c <__assert_func>
    }
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	0802244c 	.word	0x0802244c
 80113d8:	08028e10 	.word	0x08028e10
 80113dc:	08022464 	.word	0x08022464

080113e0 <_ZN6uavcan16DynamicArrayBaseILj127EED1Ev>:
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4618      	mov	r0, r3
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int decode(StorageType& out_value, ScalarCodec& codec, TailArrayOptimizationMode)
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b084      	sub	sp, #16
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	60f8      	str	r0, [r7, #12]
 80113fe:	60b9      	str	r1, [r7, #8]
 8011400:	4613      	mov	r3, r2
 8011402:	71fb      	strb	r3, [r7, #7]
        validate();
 8011404:	f7fd f9ac 	bl	800e760 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
        return codec.decode<BitLen>(out_value);
 8011408:	68f9      	ldr	r1, [r7, #12]
 801140a:	68b8      	ldr	r0, [r7, #8]
 801140c:	f000 facc 	bl	80119a8 <_ZN6uavcan11ScalarCodec6decodeILj8EhEEiRT0_>
 8011410:	4603      	mov	r3, r0
    }
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}

0801141a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6decodeERS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int decode(SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 801141a:	b590      	push	{r4, r7, lr}
 801141c:	b087      	sub	sp, #28
 801141e:	af00      	add	r7, sp, #0
 8011420:	60f8      	str	r0, [r7, #12]
 8011422:	60b9      	str	r1, [r7, #8]
 8011424:	4613      	mov	r3, r2
 8011426:	71fb      	strb	r3, [r7, #7]
        return array.decodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 8011428:	79fa      	ldrb	r2, [r7, #7]
 801142a:	4623      	mov	r3, r4
 801142c:	68b9      	ldr	r1, [r7, #8]
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f000 fae1 	bl	80119f6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 8011434:	4603      	mov	r3, r0
    }
 8011436:	4618      	mov	r0, r3
 8011438:	371c      	adds	r7, #28
 801143a:	46bd      	mov	sp, r7
 801143c:	bd90      	pop	{r4, r7, pc}

0801143e <_ZN6uavcan16DynamicArrayBaseILj31EE5clearEv>:
    void clear() { size_ = 0; }
 801143e:	b480      	push	{r7}
 8011440:	b083      	sub	sp, #12
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2200      	movs	r2, #0
 801144a:	701a      	strb	r2, [r3, #0]
 801144c:	bf00      	nop
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE9push_backERKh>:
    void push_back(const ValueType& value)
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b083      	sub	sp, #12
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
        Base::grow();
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	4618      	mov	r0, r3
 8011466:	f000 fb30 	bl	8011aca <_ZN6uavcan16DynamicArrayBaseILj31EE4growEv>
        Base::at(SizeType(size() - 1)) = value;
 801146a:	687c      	ldr	r4, [r7, #4]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	4618      	mov	r0, r3
 8011470:	f7fc ffc2 	bl	800e3f8 <_ZNK6uavcan16DynamicArrayBaseILj31EE4sizeEv>
 8011474:	4603      	mov	r3, r0
 8011476:	3b01      	subs	r3, #1
 8011478:	b2db      	uxtb	r3, r3
 801147a:	4619      	mov	r1, r3
 801147c:	4620      	mov	r0, r4
 801147e:	f000 fb3b 	bl	8011af8 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE2atEh>
 8011482:	4602      	mov	r2, r0
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	7013      	strb	r3, [r2, #0]
    }
 801148a:	bf00      	nop
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	bd90      	pop	{r4, r7, pc}
	...

08011494 <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEE10writeValueEPKc>:
    void writeValue(const char* value)
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
        array_.template appendFormatted<const char*>("%s", value);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	683a      	ldr	r2, [r7, #0]
 80114a4:	4903      	ldr	r1, [pc, #12]	; (80114b4 <_ZN6uavcan18CharArrayFormatterINS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EEEE10writeValueEPKc+0x20>)
 80114a6:	4618      	mov	r0, r3
 80114a8:	f000 fb3c 	bl	8011b24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_>
    }
 80114ac:	bf00      	nop
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	080224b4 	.word	0x080224b4

080114b8 <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EEC1Ev>:
    Array() { }
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 fbac 	bl	8011c20 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EEC1Ev>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <_ZN6uavcan20StaticTransferBufferILt73EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	330c      	adds	r3, #12
 80114e2:	2249      	movs	r2, #73	; 0x49
 80114e4:	4619      	mov	r1, r3
 80114e6:	f7f4 fe63 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 80114ea:	4a05      	ldr	r2, [pc, #20]	; (8011500 <_ZN6uavcan20StaticTransferBufferILt73EEC1Ev+0x2c>)
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 80114f0:	f7f4 fa6e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4618      	mov	r0, r3
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	080252f4 	.word	0x080252f4

08011504 <_ZNK6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 8011504:	b580      	push	{r7, lr}
 8011506:	b08a      	sub	sp, #40	; 0x28
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 8011510:	f107 0318 	add.w	r3, r7, #24
 8011514:	6879      	ldr	r1, [r7, #4]
 8011516:	4618      	mov	r0, r3
 8011518:	f7f4 fcca 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 801151c:	f107 0218 	add.w	r2, r7, #24
 8011520:	f107 0314 	add.w	r3, r7, #20
 8011524:	4611      	mov	r1, r2
 8011526:	4618      	mov	r0, r3
 8011528:	f7f4 fcd7 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 801152c:	f107 0314 	add.w	r3, r7, #20
 8011530:	2201      	movs	r2, #1
 8011532:	4619      	mov	r1, r3
 8011534:	68b8      	ldr	r0, [r7, #8]
 8011536:	f000 fb90 	bl	8011c5a <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 801153a:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 801153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153e:	2b00      	cmp	r3, #0
 8011540:	dc05      	bgt.n	801154e <_ZNK6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 8011542:	4b05      	ldr	r3, [pc, #20]	; (8011558 <_ZNK6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x54>)
 8011544:	4a05      	ldr	r2, [pc, #20]	; (801155c <_ZNK6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x58>)
 8011546:	21ab      	movs	r1, #171	; 0xab
 8011548:	4805      	ldr	r0, [pc, #20]	; (8011560 <_ZNK6uavcan16GenericPublisherINS_8protocol18GetTransportStats_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x5c>)
 801154a:	f00f f81f 	bl	802058c <__assert_func>
    return encode_res;
 801154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011550:	4618      	mov	r0, r3
 8011552:	3728      	adds	r7, #40	; 0x28
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	08021b88 	.word	0x08021b88
 801155c:	08026034 	.word	0x08026034
 8011560:	080220d0 	.word	0x080220d0

08011564 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>:
    ReceivedDataStructure(const IncomingTransfer* arg_transfer)
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
        : _transfer_(arg_transfer)
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 fbb0 	bl	8011cd4 <_ZN6uavcan8protocol18GetTransportStats_8Request_ILi0EEC1Ev>
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7f4 fa32 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	601a      	str	r2, [r3, #0]
        UAVCAN_ASSERT(arg_transfer != UAVCAN_NULLPTR);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d105      	bne.n	8011592 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x2e>
 8011586:	4b05      	ldr	r3, [pc, #20]	; (801159c <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x38>)
 8011588:	4a05      	ldr	r2, [pc, #20]	; (80115a0 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x3c>)
 801158a:	213d      	movs	r1, #61	; 0x3d
 801158c:	4805      	ldr	r0, [pc, #20]	; (80115a4 <_ZN6uavcan21ReceivedDataStructureINS_8protocol18GetTransportStats_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x40>)
 801158e:	f00e fffd 	bl	802058c <__assert_func>
    }
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	4618      	mov	r0, r3
 8011596:	3708      	adds	r7, #8
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	0802244c 	.word	0x0802244c
 80115a0:	080286e8 	.word	0x080286e8
 80115a4:	08022464 	.word	0x08022464

080115a8 <_ZN6uavcan20StaticTransferBufferILt1EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	330c      	adds	r3, #12
 80115b6:	2201      	movs	r2, #1
 80115b8:	4619      	mov	r1, r3
 80115ba:	f7f4 fdf9 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 80115be:	4a05      	ldr	r2, [pc, #20]	; (80115d4 <_ZN6uavcan20StaticTransferBufferILt1EEC1Ev+0x2c>)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 80115c4:	f7f4 fa04 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	4618      	mov	r0, r3
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	080252dc 	.word	0x080252dc

080115d8 <_ZNK6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 80115d8:	b580      	push	{r7, lr}
 80115da:	b08a      	sub	sp, #40	; 0x28
 80115dc:	af00      	add	r7, sp, #0
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	60b9      	str	r1, [r7, #8]
 80115e2:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 80115e4:	f107 0318 	add.w	r3, r7, #24
 80115e8:	6879      	ldr	r1, [r7, #4]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7f4 fc60 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 80115f0:	f107 0218 	add.w	r2, r7, #24
 80115f4:	f107 0314 	add.w	r3, r7, #20
 80115f8:	4611      	mov	r1, r2
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7f4 fc6d 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 8011600:	f107 0314 	add.w	r3, r7, #20
 8011604:	2201      	movs	r2, #1
 8011606:	4619      	mov	r1, r3
 8011608:	68b8      	ldr	r0, [r7, #8]
 801160a:	f000 fb6e 	bl	8011cea <_ZN6uavcan8protocol12RestartNode_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 801160e:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 8011610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011612:	2b00      	cmp	r3, #0
 8011614:	dc05      	bgt.n	8011622 <_ZNK6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 8011616:	4b05      	ldr	r3, [pc, #20]	; (801162c <_ZNK6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x54>)
 8011618:	4a05      	ldr	r2, [pc, #20]	; (8011630 <_ZNK6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x58>)
 801161a:	21ab      	movs	r1, #171	; 0xab
 801161c:	4805      	ldr	r0, [pc, #20]	; (8011634 <_ZNK6uavcan16GenericPublisherINS_8protocol12RestartNode_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x5c>)
 801161e:	f00e ffb5 	bl	802058c <__assert_func>
    return encode_res;
 8011622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011624:	4618      	mov	r0, r3
 8011626:	3728      	adds	r7, #40	; 0x28
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	08021b88 	.word	0x08021b88
 8011630:	080267a8 	.word	0x080267a8
 8011634:	080220d0 	.word	0x080220d0

08011638 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>:
    ReceivedDataStructure(const IncomingTransfer* arg_transfer)
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
        : _transfer_(arg_transfer)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	4618      	mov	r0, r3
 8011646:	f000 fb66 	bl	8011d16 <_ZN6uavcan8protocol12RestartNode_8Request_ILi0EEC1Ev>
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7f4 f9c7 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	609a      	str	r2, [r3, #8]
        UAVCAN_ASSERT(arg_transfer != UAVCAN_NULLPTR);
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d105      	bne.n	8011668 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x30>
 801165c:	4b05      	ldr	r3, [pc, #20]	; (8011674 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x3c>)
 801165e:	4a06      	ldr	r2, [pc, #24]	; (8011678 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x40>)
 8011660:	213d      	movs	r1, #61	; 0x3d
 8011662:	4806      	ldr	r0, [pc, #24]	; (801167c <_ZN6uavcan21ReceivedDataStructureINS_8protocol12RestartNode_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x44>)
 8011664:	f00e ff92 	bl	802058c <__assert_func>
    }
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	4618      	mov	r0, r3
 801166c:	3708      	adds	r7, #8
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	0802244c 	.word	0x0802244c
 8011678:	08028574 	.word	0x08028574
 801167c:	08022464 	.word	0x08022464

08011680 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int decode(StorageType& out_value, ScalarCodec& codec, TailArrayOptimizationMode)
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	4613      	mov	r3, r2
 801168c:	71fb      	strb	r3, [r7, #7]
        validate();
 801168e:	f000 fb55 	bl	8011d3c <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
        return codec.decode<BitLen>(out_value);
 8011692:	68f9      	ldr	r1, [r7, #12]
 8011694:	68b8      	ldr	r0, [r7, #8]
 8011696:	f000 fb83 	bl	8011da0 <_ZN6uavcan11ScalarCodec6decodeILj40EyEEiRT0_>
 801169a:	4603      	mov	r3, r0
    }
 801169c:	4618      	mov	r0, r3
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <_ZN6uavcan8protocol13DataTypeKind_ILi0EEC1Ev>:
    DataTypeKind_()
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
        : value()
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2200      	movs	r2, #0
 80116b0:	701a      	strb	r2, [r3, #0]
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 80116b2:	f7f4 f98d 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <_ZN6uavcan20StaticTransferBufferILt93EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	330c      	adds	r3, #12
 80116ce:	225d      	movs	r2, #93	; 0x5d
 80116d0:	4619      	mov	r1, r3
 80116d2:	f7f4 fd6d 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 80116d6:	4a05      	ldr	r2, [pc, #20]	; (80116ec <_ZN6uavcan20StaticTransferBufferILt93EEC1Ev+0x2c>)
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 80116dc:	f7f4 f978 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	3708      	adds	r7, #8
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	080252c4 	.word	0x080252c4

080116f0 <_ZNK6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08a      	sub	sp, #40	; 0x28
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 80116fc:	f107 0318 	add.w	r3, r7, #24
 8011700:	6879      	ldr	r1, [r7, #4]
 8011702:	4618      	mov	r0, r3
 8011704:	f7f4 fbd4 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 8011708:	f107 0218 	add.w	r2, r7, #24
 801170c:	f107 0314 	add.w	r3, r7, #20
 8011710:	4611      	mov	r1, r2
 8011712:	4618      	mov	r0, r3
 8011714:	f7f4 fbe1 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 8011718:	f107 0314 	add.w	r3, r7, #20
 801171c:	2201      	movs	r2, #1
 801171e:	4619      	mov	r1, r3
 8011720:	68b8      	ldr	r0, [r7, #8]
 8011722:	f000 fb6a 	bl	8011dfa <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011726:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 8011728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172a:	2b00      	cmp	r3, #0
 801172c:	dc05      	bgt.n	801173a <_ZNK6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 801172e:	4b05      	ldr	r3, [pc, #20]	; (8011744 <_ZNK6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x54>)
 8011730:	4a05      	ldr	r2, [pc, #20]	; (8011748 <_ZNK6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x58>)
 8011732:	21ab      	movs	r1, #171	; 0xab
 8011734:	4805      	ldr	r0, [pc, #20]	; (801174c <_ZNK6uavcan16GenericPublisherINS_8protocol16GetDataTypeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x5c>)
 8011736:	f00e ff29 	bl	802058c <__assert_func>
    return encode_res;
 801173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801173c:	4618      	mov	r0, r3
 801173e:	3728      	adds	r7, #40	; 0x28
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	08021b88 	.word	0x08021b88
 8011748:	08026a68 	.word	0x08026a68
 801174c:	080220d0 	.word	0x080220d0

08011750 <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>:
    ReceivedDataStructure(const IncomingTransfer* arg_transfer)
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
        : _transfer_(arg_transfer)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4618      	mov	r0, r3
 801175e:	f000 fb96 	bl	8011e8e <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EEC1Ev>
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7f4 f93b 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	683a      	ldr	r2, [r7, #0]
 801176c:	659a      	str	r2, [r3, #88]	; 0x58
        UAVCAN_ASSERT(arg_transfer != UAVCAN_NULLPTR);
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d105      	bne.n	8011780 <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x30>
 8011774:	4b05      	ldr	r3, [pc, #20]	; (801178c <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x3c>)
 8011776:	4a06      	ldr	r2, [pc, #24]	; (8011790 <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x40>)
 8011778:	213d      	movs	r1, #61	; 0x3d
 801177a:	4806      	ldr	r0, [pc, #24]	; (8011794 <_ZN6uavcan21ReceivedDataStructureINS_8protocol16GetDataTypeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x44>)
 801177c:	f00e ff06 	bl	802058c <__assert_func>
    }
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	0802244c 	.word	0x0802244c
 8011790:	080282b8 	.word	0x080282b8
 8011794:	08022464 	.word	0x08022464

08011798 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERtRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int decode(StorageType& out_value, ScalarCodec& codec, TailArrayOptimizationMode)
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	4613      	mov	r3, r2
 80117a4:	71fb      	strb	r3, [r7, #7]
        validate();
 80117a6:	f000 fb8b 	bl	8011ec0 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
        return codec.decode<BitLen>(out_value);
 80117aa:	68f9      	ldr	r1, [r7, #12]
 80117ac:	68b8      	ldr	r0, [r7, #8]
 80117ae:	f000 fbb3 	bl	8011f18 <_ZN6uavcan11ScalarCodec6decodeILj16EtEEiRT0_>
 80117b2:	4603      	mov	r3, r0
    }
 80117b4:	4618      	mov	r0, r3
 80117b6:	3710      	adds	r7, #16
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <_ZN6uavcan8protocol13DataTypeKind_ILi0EE6decodeERS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int DataTypeKind_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
 80117bc:	b580      	push	{r7, lr}
 80117be:	b086      	sub	sp, #24
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	4613      	mov	r3, r2
 80117c8:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 80117ca:	2301      	movs	r3, #1
 80117cc:	617b      	str	r3, [r7, #20]
    res = FieldTypes::value::decode(self.value, codec,  tao_mode);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	79fa      	ldrb	r2, [r7, #7]
 80117d2:	68b9      	ldr	r1, [r7, #8]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7ff fe0e 	bl	80113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80117da:	6178      	str	r0, [r7, #20]
    return res;
 80117dc:	697b      	ldr	r3, [r7, #20]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3718      	adds	r7, #24
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6decodeERS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int decode(SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 80117e6:	b590      	push	{r4, r7, lr}
 80117e8:	b087      	sub	sp, #28
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	60f8      	str	r0, [r7, #12]
 80117ee:	60b9      	str	r1, [r7, #8]
 80117f0:	4613      	mov	r3, r2
 80117f2:	71fb      	strb	r3, [r7, #7]
        return array.decodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 80117f4:	79fa      	ldrb	r2, [r7, #7]
 80117f6:	4623      	mov	r3, r4
 80117f8:	68b9      	ldr	r1, [r7, #8]
 80117fa:	68f8      	ldr	r0, [r7, #12]
 80117fc:	f000 fbb3 	bl	8011f66 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 8011800:	4603      	mov	r3, r0
    }
 8011802:	4618      	mov	r0, r3
 8011804:	371c      	adds	r7, #28
 8011806:	46bd      	mov	sp, r7
 8011808:	bd90      	pop	{r4, r7, pc}

0801180a <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv>:
    operator bool() const
 801180a:	b580      	push	{r7, lr}
 801180c:	b084      	sub	sp, #16
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
        return coerceOrFallback<bool>(obj_, true) && coerceOrFallback<bool>(fun_, true);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2201      	movs	r2, #1
 8011816:	73ba      	strb	r2, [r7, #14]
 8011818:	f107 020e 	add.w	r2, r7, #14
 801181c:	4611      	mov	r1, r2
 801181e:	4618      	mov	r0, r3
 8011820:	f000 fc0a 	bl	8012038 <_ZN6uavcan16coerceOrFallbackIbPNS_18NodeStatusProviderEEET_RKT0_RKS3_>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00e      	beq.n	8011848 <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv+0x3e>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	3304      	adds	r3, #4
 801182e:	2201      	movs	r2, #1
 8011830:	73fa      	strb	r2, [r7, #15]
 8011832:	f107 020f 	add.w	r2, r7, #15
 8011836:	4611      	mov	r1, r2
 8011838:	4618      	mov	r0, r3
 801183a:	f000 fc0c 	bl	8012056 <_ZN6uavcan16coerceOrFallbackIbMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEEET_RKT0_RKSD_>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv+0x3e>
 8011844:	2301      	movs	r3, #1
 8011846:	e000      	b.n	801184a <_ZNK6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEcvbEv+0x40>
 8011848:	2300      	movs	r3, #0
    }
 801184a:	4618      	mov	r0, r3
 801184c:	3710      	adds	r7, #16
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE9checkInitEv>:
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 8011852:	b590      	push	{r4, r7, lr}
 8011854:	b083      	sub	sp, #12
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
    if (isInited())
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4618      	mov	r0, r3
 801185e:	f002 feb7 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE9checkInitEv+0x1a>
        return 0;
 8011868:	2300      	movs	r3, #0
 801186a:	e009      	b.n	8011880 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE9checkInitEv+0x2e>
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 801186c:	687c      	ldr	r4, [r7, #4]
 801186e:	f7f5 fa4d 	bl	8006d0c <_ZN6uavcan8protocol12GetNodeInfo_19getDataTypeFullNameEv>
 8011872:	4602      	mov	r2, r0
 8011874:	2301      	movs	r3, #1
 8011876:	2100      	movs	r1, #0
 8011878:	4620      	mov	r0, r4
 801187a:	f002 feb6 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 801187e:	4603      	mov	r3, r0
}
 8011880:	4618      	mov	r0, r3
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	bd90      	pop	{r4, r7, pc}

08011888 <_ZN6uavcan20StaticTransferBufferILt377EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	330c      	adds	r3, #12
 8011896:	f240 1279 	movw	r2, #377	; 0x179
 801189a:	4619      	mov	r1, r3
 801189c:	f7f4 fc88 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 80118a0:	4a04      	ldr	r2, [pc, #16]	; (80118b4 <_ZN6uavcan20StaticTransferBufferILt377EEC1Ev+0x2c>)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 80118a6:	f7f4 f893 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	080252ac 	.word	0x080252ac

080118b8 <_ZNK6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b08a      	sub	sp, #40	; 0x28
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 80118c4:	f107 0318 	add.w	r3, r7, #24
 80118c8:	6879      	ldr	r1, [r7, #4]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7f4 faf0 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 80118d0:	f107 0218 	add.w	r2, r7, #24
 80118d4:	f107 0314 	add.w	r3, r7, #20
 80118d8:	4611      	mov	r1, r2
 80118da:	4618      	mov	r0, r3
 80118dc:	f7f4 fafd 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 80118e0:	f107 0314 	add.w	r3, r7, #20
 80118e4:	2201      	movs	r2, #1
 80118e6:	4619      	mov	r1, r3
 80118e8:	68b8      	ldr	r0, [r7, #8]
 80118ea:	f000 fbc3 	bl	8012074 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80118ee:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 80118f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dc05      	bgt.n	8011902 <_ZNK6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 80118f6:	4b05      	ldr	r3, [pc, #20]	; (801190c <_ZNK6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x54>)
 80118f8:	4a05      	ldr	r2, [pc, #20]	; (8011910 <_ZNK6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x58>)
 80118fa:	21ab      	movs	r1, #171	; 0xab
 80118fc:	4805      	ldr	r0, [pc, #20]	; (8011914 <_ZNK6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE8doEncodeERKS4_RNS_15ITransferBufferE+0x5c>)
 80118fe:	f00e fe45 	bl	802058c <__assert_func>
    return encode_res;
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011904:	4618      	mov	r0, r3
 8011906:	3728      	adds	r7, #40	; 0x28
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	08021b88 	.word	0x08021b88
 8011910:	080271c8 	.word	0x080271c8
 8011914:	080220d0 	.word	0x080220d0

08011918 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE21TimeoutCallbackCallerclERKNS_17ServiceClientBase9CallStateE>:
        void operator()(const CallState& state)
 8011918:	b580      	push	{r7, lr}
 801191a:	b0a8      	sub	sp, #160	; 0xa0
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
            if (state.hasTimedOut())
 8011922:	6838      	ldr	r0, [r7, #0]
 8011924:	f7f6 f842 	bl	80079ac <_ZNK6uavcan17ServiceClientBase9CallState11hasTimedOutEv>
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d025      	beq.n	801197a <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE21TimeoutCallbackCallerclERKNS_17ServiceClientBase9CallStateE+0x62>
                typename SubscriberType::ReceivedDataStructureSpec rx_struct; // Default-initialized
 801192e:	f107 030c 	add.w	r3, r7, #12
 8011932:	4618      	mov	r0, r3
 8011934:	f000 fbdb 	bl	80120ee <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecC1Ev>
                ServiceCallResultType result(ServiceCallResultType::ErrorTimeout, state.getCallID(),
 8011938:	6838      	ldr	r0, [r7, #0]
 801193a:	f7f6 f823 	bl	8007984 <_ZNK6uavcan17ServiceClientBase9CallState9getCallIDEv>
 801193e:	4603      	mov	r3, r0
 8011940:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8011944:	f107 030c 	add.w	r3, r7, #12
 8011948:	f107 0094 	add.w	r0, r7, #148	; 0x94
 801194c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011950:	2101      	movs	r1, #1
 8011952:	f7fe f92d 	bl	800fbb0 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EEC1ENS4_6StatusENS_13ServiceCallIDERNS_21ReceivedDataStructureINS3_9Response_ILi0EEEEE>
                owner.invokeCallback(result);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 801195e:	4611      	mov	r1, r2
 8011960:	4618      	mov	r0, r3
 8011962:	f7fe f965 	bl	800fc30 <_ZN6uavcan13ServiceClientINS_8protocol4file20BeginFirmwareUpdate_ESt8functionIFvRKNS_17ServiceCallResultIS3_EEEEE14invokeCallbackERS6_>
                ServiceCallResultType result(ServiceCallResultType::ErrorTimeout, state.getCallID(),
 8011966:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801196a:	4618      	mov	r0, r3
 801196c:	f7fd fc24 	bl	800f1b8 <_ZN6uavcan17ServiceCallResultINS_8protocol4file20BeginFirmwareUpdate_EED1Ev>
                typename SubscriberType::ReceivedDataStructureSpec rx_struct; // Default-initialized
 8011970:	f107 030c 	add.w	r3, r7, #12
 8011974:	4618      	mov	r0, r3
 8011976:	f7fe f9f9 	bl	800fd6c <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecD1Ev>
        }
 801197a:	bf00      	nop
 801197c:	37a0      	adds	r7, #160	; 0xa0
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}

08011982 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEC1Ev>:
        Response_()
 8011982:	b580      	push	{r7, lr}
 8011984:	b082      	sub	sp, #8
 8011986:	af00      	add	r7, sp, #0
 8011988:	6078      	str	r0, [r7, #4]
            , optional_error_message()
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2200      	movs	r2, #0
 801198e:	701a      	strb	r2, [r3, #0]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	3301      	adds	r3, #1
 8011994:	4618      	mov	r0, r3
 8011996:	f000 fbb7 	bl	8012108 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EEC1Ev>
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 801199a:	f7f4 f819 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	3708      	adds	r7, #8
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <_ZN6uavcan11ScalarCodec6decodeILj8EhEEiRT0_>:

template <unsigned BitLen, typename T>
int ScalarCodec::decode(T& value)
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
{
    validate<BitLen, T>();
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7fd f8c6 	bl	800eb44 <_ZN6uavcan11ScalarCodec8validateILj8EhEEvv>
    union ByteUnion
    {
        T value;
        uint8_t bytes[sizeof(T)];
    } byte_union;
    byte_union.value = T();
 80119b8:	2300      	movs	r3, #0
 80119ba:	723b      	strb	r3, [r7, #8]
    const int read_res = decodeBytesImpl(byte_union.bytes, BitLen);
 80119bc:	f107 0308 	add.w	r3, r7, #8
 80119c0:	2208      	movs	r2, #8
 80119c2:	4619      	mov	r1, r3
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f002 fd67 	bl	8014498 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj>
 80119ca:	60f8      	str	r0, [r7, #12]
    if (read_res > 0)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	dd0c      	ble.n	80119ec <_ZN6uavcan11ScalarCodec6decodeILj8EhEEiRT0_+0x44>
    {
        convertByteOrder<BitLen>(byte_union.bytes);
 80119d2:	f107 0308 	add.w	r3, r7, #8
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fd f8cc 	bl	800eb74 <_ZN6uavcan11ScalarCodec16convertByteOrderILj8ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
        fixTwosComplement<BitLen, T>(byte_union.value);
 80119dc:	f107 0308 	add.w	r3, r7, #8
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 fb9e 	bl	8012122 <_ZN6uavcan11ScalarCodec17fixTwosComplementILj8EhEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>
        value = byte_union.value;
 80119e6:	7a3a      	ldrb	r2, [r7, #8]
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	701a      	strb	r2, [r3, #0]
    }
    return read_res;
 80119ec:	68fb      	ldr	r3, [r7, #12]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int decodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType)   /// Dynamic
 80119f6:	b590      	push	{r4, r7, lr}
 80119f8:	b089      	sub	sp, #36	; 0x24
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	60f8      	str	r0, [r7, #12]
 80119fe:	60b9      	str	r1, [r7, #8]
 8011a00:	713b      	strb	r3, [r7, #4]
 8011a02:	4613      	mov	r3, r2
 8011a04:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 8011a06:	f7f3 ffe3 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        Base::clear();
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f000 fb92 	bl	8012136 <_ZN6uavcan16DynamicArrayBaseILj127EE5clearEv>
        if (isOptimizedTailArray(tao_mode))
 8011a12:	79fb      	ldrb	r3, [r7, #7]
 8011a14:	4618      	mov	r0, r3
 8011a16:	f000 fb9b 	bl	8012150 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d029      	beq.n	8011a74 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x7e>
                ValueType value = ValueType();
 8011a20:	2300      	movs	r3, #0
 8011a22:	74fb      	strb	r3, [r7, #19]
                const int res = RawValueType::decode(value, codec, TailArrayOptDisabled);
 8011a24:	f107 0313 	add.w	r3, r7, #19
 8011a28:	2200      	movs	r2, #0
 8011a2a:	68b9      	ldr	r1, [r7, #8]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7ff fce2 	bl	80113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011a32:	61b8      	str	r0, [r7, #24]
                if (res < 0)
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	da01      	bge.n	8011a3e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x48>
                    return res;
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	e041      	b.n	8011ac2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xcc>
                if (res == 0)             // Success: End of stream reached (even if zero items were read)
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d101      	bne.n	8011a48 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x52>
                    return 1;
 8011a44:	2301      	movs	r3, #1
 8011a46:	e03c      	b.n	8011ac2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xcc>
                if (size() == MaxSize_)   // Error: Max array length reached, but the end of stream is not
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f000 fb92 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b7f      	cmp	r3, #127	; 0x7f
 8011a54:	bf0c      	ite	eq
 8011a56:	2301      	moveq	r3, #1
 8011a58:	2300      	movne	r3, #0
 8011a5a:	b2db      	uxtb	r3, r3
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x70>
                    return -ErrInvalidMarshalData;
 8011a60:	f06f 0305 	mvn.w	r3, #5
 8011a64:	e02d      	b.n	8011ac2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xcc>
                push_back(value);
 8011a66:	f107 0313 	add.w	r3, r7, #19
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f000 fba7 	bl	80121c0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE9push_backERKh>
            while (true)
 8011a72:	e7d5      	b.n	8011a20 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x2a>
            typename StorageType<typename Base::RawEncodedSizeType>::Type sz = 0;
 8011a74:	2300      	movs	r3, #0
 8011a76:	74bb      	strb	r3, [r7, #18]
            const int res_sz = Base::RawEncodedSizeType::decode(sz, codec, TailArrayOptDisabled);
 8011a78:	f107 0312 	add.w	r3, r7, #18
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	68b9      	ldr	r1, [r7, #8]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 fbba 	bl	80121fa <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011a86:	61f8      	str	r0, [r7, #28]
            if (res_sz <= 0)
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	dc01      	bgt.n	8011a92 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x9c>
                return res_sz;
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	e017      	b.n	8011ac2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xcc>
            if (static_cast<unsigned>(sz) > MaxSize_)   // False 'type-limits' warning occurs here
 8011a92:	7cbb      	ldrb	r3, [r7, #18]
 8011a94:	b25b      	sxtb	r3, r3
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	da02      	bge.n	8011aa0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xaa>
                return -ErrInvalidMarshalData;
 8011a9a:	f06f 0305 	mvn.w	r3, #5
 8011a9e:	e010      	b.n	8011ac2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xcc>
            resize(sz);
 8011aa0:	7cbb      	ldrb	r3, [r7, #18]
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f000 fbba 	bl	801221e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEh>
            if (sz == 0)
 8011aaa:	7cbb      	ldrb	r3, [r7, #18]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xbe>
                return 1;
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	e006      	b.n	8011ac2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xcc>
            return decodeImpl(codec, tao_mode, FalseType());
 8011ab4:	79fa      	ldrb	r2, [r7, #7]
 8011ab6:	4623      	mov	r3, r4
 8011ab8:	68b9      	ldr	r1, [r7, #8]
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f000 fbc2 	bl	8012244 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 8011ac0:	4603      	mov	r3, r0
    }
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3724      	adds	r7, #36	; 0x24
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd90      	pop	{r4, r7, pc}

08011aca <_ZN6uavcan16DynamicArrayBaseILj31EE4growEv>:
    void grow()
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b082      	sub	sp, #8
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
        if (size_ >= MaxSize)
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	2b1e      	cmp	r3, #30
 8011ad8:	d904      	bls.n	8011ae4 <_ZN6uavcan16DynamicArrayBaseILj31EE4growEv+0x1a>
            (void)validateRange(MaxSize);  // Will throw, UAVCAN_ASSERT() or do nothing
 8011ada:	211f      	movs	r1, #31
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7fd f8d7 	bl	800ec90 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh>
    }
 8011ae2:	e005      	b.n	8011af0 <_ZN6uavcan16DynamicArrayBaseILj31EE4growEv+0x26>
            size_++;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	b2da      	uxtb	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	701a      	strb	r2, [r3, #0]
    }
 8011af0:	bf00      	nop
 8011af2:	3708      	adds	r7, #8
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj31EE2atEh>:
    ValueType& at(SizeType pos)             { return data_[Base::validateRange(pos)]; }
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	460b      	mov	r3, r1
 8011b02:	70fb      	strb	r3, [r7, #3]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	78fa      	ldrb	r2, [r7, #3]
 8011b08:	4611      	mov	r1, r2
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fd f8c0 	bl	800ec90 <_ZNK6uavcan16DynamicArrayBaseILj31EE13validateRangeEh>
 8011b10:	4603      	mov	r3, r0
 8011b12:	461a      	mov	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	4413      	add	r3, r2
 8011b18:	3301      	adds	r3, #1
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
	...

08011b24 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_>:
     * Works only with string-like arrays, otherwise fails to compile.
     * @param format    Format string for std::snprintf(), e.g. "%08x", "%f"
     * @param value     Arbitrary value of a primitive type (should fail to compile if there's a non-primitive type)
     */
    template <typename A>
    void appendFormatted(const char* const format, const A value)
 8011b24:	b590      	push	{r4, r7, lr}
 8011b26:	b08b      	sub	sp, #44	; 0x2c
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	607a      	str	r2, [r7, #4]
    {
        StaticAssert<Base::IsStringLike>::check();
 8011b30:	f7f3 ff4e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<IsDynamic>::check();
 8011b34:	f7f3 ff4c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>

        StaticAssert<sizeof(A() >= A(0))>::check();              // This check allows to weed out most compound types
 8011b38:	f7f3 ff4a 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(sizeof(A) <= sizeof(long double)) ||
                     (sizeof(A) <= sizeof(long long))>::check(); // Another stupid check to catch non-primitive types
 8011b3c:	f7f3 ff48 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>

        if (!format)
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0x30>
        {
            UAVCAN_ASSERT(0);
 8011b46:	4b32      	ldr	r3, [pc, #200]	; (8011c10 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xec>)
 8011b48:	4a32      	ldr	r2, [pc, #200]	; (8011c14 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf0>)
 8011b4a:	f240 3183 	movw	r1, #899	; 0x383
 8011b4e:	4832      	ldr	r0, [pc, #200]	; (8011c18 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf4>)
 8011b50:	f00e fd1c 	bl	802058c <__assert_func>
            return;
        }
        // Add some hardcore runtime checks for the format string correctness?

        ValueType* const ptr = Base::end();
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f000 fbd2 	bl	8012300 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE3endEv>
 8011b5c:	6238      	str	r0, [r7, #32]
        UAVCAN_ASSERT(capacity() >= size());
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	4618      	mov	r0, r3
 8011b62:	f000 fbdd 	bl	8012320 <_ZNK6uavcan16DynamicArrayBaseILj90EE8capacityEv>
 8011b66:	4603      	mov	r3, r0
 8011b68:	461c      	mov	r4, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7fc fced 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 8011b72:	4603      	mov	r3, r0
 8011b74:	429c      	cmp	r4, r3
 8011b76:	d206      	bcs.n	8011b86 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0x62>
 8011b78:	4b28      	ldr	r3, [pc, #160]	; (8011c1c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf8>)
 8011b7a:	4a26      	ldr	r2, [pc, #152]	; (8011c14 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf0>)
 8011b7c:	f240 3189 	movw	r1, #905	; 0x389
 8011b80:	4825      	ldr	r0, [pc, #148]	; (8011c18 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf4>)
 8011b82:	f00e fd03 	bl	802058c <__assert_func>
        const SizeType max_size = SizeType(capacity() - size());
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f000 fbc9 	bl	8012320 <_ZNK6uavcan16DynamicArrayBaseILj90EE8capacityEv>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	461c      	mov	r4, r3
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7fc fcd9 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	1ae3      	subs	r3, r4, r3
 8011b9e:	77fb      	strb	r3, [r7, #31]

        // We have one extra byte for the null terminator, hence +1
        const int ret = snprintf(reinterpret_cast<char*>(ptr), SizeType(max_size + 1U), format, value);
 8011ba0:	7ffb      	ldrb	r3, [r7, #31]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	68ba      	ldr	r2, [r7, #8]
 8011bac:	6a38      	ldr	r0, [r7, #32]
 8011bae:	f7f3 fef7 	bl	80059a0 <_ZN6uavcan8snprintfEPcjPKcz>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	617b      	str	r3, [r7, #20]

        for (int i = 0; i < min(ret, int(max_size)); i++)
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8011bba:	7ffb      	ldrb	r3, [r7, #31]
 8011bbc:	61bb      	str	r3, [r7, #24]
 8011bbe:	f107 0218 	add.w	r2, r7, #24
 8011bc2:	f107 0314 	add.w	r3, r7, #20
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f000 fbb4 	bl	8012336 <_ZN6uavcan3minIiEERKT_S3_S3_>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	bfb4      	ite	lt
 8011bd8:	2301      	movlt	r3, #1
 8011bda:	2300      	movge	r3, #0
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d007      	beq.n	8011bf2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xce>
        {
            Base::grow();
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f000 fbba 	bl	801235e <_ZN6uavcan16DynamicArrayBaseILj90EE4growEv>
        for (int i = 0; i < min(ret, int(max_size)); i++)
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	3301      	adds	r3, #1
 8011bee:	627b      	str	r3, [r7, #36]	; 0x24
 8011bf0:	e7e3      	b.n	8011bba <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0x96>
        }
        if (ret < 0)
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	da06      	bge.n	8011c06 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xe2>
        {
            UAVCAN_ASSERT(0);    // Likely an invalid format string
 8011bf8:	4b05      	ldr	r3, [pc, #20]	; (8011c10 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xec>)
 8011bfa:	4a06      	ldr	r2, [pc, #24]	; (8011c14 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf0>)
 8011bfc:	f240 3195 	movw	r1, #917	; 0x395
 8011c00:	4805      	ldr	r0, [pc, #20]	; (8011c18 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE15appendFormattedIPKcEEvS9_T_+0xf4>)
 8011c02:	f00e fcc3 	bl	802058c <__assert_func>
            (*this) += format;   // So we print it as is in release builds
        }
    }
 8011c06:	bf00      	nop
 8011c08:	372c      	adds	r7, #44	; 0x2c
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd90      	pop	{r4, r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	08021b88 	.word	0x08021b88
 8011c14:	080254b0 	.word	0x080254b0
 8011c18:	08021f6c 	.word	0x08021f6c
 8011c1c:	080224b8 	.word	0x080224b8

08011c20 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EEC1Ev>:
    ArrayImpl() { initialize<ValueType>(0); }
 8011c20:	b5b0      	push	{r4, r5, r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 fbae 	bl	801238c <_ZN6uavcan16DynamicArrayBaseILj3EEC1Ev>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	3308      	adds	r3, #8
 8011c34:	2402      	movs	r4, #2
 8011c36:	461d      	mov	r5, r3
 8011c38:	2c00      	cmp	r4, #0
 8011c3a:	db05      	blt.n	8011c48 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EEC1Ev+0x28>
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f7f7 fc55 	bl	80094ec <_ZN6uavcan8protocol14CANIfaceStats_ILi0EEC1Ev>
 8011c42:	3518      	adds	r5, #24
 8011c44:	3c01      	subs	r4, #1
 8011c46:	e7f7      	b.n	8011c38 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EEC1Ev+0x18>
 8011c48:	2100      	movs	r1, #0
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fbac 	bl	80123a8 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10initializeIS3_EEvz>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	3708      	adds	r7, #8
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bdb0      	pop	{r4, r5, r7, pc}

08011c5a <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int GetTransportStats_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b086      	sub	sp, #24
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	4613      	mov	r3, r2
 8011c66:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	617b      	str	r3, [r7, #20]
    res = FieldTypes::transfers_tx::encode(self.transfers_tx, codec,  ::uavcan::TailArrayOptDisabled);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c72:	2300      	movs	r3, #0
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	f000 fba0 	bl	80123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011c7a:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	dc01      	bgt.n	8011c86 <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	e022      	b.n	8011ccc <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::transfers_rx::encode(self.transfers_rx, codec,  ::uavcan::TailArrayOptDisabled);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	f000 fb93 	bl	80123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011c94:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	dc01      	bgt.n	8011ca0 <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x46>
        return res;
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	e015      	b.n	8011ccc <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::transfer_errors::encode(self.transfer_errors, codec,  ::uavcan::TailArrayOptDisabled);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	f000 fb86 	bl	80123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011cae:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	dc01      	bgt.n	8011cba <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x60>
        return res;
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	e008      	b.n	8011ccc <_ZN6uavcan8protocol18GetTransportStats_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::can_iface_stats::encode(self.can_iface_stats, codec,  tao_mode);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	3318      	adds	r3, #24
 8011cbe:	79fa      	ldrb	r2, [r7, #7]
 8011cc0:	68b9      	ldr	r1, [r7, #8]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f000 fb93 	bl	80123ee <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE6encodeERKS5_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011cc8:	6178      	str	r0, [r7, #20]
    return res;
 8011cca:	697b      	ldr	r3, [r7, #20]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3718      	adds	r7, #24
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <_ZN6uavcan8protocol18GetTransportStats_8Request_ILi0EEC1Ev>:
        Request_()
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8011cdc:	f7f3 fe78 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <_ZN6uavcan8protocol12RestartNode_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int RestartNode_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b086      	sub	sp, #24
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	60f8      	str	r0, [r7, #12]
 8011cf2:	60b9      	str	r1, [r7, #8]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	617b      	str	r3, [r7, #20]
    res = FieldTypes::ok::encode(self.ok, codec,  tao_mode);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	79fa      	ldrb	r2, [r7, #7]
 8011d02:	68b9      	ldr	r1, [r7, #8]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f000 fb84 	bl	8012412 <_ZN6uavcan11IntegerSpecILj1ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEbRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011d0a:	6178      	str	r0, [r7, #20]
    return res;
 8011d0c:	697b      	ldr	r3, [r7, #20]
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3718      	adds	r7, #24
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}

08011d16 <_ZN6uavcan8protocol12RestartNode_8Request_ILi0EEC1Ev>:
        Request_()
 8011d16:	b590      	push	{r4, r7, lr}
 8011d18:	b083      	sub	sp, #12
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
            : magic_number()
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	f04f 0300 	mov.w	r3, #0
 8011d24:	f04f 0400 	mov.w	r4, #0
 8011d28:	e9c2 3400 	strd	r3, r4, [r2]
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8011d2c:	f7f3 fe50 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd90      	pop	{r4, r7, pc}
	...

08011d3c <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 8011d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d3e:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 8011d40:	f7f3 fe46 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 8011d44:	f000 fb77 	bl	8012436 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8011d48:	4604      	mov	r4, r0
 8011d4a:	460d      	mov	r5, r1
 8011d4c:	f7f3 fe9a 	bl	8005a84 <_ZN6uavcan13NumericTraitsIyE3maxEv>
 8011d50:	4602      	mov	r2, r0
 8011d52:	460b      	mov	r3, r1
 8011d54:	42ab      	cmp	r3, r5
 8011d56:	bf08      	it	eq
 8011d58:	42a2      	cmpeq	r2, r4
 8011d5a:	d205      	bcs.n	8011d68 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x2c>
 8011d5c:	4b0c      	ldr	r3, [pc, #48]	; (8011d90 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 8011d5e:	4a0d      	ldr	r2, [pc, #52]	; (8011d94 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x58>)
 8011d60:	2164      	movs	r1, #100	; 0x64
 8011d62:	480d      	ldr	r0, [pc, #52]	; (8011d98 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x5c>)
 8011d64:	f00e fc12 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 8011d68:	f000 fb6e 	bl	8012448 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	460e      	mov	r6, r1
 8011d70:	f7f3 fe93 	bl	8005a9a <_ZN6uavcan13NumericTraitsIyE3minEv>
 8011d74:	4603      	mov	r3, r0
 8011d76:	460c      	mov	r4, r1
 8011d78:	42a6      	cmp	r6, r4
 8011d7a:	bf08      	it	eq
 8011d7c:	429d      	cmpeq	r5, r3
 8011d7e:	d205      	bcs.n	8011d8c <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>
 8011d80:	4b06      	ldr	r3, [pc, #24]	; (8011d9c <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x60>)
 8011d82:	4a04      	ldr	r2, [pc, #16]	; (8011d94 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x58>)
 8011d84:	2166      	movs	r1, #102	; 0x66
 8011d86:	4804      	ldr	r0, [pc, #16]	; (8011d98 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x5c>)
 8011d88:	f00e fc00 	bl	802058c <__assert_func>
    }
 8011d8c:	bf00      	nop
 8011d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d90:	080221f0 	.word	0x080221f0
 8011d94:	08028614 	.word	0x08028614
 8011d98:	0802221c 	.word	0x0802221c
 8011d9c:	08022268 	.word	0x08022268

08011da0 <_ZN6uavcan11ScalarCodec6decodeILj40EyEEiRT0_>:
int ScalarCodec::decode(T& value)
 8011da0:	b590      	push	{r4, r7, lr}
 8011da2:	b087      	sub	sp, #28
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
    validate<BitLen, T>();
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fb57 	bl	801245e <_ZN6uavcan11ScalarCodec8validateILj40EyEEvv>
    byte_union.value = T();
 8011db0:	f04f 0300 	mov.w	r3, #0
 8011db4:	f04f 0400 	mov.w	r4, #0
 8011db8:	e9c7 3402 	strd	r3, r4, [r7, #8]
    const int read_res = decodeBytesImpl(byte_union.bytes, BitLen);
 8011dbc:	f107 0308 	add.w	r3, r7, #8
 8011dc0:	2228      	movs	r2, #40	; 0x28
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f002 fb67 	bl	8014498 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj>
 8011dca:	6178      	str	r0, [r7, #20]
    if (read_res > 0)
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	dd0e      	ble.n	8011df0 <_ZN6uavcan11ScalarCodec6decodeILj40EyEEiRT0_+0x50>
        convertByteOrder<BitLen>(byte_union.bytes);
 8011dd2:	f107 0308 	add.w	r3, r7, #8
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f000 fb4f 	bl	801247a <_ZN6uavcan11ScalarCodec16convertByteOrderILj40ELj8EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>
        fixTwosComplement<BitLen, T>(byte_union.value);
 8011ddc:	f107 0308 	add.w	r3, r7, #8
 8011de0:	4618      	mov	r0, r3
 8011de2:	f000 fb54 	bl	801248e <_ZN6uavcan11ScalarCodec17fixTwosComplementILj40EyEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>
        value = byte_union.value;
 8011de6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011dea:	683a      	ldr	r2, [r7, #0]
 8011dec:	e9c2 3400 	strd	r3, r4, [r2]
    return read_res;
 8011df0:	697b      	ldr	r3, [r7, #20]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	371c      	adds	r7, #28
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd90      	pop	{r4, r7, pc}

08011dfa <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int GetDataTypeInfo_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b086      	sub	sp, #24
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	60f8      	str	r0, [r7, #12]
 8011e02:	60b9      	str	r1, [r7, #8]
 8011e04:	4613      	mov	r3, r2
 8011e06:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	617b      	str	r3, [r7, #20]
    res = FieldTypes::signature::encode(self.signature, codec,  ::uavcan::TailArrayOptDisabled);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e12:	2300      	movs	r3, #0
 8011e14:	68ba      	ldr	r2, [r7, #8]
 8011e16:	f000 fb44 	bl	80124a2 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011e1a:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	dc01      	bgt.n	8011e26 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	e02f      	b.n	8011e86 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::id::encode(self.id, codec,  ::uavcan::TailArrayOptDisabled);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	891b      	ldrh	r3, [r3, #8]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	68b9      	ldr	r1, [r7, #8]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f000 fb51 	bl	80124d6 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEtRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011e34:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	dc01      	bgt.n	8011e40 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x46>
        return res;
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	e022      	b.n	8011e86 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::kind::encode(self.kind, codec,  ::uavcan::TailArrayOptDisabled);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	330a      	adds	r3, #10
 8011e44:	2200      	movs	r2, #0
 8011e46:	68b9      	ldr	r1, [r7, #8]
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 fb5c 	bl	8012506 <_ZN6uavcan8protocol13DataTypeKind_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011e4e:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dc01      	bgt.n	8011e5a <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x60>
        return res;
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	e015      	b.n	8011e86 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::flags::encode(self.flags, codec,  ::uavcan::TailArrayOptDisabled);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	7adb      	ldrb	r3, [r3, #11]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	68b9      	ldr	r1, [r7, #8]
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fc f9f6 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011e68:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	dc01      	bgt.n	8011e74 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x7a>
        return res;
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	e008      	b.n	8011e86 <_ZN6uavcan8protocol16GetDataTypeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::name::encode(self.name, codec,  tao_mode);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	330c      	adds	r3, #12
 8011e78:	79fa      	ldrb	r2, [r7, #7]
 8011e7a:	68b9      	ldr	r1, [r7, #8]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f000 fb58 	bl	8012532 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011e82:	6178      	str	r0, [r7, #20]
    return res;
 8011e84:	697b      	ldr	r3, [r7, #20]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3718      	adds	r7, #24
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}

08011e8e <_ZN6uavcan8protocol16GetDataTypeInfo_8Request_ILi0EEC1Ev>:
        Request_()
 8011e8e:	b580      	push	{r7, lr}
 8011e90:	b082      	sub	sp, #8
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
            , name()
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	801a      	strh	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	3302      	adds	r3, #2
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7ff fbff 	bl	80116a4 <_ZN6uavcan8protocol13DataTypeKind_ILi0EEC1Ev>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	3303      	adds	r3, #3
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7f8 fba4 	bl	800a5f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEC1Ev>
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8011eb0:	f7f3 fd8e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3708      	adds	r7, #8
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
	...

08011ec0 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 8011ec0:	b598      	push	{r3, r4, r7, lr}
 8011ec2:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 8011ec4:	f7f3 fd84 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 8011ec8:	f000 fb45 	bl	8012556 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461c      	mov	r4, r3
 8011ed0:	f7f3 fdab 	bl	8005a2a <_ZN6uavcan13NumericTraitsItE3maxEv>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	429c      	cmp	r4, r3
 8011ed8:	d905      	bls.n	8011ee6 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x26>
 8011eda:	4b0b      	ldr	r3, [pc, #44]	; (8011f08 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 8011edc:	4a0b      	ldr	r2, [pc, #44]	; (8011f0c <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 8011ede:	2164      	movs	r1, #100	; 0x64
 8011ee0:	480b      	ldr	r0, [pc, #44]	; (8011f10 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 8011ee2:	f00e fb53 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 8011ee6:	f000 fb3d 	bl	8012564 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8011eea:	4603      	mov	r3, r0
 8011eec:	461c      	mov	r4, r3
 8011eee:	f7f3 fda5 	bl	8005a3c <_ZN6uavcan13NumericTraitsItE3minEv>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	429c      	cmp	r4, r3
 8011ef6:	d205      	bcs.n	8011f04 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>
 8011ef8:	4b06      	ldr	r3, [pc, #24]	; (8011f14 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 8011efa:	4a04      	ldr	r2, [pc, #16]	; (8011f0c <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 8011efc:	2166      	movs	r1, #102	; 0x66
 8011efe:	4804      	ldr	r0, [pc, #16]	; (8011f10 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 8011f00:	f00e fb44 	bl	802058c <__assert_func>
    }
 8011f04:	bf00      	nop
 8011f06:	bd98      	pop	{r3, r4, r7, pc}
 8011f08:	080221f0 	.word	0x080221f0
 8011f0c:	08026c20 	.word	0x08026c20
 8011f10:	0802221c 	.word	0x0802221c
 8011f14:	08022268 	.word	0x08022268

08011f18 <_ZN6uavcan11ScalarCodec6decodeILj16EtEEiRT0_>:
int ScalarCodec::decode(T& value)
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
    validate<BitLen, T>();
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 fb26 	bl	8012574 <_ZN6uavcan11ScalarCodec8validateILj16EtEEvv>
    byte_union.value = T();
 8011f28:	2300      	movs	r3, #0
 8011f2a:	813b      	strh	r3, [r7, #8]
    const int read_res = decodeBytesImpl(byte_union.bytes, BitLen);
 8011f2c:	f107 0308 	add.w	r3, r7, #8
 8011f30:	2210      	movs	r2, #16
 8011f32:	4619      	mov	r1, r3
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f002 faaf 	bl	8014498 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj>
 8011f3a:	60f8      	str	r0, [r7, #12]
    if (read_res > 0)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dd0c      	ble.n	8011f5c <_ZN6uavcan11ScalarCodec6decodeILj16EtEEiRT0_+0x44>
        convertByteOrder<BitLen>(byte_union.bytes);
 8011f42:	f107 0308 	add.w	r3, r7, #8
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 fb22 	bl	8012590 <_ZN6uavcan11ScalarCodec16convertByteOrderILj16ELj2EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>
        fixTwosComplement<BitLen, T>(byte_union.value);
 8011f4c:	f107 0308 	add.w	r3, r7, #8
 8011f50:	4618      	mov	r0, r3
 8011f52:	f000 fb27 	bl	80125a4 <_ZN6uavcan11ScalarCodec17fixTwosComplementILj16EtEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>
        value = byte_union.value;
 8011f56:	893a      	ldrh	r2, [r7, #8]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	801a      	strh	r2, [r3, #0]
    return read_res;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}

08011f66 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int decodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType)   /// Dynamic
 8011f66:	b590      	push	{r4, r7, lr}
 8011f68:	b089      	sub	sp, #36	; 0x24
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	60f8      	str	r0, [r7, #12]
 8011f6e:	60b9      	str	r1, [r7, #8]
 8011f70:	713b      	strb	r3, [r7, #4]
 8011f72:	4613      	mov	r3, r2
 8011f74:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 8011f76:	f7f3 fd2b 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        Base::clear();
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7f8 fc13 	bl	800a7a8 <_ZN6uavcan16DynamicArrayBaseILj80EE5clearEv>
        if (isOptimizedTailArray(tao_mode))
 8011f82:	79fb      	ldrb	r3, [r7, #7]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 fb17 	bl	80125b8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d029      	beq.n	8011fe4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x7e>
                ValueType value = ValueType();
 8011f90:	2300      	movs	r3, #0
 8011f92:	74fb      	strb	r3, [r7, #19]
                const int res = RawValueType::decode(value, codec, TailArrayOptDisabled);
 8011f94:	f107 0313 	add.w	r3, r7, #19
 8011f98:	2200      	movs	r2, #0
 8011f9a:	68b9      	ldr	r1, [r7, #8]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7ff fa2a 	bl	80113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011fa2:	61b8      	str	r0, [r7, #24]
                if (res < 0)
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	da01      	bge.n	8011fae <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x48>
                    return res;
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	e040      	b.n	8012030 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xca>
                if (res == 0)             // Success: End of stream reached (even if zero items were read)
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d101      	bne.n	8011fb8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x52>
                    return 1;
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	e03b      	b.n	8012030 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xca>
                if (size() == MaxSize_)   // Error: Max array length reached, but the end of stream is not
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7f8 fbce 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b50      	cmp	r3, #80	; 0x50
 8011fc4:	bf0c      	ite	eq
 8011fc6:	2301      	moveq	r3, #1
 8011fc8:	2300      	movne	r3, #0
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d002      	beq.n	8011fd6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x70>
                    return -ErrInvalidMarshalData;
 8011fd0:	f06f 0305 	mvn.w	r3, #5
 8011fd4:	e02c      	b.n	8012030 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xca>
                push_back(value);
 8011fd6:	f107 0313 	add.w	r3, r7, #19
 8011fda:	4619      	mov	r1, r3
 8011fdc:	68f8      	ldr	r0, [r7, #12]
 8011fde:	f7f8 fbf0 	bl	800a7c2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE9push_backERKh>
            while (true)
 8011fe2:	e7d5      	b.n	8011f90 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x2a>
            typename StorageType<typename Base::RawEncodedSizeType>::Type sz = 0;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	74bb      	strb	r3, [r7, #18]
            const int res_sz = Base::RawEncodedSizeType::decode(sz, codec, TailArrayOptDisabled);
 8011fe8:	f107 0312 	add.w	r3, r7, #18
 8011fec:	2200      	movs	r2, #0
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f000 f902 	bl	80121fa <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8011ff6:	61f8      	str	r0, [r7, #28]
            if (res_sz <= 0)
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	dc01      	bgt.n	8012002 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x9c>
                return res_sz;
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	e016      	b.n	8012030 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xca>
            if (static_cast<unsigned>(sz) > MaxSize_)   // False 'type-limits' warning occurs here
 8012002:	7cbb      	ldrb	r3, [r7, #18]
 8012004:	2b50      	cmp	r3, #80	; 0x50
 8012006:	d902      	bls.n	801200e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xa8>
                return -ErrInvalidMarshalData;
 8012008:	f06f 0305 	mvn.w	r3, #5
 801200c:	e010      	b.n	8012030 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xca>
            resize(sz);
 801200e:	7cbb      	ldrb	r3, [r7, #18]
 8012010:	4619      	mov	r1, r3
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f000 fae1 	bl	80125da <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEh>
            if (sz == 0)
 8012018:	7cbb      	ldrb	r3, [r7, #18]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xbc>
                return 1;
 801201e:	2301      	movs	r3, #1
 8012020:	e006      	b.n	8012030 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0xca>
            return decodeImpl(codec, tao_mode, FalseType());
 8012022:	79fa      	ldrb	r2, [r7, #7]
 8012024:	4623      	mov	r3, r4
 8012026:	68b9      	ldr	r1, [r7, #8]
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f000 fae9 	bl	8012600 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 801202e:	4603      	mov	r3, r0
    }
 8012030:	4618      	mov	r0, r3
 8012032:	3724      	adds	r7, #36	; 0x24
 8012034:	46bd      	mov	sp, r7
 8012036:	bd90      	pop	{r4, r7, pc}

08012038 <_ZN6uavcan16coerceOrFallbackIbPNS_18NodeStatusProviderEEET_RKT0_RKS3_>:
To coerceOrFallback(const From& from, const To& default_)
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 8012042:	461a      	mov	r2, r3
 8012044:	6839      	ldr	r1, [r7, #0]
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 fb38 	bl	80126bc <_ZN6uavcan20CoerceOrFallbackImplIPNS_18NodeStatusProviderEbE4implERKS2_RKbNS_11BooleanTypeILb1EEE>
 801204c:	4603      	mov	r3, r0
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <_ZN6uavcan16coerceOrFallbackIbMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEEET_RKT0_RKSD_>:
To coerceOrFallback(const From& from, const To& default_)
 8012056:	b580      	push	{r7, lr}
 8012058:	b084      	sub	sp, #16
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
 801205e:	6039      	str	r1, [r7, #0]
                                                BooleanType<IsImplicitlyConvertibleFromTo<From, To>::Result>());
 8012060:	461a      	mov	r2, r3
 8012062:	6839      	ldr	r1, [r7, #0]
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 fb3c 	bl	80126e2 <_ZN6uavcan20CoerceOrFallbackImplIMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE>
 801206a:	4603      	mov	r3, r0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3710      	adds	r7, #16
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int GetNodeInfo_::Response_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 8012074:	b580      	push	{r7, lr}
 8012076:	b086      	sub	sp, #24
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	4613      	mov	r3, r2
 8012080:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8012082:	2301      	movs	r3, #1
 8012084:	617b      	str	r3, [r7, #20]
    res = FieldTypes::status::encode(self.status, codec,  ::uavcan::TailArrayOptDisabled);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	2200      	movs	r2, #0
 801208a:	68b9      	ldr	r1, [r7, #8]
 801208c:	4618      	mov	r0, r3
 801208e:	f000 fb41 	bl	8012714 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012092:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2b00      	cmp	r3, #0
 8012098:	dc01      	bgt.n	801209e <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2a>
        return res;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	e023      	b.n	80120e6 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::software_version::encode(self.software_version, codec,  ::uavcan::TailArrayOptDisabled);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	3310      	adds	r3, #16
 80120a2:	2200      	movs	r2, #0
 80120a4:	68b9      	ldr	r1, [r7, #8]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 fb7e 	bl	80127a8 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80120ac:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	dc01      	bgt.n	80120b8 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x44>
        return res;
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	e016      	b.n	80120e6 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::hardware_version::encode(self.hardware_version, codec,  ::uavcan::TailArrayOptDisabled);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	3320      	adds	r3, #32
 80120bc:	2200      	movs	r2, #0
 80120be:	68b9      	ldr	r1, [r7, #8]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f000 fbbb 	bl	801283c <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80120c6:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	dc01      	bgt.n	80120d2 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x5e>
        return res;
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	e009      	b.n	80120e6 <_ZN6uavcan8protocol12GetNodeInfo_9Response_ILi0EE6encodeERKS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::name::encode(self.name, codec,  tao_mode);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	f203 1333 	addw	r3, r3, #307	; 0x133
 80120d8:	79fa      	ldrb	r2, [r7, #7]
 80120da:	68b9      	ldr	r1, [r7, #8]
 80120dc:	4618      	mov	r0, r3
 80120de:	f000 fa28 	bl	8012532 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80120e2:	6178      	str	r0, [r7, #20]
    return res;
 80120e4:	697b      	ldr	r3, [r7, #20]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3718      	adds	r7, #24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}

080120ee <_ZN6uavcan17GenericSubscriberINS_8protocol4file20BeginFirmwareUpdate_ENS3_9Response_ILi0EEENS_26TransferListenerWithFilterEE25ReceivedDataStructureSpecC1Ev>:
        ReceivedDataStructureSpec() { }
 80120ee:	b580      	push	{r7, lr}
 80120f0:	b082      	sub	sp, #8
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4618      	mov	r0, r3
 80120fa:	f000 fbdc 	bl	80128b6 <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1Ev>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	4618      	mov	r0, r3
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EEC1Ev>:
    Array() { }
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	f000 fbe3 	bl	80128de <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EEC1Ev>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <_ZN6uavcan11ScalarCodec17fixTwosComplementILj8EhEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>:
    fixTwosComplement(T&) { }
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	bf00      	nop
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <_ZN6uavcan16DynamicArrayBaseILj127EE5clearEv>:
    void clear() { size_ = 0; }
 8012136:	b480      	push	{r7}
 8012138:	b083      	sub	sp, #12
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	701a      	strb	r2, [r3, #0]
 8012144:	bf00      	nop
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	4603      	mov	r3, r0
 8012158:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 801215a:	79fb      	ldrb	r3, [r7, #7]
 801215c:	2b01      	cmp	r3, #1
 801215e:	bf0c      	ite	eq
 8012160:	2301      	moveq	r3, #1
 8012162:	2300      	movne	r3, #0
 8012164:	b2db      	uxtb	r3, r3
    }
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
	...

08012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>:
    SizeType size() const
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d004      	beq.n	801218e <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x1a>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	3b01      	subs	r3, #1
 801218a:	2b7e      	cmp	r3, #126	; 0x7e
 801218c:	d801      	bhi.n	8012192 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x1e>
 801218e:	2301      	movs	r3, #1
 8012190:	e000      	b.n	8012194 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x20>
 8012192:	2300      	movs	r3, #0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d106      	bne.n	80121a6 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x32>
 8012198:	4b06      	ldr	r3, [pc, #24]	; (80121b4 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x40>)
 801219a:	4a07      	ldr	r2, [pc, #28]	; (80121b8 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x44>)
 801219c:	f44f 7182 	mov.w	r1, #260	; 0x104
 80121a0:	4806      	ldr	r0, [pc, #24]	; (80121bc <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv+0x48>)
 80121a2:	f00e f9f3 	bl	802058c <__assert_func>
        return size_;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	781b      	ldrb	r3, [r3, #0]
    }
 80121aa:	4618      	mov	r0, r3
 80121ac:	3708      	adds	r7, #8
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	08022010 	.word	0x08022010
 80121b8:	08028ec0 	.word	0x08028ec0
 80121bc:	08021f6c 	.word	0x08021f6c

080121c0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE9push_backERKh>:
    void push_back(const ValueType& value)
 80121c0:	b590      	push	{r4, r7, lr}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
        Base::grow();
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f000 fb97 	bl	8012900 <_ZN6uavcan16DynamicArrayBaseILj127EE4growEv>
        Base::at(SizeType(size() - 1)) = value;
 80121d2:	687c      	ldr	r4, [r7, #4]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7ff ffcc 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 80121dc:	4603      	mov	r3, r0
 80121de:	3b01      	subs	r3, #1
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	4619      	mov	r1, r3
 80121e4:	4620      	mov	r0, r4
 80121e6:	f000 fba2 	bl	801292e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE2atEh>
 80121ea:	4602      	mov	r2, r0
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	7013      	strb	r3, [r2, #0]
    }
 80121f2:	bf00      	nop
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd90      	pop	{r4, r7, pc}

080121fa <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int decode(StorageType& out_value, ScalarCodec& codec, TailArrayOptimizationMode)
 80121fa:	b580      	push	{r7, lr}
 80121fc:	b084      	sub	sp, #16
 80121fe:	af00      	add	r7, sp, #0
 8012200:	60f8      	str	r0, [r7, #12]
 8012202:	60b9      	str	r1, [r7, #8]
 8012204:	4613      	mov	r3, r2
 8012206:	71fb      	strb	r3, [r7, #7]
        validate();
 8012208:	f7fc fbfe 	bl	800ea08 <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
        return codec.decode<BitLen>(out_value);
 801220c:	68f9      	ldr	r1, [r7, #12]
 801220e:	68b8      	ldr	r0, [r7, #8]
 8012210:	f000 fba2 	bl	8012958 <_ZN6uavcan11ScalarCodec6decodeILj7EhEEiRT0_>
 8012214:	4603      	mov	r3, r0
    }
 8012216:	4618      	mov	r0, r3
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEh>:
    void resize(SizeType new_size)
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
 8012226:	460b      	mov	r3, r1
 8012228:	70fb      	strb	r3, [r7, #3]
        resize(new_size, ValueType());
 801222a:	2300      	movs	r3, #0
 801222c:	73fb      	strb	r3, [r7, #15]
 801222e:	f107 020f 	add.w	r2, r7, #15
 8012232:	78fb      	ldrb	r3, [r7, #3]
 8012234:	4619      	mov	r1, r3
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f000 fbb5 	bl	80129a6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh>
    }
 801223c:	bf00      	nop
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int decodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType)  /// Static
 8012244:	b590      	push	{r4, r7, lr}
 8012246:	b089      	sub	sp, #36	; 0x24
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	713b      	strb	r3, [r7, #4]
 8012250:	4613      	mov	r3, r2
 8012252:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff ff8c 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d106      	bne.n	8012270 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 8012262:	4b24      	ldr	r3, [pc, #144]	; (80122f4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 8012264:	4a24      	ldr	r2, [pc, #144]	; (80122f8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb4>)
 8012266:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 801226a:	4824      	ldr	r0, [pc, #144]	; (80122fc <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb8>)
 801226c:	f00e f98e 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 8012270:	2300      	movs	r3, #0
 8012272:	77fb      	strb	r3, [r7, #31]
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	4618      	mov	r0, r3
 8012278:	f7ff ff7c 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 801227c:	4603      	mov	r3, r0
 801227e:	461a      	mov	r2, r3
 8012280:	7ffb      	ldrb	r3, [r7, #31]
 8012282:	4293      	cmp	r3, r2
 8012284:	bf34      	ite	cc
 8012286:	2301      	movcc	r3, #1
 8012288:	2300      	movcs	r3, #0
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b00      	cmp	r3, #0
 801228e:	d02c      	beq.n	80122ea <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa6>
            const bool last_item = i == (size() - 1);
 8012290:	7ffc      	ldrb	r4, [r7, #31]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	4618      	mov	r0, r3
 8012296:	f7ff ff6d 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 801229a:	4603      	mov	r3, r0
 801229c:	3b01      	subs	r3, #1
 801229e:	429c      	cmp	r4, r3
 80122a0:	bf0c      	ite	eq
 80122a2:	2301      	moveq	r3, #1
 80122a4:	2300      	movne	r3, #0
 80122a6:	77bb      	strb	r3, [r7, #30]
            ValueType value = ValueType();                          // TODO: avoid extra copy
 80122a8:	2300      	movs	r3, #0
 80122aa:	75fb      	strb	r3, [r7, #23]
            const int res = RawValueType::decode(value, codec, last_item ? tao_mode : TailArrayOptDisabled);
 80122ac:	7fbb      	ldrb	r3, [r7, #30]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d001      	beq.n	80122b6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x72>
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	e000      	b.n	80122b8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x74>
 80122b6:	2300      	movs	r3, #0
 80122b8:	f107 0017 	add.w	r0, r7, #23
 80122bc:	461a      	mov	r2, r3
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	f7ff f899 	bl	80113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80122c4:	61b8      	str	r0, [r7, #24]
            if (res <= 0)
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	dc01      	bgt.n	80122d0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x8c>
                return res;
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	e00d      	b.n	80122ec <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>
            Base::at(i) = value;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	7ffa      	ldrb	r2, [r7, #31]
 80122d4:	4611      	mov	r1, r2
 80122d6:	4618      	mov	r0, r3
 80122d8:	f000 fb29 	bl	801292e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE2atEh>
 80122dc:	4603      	mov	r3, r0
 80122de:	7dfa      	ldrb	r2, [r7, #23]
 80122e0:	701a      	strb	r2, [r3, #0]
        for (SizeType i = 0; i < size(); i++)
 80122e2:	7ffb      	ldrb	r3, [r7, #31]
 80122e4:	3301      	adds	r3, #1
 80122e6:	77fb      	strb	r3, [r7, #31]
 80122e8:	e7c4      	b.n	8012274 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 80122ea:	2301      	movs	r3, #1
    }
 80122ec:	4618      	mov	r0, r3
 80122ee:	3724      	adds	r7, #36	; 0x24
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd90      	pop	{r4, r7, pc}
 80122f4:	08022294 	.word	0x08022294
 80122f8:	0802906c 	.word	0x0802906c
 80122fc:	08021f6c 	.word	0x08021f6c

08012300 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj90EE3endEv>:
    ValueType* end()               { return data_ + Base::size(); }
 8012300:	b590      	push	{r4, r7, lr}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	1c5c      	adds	r4, r3, #1
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4618      	mov	r0, r3
 8012310:	f7fc f91c 	bl	800e54c <_ZNK6uavcan16DynamicArrayBaseILj90EE4sizeEv>
 8012314:	4603      	mov	r3, r0
 8012316:	4423      	add	r3, r4
 8012318:	4618      	mov	r0, r3
 801231a:	370c      	adds	r7, #12
 801231c:	46bd      	mov	sp, r7
 801231e:	bd90      	pop	{r4, r7, pc}

08012320 <_ZNK6uavcan16DynamicArrayBaseILj90EE8capacityEv>:
    SizeType capacity() const { return MaxSize; }
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	235a      	movs	r3, #90	; 0x5a
 801232a:	4618      	mov	r0, r3
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <_ZN6uavcan3minIiEERKT_S3_S3_>:
const T& min(const T& a, const T& b)
 8012336:	b480      	push	{r7}
 8012338:	b083      	sub	sp, #12
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
 801233e:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	429a      	cmp	r2, r3
 801234a:	da01      	bge.n	8012350 <_ZN6uavcan3minIiEERKT_S3_S3_+0x1a>
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	e000      	b.n	8012352 <_ZN6uavcan3minIiEERKT_S3_S3_+0x1c>
 8012350:	687b      	ldr	r3, [r7, #4]
}
 8012352:	4618      	mov	r0, r3
 8012354:	370c      	adds	r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <_ZN6uavcan16DynamicArrayBaseILj90EE4growEv>:
    void grow()
 801235e:	b580      	push	{r7, lr}
 8012360:	b082      	sub	sp, #8
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
        if (size_ >= MaxSize)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b59      	cmp	r3, #89	; 0x59
 801236c:	d904      	bls.n	8012378 <_ZN6uavcan16DynamicArrayBaseILj90EE4growEv+0x1a>
            (void)validateRange(MaxSize);  // Will throw, UAVCAN_ASSERT() or do nothing
 801236e:	215a      	movs	r1, #90	; 0x5a
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f7fc fce3 	bl	800ed3c <_ZNK6uavcan16DynamicArrayBaseILj90EE13validateRangeEh>
    }
 8012376:	e005      	b.n	8012384 <_ZN6uavcan16DynamicArrayBaseILj90EE4growEv+0x26>
            size_++;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	3301      	adds	r3, #1
 801237e:	b2da      	uxtb	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	701a      	strb	r2, [r3, #0]
    }
 8012384:	bf00      	nop
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <_ZN6uavcan16DynamicArrayBaseILj3EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	701a      	strb	r2, [r3, #0]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4618      	mov	r0, r3
 801239e:	370c      	adds	r7, #12
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <_ZN6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10initializeIS3_EEvz>:
    template <typename> void initialize(...) { }
 80123a8:	b40f      	push	{r0, r1, r2, r3}
 80123aa:	b480      	push	{r7}
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	bf00      	nop
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	b004      	add	sp, #16
 80123b8:	4770      	bx	lr

080123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 80123ba:	b590      	push	{r4, r7, lr}
 80123bc:	b085      	sub	sp, #20
 80123be:	af00      	add	r7, sp, #0
 80123c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80123c4:	607a      	str	r2, [r7, #4]
 80123c6:	70fb      	strb	r3, [r7, #3]
        validate();
 80123c8:	f000 fb44 	bl	8012a54 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 80123cc:	f107 0308 	add.w	r3, r7, #8
 80123d0:	4618      	mov	r0, r3
 80123d2:	f000 fb71 	bl	8012ab8 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy>
        return codec.encode<BitLen>(value);
 80123d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80123da:	461a      	mov	r2, r3
 80123dc:	4623      	mov	r3, r4
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 fba1 	bl	8012b26 <_ZN6uavcan11ScalarCodec6encodeILj48EyEEiT0_>
 80123e4:	4603      	mov	r3, r0
    }
 80123e6:	4618      	mov	r0, r3
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd90      	pop	{r4, r7, pc}

080123ee <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE6encodeERKS5_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 80123ee:	b590      	push	{r4, r7, lr}
 80123f0:	b087      	sub	sp, #28
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	60f8      	str	r0, [r7, #12]
 80123f6:	60b9      	str	r1, [r7, #8]
 80123f8:	4613      	mov	r3, r2
 80123fa:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 80123fc:	79fa      	ldrb	r2, [r7, #7]
 80123fe:	4623      	mov	r3, r4
 8012400:	68b9      	ldr	r1, [r7, #8]
 8012402:	68f8      	ldr	r0, [r7, #12]
 8012404:	f000 fbb2 	bl	8012b6c <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 8012408:	4603      	mov	r3, r0
    }
 801240a:	4618      	mov	r0, r3
 801240c:	371c      	adds	r7, #28
 801240e:	46bd      	mov	sp, r7
 8012410:	bd90      	pop	{r4, r7, pc}

08012412 <_ZN6uavcan11IntegerSpecILj1ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEbRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	4603      	mov	r3, r0
 801241a:	6039      	str	r1, [r7, #0]
 801241c:	71fb      	strb	r3, [r7, #7]
 801241e:	4613      	mov	r3, r2
 8012420:	71bb      	strb	r3, [r7, #6]
        return codec.encode<BitLen>(value);
 8012422:	79fb      	ldrb	r3, [r7, #7]
 8012424:	4619      	mov	r1, r3
 8012426:	6838      	ldr	r0, [r7, #0]
 8012428:	f000 fbe4 	bl	8012bf4 <_ZN6uavcan11ScalarCodec6encodeILj1EbEEiT0_>
 801242c:	4603      	mov	r3, r0
    }
 801242e:	4618      	mov	r0, r3
 8012430:	3708      	adds	r7, #8
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}

08012436 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 8012436:	b598      	push	{r3, r4, r7, lr}
 8012438:	af00      	add	r7, sp, #0
 801243a:	f000 fbfc 	bl	8012c36 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 801243e:	4603      	mov	r3, r0
 8012440:	460c      	mov	r4, r1
 8012442:	4618      	mov	r0, r3
 8012444:	4621      	mov	r1, r4
 8012446:	bd98      	pop	{r3, r4, r7, pc}

08012448 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 8012448:	b490      	push	{r4, r7}
 801244a:	af00      	add	r7, sp, #0
 801244c:	f04f 0300 	mov.w	r3, #0
 8012450:	f04f 0400 	mov.w	r4, #0
 8012454:	4618      	mov	r0, r3
 8012456:	4621      	mov	r1, r4
 8012458:	46bd      	mov	sp, r7
 801245a:	bc90      	pop	{r4, r7}
 801245c:	4770      	bx	lr

0801245e <_ZN6uavcan11ScalarCodec8validateILj40EyEEvv>:
    void validate()
 801245e:	b580      	push	{r7, lr}
 8012460:	b082      	sub	sp, #8
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 8012466:	f7f3 fab3 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 801246a:	f7f3 fab1 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 801246e:	f7f3 faaf 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <_ZN6uavcan11ScalarCodec16convertByteOrderILj40ELj8EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&bytes)[Size])
 801247a:	b480      	push	{r7}
 801247c:	b083      	sub	sp, #12
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
    }
 8012482:	bf00      	nop
 8012484:	370c      	adds	r7, #12
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr

0801248e <_ZN6uavcan11ScalarCodec17fixTwosComplementILj40EyEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>:
    fixTwosComplement(T&) { }
 801248e:	b480      	push	{r7}
 8012490:	b083      	sub	sp, #12
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	bf00      	nop
 8012498:	370c      	adds	r7, #12
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr

080124a2 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 80124a2:	b590      	push	{r4, r7, lr}
 80124a4:	b085      	sub	sp, #20
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80124ac:	607a      	str	r2, [r7, #4]
 80124ae:	70fb      	strb	r3, [r7, #3]
        validate();
 80124b0:	f000 fbcc 	bl	8012c4c <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 80124b4:	f107 0308 	add.w	r3, r7, #8
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 fbf9 	bl	8012cb0 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy>
        return codec.encode<BitLen>(value);
 80124be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80124c2:	461a      	mov	r2, r3
 80124c4:	4623      	mov	r3, r4
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 fc29 	bl	8012d1e <_ZN6uavcan11ScalarCodec6encodeILj64EyEEiT0_>
 80124cc:	4603      	mov	r3, r0
    }
 80124ce:	4618      	mov	r0, r3
 80124d0:	3714      	adds	r7, #20
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd90      	pop	{r4, r7, pc}

080124d6 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEtRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 80124d6:	b580      	push	{r7, lr}
 80124d8:	b082      	sub	sp, #8
 80124da:	af00      	add	r7, sp, #0
 80124dc:	4603      	mov	r3, r0
 80124de:	6039      	str	r1, [r7, #0]
 80124e0:	80fb      	strh	r3, [r7, #6]
 80124e2:	4613      	mov	r3, r2
 80124e4:	717b      	strb	r3, [r7, #5]
        validate();
 80124e6:	f7ff fceb 	bl	8011ec0 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 80124ea:	1dbb      	adds	r3, r7, #6
 80124ec:	4618      	mov	r0, r3
 80124ee:	f000 fc39 	bl	8012d64 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERt>
        return codec.encode<BitLen>(value);
 80124f2:	88fb      	ldrh	r3, [r7, #6]
 80124f4:	4619      	mov	r1, r3
 80124f6:	6838      	ldr	r0, [r7, #0]
 80124f8:	f000 fc61 	bl	8012dbe <_ZN6uavcan11ScalarCodec6encodeILj16EtEEiT0_>
 80124fc:	4603      	mov	r3, r0
    }
 80124fe:	4618      	mov	r0, r3
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <_ZN6uavcan8protocol13DataTypeKind_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int DataTypeKind_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 8012506:	b580      	push	{r7, lr}
 8012508:	b086      	sub	sp, #24
 801250a:	af00      	add	r7, sp, #0
 801250c:	60f8      	str	r0, [r7, #12]
 801250e:	60b9      	str	r1, [r7, #8]
 8012510:	4613      	mov	r3, r2
 8012512:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8012514:	2301      	movs	r3, #1
 8012516:	617b      	str	r3, [r7, #20]
    res = FieldTypes::value::encode(self.value, codec,  tao_mode);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	79fa      	ldrb	r2, [r7, #7]
 801251e:	68b9      	ldr	r1, [r7, #8]
 8012520:	4618      	mov	r0, r3
 8012522:	f7fb fe97 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012526:	6178      	str	r0, [r7, #20]
    return res;
 8012528:	697b      	ldr	r3, [r7, #20]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3718      	adds	r7, #24
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 8012532:	b590      	push	{r4, r7, lr}
 8012534:	b087      	sub	sp, #28
 8012536:	af00      	add	r7, sp, #0
 8012538:	60f8      	str	r0, [r7, #12]
 801253a:	60b9      	str	r1, [r7, #8]
 801253c:	4613      	mov	r3, r2
 801253e:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 8012540:	79fa      	ldrb	r2, [r7, #7]
 8012542:	4623      	mov	r3, r4
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f000 fc5a 	bl	8012e00 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 801254c:	4603      	mov	r3, r0
    }
 801254e:	4618      	mov	r0, r3
 8012550:	371c      	adds	r7, #28
 8012552:	46bd      	mov	sp, r7
 8012554:	bd90      	pop	{r4, r7, pc}

08012556 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 8012556:	b580      	push	{r7, lr}
 8012558:	af00      	add	r7, sp, #0
 801255a:	f000 fc95 	bl	8012e88 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 801255e:	4603      	mov	r3, r0
 8012560:	4618      	mov	r0, r3
 8012562:	bd80      	pop	{r7, pc}

08012564 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 8012564:	b480      	push	{r7}
 8012566:	af00      	add	r7, sp, #0
 8012568:	2300      	movs	r3, #0
 801256a:	4618      	mov	r0, r3
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr

08012574 <_ZN6uavcan11ScalarCodec8validateILj16EtEEvv>:
    void validate()
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 801257c:	f7f3 fa28 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 8012580:	f7f3 fa26 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 8012584:	f7f3 fa24 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8012588:	bf00      	nop
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <_ZN6uavcan11ScalarCodec16convertByteOrderILj16ELj2EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&bytes)[Size])
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
    }
 8012598:	bf00      	nop
 801259a:	370c      	adds	r7, #12
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr

080125a4 <_ZN6uavcan11ScalarCodec17fixTwosComplementILj16EtEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>:
    fixTwosComplement(T&) { }
 80125a4:	b480      	push	{r7}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	bf00      	nop
 80125ae:	370c      	adds	r7, #12
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	4603      	mov	r3, r0
 80125c0:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 80125c2:	79fb      	ldrb	r3, [r7, #7]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	bf0c      	ite	eq
 80125c8:	2301      	moveq	r3, #1
 80125ca:	2300      	movne	r3, #0
 80125cc:	b2db      	uxtb	r3, r3
    }
 80125ce:	4618      	mov	r0, r3
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr

080125da <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEh>:
    void resize(SizeType new_size)
 80125da:	b580      	push	{r7, lr}
 80125dc:	b084      	sub	sp, #16
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	460b      	mov	r3, r1
 80125e4:	70fb      	strb	r3, [r7, #3]
        resize(new_size, ValueType());
 80125e6:	2300      	movs	r3, #0
 80125e8:	73fb      	strb	r3, [r7, #15]
 80125ea:	f107 020f 	add.w	r2, r7, #15
 80125ee:	78fb      	ldrb	r3, [r7, #3]
 80125f0:	4619      	mov	r1, r3
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 fc50 	bl	8012e98 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh>
    }
 80125f8:	bf00      	nop
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int decodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType)  /// Static
 8012600:	b590      	push	{r4, r7, lr}
 8012602:	b089      	sub	sp, #36	; 0x24
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	713b      	strb	r3, [r7, #4]
 801260c:	4613      	mov	r3, r2
 801260e:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	4618      	mov	r0, r3
 8012614:	f7f8 f8a2 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d106      	bne.n	801262c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 801261e:	4b24      	ldr	r3, [pc, #144]	; (80126b0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 8012620:	4a24      	ldr	r2, [pc, #144]	; (80126b4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb4>)
 8012622:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8012626:	4824      	ldr	r0, [pc, #144]	; (80126b8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb8>)
 8012628:	f00d ffb0 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 801262c:	2300      	movs	r3, #0
 801262e:	77fb      	strb	r3, [r7, #31]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	4618      	mov	r0, r3
 8012634:	f7f8 f892 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012638:	4603      	mov	r3, r0
 801263a:	461a      	mov	r2, r3
 801263c:	7ffb      	ldrb	r3, [r7, #31]
 801263e:	4293      	cmp	r3, r2
 8012640:	bf34      	ite	cc
 8012642:	2301      	movcc	r3, #1
 8012644:	2300      	movcs	r3, #0
 8012646:	b2db      	uxtb	r3, r3
 8012648:	2b00      	cmp	r3, #0
 801264a:	d02c      	beq.n	80126a6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa6>
            const bool last_item = i == (size() - 1);
 801264c:	7ffc      	ldrb	r4, [r7, #31]
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	4618      	mov	r0, r3
 8012652:	f7f8 f883 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012656:	4603      	mov	r3, r0
 8012658:	3b01      	subs	r3, #1
 801265a:	429c      	cmp	r4, r3
 801265c:	bf0c      	ite	eq
 801265e:	2301      	moveq	r3, #1
 8012660:	2300      	movne	r3, #0
 8012662:	77bb      	strb	r3, [r7, #30]
            ValueType value = ValueType();                          // TODO: avoid extra copy
 8012664:	2300      	movs	r3, #0
 8012666:	75fb      	strb	r3, [r7, #23]
            const int res = RawValueType::decode(value, codec, last_item ? tao_mode : TailArrayOptDisabled);
 8012668:	7fbb      	ldrb	r3, [r7, #30]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x72>
 801266e:	79fb      	ldrb	r3, [r7, #7]
 8012670:	e000      	b.n	8012674 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x74>
 8012672:	2300      	movs	r3, #0
 8012674:	f107 0017 	add.w	r0, r7, #23
 8012678:	461a      	mov	r2, r3
 801267a:	68b9      	ldr	r1, [r7, #8]
 801267c:	f7fe febb 	bl	80113f6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6decodeERhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012680:	61b8      	str	r0, [r7, #24]
            if (res <= 0)
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	2b00      	cmp	r3, #0
 8012686:	dc01      	bgt.n	801268c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x8c>
                return res;
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	e00d      	b.n	80126a8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>
            Base::at(i) = value;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	7ffa      	ldrb	r2, [r7, #31]
 8012690:	4611      	mov	r1, r2
 8012692:	4618      	mov	r0, r3
 8012694:	f7f9 fb5d 	bl	800bd52 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE2atEh>
 8012698:	4603      	mov	r3, r0
 801269a:	7dfa      	ldrb	r2, [r7, #23]
 801269c:	701a      	strb	r2, [r3, #0]
        for (SizeType i = 0; i < size(); i++)
 801269e:	7ffb      	ldrb	r3, [r7, #31]
 80126a0:	3301      	adds	r3, #1
 80126a2:	77fb      	strb	r3, [r7, #31]
 80126a4:	e7c4      	b.n	8012630 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10decodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 80126a6:	2301      	movs	r3, #1
    }
 80126a8:	4618      	mov	r0, r3
 80126aa:	3724      	adds	r7, #36	; 0x24
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd90      	pop	{r4, r7, pc}
 80126b0:	08022294 	.word	0x08022294
 80126b4:	0802835c 	.word	0x0802835c
 80126b8:	08021f6c 	.word	0x08021f6c

080126bc <_ZN6uavcan20CoerceOrFallbackImplIPNS_18NodeStatusProviderEbE4implERKS2_RKbNS_11BooleanTypeILb1EEE>:
    static To impl(const From& from, const To&, TrueType) { return To(from); }
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	713a      	strb	r2, [r7, #4]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	bf14      	ite	ne
 80126d0:	2301      	movne	r3, #1
 80126d2:	2300      	moveq	r3, #0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	4618      	mov	r0, r3
 80126d8:	3714      	adds	r7, #20
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <_ZN6uavcan20CoerceOrFallbackImplIMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE>:
 80126e2:	b480      	push	{r7}
 80126e4:	b085      	sub	sp, #20
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	60f8      	str	r0, [r7, #12]
 80126ea:	60b9      	str	r1, [r7, #8]
 80126ec:	713a      	strb	r2, [r7, #4]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d105      	bne.n	8012702 <_ZN6uavcan20CoerceOrFallbackImplIMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x20>
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d001      	beq.n	8012706 <_ZN6uavcan20CoerceOrFallbackImplIMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x24>
 8012702:	2301      	movs	r3, #1
 8012704:	e000      	b.n	8012708 <_ZN6uavcan20CoerceOrFallbackImplIMNS_18NodeStatusProviderEFvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS3_9Response_ILi0EEEEbE4implERKSC_RKbNS_11BooleanTypeILb1EEE+0x26>
 8012706:	2300      	movs	r3, #0
 8012708:	4618      	mov	r0, r3
 801270a:	3714      	adds	r7, #20
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int NodeStatus_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	4613      	mov	r3, r2
 8012720:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8012722:	2301      	movs	r3, #1
 8012724:	617b      	str	r3, [r7, #20]
    res = FieldTypes::uptime_sec::encode(self.uptime_sec, codec,  ::uavcan::TailArrayOptDisabled);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2200      	movs	r2, #0
 801272c:	68b9      	ldr	r1, [r7, #8]
 801272e:	4618      	mov	r0, r3
 8012730:	f000 fc08 	bl	8012f44 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEmRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012734:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	2b00      	cmp	r3, #0
 801273a:	dc01      	bgt.n	8012740 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	e02f      	b.n	80127a0 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::health::encode(self.health, codec,  ::uavcan::TailArrayOptDisabled);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	791b      	ldrb	r3, [r3, #4]
 8012744:	2200      	movs	r2, #0
 8012746:	68b9      	ldr	r1, [r7, #8]
 8012748:	4618      	mov	r0, r3
 801274a:	f000 fc13 	bl	8012f74 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 801274e:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	2b00      	cmp	r3, #0
 8012754:	dc01      	bgt.n	801275a <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x46>
        return res;
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	e022      	b.n	80127a0 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::mode::encode(self.mode, codec,  ::uavcan::TailArrayOptDisabled);
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	795b      	ldrb	r3, [r3, #5]
 801275e:	2200      	movs	r2, #0
 8012760:	68b9      	ldr	r1, [r7, #8]
 8012762:	4618      	mov	r0, r3
 8012764:	f7fb fbc7 	bl	800def6 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012768:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	dc01      	bgt.n	8012774 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x60>
        return res;
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	e015      	b.n	80127a0 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::sub_mode::encode(self.sub_mode, codec,  ::uavcan::TailArrayOptDisabled);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	799b      	ldrb	r3, [r3, #6]
 8012778:	2200      	movs	r2, #0
 801277a:	68b9      	ldr	r1, [r7, #8]
 801277c:	4618      	mov	r0, r3
 801277e:	f7fb fbba 	bl	800def6 <_ZN6uavcan11IntegerSpecILj3ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012782:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	2b00      	cmp	r3, #0
 8012788:	dc01      	bgt.n	801278e <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x7a>
        return res;
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	e008      	b.n	80127a0 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::vendor_specific_status_code::encode(self.vendor_specific_status_code, codec,  tao_mode);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	891b      	ldrh	r3, [r3, #8]
 8012792:	79fa      	ldrb	r2, [r7, #7]
 8012794:	68b9      	ldr	r1, [r7, #8]
 8012796:	4618      	mov	r0, r3
 8012798:	f7ff fe9d 	bl	80124d6 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEtRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 801279c:	6178      	str	r0, [r7, #20]
    return res;
 801279e:	697b      	ldr	r3, [r7, #20]
}
 80127a0:	4618      	mov	r0, r3
 80127a2:	3718      	adds	r7, #24
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int SoftwareVersion_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b086      	sub	sp, #24
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	4613      	mov	r3, r2
 80127b4:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 80127b6:	2301      	movs	r3, #1
 80127b8:	617b      	str	r3, [r7, #20]
    res = FieldTypes::major::encode(self.major, codec,  ::uavcan::TailArrayOptDisabled);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2200      	movs	r2, #0
 80127c0:	68b9      	ldr	r1, [r7, #8]
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fb fd46 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80127c8:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	dc01      	bgt.n	80127d4 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	e02f      	b.n	8012834 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::minor::encode(self.minor, codec,  ::uavcan::TailArrayOptDisabled);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	785b      	ldrb	r3, [r3, #1]
 80127d8:	2200      	movs	r2, #0
 80127da:	68b9      	ldr	r1, [r7, #8]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7fb fd39 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80127e2:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	dc01      	bgt.n	80127ee <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x46>
        return res;
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	e022      	b.n	8012834 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::optional_field_flags::encode(self.optional_field_flags, codec,  ::uavcan::TailArrayOptDisabled);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	789b      	ldrb	r3, [r3, #2]
 80127f2:	2200      	movs	r2, #0
 80127f4:	68b9      	ldr	r1, [r7, #8]
 80127f6:	4618      	mov	r0, r3
 80127f8:	f7fb fd2c 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80127fc:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	2b00      	cmp	r3, #0
 8012802:	dc01      	bgt.n	8012808 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x60>
        return res;
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	e015      	b.n	8012834 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::vcs_commit::encode(self.vcs_commit, codec,  ::uavcan::TailArrayOptDisabled);
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	2200      	movs	r2, #0
 801280e:	68b9      	ldr	r1, [r7, #8]
 8012810:	4618      	mov	r0, r3
 8012812:	f000 fb97 	bl	8012f44 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEmRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012816:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	2b00      	cmp	r3, #0
 801281c:	dc01      	bgt.n	8012822 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x7a>
        return res;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	e008      	b.n	8012834 <_ZN6uavcan8protocol16SoftwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x8c>
    res = FieldTypes::image_crc::encode(self.image_crc, codec,  tao_mode);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8012828:	79fb      	ldrb	r3, [r7, #7]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	f7ff fe39 	bl	80124a2 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012830:	6178      	str	r0, [r7, #20]
    return res;
 8012832:	697b      	ldr	r3, [r7, #20]
}
 8012834:	4618      	mov	r0, r3
 8012836:	3718      	adds	r7, #24
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int HardwareVersion_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af00      	add	r7, sp, #0
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	4613      	mov	r3, r2
 8012848:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 801284a:	2301      	movs	r3, #1
 801284c:	617b      	str	r3, [r7, #20]
    res = FieldTypes::major::encode(self.major, codec,  ::uavcan::TailArrayOptDisabled);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	2200      	movs	r2, #0
 8012854:	68b9      	ldr	r1, [r7, #8]
 8012856:	4618      	mov	r0, r3
 8012858:	f7fb fcfc 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 801285c:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2b00      	cmp	r3, #0
 8012862:	dc01      	bgt.n	8012868 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	e022      	b.n	80128ae <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::minor::encode(self.minor, codec,  ::uavcan::TailArrayOptDisabled);
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	785b      	ldrb	r3, [r3, #1]
 801286c:	2200      	movs	r2, #0
 801286e:	68b9      	ldr	r1, [r7, #8]
 8012870:	4618      	mov	r0, r3
 8012872:	f7fb fcef 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012876:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	2b00      	cmp	r3, #0
 801287c:	dc01      	bgt.n	8012882 <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x46>
        return res;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	e015      	b.n	80128ae <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::unique_id::encode(self.unique_id, codec,  ::uavcan::TailArrayOptDisabled);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	3302      	adds	r3, #2
 8012886:	2200      	movs	r2, #0
 8012888:	68b9      	ldr	r1, [r7, #8]
 801288a:	4618      	mov	r0, r3
 801288c:	f000 fb8a 	bl	8012fa4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012890:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	2b00      	cmp	r3, #0
 8012896:	dc01      	bgt.n	801289c <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x60>
        return res;
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	e008      	b.n	80128ae <_ZN6uavcan8protocol16HardwareVersion_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x72>
    res = FieldTypes::certificate_of_authenticity::encode(self.certificate_of_authenticity, codec,  tao_mode);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	3312      	adds	r3, #18
 80128a0:	79fa      	ldrb	r2, [r7, #7]
 80128a2:	68b9      	ldr	r1, [r7, #8]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f000 fb8f 	bl	8012fc8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80128aa:	6178      	str	r0, [r7, #20]
    return res;
 80128ac:	697b      	ldr	r3, [r7, #20]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3718      	adds	r7, #24
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}

080128b6 <_ZN6uavcan21ReceivedDataStructureINS_8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEEEC1Ev>:
    ReceivedDataStructure()
 80128b6:	b580      	push	{r7, lr}
 80128b8:	b082      	sub	sp, #8
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
        : _transfer_(UAVCAN_NULLPTR)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff f85e 	bl	8011982 <_ZN6uavcan8protocol4file20BeginFirmwareUpdate_9Response_ILi0EEC1Ev>
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7f3 f889 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    { }
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}

080128de <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EEC1Ev>:
    ArrayImpl() { initialize<ValueType>(0); }
 80128de:	b580      	push	{r7, lr}
 80128e0:	b082      	sub	sp, #8
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4618      	mov	r0, r3
 80128ea:	f000 fb7f 	bl	8012fec <_ZN6uavcan16DynamicArrayBaseILj127EEC1Ev>
 80128ee:	2100      	movs	r1, #0
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 fb89 	bl	8013008 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <_ZN6uavcan16DynamicArrayBaseILj127EE4growEv>:
    void grow()
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
        if (size_ >= MaxSize)
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b7e      	cmp	r3, #126	; 0x7e
 801290e:	d904      	bls.n	801291a <_ZN6uavcan16DynamicArrayBaseILj127EE4growEv+0x1a>
            (void)validateRange(MaxSize);  // Will throw, UAVCAN_ASSERT() or do nothing
 8012910:	217f      	movs	r1, #127	; 0x7f
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 fb84 	bl	8013020 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh>
    }
 8012918:	e005      	b.n	8012926 <_ZN6uavcan16DynamicArrayBaseILj127EE4growEv+0x26>
            size_++;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	3301      	adds	r3, #1
 8012920:	b2da      	uxtb	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	701a      	strb	r2, [r3, #0]
    }
 8012926:	bf00      	nop
 8012928:	3708      	adds	r7, #8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE2atEh>:
    ValueType& at(SizeType pos)             { return data_[Base::validateRange(pos)]; }
 801292e:	b580      	push	{r7, lr}
 8012930:	b082      	sub	sp, #8
 8012932:	af00      	add	r7, sp, #0
 8012934:	6078      	str	r0, [r7, #4]
 8012936:	460b      	mov	r3, r1
 8012938:	70fb      	strb	r3, [r7, #3]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	78fa      	ldrb	r2, [r7, #3]
 801293e:	4611      	mov	r1, r2
 8012940:	4618      	mov	r0, r3
 8012942:	f000 fb6d 	bl	8013020 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh>
 8012946:	4603      	mov	r3, r0
 8012948:	461a      	mov	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	4413      	add	r3, r2
 801294e:	3301      	adds	r3, #1
 8012950:	4618      	mov	r0, r3
 8012952:	3708      	adds	r7, #8
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <_ZN6uavcan11ScalarCodec6decodeILj7EhEEiRT0_>:
int ScalarCodec::decode(T& value)
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
    validate<BitLen, T>();
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f7fc f9c1 	bl	800ecea <_ZN6uavcan11ScalarCodec8validateILj7EhEEvv>
    byte_union.value = T();
 8012968:	2300      	movs	r3, #0
 801296a:	723b      	strb	r3, [r7, #8]
    const int read_res = decodeBytesImpl(byte_union.bytes, BitLen);
 801296c:	f107 0308 	add.w	r3, r7, #8
 8012970:	2207      	movs	r2, #7
 8012972:	4619      	mov	r1, r3
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f001 fd8f 	bl	8014498 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj>
 801297a:	60f8      	str	r0, [r7, #12]
    if (read_res > 0)
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	dd0c      	ble.n	801299c <_ZN6uavcan11ScalarCodec6decodeILj7EhEEiRT0_+0x44>
        convertByteOrder<BitLen>(byte_union.bytes);
 8012982:	f107 0308 	add.w	r3, r7, #8
 8012986:	4618      	mov	r0, r3
 8012988:	f7fc f9ce 	bl	800ed28 <_ZN6uavcan11ScalarCodec16convertByteOrderILj7ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
        fixTwosComplement<BitLen, T>(byte_union.value);
 801298c:	f107 0308 	add.w	r3, r7, #8
 8012990:	4618      	mov	r0, r3
 8012992:	f000 fb63 	bl	801305c <_ZN6uavcan11ScalarCodec17fixTwosComplementILj7EhEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>
        value = byte_union.value;
 8012996:	7a3a      	ldrb	r2, [r7, #8]
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	701a      	strb	r2, [r3, #0]
    return read_res;
 801299c:	68fb      	ldr	r3, [r7, #12]
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3710      	adds	r7, #16
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh>:
    void resize(SizeType new_size, const ValueType& filler)
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b086      	sub	sp, #24
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	60f8      	str	r0, [r7, #12]
 80129ae:	460b      	mov	r3, r1
 80129b0:	607a      	str	r2, [r7, #4]
 80129b2:	72fb      	strb	r3, [r7, #11]
        if (new_size > size())
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7ff fbdc 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 80129bc:	4603      	mov	r3, r0
 80129be:	461a      	mov	r2, r3
 80129c0:	7afb      	ldrb	r3, [r7, #11]
 80129c2:	4293      	cmp	r3, r2
 80129c4:	bf8c      	ite	hi
 80129c6:	2301      	movhi	r3, #1
 80129c8:	2300      	movls	r3, #0
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d017      	beq.n	8012a00 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh+0x5a>
            SizeType cnt = SizeType(new_size - size());
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7ff fbce 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 80129d8:	4603      	mov	r3, r0
 80129da:	461a      	mov	r2, r3
 80129dc:	7afb      	ldrb	r3, [r7, #11]
 80129de:	1a9b      	subs	r3, r3, r2
 80129e0:	75fb      	strb	r3, [r7, #23]
            while (cnt-- > 0)
 80129e2:	7dfb      	ldrb	r3, [r7, #23]
 80129e4:	1e5a      	subs	r2, r3, #1
 80129e6:	75fa      	strb	r2, [r7, #23]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	bf14      	ite	ne
 80129ec:	2301      	movne	r3, #1
 80129ee:	2300      	moveq	r3, #0
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d029      	beq.n	8012a4a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh+0xa4>
                push_back(filler);
 80129f6:	6879      	ldr	r1, [r7, #4]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f7ff fbe1 	bl	80121c0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE9push_backERKh>
            while (cnt-- > 0)
 80129fe:	e7f0      	b.n	80129e2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh+0x3c>
        else if (new_size < size())
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff fbb6 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	7afb      	ldrb	r3, [r7, #11]
 8012a0e:	4293      	cmp	r3, r2
 8012a10:	bf34      	ite	cc
 8012a12:	2301      	movcc	r3, #1
 8012a14:	2300      	movcs	r3, #0
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d016      	beq.n	8012a4a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh+0xa4>
            SizeType cnt = SizeType(size() - new_size);
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7ff fba8 	bl	8012174 <_ZNK6uavcan16DynamicArrayBaseILj127EE4sizeEv>
 8012a24:	4603      	mov	r3, r0
 8012a26:	461a      	mov	r2, r3
 8012a28:	7afb      	ldrb	r3, [r7, #11]
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	75bb      	strb	r3, [r7, #22]
            while (cnt-- > 0)
 8012a2e:	7dbb      	ldrb	r3, [r7, #22]
 8012a30:	1e5a      	subs	r2, r3, #1
 8012a32:	75ba      	strb	r2, [r7, #22]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	bf14      	ite	ne
 8012a38:	2301      	movne	r3, #1
 8012a3a:	2300      	moveq	r3, #0
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d003      	beq.n	8012a4a <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh+0xa4>
                pop_back();
 8012a42:	68f8      	ldr	r0, [r7, #12]
 8012a44:	f000 fb14 	bl	8013070 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE8pop_backEv>
            while (cnt-- > 0)
 8012a48:	e7f1      	b.n	8012a2e <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE6resizeEhRKh+0x88>
    }
 8012a4a:	bf00      	nop
 8012a4c:	3718      	adds	r7, #24
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
	...

08012a54 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 8012a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a56:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 8012a58:	f7f2 ffba 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 8012a5c:	f000 fb14 	bl	8013088 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012a60:	4604      	mov	r4, r0
 8012a62:	460d      	mov	r5, r1
 8012a64:	f7f3 f80e 	bl	8005a84 <_ZN6uavcan13NumericTraitsIyE3maxEv>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	460b      	mov	r3, r1
 8012a6c:	42ab      	cmp	r3, r5
 8012a6e:	bf08      	it	eq
 8012a70:	42a2      	cmpeq	r2, r4
 8012a72:	d205      	bcs.n	8012a80 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x2c>
 8012a74:	4b0c      	ldr	r3, [pc, #48]	; (8012aa8 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 8012a76:	4a0d      	ldr	r2, [pc, #52]	; (8012aac <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x58>)
 8012a78:	2164      	movs	r1, #100	; 0x64
 8012a7a:	480d      	ldr	r0, [pc, #52]	; (8012ab0 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x5c>)
 8012a7c:	f00d fd86 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 8012a80:	f000 fb0b 	bl	801309a <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012a84:	4605      	mov	r5, r0
 8012a86:	460e      	mov	r6, r1
 8012a88:	f7f3 f807 	bl	8005a9a <_ZN6uavcan13NumericTraitsIyE3minEv>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	460c      	mov	r4, r1
 8012a90:	42a6      	cmp	r6, r4
 8012a92:	bf08      	it	eq
 8012a94:	429d      	cmpeq	r5, r3
 8012a96:	d205      	bcs.n	8012aa4 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>
 8012a98:	4b06      	ldr	r3, [pc, #24]	; (8012ab4 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x60>)
 8012a9a:	4a04      	ldr	r2, [pc, #16]	; (8012aac <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x58>)
 8012a9c:	2166      	movs	r1, #102	; 0x66
 8012a9e:	4804      	ldr	r0, [pc, #16]	; (8012ab0 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x5c>)
 8012aa0:	f00d fd74 	bl	802058c <__assert_func>
    }
 8012aa4:	bf00      	nop
 8012aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa8:	080221f0 	.word	0x080221f0
 8012aac:	0802611c 	.word	0x0802611c
 8012ab0:	0802221c 	.word	0x0802221c
 8012ab4:	08022268 	.word	0x08022268

08012ab8 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy>:
    static void saturate(StorageType& value)
 8012ab8:	b5b0      	push	{r4, r5, r7, lr}
 8012aba:	b082      	sub	sp, #8
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
        if (value > max())
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012ac6:	f000 fadf 	bl	8013088 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	42ab      	cmp	r3, r5
 8012ad0:	bf08      	it	eq
 8012ad2:	42a2      	cmpeq	r2, r4
 8012ad4:	bf34      	ite	cc
 8012ad6:	2301      	movcc	r3, #1
 8012ad8:	2300      	movcs	r3, #0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d007      	beq.n	8012af0 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy+0x38>
            value = max();
 8012ae0:	f000 fad2 	bl	8013088 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	460c      	mov	r4, r1
 8012ae8:	687a      	ldr	r2, [r7, #4]
 8012aea:	e9c2 3400 	strd	r3, r4, [r2]
    }
 8012aee:	e016      	b.n	8012b1e <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy+0x66>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012af6:	f000 fad0 	bl	801309a <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012afa:	4602      	mov	r2, r0
 8012afc:	460b      	mov	r3, r1
 8012afe:	42ab      	cmp	r3, r5
 8012b00:	bf08      	it	eq
 8012b02:	42a2      	cmpeq	r2, r4
 8012b04:	bf2c      	ite	cs
 8012b06:	2301      	movcs	r3, #1
 8012b08:	2300      	movcc	r3, #0
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d006      	beq.n	8012b1e <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy+0x66>
            value = min();
 8012b10:	f000 fac3 	bl	801309a <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012b14:	4603      	mov	r3, r0
 8012b16:	460c      	mov	r4, r1
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	e9c2 3400 	strd	r3, r4, [r2]
    }
 8012b1e:	bf00      	nop
 8012b20:	3708      	adds	r7, #8
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bdb0      	pop	{r4, r5, r7, pc}

08012b26 <_ZN6uavcan11ScalarCodec6encodeILj48EyEEiT0_>:
int ScalarCodec::encode(const T value)
 8012b26:	b590      	push	{r4, r7, lr}
 8012b28:	b087      	sub	sp, #28
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	60f8      	str	r0, [r7, #12]
 8012b2e:	e9c7 2300 	strd	r2, r3, [r7]
    validate<BitLen, T>();
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	f000 fabc 	bl	80130b0 <_ZN6uavcan11ScalarCodec8validateILj48EyEEvv>
    byte_union.value = value;
 8012b38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012b3c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    clearExtraBits<BitLen, T>(byte_union.value);
 8012b40:	f107 0310 	add.w	r3, r7, #16
 8012b44:	4618      	mov	r0, r3
 8012b46:	f000 fac1 	bl	80130cc <_ZN6uavcan11ScalarCodec14clearExtraBitsILj48EyEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 8012b4a:	f107 0310 	add.w	r3, r7, #16
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f000 fad5 	bl	80130fe <_ZN6uavcan11ScalarCodec16convertByteOrderILj48ELj8EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 8012b54:	f107 0310 	add.w	r3, r7, #16
 8012b58:	2230      	movs	r2, #48	; 0x30
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	68f8      	ldr	r0, [r7, #12]
 8012b5e:	f001 fc63 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 8012b62:	4603      	mov	r3, r0
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	371c      	adds	r7, #28
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd90      	pop	{r4, r7, pc}

08012b6c <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType) const   /// Dynamic
 8012b6c:	b590      	push	{r4, r7, lr}
 8012b6e:	b089      	sub	sp, #36	; 0x24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	713b      	strb	r3, [r7, #4]
 8012b78:	4613      	mov	r3, r2
 8012b7a:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 8012b7c:	f7f2 ff28 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        const bool self_tao_enabled = isOptimizedTailArray(tao_mode);
 8012b80:	79fb      	ldrb	r3, [r7, #7]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f000 fac5 	bl	8013112 <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	77fb      	strb	r3, [r7, #31]
        if (!self_tao_enabled)
 8012b8c:	7ffb      	ldrb	r3, [r7, #31]
 8012b8e:	f083 0301 	eor.w	r3, r3, #1
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d00f      	beq.n	8012bb8 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                Base::RawEncodedSizeType::encode(typename StorageType<typename Base::RawEncodedSizeType>::Type(size()),
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7f8 fa48 	bl	800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>
 8012ba0:	4603      	mov	r3, r0
            const int res_sz =
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	68b9      	ldr	r1, [r7, #8]
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f000 f9e4 	bl	8012f74 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012bac:	61b8      	str	r0, [r7, #24]
            if (res_sz <= 0)
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	dc01      	bgt.n	8012bb8 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                return res_sz;
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	e019      	b.n	8012bec <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        if (size() == 0)
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f8 fa38 	bl	800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	bf0c      	ite	eq
 8012bc6:	2301      	moveq	r3, #1
 8012bc8:	2300      	movne	r3, #0
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d001      	beq.n	8012bd4 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x68>
            return 1;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	e00b      	b.n	8012bec <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        return encodeImpl(codec, self_tao_enabled ? TailArrayOptDisabled : tao_mode, FalseType());
 8012bd4:	7ffb      	ldrb	r3, [r7, #31]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d001      	beq.n	8012bde <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x72>
 8012bda:	2200      	movs	r2, #0
 8012bdc:	e000      	b.n	8012be0 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x74>
 8012bde:	79fa      	ldrb	r2, [r7, #7]
 8012be0:	4623      	mov	r3, r4
 8012be2:	68b9      	ldr	r1, [r7, #8]
 8012be4:	68f8      	ldr	r0, [r7, #12]
 8012be6:	f000 faa5 	bl	8013134 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 8012bea:	4603      	mov	r3, r0
    }
 8012bec:	4618      	mov	r0, r3
 8012bee:	3724      	adds	r7, #36	; 0x24
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd90      	pop	{r4, r7, pc}

08012bf4 <_ZN6uavcan11ScalarCodec6encodeILj1EbEEiT0_>:
int ScalarCodec::encode(const T value)
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	70fb      	strb	r3, [r7, #3]
    validate<BitLen, T>();
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f000 faef 	bl	80131e4 <_ZN6uavcan11ScalarCodec8validateILj1EbEEvv>
    byte_union.value = value;
 8012c06:	78fb      	ldrb	r3, [r7, #3]
 8012c08:	733b      	strb	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 8012c0a:	f107 030c 	add.w	r3, r7, #12
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f000 faf6 	bl	8013200 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj1EbEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 8012c14:	f107 030c 	add.w	r3, r7, #12
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f000 fb06 	bl	801322a <_ZN6uavcan11ScalarCodec16convertByteOrderILj1ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 8012c1e:	f107 030c 	add.w	r3, r7, #12
 8012c22:	2201      	movs	r2, #1
 8012c24:	4619      	mov	r1, r3
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f001 fbfe 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 8012c2c:	4603      	mov	r3, r0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <_ZN6uavcan11IntegerSpecILj40ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 8012c36:	b598      	push	{r3, r4, r7, lr}
 8012c38:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 8012c3a:	f7f2 fec9 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c42:	f04f 04ff 	mov.w	r4, #255	; 0xff
        }
 8012c46:	4618      	mov	r0, r3
 8012c48:	4621      	mov	r1, r4
 8012c4a:	bd98      	pop	{r3, r4, r7, pc}

08012c4c <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 8012c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4e:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 8012c50:	f7f2 febe 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 8012c54:	f000 faf3 	bl	801323e <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012c58:	4604      	mov	r4, r0
 8012c5a:	460d      	mov	r5, r1
 8012c5c:	f7f2 ff12 	bl	8005a84 <_ZN6uavcan13NumericTraitsIyE3maxEv>
 8012c60:	4602      	mov	r2, r0
 8012c62:	460b      	mov	r3, r1
 8012c64:	42ab      	cmp	r3, r5
 8012c66:	bf08      	it	eq
 8012c68:	42a2      	cmpeq	r2, r4
 8012c6a:	d205      	bcs.n	8012c78 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x2c>
 8012c6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ca0 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 8012c6e:	4a0d      	ldr	r2, [pc, #52]	; (8012ca4 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x58>)
 8012c70:	2164      	movs	r1, #100	; 0x64
 8012c72:	480d      	ldr	r0, [pc, #52]	; (8012ca8 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x5c>)
 8012c74:	f00d fc8a 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 8012c78:	f000 faea 	bl	8013250 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	460e      	mov	r6, r1
 8012c80:	f7f2 ff0b 	bl	8005a9a <_ZN6uavcan13NumericTraitsIyE3minEv>
 8012c84:	4603      	mov	r3, r0
 8012c86:	460c      	mov	r4, r1
 8012c88:	42a6      	cmp	r6, r4
 8012c8a:	bf08      	it	eq
 8012c8c:	429d      	cmpeq	r5, r3
 8012c8e:	d205      	bcs.n	8012c9c <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>
 8012c90:	4b06      	ldr	r3, [pc, #24]	; (8012cac <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x60>)
 8012c92:	4a04      	ldr	r2, [pc, #16]	; (8012ca4 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x58>)
 8012c94:	2166      	movs	r1, #102	; 0x66
 8012c96:	4804      	ldr	r0, [pc, #16]	; (8012ca8 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x5c>)
 8012c98:	f00d fc78 	bl	802058c <__assert_func>
    }
 8012c9c:	bf00      	nop
 8012c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ca0:	080221f0 	.word	0x080221f0
 8012ca4:	08026b4c 	.word	0x08026b4c
 8012ca8:	0802221c 	.word	0x0802221c
 8012cac:	08022268 	.word	0x08022268

08012cb0 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy>:
    static void saturate(StorageType& value)
 8012cb0:	b5b0      	push	{r4, r5, r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
        if (value > max())
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012cbe:	f000 fabe 	bl	801323e <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012cc2:	4602      	mov	r2, r0
 8012cc4:	460b      	mov	r3, r1
 8012cc6:	42ab      	cmp	r3, r5
 8012cc8:	bf08      	it	eq
 8012cca:	42a2      	cmpeq	r2, r4
 8012ccc:	bf34      	ite	cc
 8012cce:	2301      	movcc	r3, #1
 8012cd0:	2300      	movcs	r3, #0
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d007      	beq.n	8012ce8 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy+0x38>
            value = max();
 8012cd8:	f000 fab1 	bl	801323e <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	460c      	mov	r4, r1
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	e9c2 3400 	strd	r3, r4, [r2]
    }
 8012ce6:	e016      	b.n	8012d16 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy+0x66>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012cee:	f000 faaf 	bl	8013250 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	42ab      	cmp	r3, r5
 8012cf8:	bf08      	it	eq
 8012cfa:	42a2      	cmpeq	r2, r4
 8012cfc:	bf2c      	ite	cs
 8012cfe:	2301      	movcs	r3, #1
 8012d00:	2300      	movcc	r3, #0
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d006      	beq.n	8012d16 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERy+0x66>
            value = min();
 8012d08:	f000 faa2 	bl	8013250 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	460c      	mov	r4, r1
 8012d10:	687a      	ldr	r2, [r7, #4]
 8012d12:	e9c2 3400 	strd	r3, r4, [r2]
    }
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bdb0      	pop	{r4, r5, r7, pc}

08012d1e <_ZN6uavcan11ScalarCodec6encodeILj64EyEEiT0_>:
int ScalarCodec::encode(const T value)
 8012d1e:	b590      	push	{r4, r7, lr}
 8012d20:	b087      	sub	sp, #28
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	60f8      	str	r0, [r7, #12]
 8012d26:	e9c7 2300 	strd	r2, r3, [r7]
    validate<BitLen, T>();
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f000 fa9b 	bl	8013266 <_ZN6uavcan11ScalarCodec8validateILj64EyEEvv>
    byte_union.value = value;
 8012d30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8012d34:	e9c7 3404 	strd	r3, r4, [r7, #16]
    clearExtraBits<BitLen, T>(byte_union.value);
 8012d38:	f107 0310 	add.w	r3, r7, #16
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f000 faa0 	bl	8013282 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj64EyEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 8012d42:	f107 0310 	add.w	r3, r7, #16
 8012d46:	4618      	mov	r0, r3
 8012d48:	f000 faa5 	bl	8013296 <_ZN6uavcan11ScalarCodec16convertByteOrderILj64ELj8EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 8012d4c:	f107 0310 	add.w	r3, r7, #16
 8012d50:	2240      	movs	r2, #64	; 0x40
 8012d52:	4619      	mov	r1, r3
 8012d54:	68f8      	ldr	r0, [r7, #12]
 8012d56:	f001 fb67 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 8012d5a:	4603      	mov	r3, r0
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	371c      	adds	r7, #28
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd90      	pop	{r4, r7, pc}

08012d64 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERt>:
    static void saturate(StorageType& value)
 8012d64:	b590      	push	{r4, r7, lr}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
        if (value > max())
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	881c      	ldrh	r4, [r3, #0]
 8012d70:	f7ff fbf1 	bl	8012556 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012d74:	4603      	mov	r3, r0
 8012d76:	429c      	cmp	r4, r3
 8012d78:	bf8c      	ite	hi
 8012d7a:	2301      	movhi	r3, #1
 8012d7c:	2300      	movls	r3, #0
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d006      	beq.n	8012d92 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERt+0x2e>
            value = max();
 8012d84:	f7ff fbe7 	bl	8012556 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	801a      	strh	r2, [r3, #0]
    }
 8012d90:	e011      	b.n	8012db6 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERt+0x52>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	881c      	ldrh	r4, [r3, #0]
 8012d96:	f7ff fbe5 	bl	8012564 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	429c      	cmp	r4, r3
 8012d9e:	bf94      	ite	ls
 8012da0:	2301      	movls	r3, #1
 8012da2:	2300      	movhi	r3, #0
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d005      	beq.n	8012db6 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERt+0x52>
            value = min();
 8012daa:	f7ff fbdb 	bl	8012564 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8012dae:	4603      	mov	r3, r0
 8012db0:	461a      	mov	r2, r3
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	801a      	strh	r2, [r3, #0]
    }
 8012db6:	bf00      	nop
 8012db8:	370c      	adds	r7, #12
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd90      	pop	{r4, r7, pc}

08012dbe <_ZN6uavcan11ScalarCodec6encodeILj16EtEEiT0_>:
int ScalarCodec::encode(const T value)
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b084      	sub	sp, #16
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	807b      	strh	r3, [r7, #2]
    validate<BitLen, T>();
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f7ff fbd2 	bl	8012574 <_ZN6uavcan11ScalarCodec8validateILj16EtEEvv>
    byte_union.value = value;
 8012dd0:	887b      	ldrh	r3, [r7, #2]
 8012dd2:	81bb      	strh	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 8012dd4:	f107 030c 	add.w	r3, r7, #12
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f000 fa66 	bl	80132aa <_ZN6uavcan11ScalarCodec14clearExtraBitsILj16EtEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 8012dde:	f107 030c 	add.w	r3, r7, #12
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7ff fbd4 	bl	8012590 <_ZN6uavcan11ScalarCodec16convertByteOrderILj16ELj2EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 8012de8:	f107 030c 	add.w	r3, r7, #12
 8012dec:	2210      	movs	r2, #16
 8012dee:	4619      	mov	r1, r3
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f001 fb19 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 8012df6:	4603      	mov	r3, r0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3710      	adds	r7, #16
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType) const   /// Dynamic
 8012e00:	b590      	push	{r4, r7, lr}
 8012e02:	b089      	sub	sp, #36	; 0x24
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	713b      	strb	r3, [r7, #4]
 8012e0c:	4613      	mov	r3, r2
 8012e0e:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 8012e10:	f7f2 fdde 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        const bool self_tao_enabled = isOptimizedTailArray(tao_mode);
 8012e14:	79fb      	ldrb	r3, [r7, #7]
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7ff fbce 	bl	80125b8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	77fb      	strb	r3, [r7, #31]
        if (!self_tao_enabled)
 8012e20:	7ffb      	ldrb	r3, [r7, #31]
 8012e22:	f083 0301 	eor.w	r3, r3, #1
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d00f      	beq.n	8012e4c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                Base::RawEncodedSizeType::encode(typename StorageType<typename Base::RawEncodedSizeType>::Type(size()),
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7f7 fc94 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012e34:	4603      	mov	r3, r0
            const int res_sz =
 8012e36:	2200      	movs	r2, #0
 8012e38:	68b9      	ldr	r1, [r7, #8]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fb fb6d 	bl	800e51a <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8012e40:	61b8      	str	r0, [r7, #24]
            if (res_sz <= 0)
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	dc01      	bgt.n	8012e4c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                return res_sz;
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	e019      	b.n	8012e80 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        if (size() == 0)
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f7 fc84 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	bf0c      	ite	eq
 8012e5a:	2301      	moveq	r3, #1
 8012e5c:	2300      	movne	r3, #0
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d001      	beq.n	8012e68 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x68>
            return 1;
 8012e64:	2301      	movs	r3, #1
 8012e66:	e00b      	b.n	8012e80 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        return encodeImpl(codec, self_tao_enabled ? TailArrayOptDisabled : tao_mode, FalseType());
 8012e68:	7ffb      	ldrb	r3, [r7, #31]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x72>
 8012e6e:	2200      	movs	r2, #0
 8012e70:	e000      	b.n	8012e74 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x74>
 8012e72:	79fa      	ldrb	r2, [r7, #7]
 8012e74:	4623      	mov	r3, r4
 8012e76:	68b9      	ldr	r1, [r7, #8]
 8012e78:	68f8      	ldr	r0, [r7, #12]
 8012e7a:	f000 fa21 	bl	80132c0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 8012e7e:	4603      	mov	r3, r0
    }
 8012e80:	4618      	mov	r0, r3
 8012e82:	3724      	adds	r7, #36	; 0x24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd90      	pop	{r4, r7, pc}

08012e88 <_ZN6uavcan11IntegerSpecILj16ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 8012e8c:	f7f2 fda0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 8012e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
        }
 8012e94:	4618      	mov	r0, r3
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh>:
    void resize(SizeType new_size, const ValueType& filler)
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b086      	sub	sp, #24
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	460b      	mov	r3, r1
 8012ea2:	607a      	str	r2, [r7, #4]
 8012ea4:	72fb      	strb	r3, [r7, #11]
        if (new_size > size())
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f7 fc57 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	461a      	mov	r2, r3
 8012eb2:	7afb      	ldrb	r3, [r7, #11]
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	bf8c      	ite	hi
 8012eb8:	2301      	movhi	r3, #1
 8012eba:	2300      	movls	r3, #0
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d017      	beq.n	8012ef2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh+0x5a>
            SizeType cnt = SizeType(new_size - size());
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7f7 fc49 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	461a      	mov	r2, r3
 8012ece:	7afb      	ldrb	r3, [r7, #11]
 8012ed0:	1a9b      	subs	r3, r3, r2
 8012ed2:	75fb      	strb	r3, [r7, #23]
            while (cnt-- > 0)
 8012ed4:	7dfb      	ldrb	r3, [r7, #23]
 8012ed6:	1e5a      	subs	r2, r3, #1
 8012ed8:	75fa      	strb	r2, [r7, #23]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	bf14      	ite	ne
 8012ede:	2301      	movne	r3, #1
 8012ee0:	2300      	moveq	r3, #0
 8012ee2:	b2db      	uxtb	r3, r3
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d029      	beq.n	8012f3c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh+0xa4>
                push_back(filler);
 8012ee8:	6879      	ldr	r1, [r7, #4]
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f7f7 fc69 	bl	800a7c2 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE9push_backERKh>
            while (cnt-- > 0)
 8012ef0:	e7f0      	b.n	8012ed4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh+0x3c>
        else if (new_size < size())
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7f7 fc31 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012efa:	4603      	mov	r3, r0
 8012efc:	461a      	mov	r2, r3
 8012efe:	7afb      	ldrb	r3, [r7, #11]
 8012f00:	4293      	cmp	r3, r2
 8012f02:	bf34      	ite	cc
 8012f04:	2301      	movcc	r3, #1
 8012f06:	2300      	movcs	r3, #0
 8012f08:	b2db      	uxtb	r3, r3
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d016      	beq.n	8012f3c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh+0xa4>
            SizeType cnt = SizeType(size() - new_size);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7f7 fc23 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8012f16:	4603      	mov	r3, r0
 8012f18:	461a      	mov	r2, r3
 8012f1a:	7afb      	ldrb	r3, [r7, #11]
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	75bb      	strb	r3, [r7, #22]
            while (cnt-- > 0)
 8012f20:	7dbb      	ldrb	r3, [r7, #22]
 8012f22:	1e5a      	subs	r2, r3, #1
 8012f24:	75ba      	strb	r2, [r7, #22]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	bf14      	ite	ne
 8012f2a:	2301      	movne	r3, #1
 8012f2c:	2300      	moveq	r3, #0
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d003      	beq.n	8012f3c <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh+0xa4>
                pop_back();
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f000 fa1d 	bl	8013374 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE8pop_backEv>
            while (cnt-- > 0)
 8012f3a:	e7f1      	b.n	8012f20 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE6resizeEhRKh+0x88>
    }
 8012f3c:	bf00      	nop
 8012f3e:	3718      	adds	r7, #24
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEmRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	71fb      	strb	r3, [r7, #7]
        validate();
 8012f52:	f000 fa1b 	bl	801338c <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 8012f56:	f107 030c 	add.w	r3, r7, #12
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 fa40 	bl	80133e0 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERm>
        return codec.encode<BitLen>(value);
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	4619      	mov	r1, r3
 8012f64:	68b8      	ldr	r0, [r7, #8]
 8012f66:	f000 fa66 	bl	8013436 <_ZN6uavcan11ScalarCodec6encodeILj32EmEEiT0_>
 8012f6a:	4603      	mov	r3, r0
    }
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3710      	adds	r7, #16
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(StorageType value, ScalarCodec& codec, TailArrayOptimizationMode)
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	6039      	str	r1, [r7, #0]
 8012f7e:	71fb      	strb	r3, [r7, #7]
 8012f80:	4613      	mov	r3, r2
 8012f82:	71bb      	strb	r3, [r7, #6]
        validate();
 8012f84:	f000 fa78 	bl	8013478 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>
            saturate(value);
 8012f88:	1dfb      	adds	r3, r7, #7
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f000 faa0 	bl	80134d0 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>
        return codec.encode<BitLen>(value);
 8012f90:	79fb      	ldrb	r3, [r7, #7]
 8012f92:	4619      	mov	r1, r3
 8012f94:	6838      	ldr	r0, [r7, #0]
 8012f96:	f000 fac8 	bl	801352a <_ZN6uavcan11ScalarCodec6encodeILj2EhEEiT0_>
 8012f9a:	4603      	mov	r3, r0
    }
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 8012fa4:	b590      	push	{r4, r7, lr}
 8012fa6:	b087      	sub	sp, #28
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	4613      	mov	r3, r2
 8012fb0:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 8012fb2:	79fa      	ldrb	r2, [r7, #7]
 8012fb4:	4623      	mov	r3, r4
 8012fb6:	68b9      	ldr	r1, [r7, #8]
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 fad7 	bl	801356c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 8012fbe:	4603      	mov	r3, r0
    }
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	371c      	adds	r7, #28
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd90      	pop	{r4, r7, pc}

08012fc8 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE6encodeERKS6_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
    static int encode(const SelfType& array, ScalarCodec& codec, const TailArrayOptimizationMode tao_mode)
 8012fc8:	b590      	push	{r4, r7, lr}
 8012fca:	b087      	sub	sp, #28
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	71fb      	strb	r3, [r7, #7]
        return array.encodeImpl(codec, tao_mode, BooleanType<IsDynamic>());
 8012fd6:	79fa      	ldrb	r2, [r7, #7]
 8012fd8:	4623      	mov	r3, r4
 8012fda:	68b9      	ldr	r1, [r7, #8]
 8012fdc:	68f8      	ldr	r0, [r7, #12]
 8012fde:	f000 fb1b 	bl	8013618 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>
 8012fe2:	4603      	mov	r3, r0
    }
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	371c      	adds	r7, #28
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd90      	pop	{r4, r7, pc}

08012fec <_ZN6uavcan16DynamicArrayBaseILj127EEC1Ev>:
    DynamicArrayBase() : size_(0) { }
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr

08013008 <_ZN6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE10initializeIhEENS_8EnableIfIXneszgecvT_Li0EcvS9__ELi0EEvE4TypeEi>:
    typename EnableIf<sizeof(U(0) >= U())>::Type initialize(int)
 8013008:	b480      	push	{r7}
 801300a:	b085      	sub	sp, #20
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
    }
 8013012:	bf00      	nop
 8013014:	3714      	adds	r7, #20
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr
	...

08013020 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	460b      	mov	r3, r1
 801302a:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	78fa      	ldrb	r2, [r7, #3]
 8013032:	429a      	cmp	r2, r3
 8013034:	d201      	bcs.n	801303a <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh+0x1a>
            return pos;
 8013036:	78fb      	ldrb	r3, [r7, #3]
 8013038:	e005      	b.n	8013046 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 801303a:	4b05      	ldr	r3, [pc, #20]	; (8013050 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh+0x30>)
 801303c:	4a05      	ldr	r2, [pc, #20]	; (8013054 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh+0x34>)
 801303e:	21e6      	movs	r1, #230	; 0xe6
 8013040:	4805      	ldr	r0, [pc, #20]	; (8013058 <_ZNK6uavcan16DynamicArrayBaseILj127EE13validateRangeEh+0x38>)
 8013042:	f00d faa3 	bl	802058c <__assert_func>
    }
 8013046:	4618      	mov	r0, r3
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}
 801304e:	bf00      	nop
 8013050:	08021b88 	.word	0x08021b88
 8013054:	08028f7c 	.word	0x08028f7c
 8013058:	08021f6c 	.word	0x08021f6c

0801305c <_ZN6uavcan11ScalarCodec17fixTwosComplementILj7EhEENS_8EnableIfIXoontscbsrNS_13NumericTraitsIT0_EE8IsSignedeqmlstS4_Li8ET_EvE4TypeERS4_>:
    fixTwosComplement(T&) { }
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	bf00      	nop
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj127EE8pop_backEv>:
    void pop_back() { Base::shrink(); }
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	f000 fb10 	bl	80136a0 <_ZN6uavcan16DynamicArrayBaseILj127EE6shrinkEv>
 8013080:	bf00      	nop
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 8013088:	b598      	push	{r3, r4, r7, lr}
 801308a:	af00      	add	r7, sp, #0
 801308c:	f000 fb1c 	bl	80136c8 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 8013090:	4603      	mov	r3, r0
 8013092:	460c      	mov	r4, r1
 8013094:	4618      	mov	r0, r3
 8013096:	4621      	mov	r1, r4
 8013098:	bd98      	pop	{r3, r4, r7, pc}

0801309a <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 801309a:	b490      	push	{r4, r7}
 801309c:	af00      	add	r7, sp, #0
 801309e:	f04f 0300 	mov.w	r3, #0
 80130a2:	f04f 0400 	mov.w	r4, #0
 80130a6:	4618      	mov	r0, r3
 80130a8:	4621      	mov	r1, r4
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bc90      	pop	{r4, r7}
 80130ae:	4770      	bx	lr

080130b0 <_ZN6uavcan11ScalarCodec8validateILj48EyEEvv>:
    void validate()
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 80130b8:	f7f2 fc8a 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 80130bc:	f7f2 fc88 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 80130c0:	f7f2 fc86 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80130c4:	bf00      	nop
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <_ZN6uavcan11ScalarCodec14clearExtraBitsILj48EyEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T& value)
 80130cc:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80130d0:	b083      	sub	sp, #12
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	6078      	str	r0, [r7, #4]
        value &= (T(1) << BitLen) - 1;  // Signedness doesn't matter
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80130dc:	f04f 31ff 	mov.w	r1, #4294967295
 80130e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130e4:	ea0b 0301 	and.w	r3, fp, r1
 80130e8:	ea0c 0402 	and.w	r4, ip, r2
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	e9c2 3400 	strd	r3, r4, [r2]
    }
 80130f2:	bf00      	nop
 80130f4:	370c      	adds	r7, #12
 80130f6:	46bd      	mov	sp, r7
 80130f8:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80130fc:	4770      	bx	lr

080130fe <_ZN6uavcan11ScalarCodec16convertByteOrderILj48ELj8EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&bytes)[Size])
 80130fe:	b480      	push	{r7}
 8013100:	b083      	sub	sp, #12
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
    }
 8013106:	bf00      	nop
 8013108:	370c      	adds	r7, #12
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr

08013112 <_ZN6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 8013112:	b480      	push	{r7}
 8013114:	b083      	sub	sp, #12
 8013116:	af00      	add	r7, sp, #0
 8013118:	4603      	mov	r3, r0
 801311a:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 801311c:	79fb      	ldrb	r3, [r7, #7]
 801311e:	2b01      	cmp	r3, #1
 8013120:	bf0c      	ite	eq
 8013122:	2301      	moveq	r3, #1
 8013124:	2300      	movne	r3, #0
 8013126:	b2db      	uxtb	r3, r3
    }
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 8013134:	b590      	push	{r4, r7, lr}
 8013136:	b087      	sub	sp, #28
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	60b9      	str	r1, [r7, #8]
 801313e:	713b      	strb	r3, [r7, #4]
 8013140:	4613      	mov	r3, r2
 8013142:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	4618      	mov	r0, r3
 8013148:	f7f7 ff72 	bl	800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d106      	bne.n	8013160 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 8013152:	4b21      	ldr	r3, [pc, #132]	; (80131d8 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa4>)
 8013154:	4a21      	ldr	r2, [pc, #132]	; (80131dc <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 8013156:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 801315a:	4821      	ldr	r0, [pc, #132]	; (80131e0 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xac>)
 801315c:	f00d fa16 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 8013160:	2300      	movs	r3, #0
 8013162:	75fb      	strb	r3, [r7, #23]
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	4618      	mov	r0, r3
 8013168:	f7f7 ff62 	bl	800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>
 801316c:	4603      	mov	r3, r0
 801316e:	461a      	mov	r2, r3
 8013170:	7dfb      	ldrb	r3, [r7, #23]
 8013172:	4293      	cmp	r3, r2
 8013174:	bf34      	ite	cc
 8013176:	2301      	movcc	r3, #1
 8013178:	2300      	movcs	r3, #0
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	d025      	beq.n	80131cc <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x98>
            const bool last_item = i == (size() - 1);
 8013180:	7dfc      	ldrb	r4, [r7, #23]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	4618      	mov	r0, r3
 8013186:	f7f7 ff53 	bl	800b030 <_ZNK6uavcan16DynamicArrayBaseILj3EE4sizeEv>
 801318a:	4603      	mov	r3, r0
 801318c:	3b01      	subs	r3, #1
 801318e:	429c      	cmp	r4, r3
 8013190:	bf0c      	ite	eq
 8013192:	2301      	moveq	r3, #1
 8013194:	2300      	movne	r3, #0
 8013196:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	7dfa      	ldrb	r2, [r7, #23]
 801319c:	4611      	mov	r1, r2
 801319e:	4618      	mov	r0, r3
 80131a0:	f000 facd 	bl	801373e <_ZNK6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE2atEh>
 80131a4:	7dbb      	ldrb	r3, [r7, #22]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d001      	beq.n	80131ae <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7a>
 80131aa:	79fb      	ldrb	r3, [r7, #7]
 80131ac:	e000      	b.n	80131b0 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7c>
 80131ae:	2300      	movs	r3, #0
 80131b0:	461a      	mov	r2, r3
 80131b2:	68b9      	ldr	r1, [r7, #8]
 80131b4:	f000 fa93 	bl	80136de <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80131b8:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	dc01      	bgt.n	80131c4 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x90>
                return res;
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	e004      	b.n	80131ce <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9a>
        for (SizeType i = 0; i < size(); i++)
 80131c4:	7dfb      	ldrb	r3, [r7, #23]
 80131c6:	3301      	adds	r3, #1
 80131c8:	75fb      	strb	r3, [r7, #23]
 80131ca:	e7cb      	b.n	8013164 <_ZNK6uavcan5ArrayINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 80131cc:	2301      	movs	r3, #1
    }
 80131ce:	4618      	mov	r0, r3
 80131d0:	371c      	adds	r7, #28
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd90      	pop	{r4, r7, pc}
 80131d6:	bf00      	nop
 80131d8:	08022294 	.word	0x08022294
 80131dc:	08026380 	.word	0x08026380
 80131e0:	08021f6c 	.word	0x08021f6c

080131e4 <_ZN6uavcan11ScalarCodec8validateILj1EbEEvv>:
    void validate()
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 80131ec:	f7f2 fbf0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 80131f0:	f7f2 fbee 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 80131f4:	f7f2 fbec 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80131f8:	bf00      	nop
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj1EbEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T& value)
 8013200:	b480      	push	{r7}
 8013202:	b083      	sub	sp, #12
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
        value &= (T(1) << BitLen) - 1;  // Signedness doesn't matter
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	bf14      	ite	ne
 8013214:	2301      	movne	r3, #1
 8013216:	2300      	moveq	r3, #0
 8013218:	b2da      	uxtb	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	701a      	strb	r2, [r3, #0]
    }
 801321e:	bf00      	nop
 8013220:	370c      	adds	r7, #12
 8013222:	46bd      	mov	sp, r7
 8013224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013228:	4770      	bx	lr

0801322a <_ZN6uavcan11ScalarCodec16convertByteOrderILj1ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&)[Size]) { }
 801322a:	b480      	push	{r7}
 801322c:	b083      	sub	sp, #12
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	bf00      	nop
 8013234:	370c      	adds	r7, #12
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr

0801323e <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 801323e:	b598      	push	{r3, r4, r7, lr}
 8013240:	af00      	add	r7, sp, #0
 8013242:	f000 fa95 	bl	8013770 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE12LimitsImpl643maxEv>
 8013246:	4603      	mov	r3, r0
 8013248:	460c      	mov	r4, r1
 801324a:	4618      	mov	r0, r3
 801324c:	4621      	mov	r1, r4
 801324e:	bd98      	pop	{r3, r4, r7, pc}

08013250 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 8013250:	b490      	push	{r4, r7}
 8013252:	af00      	add	r7, sp, #0
 8013254:	f04f 0300 	mov.w	r3, #0
 8013258:	f04f 0400 	mov.w	r4, #0
 801325c:	4618      	mov	r0, r3
 801325e:	4621      	mov	r1, r4
 8013260:	46bd      	mov	sp, r7
 8013262:	bc90      	pop	{r4, r7}
 8013264:	4770      	bx	lr

08013266 <_ZN6uavcan11ScalarCodec8validateILj64EyEEvv>:
    void validate()
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 801326e:	f7f2 fbaf 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 8013272:	f7f2 fbad 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 8013276:	f7f2 fbab 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 801327a:	bf00      	nop
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}

08013282 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj64EyEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T&) { }
 8013282:	b480      	push	{r7}
 8013284:	b083      	sub	sp, #12
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
 801328a:	bf00      	nop
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr

08013296 <_ZN6uavcan11ScalarCodec16convertByteOrderILj64ELj8EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&bytes)[Size])
 8013296:	b480      	push	{r7}
 8013298:	b083      	sub	sp, #12
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
    }
 801329e:	bf00      	nop
 80132a0:	370c      	adds	r7, #12
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr

080132aa <_ZN6uavcan11ScalarCodec14clearExtraBitsILj16EtEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T&) { }
 80132aa:	b480      	push	{r7}
 80132ac:	b083      	sub	sp, #12
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
 80132b2:	bf00      	nop
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
	...

080132c0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 80132c0:	b590      	push	{r4, r7, lr}
 80132c2:	b087      	sub	sp, #28
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	713b      	strb	r3, [r7, #4]
 80132cc:	4613      	mov	r3, r2
 80132ce:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7f7 fa42 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 80132d8:	4603      	mov	r3, r0
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d106      	bne.n	80132ec <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 80132de:	4b22      	ldr	r3, [pc, #136]	; (8013368 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 80132e0:	4a22      	ldr	r2, [pc, #136]	; (801336c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xac>)
 80132e2:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80132e6:	4822      	ldr	r0, [pc, #136]	; (8013370 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 80132e8:	f00d f950 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 80132ec:	2300      	movs	r3, #0
 80132ee:	75fb      	strb	r3, [r7, #23]
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7f7 fa32 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 80132f8:	4603      	mov	r3, r0
 80132fa:	461a      	mov	r2, r3
 80132fc:	7dfb      	ldrb	r3, [r7, #23]
 80132fe:	4293      	cmp	r3, r2
 8013300:	bf34      	ite	cc
 8013302:	2301      	movcc	r3, #1
 8013304:	2300      	movcs	r3, #0
 8013306:	b2db      	uxtb	r3, r3
 8013308:	2b00      	cmp	r3, #0
 801330a:	d027      	beq.n	801335c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9c>
            const bool last_item = i == (size() - 1);
 801330c:	7dfc      	ldrb	r4, [r7, #23]
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	4618      	mov	r0, r3
 8013312:	f7f7 fa23 	bl	800a75c <_ZNK6uavcan16DynamicArrayBaseILj80EE4sizeEv>
 8013316:	4603      	mov	r3, r0
 8013318:	3b01      	subs	r3, #1
 801331a:	429c      	cmp	r4, r3
 801331c:	bf0c      	ite	eq
 801331e:	2301      	moveq	r3, #1
 8013320:	2300      	movne	r3, #0
 8013322:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	7dfa      	ldrb	r2, [r7, #23]
 8013328:	4611      	mov	r1, r2
 801332a:	4618      	mov	r0, r3
 801332c:	f000 fa2b 	bl	8013786 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE2atEh>
 8013330:	4603      	mov	r3, r0
 8013332:	7818      	ldrb	r0, [r3, #0]
 8013334:	7dbb      	ldrb	r3, [r7, #22]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d001      	beq.n	801333e <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7e>
 801333a:	79fb      	ldrb	r3, [r7, #7]
 801333c:	e000      	b.n	8013340 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x80>
 801333e:	2300      	movs	r3, #0
 8013340:	461a      	mov	r2, r3
 8013342:	68b9      	ldr	r1, [r7, #8]
 8013344:	f7fa ff86 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8013348:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	2b00      	cmp	r3, #0
 801334e:	dc01      	bgt.n	8013354 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x94>
                return res;
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	e004      	b.n	801335e <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9e>
        for (SizeType i = 0; i < size(); i++)
 8013354:	7dfb      	ldrb	r3, [r7, #23]
 8013356:	3301      	adds	r3, #1
 8013358:	75fb      	strb	r3, [r7, #23]
 801335a:	e7c9      	b.n	80132f0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 801335c:	2301      	movs	r3, #1
    }
 801335e:	4618      	mov	r0, r3
 8013360:	371c      	adds	r7, #28
 8013362:	46bd      	mov	sp, r7
 8013364:	bd90      	pop	{r4, r7, pc}
 8013366:	bf00      	nop
 8013368:	08022294 	.word	0x08022294
 801336c:	08026db0 	.word	0x08026db0
 8013370:	08021f6c 	.word	0x08021f6c

08013374 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE8pop_backEv>:
    void pop_back() { Base::shrink(); }
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4618      	mov	r0, r3
 8013380:	f000 fa16 	bl	80137b0 <_ZN6uavcan16DynamicArrayBaseILj80EE6shrinkEv>
 8013384:	bf00      	nop
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 801338c:	b598      	push	{r3, r4, r7, lr}
 801338e:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 8013390:	f7f2 fb1e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 8013394:	f000 fa20 	bl	80137d8 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8013398:	4604      	mov	r4, r0
 801339a:	f7f2 fb57 	bl	8005a4c <_ZN6uavcan13NumericTraitsImE3maxEv>
 801339e:	4603      	mov	r3, r0
 80133a0:	429c      	cmp	r4, r3
 80133a2:	d905      	bls.n	80133b0 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x24>
 80133a4:	4b0a      	ldr	r3, [pc, #40]	; (80133d0 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>)
 80133a6:	4a0b      	ldr	r2, [pc, #44]	; (80133d4 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 80133a8:	2164      	movs	r1, #100	; 0x64
 80133aa:	480b      	ldr	r0, [pc, #44]	; (80133d8 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 80133ac:	f00d f8ee 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 80133b0:	f000 fa19 	bl	80137e6 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 80133b4:	4604      	mov	r4, r0
 80133b6:	f7f2 fb52 	bl	8005a5e <_ZN6uavcan13NumericTraitsImE3minEv>
 80133ba:	4603      	mov	r3, r0
 80133bc:	429c      	cmp	r4, r3
 80133be:	d205      	bcs.n	80133cc <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x40>
 80133c0:	4b06      	ldr	r3, [pc, #24]	; (80133dc <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 80133c2:	4a04      	ldr	r2, [pc, #16]	; (80133d4 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 80133c4:	2166      	movs	r1, #102	; 0x66
 80133c6:	4804      	ldr	r0, [pc, #16]	; (80133d8 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 80133c8:	f00d f8e0 	bl	802058c <__assert_func>
    }
 80133cc:	bf00      	nop
 80133ce:	bd98      	pop	{r3, r4, r7, pc}
 80133d0:	080221f0 	.word	0x080221f0
 80133d4:	080272a4 	.word	0x080272a4
 80133d8:	0802221c 	.word	0x0802221c
 80133dc:	08022268 	.word	0x08022268

080133e0 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERm>:
    static void saturate(StorageType& value)
 80133e0:	b590      	push	{r4, r7, lr}
 80133e2:	b083      	sub	sp, #12
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
        if (value > max())
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681c      	ldr	r4, [r3, #0]
 80133ec:	f000 f9f4 	bl	80137d8 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 80133f0:	4603      	mov	r3, r0
 80133f2:	429c      	cmp	r4, r3
 80133f4:	bf8c      	ite	hi
 80133f6:	2301      	movhi	r3, #1
 80133f8:	2300      	movls	r3, #0
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d005      	beq.n	801340c <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERm+0x2c>
            value = max();
 8013400:	f000 f9ea 	bl	80137d8 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8013404:	4602      	mov	r2, r0
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	601a      	str	r2, [r3, #0]
    }
 801340a:	e010      	b.n	801342e <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERm+0x4e>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681c      	ldr	r4, [r3, #0]
 8013410:	f000 f9e9 	bl	80137e6 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8013414:	4603      	mov	r3, r0
 8013416:	429c      	cmp	r4, r3
 8013418:	bf94      	ite	ls
 801341a:	2301      	movls	r3, #1
 801341c:	2300      	movhi	r3, #0
 801341e:	b2db      	uxtb	r3, r3
 8013420:	2b00      	cmp	r3, #0
 8013422:	d004      	beq.n	801342e <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERm+0x4e>
            value = min();
 8013424:	f000 f9df 	bl	80137e6 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8013428:	4602      	mov	r2, r0
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	601a      	str	r2, [r3, #0]
    }
 801342e:	bf00      	nop
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	bd90      	pop	{r4, r7, pc}

08013436 <_ZN6uavcan11ScalarCodec6encodeILj32EmEEiT0_>:
int ScalarCodec::encode(const T value)
 8013436:	b580      	push	{r7, lr}
 8013438:	b084      	sub	sp, #16
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
 801343e:	6039      	str	r1, [r7, #0]
    validate<BitLen, T>();
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 f9d8 	bl	80137f6 <_ZN6uavcan11ScalarCodec8validateILj32EmEEvv>
    byte_union.value = value;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	60fb      	str	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 801344a:	f107 030c 	add.w	r3, r7, #12
 801344e:	4618      	mov	r0, r3
 8013450:	f000 f9df 	bl	8013812 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj32EmEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 8013454:	f107 030c 	add.w	r3, r7, #12
 8013458:	4618      	mov	r0, r3
 801345a:	f000 f9e4 	bl	8013826 <_ZN6uavcan11ScalarCodec16convertByteOrderILj32ELj4EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 801345e:	f107 030c 	add.w	r3, r7, #12
 8013462:	2220      	movs	r2, #32
 8013464:	4619      	mov	r1, r3
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 ffde 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 801346c:	4603      	mov	r3, r0
}
 801346e:	4618      	mov	r0, r3
 8013470:	3710      	adds	r7, #16
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
	...

08013478 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv>:
    static void validate()
 8013478:	b598      	push	{r3, r4, r7, lr}
 801347a:	af00      	add	r7, sp, #0
        StaticAssert<(BitLen <= (sizeof(StorageType) * 8))>::check();
 801347c:	f7f2 faa8 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        UAVCAN_ASSERT(max() <= NumericTraits<StorageType>::max());
 8013480:	f000 f9db 	bl	801383a <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8013484:	4603      	mov	r3, r0
 8013486:	461c      	mov	r4, r3
 8013488:	f7f2 fabf 	bl	8005a0a <_ZN6uavcan13NumericTraitsIhE3maxEv>
 801348c:	4603      	mov	r3, r0
 801348e:	429c      	cmp	r4, r3
 8013490:	d905      	bls.n	801349e <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x26>
 8013492:	4b0b      	ldr	r3, [pc, #44]	; (80134c0 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x48>)
 8013494:	4a0b      	ldr	r2, [pc, #44]	; (80134c4 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 8013496:	2164      	movs	r1, #100	; 0x64
 8013498:	480b      	ldr	r0, [pc, #44]	; (80134c8 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 801349a:	f00d f877 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(min() >= NumericTraits<StorageType>::min());
 801349e:	f000 f9d3 	bl	8013848 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 80134a2:	4603      	mov	r3, r0
 80134a4:	461c      	mov	r4, r3
 80134a6:	f7f2 fab8 	bl	8005a1a <_ZN6uavcan13NumericTraitsIhE3minEv>
 80134aa:	4603      	mov	r3, r0
 80134ac:	429c      	cmp	r4, r3
 80134ae:	d205      	bcs.n	80134bc <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x44>
 80134b0:	4b06      	ldr	r3, [pc, #24]	; (80134cc <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x54>)
 80134b2:	4a04      	ldr	r2, [pc, #16]	; (80134c4 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x4c>)
 80134b4:	2166      	movs	r1, #102	; 0x66
 80134b6:	4804      	ldr	r0, [pc, #16]	; (80134c8 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8validateEv+0x50>)
 80134b8:	f00d f868 	bl	802058c <__assert_func>
    }
 80134bc:	bf00      	nop
 80134be:	bd98      	pop	{r3, r4, r7, pc}
 80134c0:	080221f0 	.word	0x080221f0
 80134c4:	080261f0 	.word	0x080261f0
 80134c8:	0802221c 	.word	0x0802221c
 80134cc:	08022268 	.word	0x08022268

080134d0 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh>:
    static void saturate(StorageType& value)
 80134d0:	b590      	push	{r4, r7, lr}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
        if (value > max())
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	781c      	ldrb	r4, [r3, #0]
 80134dc:	f000 f9ad 	bl	801383a <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 80134e0:	4603      	mov	r3, r0
 80134e2:	429c      	cmp	r4, r3
 80134e4:	bf8c      	ite	hi
 80134e6:	2301      	movhi	r3, #1
 80134e8:	2300      	movls	r3, #0
 80134ea:	b2db      	uxtb	r3, r3
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d006      	beq.n	80134fe <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x2e>
            value = max();
 80134f0:	f000 f9a3 	bl	801383a <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 80134f4:	4603      	mov	r3, r0
 80134f6:	461a      	mov	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	701a      	strb	r2, [r3, #0]
    }
 80134fc:	e011      	b.n	8013522 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
        else if (value <= min()) // 'Less or Equal' allows to suppress compiler warning on unsigned types
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	781c      	ldrb	r4, [r3, #0]
 8013502:	f000 f9a1 	bl	8013848 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 8013506:	4603      	mov	r3, r0
 8013508:	429c      	cmp	r4, r3
 801350a:	bf94      	ite	ls
 801350c:	2301      	movls	r3, #1
 801350e:	2300      	movhi	r3, #0
 8013510:	b2db      	uxtb	r3, r3
 8013512:	2b00      	cmp	r3, #0
 8013514:	d005      	beq.n	8013522 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE8saturateERh+0x52>
            value = min();
 8013516:	f000 f997 	bl	8013848 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>
 801351a:	4603      	mov	r3, r0
 801351c:	461a      	mov	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	701a      	strb	r2, [r3, #0]
    }
 8013522:	bf00      	nop
 8013524:	370c      	adds	r7, #12
 8013526:	46bd      	mov	sp, r7
 8013528:	bd90      	pop	{r4, r7, pc}

0801352a <_ZN6uavcan11ScalarCodec6encodeILj2EhEEiT0_>:
int ScalarCodec::encode(const T value)
 801352a:	b580      	push	{r7, lr}
 801352c:	b084      	sub	sp, #16
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
 8013532:	460b      	mov	r3, r1
 8013534:	70fb      	strb	r3, [r7, #3]
    validate<BitLen, T>();
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f000 f98e 	bl	8013858 <_ZN6uavcan11ScalarCodec8validateILj2EhEEvv>
    byte_union.value = value;
 801353c:	78fb      	ldrb	r3, [r7, #3]
 801353e:	733b      	strb	r3, [r7, #12]
    clearExtraBits<BitLen, T>(byte_union.value);
 8013540:	f107 030c 	add.w	r3, r7, #12
 8013544:	4618      	mov	r0, r3
 8013546:	f000 f995 	bl	8013874 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj2EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>
    convertByteOrder<BitLen>(byte_union.bytes);
 801354a:	f107 030c 	add.w	r3, r7, #12
 801354e:	4618      	mov	r0, r3
 8013550:	f000 f9a1 	bl	8013896 <_ZN6uavcan11ScalarCodec16convertByteOrderILj2ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>
    return encodeBytesImpl(byte_union.bytes, BitLen);
 8013554:	f107 030c 	add.w	r3, r7, #12
 8013558:	2202      	movs	r2, #2
 801355a:	4619      	mov	r1, r3
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f000 ff63 	bl	8014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>
 8013562:	4603      	mov	r3, r0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 801356c:	b590      	push	{r4, r7, lr}
 801356e:	b087      	sub	sp, #28
 8013570:	af00      	add	r7, sp, #0
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	60b9      	str	r1, [r7, #8]
 8013576:	713b      	strb	r3, [r7, #4]
 8013578:	4613      	mov	r3, r2
 801357a:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 801357c:	68f8      	ldr	r0, [r7, #12]
 801357e:	f000 f994 	bl	80138aa <_ZNK6uavcan15StaticArrayBaseILj16EE4sizeEv>
 8013582:	4603      	mov	r3, r0
 8013584:	2b00      	cmp	r3, #0
 8013586:	d106      	bne.n	8013596 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2a>
 8013588:	4b20      	ldr	r3, [pc, #128]	; (801360c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa0>)
 801358a:	4a21      	ldr	r2, [pc, #132]	; (8013610 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa4>)
 801358c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8013590:	4820      	ldr	r0, [pc, #128]	; (8013614 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 8013592:	f00c fffb 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 8013596:	2300      	movs	r3, #0
 8013598:	75fb      	strb	r3, [r7, #23]
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	f000 f985 	bl	80138aa <_ZNK6uavcan15StaticArrayBaseILj16EE4sizeEv>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
 80135a6:	4293      	cmp	r3, r2
 80135a8:	bf34      	ite	cc
 80135aa:	2301      	movcc	r3, #1
 80135ac:	2300      	movcs	r3, #0
 80135ae:	b2db      	uxtb	r3, r3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d026      	beq.n	8013602 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x96>
            const bool last_item = i == (size() - 1);
 80135b4:	7dfc      	ldrb	r4, [r7, #23]
 80135b6:	68f8      	ldr	r0, [r7, #12]
 80135b8:	f000 f977 	bl	80138aa <_ZNK6uavcan15StaticArrayBaseILj16EE4sizeEv>
 80135bc:	4603      	mov	r3, r0
 80135be:	3b01      	subs	r3, #1
 80135c0:	429c      	cmp	r4, r3
 80135c2:	bf0c      	ite	eq
 80135c4:	2301      	moveq	r3, #1
 80135c6:	2300      	movne	r3, #0
 80135c8:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	7dfa      	ldrb	r2, [r7, #23]
 80135ce:	4611      	mov	r1, r2
 80135d0:	4618      	mov	r0, r3
 80135d2:	f000 f975 	bl	80138c0 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE2atEh>
 80135d6:	4603      	mov	r3, r0
 80135d8:	7818      	ldrb	r0, [r3, #0]
 80135da:	7dbb      	ldrb	r3, [r7, #22]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d001      	beq.n	80135e4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x78>
 80135e0:	79fb      	ldrb	r3, [r7, #7]
 80135e2:	e000      	b.n	80135e6 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7a>
 80135e4:	2300      	movs	r3, #0
 80135e6:	461a      	mov	r2, r3
 80135e8:	68b9      	ldr	r1, [r7, #8]
 80135ea:	f7fa fe33 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80135ee:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	dc01      	bgt.n	80135fa <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x8e>
                return res;
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	e004      	b.n	8013604 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x98>
        for (SizeType i = 0; i < size(); i++)
 80135fa:	7dfb      	ldrb	r3, [r7, #23]
 80135fc:	3301      	adds	r3, #1
 80135fe:	75fb      	strb	r3, [r7, #23]
 8013600:	e7cb      	b.n	801359a <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2e>
        return 1;
 8013602:	2301      	movs	r3, #1
    }
 8013604:	4618      	mov	r0, r3
 8013606:	371c      	adds	r7, #28
 8013608:	46bd      	mov	sp, r7
 801360a:	bd90      	pop	{r4, r7, pc}
 801360c:	08022294 	.word	0x08022294
 8013610:	08027378 	.word	0x08027378
 8013614:	08021f6c 	.word	0x08021f6c

08013618 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, TrueType) const   /// Dynamic
 8013618:	b590      	push	{r4, r7, lr}
 801361a:	b089      	sub	sp, #36	; 0x24
 801361c:	af00      	add	r7, sp, #0
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	713b      	strb	r3, [r7, #4]
 8013624:	4613      	mov	r3, r2
 8013626:	71fb      	strb	r3, [r7, #7]
        StaticAssert<IsDynamic>::check();
 8013628:	f7f2 f9d2 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        const bool self_tao_enabled = isOptimizedTailArray(tao_mode);
 801362c:	79fb      	ldrb	r3, [r7, #7]
 801362e:	4618      	mov	r0, r3
 8013630:	f000 f959 	bl	80138e6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>
 8013634:	4603      	mov	r3, r0
 8013636:	77fb      	strb	r3, [r7, #31]
        if (!self_tao_enabled)
 8013638:	7ffb      	ldrb	r3, [r7, #31]
 801363a:	f083 0301 	eor.w	r3, r3, #1
 801363e:	b2db      	uxtb	r3, r3
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00f      	beq.n	8013664 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                Base::RawEncodedSizeType::encode(typename StorageType<typename Base::RawEncodedSizeType>::Type(size()),
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	4618      	mov	r0, r3
 8013648:	f000 f95e 	bl	8013908 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv>
 801364c:	4603      	mov	r3, r0
            const int res_sz =
 801364e:	2200      	movs	r2, #0
 8013650:	68b9      	ldr	r1, [r7, #8]
 8013652:	4618      	mov	r0, r3
 8013654:	f7fa fdfe 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8013658:	61b8      	str	r0, [r7, #24]
            if (res_sz <= 0)
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	2b00      	cmp	r3, #0
 801365e:	dc01      	bgt.n	8013664 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x4c>
                return res_sz;
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	e019      	b.n	8013698 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        if (size() == 0)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	4618      	mov	r0, r3
 8013668:	f000 f94e 	bl	8013908 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv>
 801366c:	4603      	mov	r3, r0
 801366e:	2b00      	cmp	r3, #0
 8013670:	bf0c      	ite	eq
 8013672:	2301      	moveq	r3, #1
 8013674:	2300      	movne	r3, #0
 8013676:	b2db      	uxtb	r3, r3
 8013678:	2b00      	cmp	r3, #0
 801367a:	d001      	beq.n	8013680 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x68>
            return 1;
 801367c:	2301      	movs	r3, #1
 801367e:	e00b      	b.n	8013698 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x80>
        return encodeImpl(codec, self_tao_enabled ? TailArrayOptDisabled : tao_mode, FalseType());
 8013680:	7ffb      	ldrb	r3, [r7, #31]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d001      	beq.n	801368a <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x72>
 8013686:	2200      	movs	r2, #0
 8013688:	e000      	b.n	801368c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb1EEE+0x74>
 801368a:	79fa      	ldrb	r2, [r7, #7]
 801368c:	4623      	mov	r3, r4
 801368e:	68b9      	ldr	r1, [r7, #8]
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f000 f95f 	bl	8013954 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>
 8013696:	4603      	mov	r3, r0
    }
 8013698:	4618      	mov	r0, r3
 801369a:	3724      	adds	r7, #36	; 0x24
 801369c:	46bd      	mov	sp, r7
 801369e:	bd90      	pop	{r4, r7, pc}

080136a0 <_ZN6uavcan16DynamicArrayBaseILj127EE6shrinkEv>:
    void shrink()
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
        if (size_ > 0)
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d005      	beq.n	80136bc <_ZN6uavcan16DynamicArrayBaseILj127EE6shrinkEv+0x1c>
            size_--;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	3b01      	subs	r3, #1
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	701a      	strb	r2, [r3, #0]
    }
 80136bc:	bf00      	nop
 80136be:	370c      	adds	r7, #12
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 80136c8:	b598      	push	{r3, r4, r7, lr}
 80136ca:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 80136cc:	f7f2 f980 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 80136d0:	f04f 33ff 	mov.w	r3, #4294967295
 80136d4:	f64f 74ff 	movw	r4, #65535	; 0xffff
        }
 80136d8:	4618      	mov	r0, r3
 80136da:	4621      	mov	r1, r4
 80136dc:	bd98      	pop	{r3, r4, r7, pc}

080136de <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int CANIfaceStats_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
 80136de:	b580      	push	{r7, lr}
 80136e0:	b086      	sub	sp, #24
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	60f8      	str	r0, [r7, #12]
 80136e6:	60b9      	str	r1, [r7, #8]
 80136e8:	4613      	mov	r3, r2
 80136ea:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 80136ec:	2301      	movs	r3, #1
 80136ee:	617b      	str	r3, [r7, #20]
    res = FieldTypes::frames_tx::encode(self.frames_tx, codec,  ::uavcan::TailArrayOptDisabled);
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80136f6:	2300      	movs	r3, #0
 80136f8:	68ba      	ldr	r2, [r7, #8]
 80136fa:	f7fe fe5e 	bl	80123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80136fe:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	2b00      	cmp	r3, #0
 8013704:	dc01      	bgt.n	801370a <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x2c>
        return res;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	e015      	b.n	8013736 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x58>
    res = FieldTypes::frames_rx::encode(self.frames_rx, codec,  ::uavcan::TailArrayOptDisabled);
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8013710:	2300      	movs	r3, #0
 8013712:	68ba      	ldr	r2, [r7, #8]
 8013714:	f7fe fe51 	bl	80123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8013718:	6178      	str	r0, [r7, #20]
    if (res <= 0)
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	2b00      	cmp	r3, #0
 801371e:	dc01      	bgt.n	8013724 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x46>
        return res;
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	e008      	b.n	8013736 <_ZN6uavcan8protocol14CANIfaceStats_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE+0x58>
    res = FieldTypes::errors::encode(self.errors, codec,  tao_mode);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801372a:	79fb      	ldrb	r3, [r7, #7]
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	f7fe fe44 	bl	80123ba <_ZN6uavcan11IntegerSpecILj48ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEyRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8013732:	6178      	str	r0, [r7, #20]
    return res;
 8013734:	697b      	ldr	r3, [r7, #20]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3718      	adds	r7, #24
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <_ZNK6uavcan9ArrayImplINS_8protocol14CANIfaceStats_ILi0EEELNS_9ArrayModeE1ELj3EE2atEh>:
    const ValueType& at(SizeType pos) const { return data_[Base::validateRange(pos)]; }
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	78fa      	ldrb	r2, [r7, #3]
 801374e:	4611      	mov	r1, r2
 8013750:	4618      	mov	r0, r3
 8013752:	f7f8 fcf1 	bl	800c138 <_ZNK6uavcan16DynamicArrayBaseILj3EE13validateRangeEh>
 8013756:	4603      	mov	r3, r0
 8013758:	461a      	mov	r2, r3
 801375a:	4613      	mov	r3, r2
 801375c:	005b      	lsls	r3, r3, #1
 801375e:	4413      	add	r3, r2
 8013760:	00db      	lsls	r3, r3, #3
 8013762:	3308      	adds	r3, #8
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	4413      	add	r3, r2
 8013768:	4618      	mov	r0, r3
 801376a:	3708      	adds	r7, #8
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}

08013770 <_ZN6uavcan11IntegerSpecILj64ELNS_10SignednessE0ELNS_8CastModeE0EE12LimitsImpl643maxEv>:
        static StorageType max()
 8013770:	b490      	push	{r4, r7}
 8013772:	af00      	add	r7, sp, #0
            return StorageType((IsSigned == 0) ? 0xFFFFFFFFFFFFFFFFULL : 0x7FFFFFFFFFFFFFFFLL);
 8013774:	f04f 33ff 	mov.w	r3, #4294967295
 8013778:	f04f 34ff 	mov.w	r4, #4294967295
        }
 801377c:	4618      	mov	r0, r3
 801377e:	4621      	mov	r1, r4
 8013780:	46bd      	mov	sp, r7
 8013782:	bc90      	pop	{r4, r7}
 8013784:	4770      	bx	lr

08013786 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE2atEh>:
 8013786:	b580      	push	{r7, lr}
 8013788:	b082      	sub	sp, #8
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
 801378e:	460b      	mov	r3, r1
 8013790:	70fb      	strb	r3, [r7, #3]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	78fa      	ldrb	r2, [r7, #3]
 8013796:	4611      	mov	r1, r2
 8013798:	4618      	mov	r0, r3
 801379a:	f7f9 f83d 	bl	800c818 <_ZNK6uavcan16DynamicArrayBaseILj80EE13validateRangeEh>
 801379e:	4603      	mov	r3, r0
 80137a0:	461a      	mov	r2, r3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4413      	add	r3, r2
 80137a6:	3301      	adds	r3, #1
 80137a8:	4618      	mov	r0, r3
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZN6uavcan16DynamicArrayBaseILj80EE6shrinkEv>:
    void shrink()
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
        if (size_ > 0)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d005      	beq.n	80137cc <_ZN6uavcan16DynamicArrayBaseILj80EE6shrinkEv+0x1c>
            size_--;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	701a      	strb	r2, [r3, #0]
    }
 80137cc:	bf00      	nop
 80137ce:	370c      	adds	r7, #12
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 80137d8:	b580      	push	{r7, lr}
 80137da:	af00      	add	r7, sp, #0
 80137dc:	f000 f914 	bl	8013a08 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 80137e0:	4603      	mov	r3, r0
 80137e2:	4618      	mov	r0, r3
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 80137e6:	b480      	push	{r7}
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	2300      	movs	r3, #0
 80137ec:	4618      	mov	r0, r3
 80137ee:	46bd      	mov	sp, r7
 80137f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f4:	4770      	bx	lr

080137f6 <_ZN6uavcan11ScalarCodec8validateILj32EmEEvv>:
    void validate()
 80137f6:	b580      	push	{r7, lr}
 80137f8:	b082      	sub	sp, #8
 80137fa:	af00      	add	r7, sp, #0
 80137fc:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 80137fe:	f7f2 f8e7 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 8013802:	f7f2 f8e5 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 8013806:	f7f2 f8e3 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 801380a:	bf00      	nop
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}

08013812 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj32EmEENS_8EnableIfIXeqmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T&) { }
 8013812:	b480      	push	{r7}
 8013814:	b083      	sub	sp, #12
 8013816:	af00      	add	r7, sp, #0
 8013818:	6078      	str	r0, [r7, #4]
 801381a:	bf00      	nop
 801381c:	370c      	adds	r7, #12
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr

08013826 <_ZN6uavcan11ScalarCodec16convertByteOrderILj32ELj4EEENS_8EnableIfIXgtT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&bytes)[Size])
 8013826:	b480      	push	{r7}
 8013828:	b083      	sub	sp, #12
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
    }
 801382e:	bf00      	nop
 8013830:	370c      	adds	r7, #12
 8013832:	46bd      	mov	sp, r7
 8013834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013838:	4770      	bx	lr

0801383a <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>:
    static StorageType max() { return Limits::max(); }
 801383a:	b580      	push	{r7, lr}
 801383c:	af00      	add	r7, sp, #0
 801383e:	f000 f8eb 	bl	8013a18 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>
 8013842:	4603      	mov	r3, r0
 8013844:	4618      	mov	r0, r3
 8013846:	bd80      	pop	{r7, pc}

08013848 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3minEv>:
    static StorageType min() { return IsSigned ? StorageType(-max() - 1) : 0; }
 8013848:	b480      	push	{r7}
 801384a:	af00      	add	r7, sp, #0
 801384c:	2300      	movs	r3, #0
 801384e:	4618      	mov	r0, r3
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <_ZN6uavcan11ScalarCodec8validateILj2EhEEvv>:
    void validate()
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
        StaticAssert<((sizeof(T) * 8) >= BitLen)>::check();
 8013860:	f7f2 f8b6 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(BitLen <= BitStream::MaxBitsPerRW)>::check();
 8013864:	f7f2 f8b4 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<static_cast<bool>(NumericTraits<T>::IsSigned) ? (BitLen > 1) : true>::check();
 8013868:	f7f2 f8b2 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 801386c:	bf00      	nop
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <_ZN6uavcan11ScalarCodec14clearExtraBitsILj2EhEENS_8EnableIfIXgtmlstT0_Li8ET_EvE4TypeERS3_>:
    clearExtraBits(T& value)
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
        value &= (T(1) << BitLen) - 1;  // Signedness doesn't matter
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	f003 0303 	and.w	r3, r3, #3
 8013884:	b2da      	uxtb	r2, r3
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	701a      	strb	r2, [r3, #0]
    }
 801388a:	bf00      	nop
 801388c:	370c      	adds	r7, #12
 801388e:	46bd      	mov	sp, r7
 8013890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013894:	4770      	bx	lr

08013896 <_ZN6uavcan11ScalarCodec16convertByteOrderILj2ELj1EEENS_8EnableIfIXleT_Li8EEvE4TypeERAT0__h>:
    convertByteOrder(uint8_t (&)[Size]) { }
 8013896:	b480      	push	{r7}
 8013898:	b083      	sub	sp, #12
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
 801389e:	bf00      	nop
 80138a0:	370c      	adds	r7, #12
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr

080138aa <_ZNK6uavcan15StaticArrayBaseILj16EE4sizeEv>:
    SizeType size()     const { return SizeType(Size); }
 80138aa:	b480      	push	{r7}
 80138ac:	b083      	sub	sp, #12
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
 80138b2:	2310      	movs	r3, #16
 80138b4:	4618      	mov	r0, r3
 80138b6:	370c      	adds	r7, #12
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE0ELj16EE2atEh>:
    const ValueType& at(SizeType pos) const { return data_[Base::validateRange(pos)]; }
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	460b      	mov	r3, r1
 80138ca:	70fb      	strb	r3, [r7, #3]
 80138cc:	78fb      	ldrb	r3, [r7, #3]
 80138ce:	4619      	mov	r1, r3
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f000 f8a9 	bl	8013a28 <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh>
 80138d6:	4603      	mov	r3, r0
 80138d8:	461a      	mov	r2, r3
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4413      	add	r3, r2
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}

080138e6 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE20isOptimizedTailArrayENS_25TailArrayOptimizationModeE>:
    static bool isOptimizedTailArray(TailArrayOptimizationMode tao_mode)
 80138e6:	b480      	push	{r7}
 80138e8:	b083      	sub	sp, #12
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	4603      	mov	r3, r0
 80138ee:	71fb      	strb	r3, [r7, #7]
        return (T::MinBitLen >= 8) && (tao_mode == TailArrayOptEnabled);
 80138f0:	79fb      	ldrb	r3, [r7, #7]
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	bf0c      	ite	eq
 80138f6:	2301      	moveq	r3, #1
 80138f8:	2300      	movne	r3, #0
 80138fa:	b2db      	uxtb	r3, r3
    }
 80138fc:	4618      	mov	r0, r3
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr

08013908 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv>:
    SizeType size() const
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
        UAVCAN_ASSERT(size_ ? ((size_ - 1u) <= (MaxSize - 1u)) : 1); // -Werror=type-limits
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d004      	beq.n	8013922 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x1a>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	3b01      	subs	r3, #1
 801391e:	2bfe      	cmp	r3, #254	; 0xfe
 8013920:	d801      	bhi.n	8013926 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x1e>
 8013922:	2301      	movs	r3, #1
 8013924:	e000      	b.n	8013928 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x20>
 8013926:	2300      	movs	r3, #0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d106      	bne.n	801393a <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x32>
 801392c:	4b06      	ldr	r3, [pc, #24]	; (8013948 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x40>)
 801392e:	4a07      	ldr	r2, [pc, #28]	; (801394c <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x44>)
 8013930:	f44f 7182 	mov.w	r1, #260	; 0x104
 8013934:	4806      	ldr	r0, [pc, #24]	; (8013950 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv+0x48>)
 8013936:	f00c fe29 	bl	802058c <__assert_func>
        return size_;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	781b      	ldrb	r3, [r3, #0]
    }
 801393e:	4618      	mov	r0, r3
 8013940:	3708      	adds	r7, #8
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	08022010 	.word	0x08022010
 801394c:	080275ac 	.word	0x080275ac
 8013950:	08021f6c 	.word	0x08021f6c

08013954 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE>:
    int encodeImpl(ScalarCodec& codec, const TailArrayOptimizationMode tao_mode, FalseType) const  /// Static
 8013954:	b590      	push	{r4, r7, lr}
 8013956:	b087      	sub	sp, #28
 8013958:	af00      	add	r7, sp, #0
 801395a:	60f8      	str	r0, [r7, #12]
 801395c:	60b9      	str	r1, [r7, #8]
 801395e:	713b      	strb	r3, [r7, #4]
 8013960:	4613      	mov	r3, r2
 8013962:	71fb      	strb	r3, [r7, #7]
        UAVCAN_ASSERT(size() > 0);
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	4618      	mov	r0, r3
 8013968:	f7ff ffce 	bl	8013908 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv>
 801396c:	4603      	mov	r3, r0
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x2c>
 8013972:	4b22      	ldr	r3, [pc, #136]	; (80139fc <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xa8>)
 8013974:	4a22      	ldr	r2, [pc, #136]	; (8013a00 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xac>)
 8013976:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 801397a:	4822      	ldr	r0, [pc, #136]	; (8013a04 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0xb0>)
 801397c:	f00c fe06 	bl	802058c <__assert_func>
        for (SizeType i = 0; i < size(); i++)
 8013980:	2300      	movs	r3, #0
 8013982:	75fb      	strb	r3, [r7, #23]
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	4618      	mov	r0, r3
 8013988:	f7ff ffbe 	bl	8013908 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv>
 801398c:	4603      	mov	r3, r0
 801398e:	461a      	mov	r2, r3
 8013990:	7dfb      	ldrb	r3, [r7, #23]
 8013992:	4293      	cmp	r3, r2
 8013994:	bf34      	ite	cc
 8013996:	2301      	movcc	r3, #1
 8013998:	2300      	movcs	r3, #0
 801399a:	b2db      	uxtb	r3, r3
 801399c:	2b00      	cmp	r3, #0
 801399e:	d027      	beq.n	80139f0 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9c>
            const bool last_item = i == (size() - 1);
 80139a0:	7dfc      	ldrb	r4, [r7, #23]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7ff ffaf 	bl	8013908 <_ZNK6uavcan16DynamicArrayBaseILj255EE4sizeEv>
 80139aa:	4603      	mov	r3, r0
 80139ac:	3b01      	subs	r3, #1
 80139ae:	429c      	cmp	r4, r3
 80139b0:	bf0c      	ite	eq
 80139b2:	2301      	moveq	r3, #1
 80139b4:	2300      	movne	r3, #0
 80139b6:	75bb      	strb	r3, [r7, #22]
            const int res = RawValueType::encode(Base::at(i), codec, last_item ? tao_mode : TailArrayOptDisabled);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	7dfa      	ldrb	r2, [r7, #23]
 80139bc:	4611      	mov	r1, r2
 80139be:	4618      	mov	r0, r3
 80139c0:	f000 f84e 	bl	8013a60 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE2atEh>
 80139c4:	4603      	mov	r3, r0
 80139c6:	7818      	ldrb	r0, [r3, #0]
 80139c8:	7dbb      	ldrb	r3, [r7, #22]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d001      	beq.n	80139d2 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x7e>
 80139ce:	79fb      	ldrb	r3, [r7, #7]
 80139d0:	e000      	b.n	80139d4 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x80>
 80139d2:	2300      	movs	r3, #0
 80139d4:	461a      	mov	r2, r3
 80139d6:	68b9      	ldr	r1, [r7, #8]
 80139d8:	f7fa fc3c 	bl	800e254 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE6encodeEhRNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 80139dc:	6138      	str	r0, [r7, #16]
            if (res <= 0)
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	dc01      	bgt.n	80139e8 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x94>
                return res;
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	e004      	b.n	80139f2 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x9e>
        for (SizeType i = 0; i < size(); i++)
 80139e8:	7dfb      	ldrb	r3, [r7, #23]
 80139ea:	3301      	adds	r3, #1
 80139ec:	75fb      	strb	r3, [r7, #23]
 80139ee:	e7c9      	b.n	8013984 <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE10encodeImplERNS_11ScalarCodecENS_25TailArrayOptimizationModeENS_11BooleanTypeILb0EEE+0x30>
        return 1;
 80139f0:	2301      	movs	r3, #1
    }
 80139f2:	4618      	mov	r0, r3
 80139f4:	371c      	adds	r7, #28
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd90      	pop	{r4, r7, pc}
 80139fa:	bf00      	nop
 80139fc:	08022294 	.word	0x08022294
 8013a00:	08027668 	.word	0x08027668
 8013a04:	08021f6c 	.word	0x08021f6c

08013a08 <_ZN6uavcan11IntegerSpecILj32ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 8013a0c:	f7f1 ffe0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 8013a10:	f04f 33ff 	mov.w	r3, #4294967295
        }
 8013a14:	4618      	mov	r0, r3
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE17LimitsImplGeneric3maxEv>:
        static StorageType max()
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	af00      	add	r7, sp, #0
            StaticAssert<(sizeof(uintmax_t) >= 8)>::check();
 8013a1c:	f7f1 ffd8 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
                return StorageType((uintmax_t(1) << static_cast<unsigned>(BitLen)) - 1U);
 8013a20:	2303      	movs	r3, #3
        }
 8013a22:	4618      	mov	r0, r3
 8013a24:	bd80      	pop	{r7, pc}
	...

08013a28 <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	460b      	mov	r3, r1
 8013a32:	70fb      	strb	r3, [r7, #3]
        if (pos < SizeType(Size))
 8013a34:	78fb      	ldrb	r3, [r7, #3]
 8013a36:	2b0f      	cmp	r3, #15
 8013a38:	d801      	bhi.n	8013a3e <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh+0x16>
            return pos;
 8013a3a:	78fb      	ldrb	r3, [r7, #3]
 8013a3c:	e005      	b.n	8013a4a <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh+0x22>
        UAVCAN_ASSERT(0);
 8013a3e:	4b05      	ldr	r3, [pc, #20]	; (8013a54 <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh+0x2c>)
 8013a40:	4a05      	ldr	r2, [pc, #20]	; (8013a58 <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh+0x30>)
 8013a42:	21c6      	movs	r1, #198	; 0xc6
 8013a44:	4805      	ldr	r0, [pc, #20]	; (8013a5c <_ZNK6uavcan15StaticArrayBaseILj16EE13validateRangeEh+0x34>)
 8013a46:	f00c fda1 	bl	802058c <__assert_func>
    }
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	08021b88 	.word	0x08021b88
 8013a58:	080274d0 	.word	0x080274d0
 8013a5c:	08021f6c 	.word	0x08021f6c

08013a60 <_ZNK6uavcan9ArrayImplINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj255EE2atEh>:
    const ValueType& at(SizeType pos) const { return data_[Base::validateRange(pos)]; }
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	460b      	mov	r3, r1
 8013a6a:	70fb      	strb	r3, [r7, #3]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	78fa      	ldrb	r2, [r7, #3]
 8013a70:	4611      	mov	r1, r2
 8013a72:	4618      	mov	r0, r3
 8013a74:	f000 f80a 	bl	8013a8c <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4413      	add	r3, r2
 8013a80:	3301      	adds	r3, #1
 8013a82:	4618      	mov	r0, r3
 8013a84:	3708      	adds	r7, #8
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
	...

08013a8c <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh>:
    SizeType validateRange(SizeType pos) const
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	460b      	mov	r3, r1
 8013a96:	70fb      	strb	r3, [r7, #3]
        if (pos < size_)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	78fa      	ldrb	r2, [r7, #3]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d201      	bcs.n	8013aa6 <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh+0x1a>
            return pos;
 8013aa2:	78fb      	ldrb	r3, [r7, #3]
 8013aa4:	e005      	b.n	8013ab2 <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh+0x26>
        UAVCAN_ASSERT(0);
 8013aa6:	4b05      	ldr	r3, [pc, #20]	; (8013abc <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh+0x30>)
 8013aa8:	4a05      	ldr	r2, [pc, #20]	; (8013ac0 <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh+0x34>)
 8013aaa:	21e6      	movs	r1, #230	; 0xe6
 8013aac:	4805      	ldr	r0, [pc, #20]	; (8013ac4 <_ZNK6uavcan16DynamicArrayBaseILj255EE13validateRangeEh+0x38>)
 8013aae:	f00c fd6d 	bl	802058c <__assert_func>
    }
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	08021b88 	.word	0x08021b88
 8013ac0:	080277c0 	.word	0x080277c0
 8013ac4:	08021f6c 	.word	0x08021f6c

08013ac8 <_GLOBAL__sub_I_huart3>:
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	af00      	add	r7, sp, #0
 8013acc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ad0:	2001      	movs	r0, #1
 8013ad2:	f7fb fb2d 	bl	800f130 <_Z41__static_initialization_and_destruction_0ii>
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <_GLOBAL__sub_D_huart3>:
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	f7fb fb25 	bl	800f130 <_Z41__static_initialization_and_destruction_0ii>
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013aee:	2300      	movs	r3, #0
 8013af0:	607b      	str	r3, [r7, #4]
 8013af2:	4b12      	ldr	r3, [pc, #72]	; (8013b3c <HAL_MspInit+0x54>)
 8013af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013af6:	4a11      	ldr	r2, [pc, #68]	; (8013b3c <HAL_MspInit+0x54>)
 8013af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013afc:	6453      	str	r3, [r2, #68]	; 0x44
 8013afe:	4b0f      	ldr	r3, [pc, #60]	; (8013b3c <HAL_MspInit+0x54>)
 8013b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013b06:	607b      	str	r3, [r7, #4]
 8013b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	603b      	str	r3, [r7, #0]
 8013b0e:	4b0b      	ldr	r3, [pc, #44]	; (8013b3c <HAL_MspInit+0x54>)
 8013b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b12:	4a0a      	ldr	r2, [pc, #40]	; (8013b3c <HAL_MspInit+0x54>)
 8013b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b18:	6413      	str	r3, [r2, #64]	; 0x40
 8013b1a:	4b08      	ldr	r3, [pc, #32]	; (8013b3c <HAL_MspInit+0x54>)
 8013b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b22:	603b      	str	r3, [r7, #0]
 8013b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8013b26:	2200      	movs	r2, #0
 8013b28:	210f      	movs	r1, #15
 8013b2a:	f06f 0001 	mvn.w	r0, #1
 8013b2e:	f7ec ffc1 	bl	8000ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013b32:	bf00      	nop
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	40023800 	.word	0x40023800

08013b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b08a      	sub	sp, #40	; 0x28
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b48:	f107 0314 	add.w	r3, r7, #20
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	601a      	str	r2, [r3, #0]
 8013b50:	605a      	str	r2, [r3, #4]
 8013b52:	609a      	str	r2, [r3, #8]
 8013b54:	60da      	str	r2, [r3, #12]
 8013b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4a19      	ldr	r2, [pc, #100]	; (8013bc4 <HAL_UART_MspInit+0x84>)
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d12c      	bne.n	8013bbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8013b62:	2300      	movs	r3, #0
 8013b64:	613b      	str	r3, [r7, #16]
 8013b66:	4b18      	ldr	r3, [pc, #96]	; (8013bc8 <HAL_UART_MspInit+0x88>)
 8013b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b6a:	4a17      	ldr	r2, [pc, #92]	; (8013bc8 <HAL_UART_MspInit+0x88>)
 8013b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013b70:	6413      	str	r3, [r2, #64]	; 0x40
 8013b72:	4b15      	ldr	r3, [pc, #84]	; (8013bc8 <HAL_UART_MspInit+0x88>)
 8013b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013b7a:	613b      	str	r3, [r7, #16]
 8013b7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013b7e:	2300      	movs	r3, #0
 8013b80:	60fb      	str	r3, [r7, #12]
 8013b82:	4b11      	ldr	r3, [pc, #68]	; (8013bc8 <HAL_UART_MspInit+0x88>)
 8013b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b86:	4a10      	ldr	r2, [pc, #64]	; (8013bc8 <HAL_UART_MspInit+0x88>)
 8013b88:	f043 0308 	orr.w	r3, r3, #8
 8013b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8013b8e:	4b0e      	ldr	r3, [pc, #56]	; (8013bc8 <HAL_UART_MspInit+0x88>)
 8013b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b92:	f003 0308 	and.w	r3, r3, #8
 8013b96:	60fb      	str	r3, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8013b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ba0:	2302      	movs	r3, #2
 8013ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ba8:	2303      	movs	r3, #3
 8013baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8013bac:	2307      	movs	r3, #7
 8013bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013bb0:	f107 0314 	add.w	r3, r7, #20
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	4805      	ldr	r0, [pc, #20]	; (8013bcc <HAL_UART_MspInit+0x8c>)
 8013bb8:	f7ec ffa6 	bl	8000b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8013bbc:	bf00      	nop
 8013bbe:	3728      	adds	r7, #40	; 0x28
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	40004800 	.word	0x40004800
 8013bc8:	40023800 	.word	0x40023800
 8013bcc:	40020c00 	.word	0x40020c00

08013bd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b08a      	sub	sp, #40	; 0x28
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013bd8:	f107 0314 	add.w	r3, r7, #20
 8013bdc:	2200      	movs	r2, #0
 8013bde:	601a      	str	r2, [r3, #0]
 8013be0:	605a      	str	r2, [r3, #4]
 8013be2:	609a      	str	r2, [r3, #8]
 8013be4:	60da      	str	r2, [r3, #12]
 8013be6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013bf0:	d13f      	bne.n	8013c72 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	613b      	str	r3, [r7, #16]
 8013bf6:	4b21      	ldr	r3, [pc, #132]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfa:	4a20      	ldr	r2, [pc, #128]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013bfc:	f043 0301 	orr.w	r3, r3, #1
 8013c00:	6313      	str	r3, [r2, #48]	; 0x30
 8013c02:	4b1e      	ldr	r3, [pc, #120]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c06:	f003 0301 	and.w	r3, r3, #1
 8013c0a:	613b      	str	r3, [r7, #16]
 8013c0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8013c0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8013c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c14:	2302      	movs	r3, #2
 8013c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c1c:	2303      	movs	r3, #3
 8013c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013c20:	230a      	movs	r3, #10
 8013c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c24:	f107 0314 	add.w	r3, r7, #20
 8013c28:	4619      	mov	r1, r3
 8013c2a:	4815      	ldr	r0, [pc, #84]	; (8013c80 <HAL_PCD_MspInit+0xb0>)
 8013c2c:	f7ec ff6c 	bl	8000b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8013c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013c36:	2300      	movs	r3, #0
 8013c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8013c3e:	f107 0314 	add.w	r3, r7, #20
 8013c42:	4619      	mov	r1, r3
 8013c44:	480e      	ldr	r0, [pc, #56]	; (8013c80 <HAL_PCD_MspInit+0xb0>)
 8013c46:	f7ec ff5f 	bl	8000b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013c4a:	4b0c      	ldr	r3, [pc, #48]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c4e:	4a0b      	ldr	r2, [pc, #44]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c54:	6353      	str	r3, [r2, #52]	; 0x34
 8013c56:	2300      	movs	r3, #0
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	4b08      	ldr	r3, [pc, #32]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c5e:	4a07      	ldr	r2, [pc, #28]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013c64:	6453      	str	r3, [r2, #68]	; 0x44
 8013c66:	4b05      	ldr	r3, [pc, #20]	; (8013c7c <HAL_PCD_MspInit+0xac>)
 8013c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013c6e:	60fb      	str	r3, [r7, #12]
 8013c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8013c72:	bf00      	nop
 8013c74:	3728      	adds	r7, #40	; 0x28
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	40023800 	.word	0x40023800
 8013c80:	40020000 	.word	0x40020000

08013c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b08c      	sub	sp, #48	; 0x30
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8013c90:	2300      	movs	r3, #0
 8013c92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8013c94:	2200      	movs	r2, #0
 8013c96:	6879      	ldr	r1, [r7, #4]
 8013c98:	2019      	movs	r0, #25
 8013c9a:	f7ec ff0b 	bl	8000ab4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8013c9e:	2019      	movs	r0, #25
 8013ca0:	f7ec ff24 	bl	8000aec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	60fb      	str	r3, [r7, #12]
 8013ca8:	4b1f      	ldr	r3, [pc, #124]	; (8013d28 <HAL_InitTick+0xa4>)
 8013caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cac:	4a1e      	ldr	r2, [pc, #120]	; (8013d28 <HAL_InitTick+0xa4>)
 8013cae:	f043 0301 	orr.w	r3, r3, #1
 8013cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8013cb4:	4b1c      	ldr	r3, [pc, #112]	; (8013d28 <HAL_InitTick+0xa4>)
 8013cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cb8:	f003 0301 	and.w	r3, r3, #1
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013cc0:	f107 0210 	add.w	r2, r7, #16
 8013cc4:	f107 0314 	add.w	r3, r7, #20
 8013cc8:	4611      	mov	r1, r2
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7ed fb26 	bl	800131c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8013cd0:	f7ed fb10 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8013cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cdc:	4a13      	ldr	r2, [pc, #76]	; (8013d2c <HAL_InitTick+0xa8>)
 8013cde:	fba2 2303 	umull	r2, r3, r2, r3
 8013ce2:	0c9b      	lsrs	r3, r3, #18
 8013ce4:	3b01      	subs	r3, #1
 8013ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8013ce8:	4b11      	ldr	r3, [pc, #68]	; (8013d30 <HAL_InitTick+0xac>)
 8013cea:	4a12      	ldr	r2, [pc, #72]	; (8013d34 <HAL_InitTick+0xb0>)
 8013cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8013cee:	4b10      	ldr	r3, [pc, #64]	; (8013d30 <HAL_InitTick+0xac>)
 8013cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8013cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8013cf6:	4a0e      	ldr	r2, [pc, #56]	; (8013d30 <HAL_InitTick+0xac>)
 8013cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8013cfc:	4b0c      	ldr	r3, [pc, #48]	; (8013d30 <HAL_InitTick+0xac>)
 8013cfe:	2200      	movs	r2, #0
 8013d00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013d02:	4b0b      	ldr	r3, [pc, #44]	; (8013d30 <HAL_InitTick+0xac>)
 8013d04:	2200      	movs	r2, #0
 8013d06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8013d08:	4809      	ldr	r0, [pc, #36]	; (8013d30 <HAL_InitTick+0xac>)
 8013d0a:	f7ee fa5d 	bl	80021c8 <HAL_TIM_Base_Init>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d104      	bne.n	8013d1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8013d14:	4806      	ldr	r0, [pc, #24]	; (8013d30 <HAL_InitTick+0xac>)
 8013d16:	f7ee fa8c 	bl	8002232 <HAL_TIM_Base_Start_IT>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	e000      	b.n	8013d20 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8013d1e:	2301      	movs	r3, #1
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3730      	adds	r7, #48	; 0x30
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	40023800 	.word	0x40023800
 8013d2c:	431bde83 	.word	0x431bde83
 8013d30:	2000876c 	.word	0x2000876c
 8013d34:	40010000 	.word	0x40010000

08013d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013d38:	b480      	push	{r7}
 8013d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013d3c:	bf00      	nop
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr

08013d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013d46:	b480      	push	{r7}
 8013d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013d4a:	e7fe      	b.n	8013d4a <HardFault_Handler+0x4>

08013d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013d50:	e7fe      	b.n	8013d50 <MemManage_Handler+0x4>

08013d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013d52:	b480      	push	{r7}
 8013d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013d56:	e7fe      	b.n	8013d56 <BusFault_Handler+0x4>

08013d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013d5c:	e7fe      	b.n	8013d5c <UsageFault_Handler+0x4>

08013d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013d5e:	b480      	push	{r7}
 8013d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013d62:	bf00      	nop
 8013d64:	46bd      	mov	sp, r7
 8013d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6a:	4770      	bx	lr

08013d6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013d70:	4802      	ldr	r0, [pc, #8]	; (8013d7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8013d72:	f7ee fa82 	bl	800227a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8013d76:	bf00      	nop
 8013d78:	bd80      	pop	{r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	2000876c 	.word	0x2000876c

08013d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013d80:	b480      	push	{r7}
 8013d82:	af00      	add	r7, sp, #0
	return 1;
 8013d84:	2301      	movs	r3, #1
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <_kill>:

int _kill(int pid, int sig)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8013d9a:	f00c fc1b 	bl	80205d4 <__errno>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	2316      	movs	r3, #22
 8013da2:	6013      	str	r3, [r2, #0]
	return -1;
 8013da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <_exit>:

void _exit (int status)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8013db8:	f04f 31ff 	mov.w	r1, #4294967295
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7ff ffe7 	bl	8013d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8013dc2:	e7fe      	b.n	8013dc2 <_exit+0x12>

08013dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	e00a      	b.n	8013dec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8013dd6:	f3af 8000 	nop.w
 8013dda:	4601      	mov	r1, r0
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	1c5a      	adds	r2, r3, #1
 8013de0:	60ba      	str	r2, [r7, #8]
 8013de2:	b2ca      	uxtb	r2, r1
 8013de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	3301      	adds	r3, #1
 8013dea:	617b      	str	r3, [r7, #20]
 8013dec:	697a      	ldr	r2, [r7, #20]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	dbf0      	blt.n	8013dd6 <_read+0x12>
	}

return len;
 8013df4:	687b      	ldr	r3, [r7, #4]
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3718      	adds	r7, #24
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b086      	sub	sp, #24
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	60f8      	str	r0, [r7, #12]
 8013e06:	60b9      	str	r1, [r7, #8]
 8013e08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	617b      	str	r3, [r7, #20]
 8013e0e:	e009      	b.n	8013e24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	1c5a      	adds	r2, r3, #1
 8013e14:	60ba      	str	r2, [r7, #8]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	3301      	adds	r3, #1
 8013e22:	617b      	str	r3, [r7, #20]
 8013e24:	697a      	ldr	r2, [r7, #20]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	dbf1      	blt.n	8013e10 <_write+0x12>
	}
	return len;
 8013e2c:	687b      	ldr	r3, [r7, #4]
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3718      	adds	r7, #24
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <_close>:

int _close(int file)
{
 8013e36:	b480      	push	{r7}
 8013e38:	b083      	sub	sp, #12
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
	return -1;
 8013e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	370c      	adds	r7, #12
 8013e46:	46bd      	mov	sp, r7
 8013e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4c:	4770      	bx	lr

08013e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013e4e:	b480      	push	{r7}
 8013e50:	b083      	sub	sp, #12
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
 8013e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8013e60:	2300      	movs	r3, #0
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	370c      	adds	r7, #12
 8013e66:	46bd      	mov	sp, r7
 8013e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6c:	4770      	bx	lr

08013e6e <_isatty>:

int _isatty(int file)
{
 8013e6e:	b480      	push	{r7}
 8013e70:	b083      	sub	sp, #12
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
	return 1;
 8013e76:	2301      	movs	r3, #1
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8013e84:	b480      	push	{r7}
 8013e86:	b085      	sub	sp, #20
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	60b9      	str	r1, [r7, #8]
 8013e8e:	607a      	str	r2, [r7, #4]
	return 0;
 8013e90:	2300      	movs	r3, #0
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3714      	adds	r7, #20
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
	...

08013ea0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8013ea8:	4b11      	ldr	r3, [pc, #68]	; (8013ef0 <_sbrk+0x50>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d102      	bne.n	8013eb6 <_sbrk+0x16>
		heap_end = &end;
 8013eb0:	4b0f      	ldr	r3, [pc, #60]	; (8013ef0 <_sbrk+0x50>)
 8013eb2:	4a10      	ldr	r2, [pc, #64]	; (8013ef4 <_sbrk+0x54>)
 8013eb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8013eb6:	4b0e      	ldr	r3, [pc, #56]	; (8013ef0 <_sbrk+0x50>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8013ebc:	4b0c      	ldr	r3, [pc, #48]	; (8013ef0 <_sbrk+0x50>)
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	466a      	mov	r2, sp
 8013ec6:	4293      	cmp	r3, r2
 8013ec8:	d907      	bls.n	8013eda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8013eca:	f00c fb83 	bl	80205d4 <__errno>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	230c      	movs	r3, #12
 8013ed2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8013ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ed8:	e006      	b.n	8013ee8 <_sbrk+0x48>
	}

	heap_end += incr;
 8013eda:	4b05      	ldr	r3, [pc, #20]	; (8013ef0 <_sbrk+0x50>)
 8013edc:	681a      	ldr	r2, [r3, #0]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	4413      	add	r3, r2
 8013ee2:	4a03      	ldr	r2, [pc, #12]	; (8013ef0 <_sbrk+0x50>)
 8013ee4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3710      	adds	r7, #16
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	2000859c 	.word	0x2000859c
 8013ef4:	200087b0 	.word	0x200087b0

08013ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8013ef8:	b480      	push	{r7}
 8013efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8013efc:	4b16      	ldr	r3, [pc, #88]	; (8013f58 <SystemInit+0x60>)
 8013efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f02:	4a15      	ldr	r2, [pc, #84]	; (8013f58 <SystemInit+0x60>)
 8013f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8013f0c:	4b13      	ldr	r3, [pc, #76]	; (8013f5c <SystemInit+0x64>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	4a12      	ldr	r2, [pc, #72]	; (8013f5c <SystemInit+0x64>)
 8013f12:	f043 0301 	orr.w	r3, r3, #1
 8013f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8013f18:	4b10      	ldr	r3, [pc, #64]	; (8013f5c <SystemInit+0x64>)
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8013f1e:	4b0f      	ldr	r3, [pc, #60]	; (8013f5c <SystemInit+0x64>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4a0e      	ldr	r2, [pc, #56]	; (8013f5c <SystemInit+0x64>)
 8013f24:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8013f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013f2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8013f2e:	4b0b      	ldr	r3, [pc, #44]	; (8013f5c <SystemInit+0x64>)
 8013f30:	4a0b      	ldr	r2, [pc, #44]	; (8013f60 <SystemInit+0x68>)
 8013f32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8013f34:	4b09      	ldr	r3, [pc, #36]	; (8013f5c <SystemInit+0x64>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4a08      	ldr	r2, [pc, #32]	; (8013f5c <SystemInit+0x64>)
 8013f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013f3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8013f40:	4b06      	ldr	r3, [pc, #24]	; (8013f5c <SystemInit+0x64>)
 8013f42:	2200      	movs	r2, #0
 8013f44:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8013f46:	4b04      	ldr	r3, [pc, #16]	; (8013f58 <SystemInit+0x60>)
 8013f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013f4c:	609a      	str	r2, [r3, #8]
#endif
}
 8013f4e:	bf00      	nop
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr
 8013f58:	e000ed00 	.word	0xe000ed00
 8013f5c:	40023800 	.word	0x40023800
 8013f60:	24003010 	.word	0x24003010

08013f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8013f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013f6a:	e003      	b.n	8013f74 <LoopCopyDataInit>

08013f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013f6c:	4b0c      	ldr	r3, [pc, #48]	; (8013fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013f72:	3104      	adds	r1, #4

08013f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013f74:	480b      	ldr	r0, [pc, #44]	; (8013fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013f76:	4b0c      	ldr	r3, [pc, #48]	; (8013fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013f7c:	d3f6      	bcc.n	8013f6c <CopyDataInit>
  ldr  r2, =_sbss
 8013f7e:	4a0b      	ldr	r2, [pc, #44]	; (8013fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013f80:	e002      	b.n	8013f88 <LoopFillZerobss>

08013f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013f84:	f842 3b04 	str.w	r3, [r2], #4

08013f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013f88:	4b09      	ldr	r3, [pc, #36]	; (8013fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013f8c:	d3f9      	bcc.n	8013f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8013f8e:	f7ff ffb3 	bl	8013ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013f92:	f00c fb37 	bl	8020604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013f96:	f7f3 ff35 	bl	8007e04 <main>
  bx  lr    
 8013f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013f9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8013fa0:	0802cd64 	.word	0x0802cd64
  ldr  r0, =_sdata
 8013fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013fa8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8013fac:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8013fb0:	200087b0 	.word	0x200087b0

08013fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013fb4:	e7fe      	b.n	8013fb4 <ADC_IRQHandler>

08013fb6 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_>:
const uint32_t CanFrame::FlagRTR;
const uint32_t CanFrame::FlagERR;
const uint8_t CanFrame::MaxDataLen;

bool CanFrame::priorityHigherThan(const CanFrame& rhs) const
{
 8013fb6:	b480      	push	{r7}
 8013fb8:	b089      	sub	sp, #36	; 0x24
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	6078      	str	r0, [r7, #4]
 8013fbe:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id     = id     & MaskExtID;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8013fc8:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs.id & MaskExtID;
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8013fd2:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext     = id     & FlagEFF;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	0fdb      	lsrs	r3, r3, #31
 8013fda:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = rhs.id & FlagEFF;
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	0fdb      	lsrs	r3, r3, #31
 8013fe2:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8013fe4:	7dfa      	ldrb	r2, [r7, #23]
 8013fe6:	7dbb      	ldrb	r3, [r7, #22]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d01d      	beq.n	8014028 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0x72>
    {
        const uint32_t arb11     = ext     ? (clean_id >> 18)     : clean_id;
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d002      	beq.n	8013ff8 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0x42>
 8013ff2:	69fb      	ldr	r3, [r7, #28]
 8013ff4:	0c9b      	lsrs	r3, r3, #18
 8013ff6:	e000      	b.n	8013ffa <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0x44>
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	613b      	str	r3, [r7, #16]
        const uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18) : rhs_clean_id;
 8013ffc:	7dbb      	ldrb	r3, [r7, #22]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d002      	beq.n	8014008 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0x52>
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	0c9b      	lsrs	r3, r3, #18
 8014006:	e000      	b.n	801400a <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0x54>
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 801400c:	693a      	ldr	r2, [r7, #16]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	429a      	cmp	r2, r3
 8014012:	d007      	beq.n	8014024 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0x6e>
        {
            return arb11 < rhs_arb11;
 8014014:	693a      	ldr	r2, [r7, #16]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	429a      	cmp	r2, r3
 801401a:	bf34      	ite	cc
 801401c:	2301      	movcc	r3, #1
 801401e:	2300      	movcs	r3, #0
 8014020:	b2db      	uxtb	r3, r3
 8014022:	e024      	b.n	801406e <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0xb8>
        }
        else
        {
            return rhs_ext;
 8014024:	7dbb      	ldrb	r3, [r7, #22]
 8014026:	e022      	b.n	801406e <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0xb8>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr     = id     & FlagRTR;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014030:	2b00      	cmp	r3, #0
 8014032:	bf14      	ite	ne
 8014034:	2301      	movne	r3, #1
 8014036:	2300      	moveq	r3, #0
 8014038:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = rhs.id & FlagRTR;
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014042:	2b00      	cmp	r3, #0
 8014044:	bf14      	ite	ne
 8014046:	2301      	movne	r3, #1
 8014048:	2300      	moveq	r3, #0
 801404a:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 801404c:	69fa      	ldr	r2, [r7, #28]
 801404e:	69bb      	ldr	r3, [r7, #24]
 8014050:	429a      	cmp	r2, r3
 8014052:	d105      	bne.n	8014060 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0xaa>
 8014054:	7d7a      	ldrb	r2, [r7, #21]
 8014056:	7d3b      	ldrb	r3, [r7, #20]
 8014058:	429a      	cmp	r2, r3
 801405a:	d001      	beq.n	8014060 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0xaa>
    {
        return rhs_rtr;
 801405c:	7d3b      	ldrb	r3, [r7, #20]
 801405e:	e006      	b.n	801406e <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_+0xb8>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8014060:	69fa      	ldr	r2, [r7, #28]
 8014062:	69bb      	ldr	r3, [r7, #24]
 8014064:	429a      	cmp	r2, r3
 8014066:	bf34      	ite	cc
 8014068:	2301      	movcc	r3, #1
 801406a:	2300      	movcs	r3, #0
 801406c:	b2db      	uxtb	r3, r3
}
 801406e:	4618      	mov	r0, r3
 8014070:	3724      	adds	r7, #36	; 0x24
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr
	...

0801407c <_ZN6uavcan12bitarrayCopyEPKhjjPhj>:

namespace uavcan
{
void bitarrayCopy(const unsigned char* src, std::size_t src_offset, std::size_t src_len,
                  unsigned char* dst, std::size_t dst_offset)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b08c      	sub	sp, #48	; 0x30
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	603b      	str	r3, [r7, #0]
    /*
     * Should never be called on a zero-length buffer. The caller will also ensure that the bit
     * offsets never exceed one byte.
     */

    UAVCAN_ASSERT(src_len > 0U);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d105      	bne.n	801409c <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x20>
 8014090:	4b43      	ldr	r3, [pc, #268]	; (80141a0 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x124>)
 8014092:	4a44      	ldr	r2, [pc, #272]	; (80141a4 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x128>)
 8014094:	2114      	movs	r1, #20
 8014096:	4844      	ldr	r0, [pc, #272]	; (80141a8 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x12c>)
 8014098:	f00c fa78 	bl	802058c <__assert_func>
    UAVCAN_ASSERT(src_offset < 8U && dst_offset < 8U);
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	2b07      	cmp	r3, #7
 80140a0:	d802      	bhi.n	80140a8 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x2c>
 80140a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a4:	2b07      	cmp	r3, #7
 80140a6:	d905      	bls.n	80140b4 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x38>
 80140a8:	4b40      	ldr	r3, [pc, #256]	; (80141ac <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x130>)
 80140aa:	4a3e      	ldr	r2, [pc, #248]	; (80141a4 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x128>)
 80140ac:	2115      	movs	r1, #21
 80140ae:	483e      	ldr	r0, [pc, #248]	; (80141a8 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x12c>)
 80140b0:	f00c fa6c 	bl	802058c <__assert_func>

    const std::size_t last_bit = src_offset + src_len;
 80140b4:	68ba      	ldr	r2, [r7, #8]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	4413      	add	r3, r2
 80140ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (last_bit - src_offset)
 80140bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d068      	beq.n	8014196 <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x11a>
    {
        const uint8_t src_bit_offset = src_offset % 8U;
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	f003 0307 	and.w	r3, r3, #7
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	75fb      	strb	r3, [r7, #23]
        const uint8_t dst_bit_offset = dst_offset % 8U;
 80140d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	f003 0307 	and.w	r3, r3, #7
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	75bb      	strb	r3, [r7, #22]

        // The number of bits to copy
        const uint8_t max_offset = uavcan::max(src_bit_offset, dst_bit_offset);
 80140dc:	f107 0216 	add.w	r2, r7, #22
 80140e0:	f107 0317 	add.w	r3, r7, #23
 80140e4:	4611      	mov	r1, r2
 80140e6:	4618      	mov	r0, r3
 80140e8:	f000 f862 	bl	80141b0 <_ZN6uavcan3maxIhEERKT_S3_S3_>
 80140ec:	4603      	mov	r3, r0
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        const std::size_t copy_bits = uavcan::min(last_bit - src_offset, std::size_t(8U - max_offset));
 80140f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	61bb      	str	r3, [r7, #24]
 80140fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014100:	f1c3 0308 	rsb	r3, r3, #8
 8014104:	61fb      	str	r3, [r7, #28]
 8014106:	f107 021c 	add.w	r2, r7, #28
 801410a:	f107 0318 	add.w	r3, r7, #24
 801410e:	4611      	mov	r1, r2
 8014110:	4618      	mov	r0, r3
 8014112:	f000 f861 	bl	80141d8 <_ZN6uavcan3minIjEERKT_S3_S3_>
 8014116:	4603      	mov	r3, r0
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	627b      	str	r3, [r7, #36]	; 0x24
         * 4                         2                  00001100
         * 4                         1                  00001000
         * ...
         * 7                         1                  00000001
         */
        const uint8_t write_mask = uint8_t(uint8_t(0xFF00U >> copy_bits) >> dst_bit_offset);
 801411c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	fa22 f303 	lsr.w	r3, r2, r3
 8014126:	b2db      	uxtb	r3, r3
 8014128:	461a      	mov	r2, r3
 801412a:	7dbb      	ldrb	r3, [r7, #22]
 801412c:	fa42 f303 	asr.w	r3, r2, r3
 8014130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        // The value to be extracted from src, shifted into the dst location
        const uint8_t src_data = uint8_t((src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	08db      	lsrs	r3, r3, #3
 8014138:	68fa      	ldr	r2, [r7, #12]
 801413a:	4413      	add	r3, r2
 801413c:	781b      	ldrb	r3, [r3, #0]
 801413e:	461a      	mov	r2, r3
 8014140:	7dfb      	ldrb	r3, [r7, #23]
 8014142:	fa02 f303 	lsl.w	r3, r2, r3
 8014146:	7dba      	ldrb	r2, [r7, #22]
 8014148:	4113      	asrs	r3, r2
 801414a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        dst[dst_offset / 8U] = uint8_t((dst[dst_offset / 8U] & ~write_mask) | (src_data & write_mask));
 801414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014150:	08db      	lsrs	r3, r3, #3
 8014152:	683a      	ldr	r2, [r7, #0]
 8014154:	4413      	add	r3, r2
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	b25a      	sxtb	r2, r3
 801415a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801415e:	43db      	mvns	r3, r3
 8014160:	b25b      	sxtb	r3, r3
 8014162:	4013      	ands	r3, r2
 8014164:	b25a      	sxtb	r2, r3
 8014166:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 801416a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801416e:	400b      	ands	r3, r1
 8014170:	b2db      	uxtb	r3, r3
 8014172:	b25b      	sxtb	r3, r3
 8014174:	4313      	orrs	r3, r2
 8014176:	b259      	sxtb	r1, r3
 8014178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417a:	08db      	lsrs	r3, r3, #3
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	4413      	add	r3, r2
 8014180:	b2ca      	uxtb	r2, r1
 8014182:	701a      	strb	r2, [r3, #0]

        src_offset += copy_bits;
 8014184:	68ba      	ldr	r2, [r7, #8]
 8014186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014188:	4413      	add	r3, r2
 801418a:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 801418c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014190:	4413      	add	r3, r2
 8014192:	63bb      	str	r3, [r7, #56]	; 0x38
    while (last_bit - src_offset)
 8014194:	e792      	b.n	80140bc <_ZN6uavcan12bitarrayCopyEPKhjjPhj+0x40>
    }
}
 8014196:	bf00      	nop
 8014198:	3730      	adds	r7, #48	; 0x30
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	080224d0 	.word	0x080224d0
 80141a4:	080298e0 	.word	0x080298e0
 80141a8:	080224e0 	.word	0x080224e0
 80141ac:	08022560 	.word	0x08022560

080141b0 <_ZN6uavcan3maxIhEERKT_S3_S3_>:
const T& max(const T& a, const T& b)
 80141b0:	b480      	push	{r7}
 80141b2:	b083      	sub	sp, #12
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
    return (a < b) ? b : a;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	781a      	ldrb	r2, [r3, #0]
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d201      	bcs.n	80141ca <_ZN6uavcan3maxIhEERKT_S3_S3_+0x1a>
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	e000      	b.n	80141cc <_ZN6uavcan3maxIhEERKT_S3_S3_+0x1c>
 80141ca:	687b      	ldr	r3, [r7, #4]
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	370c      	adds	r7, #12
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr

080141d8 <_ZN6uavcan3minIjEERKT_S3_S3_>:
const T& min(const T& a, const T& b)
 80141d8:	b480      	push	{r7}
 80141da:	b083      	sub	sp, #12
 80141dc:	af00      	add	r7, sp, #0
 80141de:	6078      	str	r0, [r7, #4]
 80141e0:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d201      	bcs.n	80141f2 <_ZN6uavcan3minIjEERKT_S3_S3_+0x1a>
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	e000      	b.n	80141f4 <_ZN6uavcan3minIjEERKT_S3_S3_+0x1c>
 80141f2:	687b      	ldr	r3, [r7, #4]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	370c      	adds	r7, #12
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr

08014200 <_ZN6uavcan9BitStream15bitlenToBytelenEj>:
    static inline unsigned bitlenToBytelen(unsigned bits) { return (bits + 7) / 8; }
 8014200:	b480      	push	{r7}
 8014202:	b083      	sub	sp, #12
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3307      	adds	r3, #7
 801420c:	08db      	lsrs	r3, r3, #3
 801420e:	4618      	mov	r0, r3
 8014210:	370c      	adds	r7, #12
 8014212:	46bd      	mov	sp, r7
 8014214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014218:	4770      	bx	lr

0801421a <_ZN6uavcan9BitStream30copyBitArrayAlignedToUnalignedEPKhjPhj>:
    static inline void copyBitArrayAlignedToUnaligned(const uint8_t* src_org, unsigned src_len,
 801421a:	b580      	push	{r7, lr}
 801421c:	b086      	sub	sp, #24
 801421e:	af02      	add	r7, sp, #8
 8014220:	60f8      	str	r0, [r7, #12]
 8014222:	60b9      	str	r1, [r7, #8]
 8014224:	607a      	str	r2, [r7, #4]
 8014226:	603b      	str	r3, [r7, #0]
        bitarrayCopy(reinterpret_cast<const unsigned char*>(src_org), 0, src_len,
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	68ba      	ldr	r2, [r7, #8]
 8014230:	2100      	movs	r1, #0
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	f7ff ff22 	bl	801407c <_ZN6uavcan12bitarrayCopyEPKhjjPhj>
    }
 8014238:	bf00      	nop
 801423a:	3710      	adds	r7, #16
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <_ZN6uavcan9BitStream30copyBitArrayUnalignedToAlignedEPKhjjPh>:
    static inline void copyBitArrayUnalignedToAligned(const uint8_t* src_org, unsigned src_offset, unsigned src_len,
 8014240:	b580      	push	{r7, lr}
 8014242:	b086      	sub	sp, #24
 8014244:	af02      	add	r7, sp, #8
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	607a      	str	r2, [r7, #4]
 801424c:	603b      	str	r3, [r7, #0]
        bitarrayCopy(reinterpret_cast<const unsigned char*>(src_org), src_offset, src_len,
 801424e:	2300      	movs	r3, #0
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	687a      	ldr	r2, [r7, #4]
 8014256:	68b9      	ldr	r1, [r7, #8]
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	f7ff ff0f 	bl	801407c <_ZN6uavcan12bitarrayCopyEPKhjjPhj>
    }
 801425e:	bf00      	nop
 8014260:	3710      	adds	r7, #16
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
	...

08014268 <_ZN6uavcan9BitStream5writeEPKhj>:

const unsigned BitStream::MaxBytesPerRW;
const unsigned BitStream::MaxBitsPerRW;

int BitStream::write(const uint8_t* bytes, const unsigned bitlen)
{
 8014268:	b590      	push	{r4, r7, lr}
 801426a:	b08d      	sub	sp, #52	; 0x34
 801426c:	af00      	add	r7, sp, #0
 801426e:	60f8      	str	r0, [r7, #12]
 8014270:	60b9      	str	r1, [r7, #8]
 8014272:	607a      	str	r2, [r7, #4]
    // Temporary buffer is needed to merge new bits with cached unaligned bits from the last write() (see byte_cache_)
    uint8_t tmp[MaxBytesPerRW + 1];

    // Tmp space must be large enough to accomodate new bits AND unaligned bits from the last write()
    const unsigned bytelen = bitlenToBytelen(bitlen + (bit_offset_ % 8));
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	f003 0207 	and.w	r2, r3, #7
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	4413      	add	r3, r2
 8014280:	4618      	mov	r0, r3
 8014282:	f7ff ffbd 	bl	8014200 <_ZN6uavcan9BitStream15bitlenToBytelenEj>
 8014286:	62f8      	str	r0, [r7, #44]	; 0x2c
    UAVCAN_ASSERT(MaxBytesPerRW >= bytelen);
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	2b10      	cmp	r3, #16
 801428c:	d905      	bls.n	801429a <_ZN6uavcan9BitStream5writeEPKhj+0x32>
 801428e:	4b34      	ldr	r3, [pc, #208]	; (8014360 <_ZN6uavcan9BitStream5writeEPKhj+0xf8>)
 8014290:	4a34      	ldr	r2, [pc, #208]	; (8014364 <_ZN6uavcan9BitStream5writeEPKhj+0xfc>)
 8014292:	2116      	movs	r1, #22
 8014294:	4834      	ldr	r0, [pc, #208]	; (8014368 <_ZN6uavcan9BitStream5writeEPKhj+0x100>)
 8014296:	f00c f979 	bl	802058c <__assert_func>
    tmp[0] = tmp[bytelen - 1] = 0;
 801429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429c:	3b01      	subs	r3, #1
 801429e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142a2:	441a      	add	r2, r3
 80142a4:	2100      	movs	r1, #0
 80142a6:	f802 1c20 	strb.w	r1, [r2, #-32]
 80142aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142ae:	4413      	add	r3, r2
 80142b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80142b4:	743b      	strb	r3, [r7, #16]

    fill(tmp, tmp + bytelen, uint8_t(0));
 80142b6:	f107 0210 	add.w	r2, r7, #16
 80142ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142bc:	18d1      	adds	r1, r2, r3
 80142be:	2300      	movs	r3, #0
 80142c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80142c4:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80142c8:	f107 0310 	add.w	r3, r7, #16
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7f4 f97f 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    copyBitArrayAlignedToUnaligned(bytes, bitlen, tmp, bit_offset_ % 8);
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	f003 0307 	and.w	r3, r3, #7
 80142da:	f107 0210 	add.w	r2, r7, #16
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	68b8      	ldr	r0, [r7, #8]
 80142e2:	f7ff ff9a 	bl	801421a <_ZN6uavcan9BitStream30copyBitArrayAlignedToUnalignedEPKhjPhj>

    const unsigned new_bit_offset = bit_offset_ + bitlen;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	687a      	ldr	r2, [r7, #4]
 80142ec:	4413      	add	r3, r2
 80142ee:	62bb      	str	r3, [r7, #40]	; 0x28

    // Bitcopy algorithm resets skipped bits in the first byte. Restore them back.
    tmp[0] |= byte_cache_;
 80142f0:	7c3a      	ldrb	r2, [r7, #16]
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	7a1b      	ldrb	r3, [r3, #8]
 80142f6:	4313      	orrs	r3, r2
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	743b      	strb	r3, [r7, #16]

    // (new_bit_offset % 8 == 0) means that this write was perfectly aligned.
    byte_cache_ = uint8_t((new_bit_offset % 8) ? tmp[bytelen - 1] : 0);
 80142fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fe:	f003 0307 	and.w	r3, r3, #7
 8014302:	2b00      	cmp	r3, #0
 8014304:	d007      	beq.n	8014316 <_ZN6uavcan9BitStream5writeEPKhj+0xae>
 8014306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014308:	3b01      	subs	r3, #1
 801430a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801430e:	4413      	add	r3, r2
 8014310:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8014314:	e000      	b.n	8014318 <_ZN6uavcan9BitStream5writeEPKhj+0xb0>
 8014316:	2200      	movs	r2, #0
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	721a      	strb	r2, [r3, #8]
    /*
     * Dump the data into the destination buffer.
     * Note that if this write was unaligned, last written byte in the buffer will be rewritten with updated value
     * within the next write() operation.
     */
    const int write_res = buf_.write(bit_offset_ / 8, tmp, bytelen);
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	6818      	ldr	r0, [r3, #0]
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	330c      	adds	r3, #12
 8014328:	681c      	ldr	r4, [r3, #0]
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	08d9      	lsrs	r1, r3, #3
 8014330:	f107 0210 	add.w	r2, r7, #16
 8014334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014336:	47a0      	blx	r4
 8014338:	6278      	str	r0, [r7, #36]	; 0x24
    if (write_res < 0)
 801433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433c:	2b00      	cmp	r3, #0
 801433e:	da01      	bge.n	8014344 <_ZN6uavcan9BitStream5writeEPKhj+0xdc>
    {
        return write_res;
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	e009      	b.n	8014358 <_ZN6uavcan9BitStream5writeEPKhj+0xf0>
    }
    if (static_cast<unsigned>(write_res) < bytelen)
 8014344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014348:	429a      	cmp	r2, r3
 801434a:	d901      	bls.n	8014350 <_ZN6uavcan9BitStream5writeEPKhj+0xe8>
    {
        return ResultOutOfBuffer;
 801434c:	2300      	movs	r3, #0
 801434e:	e003      	b.n	8014358 <_ZN6uavcan9BitStream5writeEPKhj+0xf0>
    }

    bit_offset_ = new_bit_offset;
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014354:	605a      	str	r2, [r3, #4]
    return ResultOk;
 8014356:	2301      	movs	r3, #1
}
 8014358:	4618      	mov	r0, r3
 801435a:	3734      	adds	r7, #52	; 0x34
 801435c:	46bd      	mov	sp, r7
 801435e:	bd90      	pop	{r4, r7, pc}
 8014360:	08022584 	.word	0x08022584
 8014364:	08029948 	.word	0x08029948
 8014368:	080225a0 	.word	0x080225a0

0801436c <_ZN6uavcan9BitStream4readEPhj>:

int BitStream::read(uint8_t* bytes, const unsigned bitlen)
{
 801436c:	b590      	push	{r4, r7, lr}
 801436e:	b08d      	sub	sp, #52	; 0x34
 8014370:	af00      	add	r7, sp, #0
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
    uint8_t tmp[MaxBytesPerRW + 1];

    const unsigned bytelen = bitlenToBytelen(bitlen + (bit_offset_ % 8));
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	f003 0207 	and.w	r2, r3, #7
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	4413      	add	r3, r2
 8014384:	4618      	mov	r0, r3
 8014386:	f7ff ff3b 	bl	8014200 <_ZN6uavcan9BitStream15bitlenToBytelenEj>
 801438a:	62f8      	str	r0, [r7, #44]	; 0x2c
    UAVCAN_ASSERT(MaxBytesPerRW >= bytelen);
 801438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438e:	2b10      	cmp	r3, #16
 8014390:	d905      	bls.n	801439e <_ZN6uavcan9BitStream4readEPhj+0x32>
 8014392:	4b22      	ldr	r3, [pc, #136]	; (801441c <_ZN6uavcan9BitStream4readEPhj+0xb0>)
 8014394:	4a22      	ldr	r2, [pc, #136]	; (8014420 <_ZN6uavcan9BitStream4readEPhj+0xb4>)
 8014396:	213c      	movs	r1, #60	; 0x3c
 8014398:	4822      	ldr	r0, [pc, #136]	; (8014424 <_ZN6uavcan9BitStream4readEPhj+0xb8>)
 801439a:	f00c f8f7 	bl	802058c <__assert_func>

    const int read_res = buf_.read(bit_offset_ / 8, tmp, bytelen);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6818      	ldr	r0, [r3, #0]
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	3308      	adds	r3, #8
 80143aa:	681c      	ldr	r4, [r3, #0]
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	08d9      	lsrs	r1, r3, #3
 80143b2:	f107 0214 	add.w	r2, r7, #20
 80143b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b8:	47a0      	blx	r4
 80143ba:	62b8      	str	r0, [r7, #40]	; 0x28
    if (read_res < 0)
 80143bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143be:	2b00      	cmp	r3, #0
 80143c0:	da01      	bge.n	80143c6 <_ZN6uavcan9BitStream4readEPhj+0x5a>
    {
        return read_res;
 80143c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c4:	e025      	b.n	8014412 <_ZN6uavcan9BitStream4readEPhj+0xa6>
    }
    if (static_cast<unsigned>(read_res) < bytelen)
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d901      	bls.n	80143d2 <_ZN6uavcan9BitStream4readEPhj+0x66>
    {
        return ResultOutOfBuffer;
 80143ce:	2300      	movs	r3, #0
 80143d0:	e01f      	b.n	8014412 <_ZN6uavcan9BitStream4readEPhj+0xa6>
    }

    fill(bytes, bytes + bitlenToBytelen(bitlen), uint8_t(0));
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f7ff ff14 	bl	8014200 <_ZN6uavcan9BitStream15bitlenToBytelenEj>
 80143d8:	4602      	mov	r2, r0
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	4413      	add	r3, r2
 80143de:	2200      	movs	r2, #0
 80143e0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80143e4:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80143e8:	4619      	mov	r1, r3
 80143ea:	68b8      	ldr	r0, [r7, #8]
 80143ec:	f7f4 f8f0 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    copyBitArrayUnalignedToAligned(tmp, bit_offset_ % 8, bitlen, bytes);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	f003 0107 	and.w	r1, r3, #7
 80143f8:	f107 0014 	add.w	r0, r7, #20
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	f7ff ff1e 	bl	8014240 <_ZN6uavcan9BitStream30copyBitArrayUnalignedToAlignedEPKhjjPh>
    bit_offset_ += bitlen;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	685a      	ldr	r2, [r3, #4]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	441a      	add	r2, r3
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	605a      	str	r2, [r3, #4]
    return ResultOk;
 8014410:	2301      	movs	r3, #1
}
 8014412:	4618      	mov	r0, r3
 8014414:	3734      	adds	r7, #52	; 0x34
 8014416:	46bd      	mov	sp, r7
 8014418:	bd90      	pop	{r4, r7, pc}
 801441a:	bf00      	nop
 801441c:	08022584 	.word	0x08022584
 8014420:	08029984 	.word	0x08029984
 8014424:	080225a0 	.word	0x080225a0

08014428 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj>:
        bytes[j] = c;
    }
}

int ScalarCodec::encodeBytesImpl(uint8_t* const bytes, const unsigned bitlen)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	60f8      	str	r0, [r7, #12]
 8014430:	60b9      	str	r1, [r7, #8]
 8014432:	607a      	str	r2, [r7, #4]
    UAVCAN_ASSERT(bytes);
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d105      	bne.n	8014446 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj+0x1e>
 801443a:	4b14      	ldr	r3, [pc, #80]	; (801448c <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj+0x64>)
 801443c:	4a14      	ldr	r2, [pc, #80]	; (8014490 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj+0x68>)
 801443e:	2117      	movs	r1, #23
 8014440:	4814      	ldr	r0, [pc, #80]	; (8014494 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj+0x6c>)
 8014442:	f00c f8a3 	bl	802058c <__assert_func>
    // Underlying stream class assumes that more significant bits have lower index, so we need to shift some.
    if (bitlen % 8)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f003 0307 	and.w	r3, r3, #7
 801444c:	2b00      	cmp	r3, #0
 801444e:	d011      	beq.n	8014474 <_ZN6uavcan11ScalarCodec15encodeBytesImplEPhj+0x4c>
    {
        bytes[bitlen / 8] = uint8_t(bytes[bitlen / 8] << ((8 - (bitlen % 8)) & 7));
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	08db      	lsrs	r3, r3, #3
 8014456:	4413      	add	r3, r2
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	461a      	mov	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	425b      	negs	r3, r3
 8014460:	f003 0307 	and.w	r3, r3, #7
 8014464:	fa02 f103 	lsl.w	r1, r2, r3
 8014468:	68ba      	ldr	r2, [r7, #8]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	08db      	lsrs	r3, r3, #3
 801446e:	4413      	add	r3, r2
 8014470:	b2ca      	uxtb	r2, r1
 8014472:	701a      	strb	r2, [r3, #0]
    }
    return stream_.write(bytes, bitlen);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	68b9      	ldr	r1, [r7, #8]
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	4618      	mov	r0, r3
 801447e:	f7ff fef3 	bl	8014268 <_ZN6uavcan9BitStream5writeEPKhj>
 8014482:	4603      	mov	r3, r0
}
 8014484:	4618      	mov	r0, r3
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	0802261c 	.word	0x0802261c
 8014490:	080299c0 	.word	0x080299c0
 8014494:	08022624 	.word	0x08022624

08014498 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj>:

int ScalarCodec::decodeBytesImpl(uint8_t* const bytes, const unsigned bitlen)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b086      	sub	sp, #24
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
    UAVCAN_ASSERT(bytes);
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d105      	bne.n	80144b6 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj+0x1e>
 80144aa:	4b16      	ldr	r3, [pc, #88]	; (8014504 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj+0x6c>)
 80144ac:	4a16      	ldr	r2, [pc, #88]	; (8014508 <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj+0x70>)
 80144ae:	2122      	movs	r1, #34	; 0x22
 80144b0:	4816      	ldr	r0, [pc, #88]	; (801450c <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj+0x74>)
 80144b2:	f00c f86b 	bl	802058c <__assert_func>
    const int read_res = stream_.read(bytes, bitlen);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	68b9      	ldr	r1, [r7, #8]
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	4618      	mov	r0, r3
 80144c0:	f7ff ff54 	bl	801436c <_ZN6uavcan9BitStream4readEPhj>
 80144c4:	6178      	str	r0, [r7, #20]
    if (read_res > 0)
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	dd16      	ble.n	80144fa <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj+0x62>
    {
        if (bitlen % 8)
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f003 0307 	and.w	r3, r3, #7
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d011      	beq.n	80144fa <_ZN6uavcan11ScalarCodec15decodeBytesImplEPhj+0x62>
        {
            bytes[bitlen / 8] = uint8_t(bytes[bitlen / 8] >> ((8 - (bitlen % 8)) & 7));  // As in encode(), vice versa
 80144d6:	68ba      	ldr	r2, [r7, #8]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	08db      	lsrs	r3, r3, #3
 80144dc:	4413      	add	r3, r2
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	461a      	mov	r2, r3
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	425b      	negs	r3, r3
 80144e6:	f003 0307 	and.w	r3, r3, #7
 80144ea:	fa42 f103 	asr.w	r1, r2, r3
 80144ee:	68ba      	ldr	r2, [r7, #8]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	08db      	lsrs	r3, r3, #3
 80144f4:	4413      	add	r3, r2
 80144f6:	b2ca      	uxtb	r2, r1
 80144f8:	701a      	strb	r2, [r3, #0]
        }
    }
    return read_res;
 80144fa:	697b      	ldr	r3, [r7, #20]
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3718      	adds	r7, #24
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	0802261c 	.word	0x0802261c
 8014508:	08029a0c 	.word	0x08029a0c
 801450c:	08022624 	.word	0x08022624

08014510 <_ZNK6uavcan10DataTypeIDneES0_>:
    bool operator!=(DataTypeID rhs) const { return value_ != rhs.value_; }
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681a      	ldr	r2, [r3, #0]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	429a      	cmp	r2, r3
 8014522:	bf14      	ite	ne
 8014524:	2301      	movne	r3, #1
 8014526:	2300      	moveq	r3, #0
 8014528:	b2db      	uxtb	r3, r3
 801452a:	4618      	mov	r0, r3
 801452c:	370c      	adds	r7, #12
 801452e:	46bd      	mov	sp, r7
 8014530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014534:	4770      	bx	lr

08014536 <_ZNK6uavcan24StaticTransferBufferImpl9getRawPtrEv>:
    const uint8_t* getRawPtr() const { return data_; }
 8014536:	b480      	push	{r7}
 8014538:	b083      	sub	sp, #12
 801453a:	af00      	add	r7, sp, #0
 801453c:	6078      	str	r0, [r7, #4]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	685b      	ldr	r3, [r3, #4]
 8014542:	4618      	mov	r0, r3
 8014544:	370c      	adds	r7, #12
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr

0801454e <_ZNK6uavcan24StaticTransferBufferImpl14getMaxWritePosEv>:
    uint16_t getMaxWritePos() const { return max_write_pos_; }
 801454e:	b480      	push	{r7}
 8014550:	b083      	sub	sp, #12
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	895b      	ldrh	r3, [r3, #10]
 801455a:	4618      	mov	r0, r3
 801455c:	370c      	adds	r7, #12
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr

08014566 <_ZNK6uavcan14TransferSender13isInitializedEv>:
    bool isInitialized() const { return data_type_id_ != DataTypeID(); }
 8014566:	b590      	push	{r4, r7, lr}
 8014568:	b085      	sub	sp, #20
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f103 0410 	add.w	r4, r3, #16
 8014574:	f107 030c 	add.w	r3, r7, #12
 8014578:	4618      	mov	r0, r3
 801457a:	f7f1 fb5b 	bl	8005c34 <_ZN6uavcan10DataTypeIDC1Ev>
 801457e:	68f9      	ldr	r1, [r7, #12]
 8014580:	4620      	mov	r0, r4
 8014582:	f7ff ffc5 	bl	8014510 <_ZNK6uavcan10DataTypeIDneES0_>
 8014586:	4603      	mov	r3, r0
 8014588:	4618      	mov	r0, r3
 801458a:	3714      	adds	r7, #20
 801458c:	46bd      	mov	sp, r7
 801458e:	bd90      	pop	{r4, r7, pc}

08014590 <_ZN6uavcan20GenericPublisherBase15getMinTxTimeoutEv>:
    static MonotonicDuration getMinTxTimeout() { return MonotonicDuration::fromUSec(200); }
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	6879      	ldr	r1, [r7, #4]
 801459a:	f04f 02c8 	mov.w	r2, #200	; 0xc8
 801459e:	f04f 0300 	mov.w	r3, #0
 80145a2:	4608      	mov	r0, r1
 80145a4:	f7f4 fa5c 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	3708      	adds	r7, #8
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}

080145b0 <_ZN6uavcan20GenericPublisherBase15getMaxTxTimeoutEv>:
    static MonotonicDuration getMaxTxTimeout() { return MonotonicDuration::fromMSec(60000); }
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b082      	sub	sp, #8
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
 80145b8:	6879      	ldr	r1, [r7, #4]
 80145ba:	f64e 2260 	movw	r2, #60000	; 0xea60
 80145be:	f04f 0300 	mov.w	r3, #0
 80145c2:	4608      	mov	r0, r1
 80145c4:	f7f4 f84a 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	3708      	adds	r7, #8
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>:

namespace uavcan
{

bool GenericPublisherBase::isInited() const
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
    return sender_.isInitialized();
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	4618      	mov	r0, r3
 80145dc:	f7ff ffc3 	bl	8014566 <_ZNK6uavcan14TransferSender13isInitializedEv>
 80145e0:	4603      	mov	r3, r0
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>:

int GenericPublisherBase::doInit(DataTypeKind dtkind, const char* dtname, CanTxQueue::Qos qos)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b086      	sub	sp, #24
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	60f8      	str	r0, [r7, #12]
 80145f2:	607a      	str	r2, [r7, #4]
 80145f4:	461a      	mov	r2, r3
 80145f6:	460b      	mov	r3, r1
 80145f8:	72fb      	strb	r3, [r7, #11]
 80145fa:	4613      	mov	r3, r2
 80145fc:	72bb      	strb	r3, [r7, #10]
    if (isInited())
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f7ff ffe6 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 8014604:	4603      	mov	r3, r0
 8014606:	2b00      	cmp	r3, #0
 8014608:	d001      	beq.n	801460e <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE+0x24>
    {
        return 0;
 801460a:	2300      	movs	r3, #0
 801460c:	e01a      	b.n	8014644 <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE+0x5a>
    }

    GlobalDataTypeRegistry::instance().freeze();
 801460e:	f000 fb15 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8014612:	4603      	mov	r3, r0
 8014614:	4618      	mov	r0, r3
 8014616:	f000 fb2b 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>

    const DataTypeDescriptor* const descr = GlobalDataTypeRegistry::instance().find(dtkind, dtname);
 801461a:	f000 fb0f 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 801461e:	7afb      	ldrb	r3, [r7, #11]
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	4619      	mov	r1, r3
 8014624:	f000 fb52 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 8014628:	6178      	str	r0, [r7, #20]
    if (descr == UAVCAN_NULLPTR)
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d102      	bne.n	8014636 <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE+0x4c>
    {
        UAVCAN_TRACE("GenericPublisher", "Type [%s] is not registered", dtname);
        return -ErrUnknownDataType;
 8014630:	f06f 0304 	mvn.w	r3, #4
 8014634:	e006      	b.n	8014644 <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE+0x5a>
    }

    sender_.init(*descr, qos);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	7aba      	ldrb	r2, [r7, #10]
 801463a:	6979      	ldr	r1, [r7, #20]
 801463c:	4618      	mov	r0, r3
 801463e:	f008 ff85 	bl	801d54c <_ZN6uavcan14TransferSender4initERKNS_18DataTypeDescriptorENS_10CanTxQueue3QosE>

    return 0;
 8014642:	2300      	movs	r3, #0
}
 8014644:	4618      	mov	r0, r3
 8014646:	3718      	adds	r7, #24
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <_ZNK6uavcan20GenericPublisherBase13getTxDeadlineEv>:

MonotonicTime GenericPublisherBase::getTxDeadline() const
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
    return node_.getMonotonicTime() + tx_timeout_;
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	6a1a      	ldr	r2, [r3, #32]
 801465a:	f107 0308 	add.w	r3, r7, #8
 801465e:	4611      	mov	r1, r2
 8014660:	4618      	mov	r0, r3
 8014662:	f7f2 f982 	bl	800696a <_ZNK6uavcan5INode16getMonotonicTimeEv>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	f103 0218 	add.w	r2, r3, #24
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f107 0108 	add.w	r1, r7, #8
 8014672:	4618      	mov	r0, r3
 8014674:	f7f4 f971 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 8014678:	f107 0308 	add.w	r3, r7, #8
 801467c:	4618      	mov	r0, r3
 801467e:	f7f1 fd49 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8014682:	bf00      	nop
}
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:

int GenericPublisherBase::genericPublish(const StaticTransferBufferImpl& buffer, TransferType transfer_type,
                                         NodeID dst_node_id, TransferID* tid, MonotonicTime blocking_deadline)
{
 801468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468e:	b091      	sub	sp, #68	; 0x44
 8014690:	af04      	add	r7, sp, #16
 8014692:	60f8      	str	r0, [r7, #12]
 8014694:	60b9      	str	r1, [r7, #8]
 8014696:	713b      	strb	r3, [r7, #4]
 8014698:	4613      	mov	r3, r2
 801469a:	71fb      	strb	r3, [r7, #7]
    if (tid)
 801469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d036      	beq.n	8014710 <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x84>
    {
        return sender_.send(buffer.getRawPtr(), buffer.getMaxWritePos(), getTxDeadline(),
 80146a2:	68fc      	ldr	r4, [r7, #12]
 80146a4:	68b8      	ldr	r0, [r7, #8]
 80146a6:	f7ff ff46 	bl	8014536 <_ZNK6uavcan24StaticTransferBufferImpl9getRawPtrEv>
 80146aa:	4605      	mov	r5, r0
 80146ac:	68b8      	ldr	r0, [r7, #8]
 80146ae:	f7ff ff4e 	bl	801454e <_ZNK6uavcan24StaticTransferBufferImpl14getMaxWritePosEv>
 80146b2:	4603      	mov	r3, r0
 80146b4:	461e      	mov	r6, r3
 80146b6:	f107 0310 	add.w	r3, r7, #16
 80146ba:	68f9      	ldr	r1, [r7, #12]
 80146bc:	4618      	mov	r0, r3
 80146be:	f7ff ffc5 	bl	801464c <_ZNK6uavcan20GenericPublisherBase13getTxDeadlineEv>
 80146c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146c4:	f107 0318 	add.w	r3, r7, #24
 80146c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146cc:	e883 0003 	stmia.w	r3, {r0, r1}
                            blocking_deadline, transfer_type, dst_node_id, *tid);
 80146d0:	f107 0210 	add.w	r2, r7, #16
 80146d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146d6:	781b      	ldrb	r3, [r3, #0]
 80146d8:	f88d 300c 	strb.w	r3, [sp, #12]
 80146dc:	793b      	ldrb	r3, [r7, #4]
 80146de:	f88d 3008 	strb.w	r3, [sp, #8]
 80146e2:	79fb      	ldrb	r3, [r7, #7]
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	f107 0318 	add.w	r3, r7, #24
 80146ea:	9300      	str	r3, [sp, #0]
 80146ec:	4613      	mov	r3, r2
 80146ee:	4632      	mov	r2, r6
 80146f0:	4629      	mov	r1, r5
 80146f2:	4620      	mov	r0, r4
 80146f4:	f008 ff5c 	bl	801d5b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE>
 80146f8:	4604      	mov	r4, r0
        return sender_.send(buffer.getRawPtr(), buffer.getMaxWritePos(), getTxDeadline(),
 80146fa:	f107 0318 	add.w	r3, r7, #24
 80146fe:	4618      	mov	r0, r3
 8014700:	f7f1 fd08 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8014704:	f107 0310 	add.w	r3, r7, #16
 8014708:	4618      	mov	r0, r3
 801470a:	f7f1 fd03 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801470e:	e031      	b.n	8014774 <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0xe8>
    }
    else
    {
        return sender_.send(buffer.getRawPtr(), buffer.getMaxWritePos(), getTxDeadline(),
 8014710:	68fc      	ldr	r4, [r7, #12]
 8014712:	68b8      	ldr	r0, [r7, #8]
 8014714:	f7ff ff0f 	bl	8014536 <_ZNK6uavcan24StaticTransferBufferImpl9getRawPtrEv>
 8014718:	4605      	mov	r5, r0
 801471a:	68b8      	ldr	r0, [r7, #8]
 801471c:	f7ff ff17 	bl	801454e <_ZNK6uavcan24StaticTransferBufferImpl14getMaxWritePosEv>
 8014720:	4603      	mov	r3, r0
 8014722:	461e      	mov	r6, r3
 8014724:	f107 0320 	add.w	r3, r7, #32
 8014728:	68f9      	ldr	r1, [r7, #12]
 801472a:	4618      	mov	r0, r3
 801472c:	f7ff ff8e 	bl	801464c <_ZNK6uavcan20GenericPublisherBase13getTxDeadlineEv>
 8014730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014736:	e892 0003 	ldmia.w	r2, {r0, r1}
 801473a:	e883 0003 	stmia.w	r3, {r0, r1}
                            blocking_deadline, transfer_type, dst_node_id);
 801473e:	f107 0220 	add.w	r2, r7, #32
 8014742:	793b      	ldrb	r3, [r7, #4]
 8014744:	f88d 3008 	strb.w	r3, [sp, #8]
 8014748:	79fb      	ldrb	r3, [r7, #7]
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014750:	9300      	str	r3, [sp, #0]
 8014752:	4613      	mov	r3, r2
 8014754:	4632      	mov	r2, r6
 8014756:	4629      	mov	r1, r5
 8014758:	4620      	mov	r0, r4
 801475a:	f009 f937 	bl	801d9cc <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE>
 801475e:	4604      	mov	r4, r0
        return sender_.send(buffer.getRawPtr(), buffer.getMaxWritePos(), getTxDeadline(),
 8014760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014764:	4618      	mov	r0, r3
 8014766:	f7f1 fcd5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801476a:	f107 0320 	add.w	r3, r7, #32
 801476e:	4618      	mov	r0, r3
 8014770:	f7f1 fcd0 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8014774:	4623      	mov	r3, r4
    }
}
 8014776:	4618      	mov	r0, r3
 8014778:	3734      	adds	r7, #52	; 0x34
 801477a:	46bd      	mov	sp, r7
 801477c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801477e <_ZN6uavcan20GenericPublisherBase12setTxTimeoutENS_17MonotonicDurationE>:

void GenericPublisherBase::setTxTimeout(MonotonicDuration tx_timeout)
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b086      	sub	sp, #24
 8014782:	af00      	add	r7, sp, #0
 8014784:	6078      	str	r0, [r7, #4]
 8014786:	6039      	str	r1, [r7, #0]
    tx_timeout = max(tx_timeout, getMinTxTimeout());
 8014788:	f107 0308 	add.w	r3, r7, #8
 801478c:	4618      	mov	r0, r3
 801478e:	f7ff feff 	bl	8014590 <_ZN6uavcan20GenericPublisherBase15getMinTxTimeoutEv>
 8014792:	f107 0308 	add.w	r3, r7, #8
 8014796:	4619      	mov	r1, r3
 8014798:	6838      	ldr	r0, [r7, #0]
 801479a:	f7f4 f8ca 	bl	8008932 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_>
 801479e:	4602      	mov	r2, r0
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80147aa:	f107 0308 	add.w	r3, r7, #8
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7f1 fd83 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    tx_timeout = min(tx_timeout, getMaxTxTimeout());
 80147b4:	f107 0310 	add.w	r3, r7, #16
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7ff fef9 	bl	80145b0 <_ZN6uavcan20GenericPublisherBase15getMaxTxTimeoutEv>
 80147be:	f107 0310 	add.w	r3, r7, #16
 80147c2:	4619      	mov	r1, r3
 80147c4:	6838      	ldr	r0, [r7, #0]
 80147c6:	f7f4 f8a0 	bl	800890a <_ZN6uavcan3minINS_17MonotonicDurationEEERKT_S4_S4_>
 80147ca:	4602      	mov	r2, r0
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80147d6:	f107 0310 	add.w	r3, r7, #16
 80147da:	4618      	mov	r0, r3
 80147dc:	f7f1 fd6d 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    tx_timeout_ = tx_timeout;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	683a      	ldr	r2, [r7, #0]
 80147e4:	3318      	adds	r3, #24
 80147e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147ea:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80147ee:	bf00      	nop
 80147f0:	3718      	adds	r7, #24
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
	...

080147f8 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E>:
namespace uavcan
{

int GenericSubscriberBase::genericStart(TransferListener* listener,
                                        bool (Dispatcher::*registration_method)(TransferListener*))
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	4639      	mov	r1, r7
 8014804:	e881 000c 	stmia.w	r1, {r2, r3}
    if (listener == UAVCAN_NULLPTR)
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d105      	bne.n	801481a <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x22>
    {
        UAVCAN_ASSERT(0);
 801480e:	4b18      	ldr	r3, [pc, #96]	; (8014870 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x78>)
 8014810:	4a18      	ldr	r2, [pc, #96]	; (8014874 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x7c>)
 8014812:	210f      	movs	r1, #15
 8014814:	4818      	ldr	r0, [pc, #96]	; (8014878 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x80>)
 8014816:	f00b feb9 	bl	802058c <__assert_func>
        return -ErrLogic;
    }
    stop(listener);
 801481a:	68b9      	ldr	r1, [r7, #8]
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f000 f82d 	bl	801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>
    if (!(node_.getDispatcher().*registration_method)(listener))
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	4618      	mov	r0, r3
 8014828:	f7f2 f88c 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 801482c:	4603      	mov	r3, r0
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	1052      	asrs	r2, r2, #1
 8014832:	1898      	adds	r0, r3, r2
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	f002 0201 	and.w	r2, r2, #1
 801483a:	2a00      	cmp	r2, #0
 801483c:	d101      	bne.n	8014842 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x4a>
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	e006      	b.n	8014850 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x58>
 8014842:	687a      	ldr	r2, [r7, #4]
 8014844:	1052      	asrs	r2, r2, #1
 8014846:	4413      	add	r3, r2
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	683a      	ldr	r2, [r7, #0]
 801484c:	4413      	add	r3, r2
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	68b9      	ldr	r1, [r7, #8]
 8014852:	4798      	blx	r3
 8014854:	4603      	mov	r3, r0
 8014856:	f083 0301 	eor.w	r3, r3, #1
 801485a:	b2db      	uxtb	r3, r3
 801485c:	2b00      	cmp	r3, #0
 801485e:	d002      	beq.n	8014866 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x6e>
    {
        UAVCAN_TRACE("GenericSubscriber", "Failed to register transfer listener");
        return -ErrInvalidTransferListener;
 8014860:	f06f 0306 	mvn.w	r3, #6
 8014864:	e000      	b.n	8014868 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E+0x70>
    }
    return 0;
 8014866:	2300      	movs	r3, #0
}
 8014868:	4618      	mov	r0, r3
 801486a:	3710      	adds	r7, #16
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	080226a0 	.word	0x080226a0
 8014874:	08029a58 	.word	0x08029a58
 8014878:	080226a4 	.word	0x080226a4

0801487c <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE>:

void GenericSubscriberBase::stop(TransferListener* listener)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
    if (listener != UAVCAN_NULLPTR)
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d01d      	beq.n	80148c8 <_ZN6uavcan21GenericSubscriberBase4stopEPNS_16TransferListenerE+0x4c>
    {
        node_.getDispatcher().unregisterMessageListener(listener);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4618      	mov	r0, r3
 8014892:	f7f2 f857 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8014896:	4603      	mov	r3, r0
 8014898:	6839      	ldr	r1, [r7, #0]
 801489a:	4618      	mov	r0, r3
 801489c:	f004 f9da 	bl	8018c54 <_ZN6uavcan10Dispatcher25unregisterMessageListenerEPNS_16TransferListenerE>
        node_.getDispatcher().unregisterServiceRequestListener(listener);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	4618      	mov	r0, r3
 80148a6:	f7f2 f84d 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 80148aa:	4603      	mov	r3, r0
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	4618      	mov	r0, r3
 80148b0:	f004 f9df 	bl	8018c72 <_ZN6uavcan10Dispatcher32unregisterServiceRequestListenerEPNS_16TransferListenerE>
        node_.getDispatcher().unregisterServiceResponseListener(listener);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7f2 f843 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 80148be:	4603      	mov	r3, r0
 80148c0:	6839      	ldr	r1, [r7, #0]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f004 f9e4 	bl	8018c90 <_ZN6uavcan10Dispatcher33unregisterServiceResponseListenerEPNS_16TransferListenerE>
    }
}
 80148c8:	bf00      	nop
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <_ZNK6uavcan10DataTypeIDgtES0_>:
    bool operator>(DataTypeID rhs) const { return value_ > rhs.value_; }
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	bf8c      	ite	hi
 80148e4:	2301      	movhi	r3, #1
 80148e6:	2300      	movls	r3, #0
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	4618      	mov	r0, r3
 80148ec:	370c      	adds	r7, #12
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr
	...

080148f8 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE>:
        explicit EntryInsertionComparator(const Entry* dtd)
 80148f8:	b590      	push	{r4, r7, lr}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
            : id((dtd == UAVCAN_NULLPTR) ? DataTypeID() : dtd->descriptor.getID())
 8014902:	687c      	ldr	r4, [r7, #4]
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d103      	bne.n	8014912 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE+0x1a>
 801490a:	4620      	mov	r0, r4
 801490c:	f7f1 f992 	bl	8005c34 <_ZN6uavcan10DataTypeIDC1Ev>
 8014910:	e006      	b.n	8014920 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE+0x28>
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	3308      	adds	r3, #8
 8014916:	4618      	mov	r0, r3
 8014918:	f7f1 fa68 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 801491c:	4603      	mov	r3, r0
 801491e:	6023      	str	r3, [r4, #0]
            UAVCAN_ASSERT(dtd != UAVCAN_NULLPTR);
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d105      	bne.n	8014932 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE+0x3a>
 8014926:	4b05      	ldr	r3, [pc, #20]	; (801493c <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE+0x44>)
 8014928:	4a05      	ldr	r2, [pc, #20]	; (8014940 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE+0x48>)
 801492a:	2136      	movs	r1, #54	; 0x36
 801492c:	4805      	ldr	r0, [pc, #20]	; (8014944 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE+0x4c>)
 801492e:	f00b fe2d 	bl	802058c <__assert_func>
        }
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	370c      	adds	r7, #12
 8014938:	46bd      	mov	sp, r7
 801493a:	bd90      	pop	{r4, r7, pc}
 801493c:	08022724 	.word	0x08022724
 8014940:	08029c58 	.word	0x08029c58
 8014944:	08022734 	.word	0x08022734

08014948 <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE>:
        bool operator()(const Entry* entry) const
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
            UAVCAN_ASSERT(entry != UAVCAN_NULLPTR);
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d105      	bne.n	8014964 <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE+0x1c>
 8014958:	4b0c      	ldr	r3, [pc, #48]	; (801498c <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE+0x44>)
 801495a:	4a0d      	ldr	r2, [pc, #52]	; (8014990 <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE+0x48>)
 801495c:	213a      	movs	r1, #58	; 0x3a
 801495e:	480d      	ldr	r0, [pc, #52]	; (8014994 <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE+0x4c>)
 8014960:	f00b fe14 	bl	802058c <__assert_func>
            return entry->descriptor.getID() > id;
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	3308      	adds	r3, #8
 8014968:	4618      	mov	r0, r3
 801496a:	f7f1 fa3f 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 801496e:	4603      	mov	r3, r0
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f107 020c 	add.w	r2, r7, #12
 8014978:	6819      	ldr	r1, [r3, #0]
 801497a:	4610      	mov	r0, r2
 801497c:	f7ff ffa8 	bl	80148d0 <_ZNK6uavcan10DataTypeIDgtES0_>
 8014980:	4603      	mov	r3, r0
        }
 8014982:	4618      	mov	r0, r3
 8014984:	3710      	adds	r7, #16
 8014986:	46bd      	mov	sp, r7
 8014988:	bd80      	pop	{r7, pc}
 801498a:	bf00      	nop
 801498c:	08022788 	.word	0x08022788
 8014990:	08029d90 	.word	0x08029d90
 8014994:	08022734 	.word	0x08022734

08014998 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEED1Ev>:
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f7f1 f827 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	4618      	mov	r0, r3
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <_ZN6uavcan22GlobalDataTypeRegistryC1Ev>:
    GlobalDataTypeRegistry() : frozen_(false) { }
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7f1 f810 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	3304      	adds	r3, #4
 80149c2:	4618      	mov	r0, r3
 80149c4:	f000 fa02 	bl	8014dcc <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEEC1Ev>
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	3308      	adds	r3, #8
 80149cc:	4618      	mov	r0, r3
 80149ce:	f000 f9fd 	bl	8014dcc <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEEC1Ev>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2200      	movs	r2, #0
 80149d6:	731a      	strb	r2, [r3, #12]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	3708      	adds	r7, #8
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE>:

namespace uavcan
{

GlobalDataTypeRegistry::List* GlobalDataTypeRegistry::selectList(DataTypeKind kind) const
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	460b      	mov	r3, r1
 80149ee:	70fb      	strb	r3, [r7, #3]
    if (kind == DataTypeKindMessage)
 80149f0:	78fb      	ldrb	r3, [r7, #3]
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d102      	bne.n	80149fc <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x18>
    {
        return &msgs_;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	3304      	adds	r3, #4
 80149fa:	e00b      	b.n	8014a14 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x30>
    }
    else if (kind == DataTypeKindService)
 80149fc:	78fb      	ldrb	r3, [r7, #3]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d102      	bne.n	8014a08 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x24>
    {
        return &srvs_;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	3308      	adds	r3, #8
 8014a06:	e005      	b.n	8014a14 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x30>
    }
    else
    {
        UAVCAN_ASSERT(0);
 8014a08:	4b04      	ldr	r3, [pc, #16]	; (8014a1c <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x38>)
 8014a0a:	4a05      	ldr	r2, [pc, #20]	; (8014a20 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x3c>)
 8014a0c:	2119      	movs	r1, #25
 8014a0e:	4805      	ldr	r0, [pc, #20]	; (8014a24 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE+0x40>)
 8014a10:	f00b fdbc 	bl	802058c <__assert_func>
        return UAVCAN_NULLPTR;
    }
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	0802279c 	.word	0x0802279c
 8014a20:	08029adc 	.word	0x08029adc
 8014a24:	080227a0 	.word	0x080227a0

08014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>:

GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::remove(Entry* dtd)
{
 8014a28:	b5b0      	push	{r4, r5, r7, lr}
 8014a2a:	b086      	sub	sp, #24
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
    if (!dtd)
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d105      	bne.n	8014a44 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0x1c>
    {
        UAVCAN_ASSERT(0);
 8014a38:	4b28      	ldr	r3, [pc, #160]	; (8014adc <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xb4>)
 8014a3a:	4a29      	ldr	r2, [pc, #164]	; (8014ae0 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xb8>)
 8014a3c:	2122      	movs	r1, #34	; 0x22
 8014a3e:	4829      	ldr	r0, [pc, #164]	; (8014ae4 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xbc>)
 8014a40:	f00b fda4 	bl	802058c <__assert_func>
        return RegistrationResultInvalidParams;
    }
    if (isFrozen())
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7f1 fa06 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d001      	beq.n	8014a54 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0x2c>
    {
        return RegistrationResultFrozen;
 8014a50:	2303      	movs	r3, #3
 8014a52:	e03f      	b.n	8014ad4 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xac>
    }

    List* list = selectList(dtd->descriptor.getKind());
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	3308      	adds	r3, #8
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7f1 f9bb 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	4619      	mov	r1, r3
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f7ff ffbe 	bl	80149e4 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE>
 8014a68:	6138      	str	r0, [r7, #16]
    if (!list)
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d101      	bne.n	8014a74 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0x4c>
    {
        return RegistrationResultInvalidParams;
 8014a70:	2302      	movs	r3, #2
 8014a72:	e02f      	b.n	8014ad4 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xac>
    }

    list->remove(dtd);       // If this call came from regist<>(), that would be enough
 8014a74:	6839      	ldr	r1, [r7, #0]
 8014a76:	6938      	ldr	r0, [r7, #16]
 8014a78:	f000 f9b7 	bl	8014dea <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_>
    Entry* p = list->get();  // But anyway
 8014a7c:	6938      	ldr	r0, [r7, #16]
 8014a7e:	f000 fa03 	bl	8014e88 <_ZNK6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE3getEv>
 8014a82:	6178      	str	r0, [r7, #20]
    while (p)
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d023      	beq.n	8014ad2 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xaa>
    {
        Entry* const next = p->getNextListNode();
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f000 fa07 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014a92:	60f8      	str	r0, [r7, #12]
        if (p->descriptor.match(dtd->descriptor.getKind(), dtd->descriptor.getFullName()))
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	f103 0408 	add.w	r4, r3, #8
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	3308      	adds	r3, #8
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7f1 f998 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	461d      	mov	r5, r3
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	3308      	adds	r3, #8
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f1 f9b4 	bl	8005e1a <_ZNK6uavcan18DataTypeDescriptor11getFullNameEv>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	4620      	mov	r0, r4
 8014aba:	f009 f9b9 	bl	801de30 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d003      	beq.n	8014acc <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0xa4>
        {
            list->remove(p);
 8014ac4:	6979      	ldr	r1, [r7, #20]
 8014ac6:	6938      	ldr	r0, [r7, #16]
 8014ac8:	f000 f98f 	bl	8014dea <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_>
        }
        p = next;
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	617b      	str	r3, [r7, #20]
    while (p)
 8014ad0:	e7d8      	b.n	8014a84 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE+0x5c>
    }
    return RegistrationResultOk;
 8014ad2:	2300      	movs	r3, #0
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3718      	adds	r7, #24
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bdb0      	pop	{r4, r5, r7, pc}
 8014adc:	0802279c 	.word	0x0802279c
 8014ae0:	08029b4c 	.word	0x08029b4c
 8014ae4:	080227a0 	.word	0x080227a0

08014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>:

GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registImpl(Entry* dtd)
{
 8014ae8:	b590      	push	{r4, r7, lr}
 8014aea:	b087      	sub	sp, #28
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
    if (!dtd || !dtd->descriptor.isValid())
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d00a      	beq.n	8014b0e <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x26>
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	3308      	adds	r3, #8
 8014afc:	4618      	mov	r0, r3
 8014afe:	f009 f977 	bl	801ddf0 <_ZNK6uavcan18DataTypeDescriptor7isValidEv>
 8014b02:	4603      	mov	r3, r0
 8014b04:	f083 0301 	eor.w	r3, r3, #1
 8014b08:	b2db      	uxtb	r3, r3
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d001      	beq.n	8014b12 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x2a>
 8014b0e:	2301      	movs	r3, #1
 8014b10:	e000      	b.n	8014b14 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x2c>
 8014b12:	2300      	movs	r3, #0
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d005      	beq.n	8014b24 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x3c>
    {
        UAVCAN_ASSERT(0);
 8014b18:	4b36      	ldr	r3, [pc, #216]	; (8014bf4 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x10c>)
 8014b1a:	4a37      	ldr	r2, [pc, #220]	; (8014bf8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x110>)
 8014b1c:	2142      	movs	r1, #66	; 0x42
 8014b1e:	4837      	ldr	r0, [pc, #220]	; (8014bfc <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x114>)
 8014b20:	f00b fd34 	bl	802058c <__assert_func>
        return RegistrationResultInvalidParams;
    }
    if (isFrozen())
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7f1 f996 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d001      	beq.n	8014b34 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x4c>
    {
        return RegistrationResultFrozen;
 8014b30:	2303      	movs	r3, #3
 8014b32:	e05b      	b.n	8014bec <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x104>
    }

    List* list = selectList(dtd->descriptor.getKind());
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	3308      	adds	r3, #8
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7f1 f94b 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	4619      	mov	r1, r3
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f7ff ff4e 	bl	80149e4 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE>
 8014b48:	6138      	str	r0, [r7, #16]
    if (!list)
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d101      	bne.n	8014b54 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x6c>
    {
        return RegistrationResultInvalidParams;
 8014b50:	2302      	movs	r3, #2
 8014b52:	e04b      	b.n	8014bec <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x104>
    }

    {   // Collision check
        Entry* p = list->get();
 8014b54:	6938      	ldr	r0, [r7, #16]
 8014b56:	f000 f997 	bl	8014e88 <_ZNK6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE3getEv>
 8014b5a:	6178      	str	r0, [r7, #20]
        while (p)
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d038      	beq.n	8014bd4 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0xec>
        {
            if (p->descriptor.getID() == dtd->descriptor.getID()) // ID collision
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	3308      	adds	r3, #8
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7f1 f940 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	60bb      	str	r3, [r7, #8]
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	3308      	adds	r3, #8
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7f1 f939 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	f107 0308 	add.w	r3, r7, #8
 8014b80:	4611      	mov	r1, r2
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7f1 f882 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d001      	beq.n	8014b92 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0xaa>
            {
                return RegistrationResultCollision;
 8014b8e:	2301      	movs	r3, #1
 8014b90:	e02c      	b.n	8014bec <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x104>
            }
            if (!std::strncmp(p->descriptor.getFullName(), dtd->descriptor.getFullName(),
 8014b92:	697b      	ldr	r3, [r7, #20]
 8014b94:	3308      	adds	r3, #8
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7f1 f93f 	bl	8005e1a <_ZNK6uavcan18DataTypeDescriptor11getFullNameEv>
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	3308      	adds	r3, #8
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7f1 f939 	bl	8005e1a <_ZNK6uavcan18DataTypeDescriptor11getFullNameEv>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	2250      	movs	r2, #80	; 0x50
 8014bac:	4619      	mov	r1, r3
 8014bae:	4620      	mov	r0, r4
 8014bb0:	f00c f934 	bl	8020e1c <strncmp>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	bf0c      	ite	eq
 8014bba:	2301      	moveq	r3, #1
 8014bbc:	2300      	movne	r3, #0
 8014bbe:	b2db      	uxtb	r3, r3
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d001      	beq.n	8014bc8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0xe0>
                              DataTypeDescriptor::MaxFullNameLen))                        // Name collision
            {
                return RegistrationResultCollision;
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	e011      	b.n	8014bec <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x104>
            }
            p = p->getNextListNode();
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f000 f968 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014bd0:	6178      	str	r0, [r7, #20]
        while (p)
 8014bd2:	e7c3      	b.n	8014b5c <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE+0x74>
        }
    }
#if UAVCAN_DEBUG
    const unsigned len_before = list->getLength();
#endif
    list->insertBefore(dtd, EntryInsertionComparator(dtd));
 8014bd4:	f107 030c 	add.w	r3, r7, #12
 8014bd8:	6839      	ldr	r1, [r7, #0]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7ff fe8c 	bl	80148f8 <_ZN6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorC1EPKNS0_5EntryE>
 8014be0:	68fa      	ldr	r2, [r7, #12]
 8014be2:	6839      	ldr	r1, [r7, #0]
 8014be4:	6938      	ldr	r0, [r7, #16]
 8014be6:	f000 f967 	bl	8014eb8 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_>
            id = p->descriptor.getID().get();
            p = p->getNextListNode();
        }
    }
#endif
    return RegistrationResultOk;
 8014bea:	2300      	movs	r3, #0
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	371c      	adds	r7, #28
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd90      	pop	{r4, r7, pc}
 8014bf4:	0802279c 	.word	0x0802279c
 8014bf8:	08029bd0 	.word	0x08029bd0
 8014bfc:	080227a0 	.word	0x080227a0

08014c00 <_ZN6uavcan22GlobalDataTypeRegistryD1Ev>:
class UAVCAN_EXPORT GlobalDataTypeRegistry : Noncopyable
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	3308      	adds	r3, #8
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff fec3 	bl	8014998 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEED1Ev>
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	3304      	adds	r3, #4
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7ff febe 	bl	8014998 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEED1Ev>
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7f0 fee9 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <__tcf_0>:

GlobalDataTypeRegistry& GlobalDataTypeRegistry::instance()
{
    static GlobalDataTypeRegistry singleton;
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	4801      	ldr	r0, [pc, #4]	; (8014c38 <__tcf_0+0xc>)
 8014c32:	f7ff ffe5 	bl	8014c00 <_ZN6uavcan22GlobalDataTypeRegistryD1Ev>
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	200085a0 	.word	0x200085a0

08014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>:
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	af00      	add	r7, sp, #0
    static GlobalDataTypeRegistry singleton;
 8014c40:	4b08      	ldr	r3, [pc, #32]	; (8014c64 <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv+0x28>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	f003 0301 	and.w	r3, r3, #1
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d108      	bne.n	8014c5e <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv+0x22>
 8014c4c:	4806      	ldr	r0, [pc, #24]	; (8014c68 <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv+0x2c>)
 8014c4e:	f7ff feaf 	bl	80149b0 <_ZN6uavcan22GlobalDataTypeRegistryC1Ev>
 8014c52:	4b04      	ldr	r3, [pc, #16]	; (8014c64 <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv+0x28>)
 8014c54:	2201      	movs	r2, #1
 8014c56:	601a      	str	r2, [r3, #0]
 8014c58:	4804      	ldr	r0, [pc, #16]	; (8014c6c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv+0x30>)
 8014c5a:	f00b fcb5 	bl	80205c8 <atexit>
    return singleton;
 8014c5e:	4b02      	ldr	r3, [pc, #8]	; (8014c68 <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv+0x2c>)
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	200085b0 	.word	0x200085b0
 8014c68:	200085a0 	.word	0x200085a0
 8014c6c:	08014c2d 	.word	0x08014c2d

08014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>:

void GlobalDataTypeRegistry::freeze()
{
 8014c70:	b480      	push	{r7}
 8014c72:	b083      	sub	sp, #12
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
    if (!frozen_)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	7b1b      	ldrb	r3, [r3, #12]
 8014c7c:	f083 0301 	eor.w	r3, r3, #1
 8014c80:	b2db      	uxtb	r3, r3
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d002      	beq.n	8014c8c <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv+0x1c>
    {
        frozen_ = true;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2201      	movs	r2, #1
 8014c8a:	731a      	strb	r2, [r3, #12]
        UAVCAN_TRACE("GlobalDataTypeRegistry", "Frozen; num msgs: %u, num srvs: %u",
                     getNumMessageTypes(), getNumServiceTypes());
    }
}
 8014c8c:	bf00      	nop
 8014c8e:	370c      	adds	r7, #12
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr

08014c98 <_ZNK6uavcan22GlobalDataTypeRegistry4findEPKc>:

const DataTypeDescriptor* GlobalDataTypeRegistry::find(const char* name) const
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
    const DataTypeDescriptor* desc = find(DataTypeKindMessage, name);
 8014ca2:	683a      	ldr	r2, [r7, #0]
 8014ca4:	2101      	movs	r1, #1
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f000 f810 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 8014cac:	60f8      	str	r0, [r7, #12]
    if (desc == UAVCAN_NULLPTR)
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d105      	bne.n	8014cc0 <_ZNK6uavcan22GlobalDataTypeRegistry4findEPKc+0x28>
    {
        desc = find(DataTypeKindService, name);
 8014cb4:	683a      	ldr	r2, [r7, #0]
 8014cb6:	2100      	movs	r1, #0
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f000 f807 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 8014cbe:	60f8      	str	r0, [r7, #12]
    }
    return desc;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	3710      	adds	r7, #16
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	bd80      	pop	{r7, pc}
	...

08014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>:

const DataTypeDescriptor* GlobalDataTypeRegistry::find(DataTypeKind kind, const char* name) const
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b086      	sub	sp, #24
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	607a      	str	r2, [r7, #4]
 8014cd8:	72fb      	strb	r3, [r7, #11]
    if (!name)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d105      	bne.n	8014cec <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x20>
    {
        UAVCAN_ASSERT(0);
 8014ce0:	4b19      	ldr	r3, [pc, #100]	; (8014d48 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x7c>)
 8014ce2:	4a1a      	ldr	r2, [pc, #104]	; (8014d4c <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x80>)
 8014ce4:	219e      	movs	r1, #158	; 0x9e
 8014ce6:	481a      	ldr	r0, [pc, #104]	; (8014d50 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x84>)
 8014ce8:	f00b fc50 	bl	802058c <__assert_func>
        return UAVCAN_NULLPTR;
    }
    const List* list = selectList(kind);
 8014cec:	7afb      	ldrb	r3, [r7, #11]
 8014cee:	4619      	mov	r1, r3
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f7ff fe77 	bl	80149e4 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE>
 8014cf6:	6138      	str	r0, [r7, #16]
    if (!list)
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d105      	bne.n	8014d0a <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x3e>
    {
        UAVCAN_ASSERT(0);
 8014cfe:	4b12      	ldr	r3, [pc, #72]	; (8014d48 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x7c>)
 8014d00:	4a12      	ldr	r2, [pc, #72]	; (8014d4c <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x80>)
 8014d02:	21a4      	movs	r1, #164	; 0xa4
 8014d04:	4812      	ldr	r0, [pc, #72]	; (8014d50 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x84>)
 8014d06:	f00b fc41 	bl	802058c <__assert_func>
        return UAVCAN_NULLPTR;
    }
    Entry* p = list->get();
 8014d0a:	6938      	ldr	r0, [r7, #16]
 8014d0c:	f000 f8bc 	bl	8014e88 <_ZNK6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE3getEv>
 8014d10:	6178      	str	r0, [r7, #20]
    while (p)
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d012      	beq.n	8014d3e <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x72>
    {
        if (p->descriptor.match(kind, name))
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	3308      	adds	r3, #8
 8014d1c:	7af9      	ldrb	r1, [r7, #11]
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f009 f885 	bl	801de30 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc>
 8014d26:	4603      	mov	r3, r0
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x66>
        {
            return &p->descriptor;
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	3308      	adds	r3, #8
 8014d30:	e006      	b.n	8014d40 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x74>
        }
        p = p->getNextListNode();
 8014d32:	697b      	ldr	r3, [r7, #20]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f000 f8b3 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014d3a:	6178      	str	r0, [r7, #20]
    while (p)
 8014d3c:	e7e9      	b.n	8014d12 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc+0x46>
    }
    return UAVCAN_NULLPTR;
 8014d3e:	2300      	movs	r3, #0
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3718      	adds	r7, #24
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}
 8014d48:	0802279c 	.word	0x0802279c
 8014d4c:	08029e10 	.word	0x08029e10
 8014d50:	080227a0 	.word	0x080227a0

08014d54 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE>:

const DataTypeDescriptor* GlobalDataTypeRegistry::find(DataTypeKind kind, DataTypeID dtid) const
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b086      	sub	sp, #24
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	60f8      	str	r0, [r7, #12]
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	607a      	str	r2, [r7, #4]
 8014d60:	72fb      	strb	r3, [r7, #11]
    const List* list = selectList(kind);
 8014d62:	7afb      	ldrb	r3, [r7, #11]
 8014d64:	4619      	mov	r1, r3
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f7ff fe3c 	bl	80149e4 <_ZNK6uavcan22GlobalDataTypeRegistry10selectListENS_12DataTypeKindE>
 8014d6c:	6138      	str	r0, [r7, #16]
    if (!list)
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d105      	bne.n	8014d80 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x2c>
    {
        UAVCAN_ASSERT(0);
 8014d74:	4b12      	ldr	r3, [pc, #72]	; (8014dc0 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x6c>)
 8014d76:	4a13      	ldr	r2, [pc, #76]	; (8014dc4 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x70>)
 8014d78:	21b8      	movs	r1, #184	; 0xb8
 8014d7a:	4813      	ldr	r0, [pc, #76]	; (8014dc8 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x74>)
 8014d7c:	f00b fc06 	bl	802058c <__assert_func>
        return UAVCAN_NULLPTR;
    }
    Entry* p = list->get();
 8014d80:	6938      	ldr	r0, [r7, #16]
 8014d82:	f000 f881 	bl	8014e88 <_ZNK6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE3getEv>
 8014d86:	6178      	str	r0, [r7, #20]
    while (p)
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d012      	beq.n	8014db4 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x60>
    {
        if (p->descriptor.match(kind, dtid))
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	3308      	adds	r3, #8
 8014d92:	7af9      	ldrb	r1, [r7, #11]
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	4618      	mov	r0, r3
 8014d98:	f009 f867 	bl	801de6a <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindENS_10DataTypeIDE>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d002      	beq.n	8014da8 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x54>
        {
            return &p->descriptor;
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	3308      	adds	r3, #8
 8014da6:	e006      	b.n	8014db6 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x62>
        }
        p = p->getNextListNode();
 8014da8:	697b      	ldr	r3, [r7, #20]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f000 f878 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014db0:	6178      	str	r0, [r7, #20]
    while (p)
 8014db2:	e7e9      	b.n	8014d88 <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindENS_10DataTypeIDE+0x34>
    }
    return UAVCAN_NULLPTR;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3718      	adds	r7, #24
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	0802279c 	.word	0x0802279c
 8014dc4:	08029e80 	.word	0x08029e80
 8014dc8:	080227a0 	.word	0x080227a0

08014dcc <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEEC1Ev>:
    LinkedListRoot()
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f7f0 fe02 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	601a      	str	r2, [r3, #0]
    { }
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4618      	mov	r0, r3
 8014de4:	3708      	adds	r7, #8
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}

08014dea <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_>:
void LinkedListRoot<T>::remove(const T* node)
 8014dea:	b590      	push	{r4, r7, lr}
 8014dec:	b085      	sub	sp, #20
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	6078      	str	r0, [r7, #4]
 8014df2:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d041      	beq.n	8014e80 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x96>
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d03e      	beq.n	8014e80 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x96>
    if (root_ == node)
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	683a      	ldr	r2, [r7, #0]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d108      	bne.n	8014e1e <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x34>
        root_ = root_->getNextListNode();
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4618      	mov	r0, r3
 8014e12:	f000 f845 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014e16:	4602      	mov	r2, r0
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	601a      	str	r2, [r3, #0]
 8014e1c:	e031      	b.n	8014e82 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x98>
        T* p = root_;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	4618      	mov	r0, r3
 8014e28:	f000 f83a 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	bf14      	ite	ne
 8014e32:	2301      	movne	r3, #1
 8014e34:	2300      	moveq	r3, #0
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d022      	beq.n	8014e82 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x98>
            if (p->getNextListNode() == node)
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f000 f82e 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014e44:	4602      	mov	r2, r0
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	bf0c      	ite	eq
 8014e4c:	2301      	moveq	r3, #1
 8014e4e:	2300      	movne	r3, #0
 8014e50:	b2db      	uxtb	r3, r3
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d00e      	beq.n	8014e74 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x8a>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 8014e56:	68fc      	ldr	r4, [r7, #12]
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f000 f820 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014e60:	4603      	mov	r3, r0
 8014e62:	4618      	mov	r0, r3
 8014e64:	f000 f81c 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	f000 f891 	bl	8014f94 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15setNextListNodeEPS2_>
                break;
 8014e72:	e006      	b.n	8014e82 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x98>
            p = p->getNextListNode();
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	4618      	mov	r0, r3
 8014e78:	f000 f812 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014e7c:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 8014e7e:	e7d1      	b.n	8014e24 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_+0x3a>
        return;
 8014e80:	bf00      	nop
}
 8014e82:	3714      	adds	r7, #20
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd90      	pop	{r4, r7, pc}

08014e88 <_ZNK6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE3getEv>:
    T* get() const { return root_; }
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4618      	mov	r0, r3
 8014e96:	370c      	adds	r7, #12
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 8014ea0:	b480      	push	{r7}
 8014ea2:	b083      	sub	sp, #12
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4618      	mov	r0, r3
 8014eae:	370c      	adds	r7, #12
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr

08014eb8 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_>:
void LinkedListRoot<T>::insertBefore(T* node, Predicate predicate)
 8014eb8:	b590      	push	{r4, r7, lr}
 8014eba:	b087      	sub	sp, #28
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	60f8      	str	r0, [r7, #12]
 8014ec0:	60b9      	str	r1, [r7, #8]
 8014ec2:	607a      	str	r2, [r7, #4]
    if (node == UAVCAN_NULLPTR)
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d105      	bne.n	8014ed6 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0x1e>
        UAVCAN_ASSERT(0);
 8014eca:	4b2f      	ldr	r3, [pc, #188]	; (8014f88 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0xd0>)
 8014ecc:	4a2f      	ldr	r2, [pc, #188]	; (8014f8c <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0xd4>)
 8014ece:	2178      	movs	r1, #120	; 0x78
 8014ed0:	482f      	ldr	r0, [pc, #188]	; (8014f90 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0xd8>)
 8014ed2:	f00b fb5b 	bl	802058c <__assert_func>
    remove(node);
 8014ed6:	68b9      	ldr	r1, [r7, #8]
 8014ed8:	68f8      	ldr	r0, [r7, #12]
 8014eda:	f7ff ff86 	bl	8014dea <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE6removeEPKS2_>
    if (root_ == UAVCAN_NULLPTR || predicate(root_))
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d009      	beq.n	8014efa <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0x42>
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	1d3b      	adds	r3, r7, #4
 8014eec:	4611      	mov	r1, r2
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7ff fd2a 	bl	8014948 <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d001      	beq.n	8014efe <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0x46>
 8014efa:	2301      	movs	r3, #1
 8014efc:	e000      	b.n	8014f00 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0x48>
 8014efe:	2300      	movs	r3, #0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00a      	beq.n	8014f1a <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0x62>
        node->setNextListNode(root_);
 8014f04:	68ba      	ldr	r2, [r7, #8]
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	4610      	mov	r0, r2
 8014f0e:	f000 f841 	bl	8014f94 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15setNextListNodeEPS2_>
        root_ = node;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	68ba      	ldr	r2, [r7, #8]
 8014f16:	601a      	str	r2, [r3, #0]
}
 8014f18:	e031      	b.n	8014f7e <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0xc6>
        T* p = root_;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	617b      	str	r3, [r7, #20]
        while (p->getNextListNode())
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7ff ffbc 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	bf14      	ite	ne
 8014f2e:	2301      	movne	r3, #1
 8014f30:	2300      	moveq	r3, #0
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d013      	beq.n	8014f60 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0xa8>
            if (predicate(p->getNextListNode()))
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7ff ffb0 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014f40:	4602      	mov	r2, r0
 8014f42:	1d3b      	adds	r3, r7, #4
 8014f44:	4611      	mov	r1, r2
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7ff fcfe 	bl	8014948 <_ZNK6uavcan22GlobalDataTypeRegistry24EntryInsertionComparatorclEPKNS0_5EntryE>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d105      	bne.n	8014f5e <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0xa6>
            p = p->getNextListNode();
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7ff ffa3 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014f5a:	6178      	str	r0, [r7, #20]
        while (p->getNextListNode())
 8014f5c:	e7e0      	b.n	8014f20 <_ZN6uavcan14LinkedListRootINS_22GlobalDataTypeRegistry5EntryEE12insertBeforeINS1_24EntryInsertionComparatorEEEvPS2_T_+0x68>
                break;
 8014f5e:	bf00      	nop
        node->setNextListNode(p->getNextListNode());
 8014f60:	68bc      	ldr	r4, [r7, #8]
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7ff ff9b 	bl	8014ea0 <_ZNK6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15getNextListNodeEv>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f000 f810 	bl	8014f94 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15setNextListNodeEPS2_>
        p->setNextListNode(node);
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	68b9      	ldr	r1, [r7, #8]
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f000 f80b 	bl	8014f94 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15setNextListNodeEPS2_>
}
 8014f7e:	bf00      	nop
 8014f80:	371c      	adds	r7, #28
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd90      	pop	{r4, r7, pc}
 8014f86:	bf00      	nop
 8014f88:	0802279c 	.word	0x0802279c
 8014f8c:	08029cdc 	.word	0x08029cdc
 8014f90:	08022828 	.word	0x08022828

08014f94 <_ZN6uavcan14LinkedListNodeINS_22GlobalDataTypeRegistry5EntryEE15setNextListNodeEPS2_>:
    void setNextListNode(T* node)
 8014f94:	b480      	push	{r7}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
 8014f9c:	6039      	str	r1, [r7, #0]
        next_ = node;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	683a      	ldr	r2, [r7, #0]
 8014fa2:	601a      	str	r2, [r3, #0]
    }
 8014fa4:	bf00      	nop
 8014fa6:	370c      	adds	r7, #12
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr

08014fb0 <_ZN6uavcan10Dispatcher14getSystemClockEv>:
    ISystemClock& getSystemClock() { return sysclock_; }
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	370c      	adds	r7, #12
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr

08014fca <_ZNK6uavcan15DeadlineHandler11getDeadlineEv>:
    MonotonicTime getDeadline() const { return deadline_; }
 8014fca:	b480      	push	{r7}
 8014fcc:	b083      	sub	sp, #12
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	6078      	str	r0, [r7, #4]
 8014fd2:	6039      	str	r1, [r7, #0]
 8014fd4:	687a      	ldr	r2, [r7, #4]
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	3308      	adds	r3, #8
 8014fda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014fde:	e882 0003 	stmia.w	r2, {r0, r1}
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	370c      	adds	r7, #12
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fec:	4770      	bx	lr

08014fee <_ZN6uavcan9Scheduler16InsideSpinSetterC1ERS0_>:
        InsideSpinSetter(Scheduler& o)
 8014fee:	b480      	push	{r7}
 8014ff0:	b083      	sub	sp, #12
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
 8014ff6:	6039      	str	r1, [r7, #0]
            : owner(o)
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	683a      	ldr	r2, [r7, #0]
 8014ffc:	601a      	str	r2, [r3, #0]
            owner.inside_spin_ = true;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	2201      	movs	r2, #1
 8015004:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
        }
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	4618      	mov	r0, r3
 801500c:	370c      	adds	r7, #12
 801500e:	46bd      	mov	sp, r7
 8015010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015014:	4770      	bx	lr

08015016 <_ZN6uavcan9Scheduler16InsideSpinSetterD1Ev>:
        ~InsideSpinSetter() { owner.inside_spin_ = false; }
 8015016:	b480      	push	{r7}
 8015018:	b083      	sub	sp, #12
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	2200      	movs	r2, #0
 8015024:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	4618      	mov	r0, r3
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr

08015036 <_ZN6uavcan9Scheduler20getDeadlineSchedulerEv>:
    DeadlineScheduler& getDeadlineScheduler() { return deadline_scheduler_; }
 8015036:	b480      	push	{r7}
 8015038:	b083      	sub	sp, #12
 801503a:	af00      	add	r7, sp, #0
 801503c:	6078      	str	r0, [r7, #4]
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	3304      	adds	r3, #4
 8015042:	4618      	mov	r0, r3
 8015044:	370c      	adds	r7, #12
 8015046:	46bd      	mov	sp, r7
 8015048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504c:	4770      	bx	lr

0801504e <_ZN6uavcan9Scheduler14getSystemClockEv>:
    ISystemClock& getSystemClock()         { return dispatcher_.getSystemClock(); }
 801504e:	b580      	push	{r7, lr}
 8015050:	b082      	sub	sp, #8
 8015052:	af00      	add	r7, sp, #0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	3310      	adds	r3, #16
 801505a:	4618      	mov	r0, r3
 801505c:	f7ff ffa8 	bl	8014fb0 <_ZN6uavcan10Dispatcher14getSystemClockEv>
 8015060:	4603      	mov	r3, r0
 8015062:	4618      	mov	r0, r3
 8015064:	3708      	adds	r7, #8
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
	...

0801506c <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE>:
{
/*
 * MonotonicDeadlineHandler
 */
void DeadlineHandler::startWithDeadline(MonotonicTime deadline)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!deadline.isZero());
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	4618      	mov	r0, r3
 801507a:	f7f3 fb77 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 801507e:	4603      	mov	r3, r0
 8015080:	f083 0301 	eor.w	r3, r3, #1
 8015084:	b2db      	uxtb	r3, r3
 8015086:	2b00      	cmp	r3, #0
 8015088:	d105      	bne.n	8015096 <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE+0x2a>
 801508a:	4b0f      	ldr	r3, [pc, #60]	; (80150c8 <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE+0x5c>)
 801508c:	4a0f      	ldr	r2, [pc, #60]	; (80150cc <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE+0x60>)
 801508e:	2110      	movs	r1, #16
 8015090:	480f      	ldr	r0, [pc, #60]	; (80150d0 <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE+0x64>)
 8015092:	f00b fa7b 	bl	802058c <__assert_func>
    stop();
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f000 f845 	bl	8015126 <_ZN6uavcan15DeadlineHandler4stopEv>
    deadline_ = deadline;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	3308      	adds	r3, #8
 80150a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150a6:	e883 0003 	stmia.w	r3, {r0, r1}
    scheduler_.getDeadlineScheduler().add(this);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	691b      	ldr	r3, [r3, #16]
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7ff ffc1 	bl	8015036 <_ZN6uavcan9Scheduler20getDeadlineSchedulerEv>
 80150b4:	4603      	mov	r3, r0
 80150b6:	6879      	ldr	r1, [r7, #4]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f000 f897 	bl	80151ec <_ZN6uavcan17DeadlineScheduler3addEPNS_15DeadlineHandlerE>
}
 80150be:	bf00      	nop
 80150c0:	3708      	adds	r7, #8
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	08022870 	.word	0x08022870
 80150cc:	08029ef8 	.word	0x08029ef8
 80150d0:	08022884 	.word	0x08022884

080150d4 <_ZN6uavcan15DeadlineHandler14startWithDelayENS_17MonotonicDurationE>:

void DeadlineHandler::startWithDelay(MonotonicDuration delay)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b086      	sub	sp, #24
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	6039      	str	r1, [r7, #0]
    startWithDeadline(scheduler_.getMonotonicTime() + delay);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	691a      	ldr	r2, [r3, #16]
 80150e2:	f107 0310 	add.w	r3, r7, #16
 80150e6:	4611      	mov	r1, r2
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7f1 fbf6 	bl	80068da <_ZNK6uavcan9Scheduler16getMonotonicTimeEv>
 80150ee:	f107 0308 	add.w	r3, r7, #8
 80150f2:	f107 0110 	add.w	r1, r7, #16
 80150f6:	683a      	ldr	r2, [r7, #0]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7f3 fc2e 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 80150fe:	f107 0308 	add.w	r3, r7, #8
 8015102:	4619      	mov	r1, r3
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7ff ffb1 	bl	801506c <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE>
 801510a:	f107 0308 	add.w	r3, r7, #8
 801510e:	4618      	mov	r0, r3
 8015110:	f7f1 f800 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015114:	f107 0310 	add.w	r3, r7, #16
 8015118:	4618      	mov	r0, r3
 801511a:	f7f0 fffb 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
}
 801511e:	bf00      	nop
 8015120:	3718      	adds	r7, #24
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <_ZN6uavcan15DeadlineHandler4stopEv>:

void DeadlineHandler::stop()
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b082      	sub	sp, #8
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
    scheduler_.getDeadlineScheduler().remove(this);
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	691b      	ldr	r3, [r3, #16]
 8015132:	4618      	mov	r0, r3
 8015134:	f7ff ff7f 	bl	8015036 <_ZN6uavcan9Scheduler20getDeadlineSchedulerEv>
 8015138:	4603      	mov	r3, r0
 801513a:	6879      	ldr	r1, [r7, #4]
 801513c:	4618      	mov	r0, r3
 801513e:	f000 f891 	bl	8015264 <_ZN6uavcan17DeadlineScheduler6removeEPNS_15DeadlineHandlerE>
}
 8015142:	bf00      	nop
 8015144:	3708      	adds	r7, #8
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}

0801514a <_ZNK6uavcan15DeadlineHandler9isRunningEv>:

bool DeadlineHandler::isRunning() const
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b082      	sub	sp, #8
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
    return scheduler_.getDeadlineScheduler().doesExist(this);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	691b      	ldr	r3, [r3, #16]
 8015156:	4618      	mov	r0, r3
 8015158:	f7ff ff6d 	bl	8015036 <_ZN6uavcan9Scheduler20getDeadlineSchedulerEv>
 801515c:	4603      	mov	r3, r0
 801515e:	6879      	ldr	r1, [r7, #4]
 8015160:	4618      	mov	r0, r3
 8015162:	f000 f89f 	bl	80152a4 <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE>
 8015166:	4603      	mov	r3, r0
}
 8015168:	4618      	mov	r0, r3
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <_ZN6uavcan43MonotonicDeadlineHandlerInsertionComparatorC1ENS_13MonotonicTimeE>:
 * MonotonicDeadlineScheduler
 */
struct MonotonicDeadlineHandlerInsertionComparator
{
    const MonotonicTime ts;
    explicit MonotonicDeadlineHandlerInsertionComparator(MonotonicTime arg_ts) : ts(arg_ts) { }
 8015170:	b480      	push	{r7}
 8015172:	b083      	sub	sp, #12
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	6039      	str	r1, [r7, #0]
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	683a      	ldr	r2, [r7, #0]
 801517e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015182:	e883 0003 	stmia.w	r3, {r0, r1}
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	4618      	mov	r0, r3
 801518a:	370c      	adds	r7, #12
 801518c:	46bd      	mov	sp, r7
 801518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015192:	4770      	bx	lr

08015194 <_ZNK6uavcan43MonotonicDeadlineHandlerInsertionComparatorclEPKNS_15DeadlineHandlerE>:
    bool operator()(const DeadlineHandler* t) const
 8015194:	b590      	push	{r4, r7, lr}
 8015196:	b085      	sub	sp, #20
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
    {
        return t->getDeadline() > ts;
 801519e:	f107 0308 	add.w	r3, r7, #8
 80151a2:	6839      	ldr	r1, [r7, #0]
 80151a4:	4618      	mov	r0, r3
 80151a6:	f7ff ff10 	bl	8014fca <_ZNK6uavcan15DeadlineHandler11getDeadlineEv>
 80151aa:	687a      	ldr	r2, [r7, #4]
 80151ac:	f107 0308 	add.w	r3, r7, #8
 80151b0:	4611      	mov	r1, r2
 80151b2:	4618      	mov	r0, r3
 80151b4:	f000 fa8e 	bl	80156d4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgtERKS1_>
 80151b8:	4603      	mov	r3, r0
 80151ba:	461c      	mov	r4, r3
 80151bc:	f107 0308 	add.w	r3, r7, #8
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7f0 ffa7 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80151c6:	4623      	mov	r3, r4
    }
 80151c8:	4618      	mov	r0, r3
 80151ca:	3714      	adds	r7, #20
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd90      	pop	{r4, r7, pc}

080151d0 <_ZN6uavcan43MonotonicDeadlineHandlerInsertionComparatorD1Ev>:
struct MonotonicDeadlineHandlerInsertionComparator
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	4618      	mov	r0, r3
 80151dc:	f7f0 ff9a 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	4618      	mov	r0, r3
 80151e4:	3708      	adds	r7, #8
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
	...

080151ec <_ZN6uavcan17DeadlineScheduler3addEPNS_15DeadlineHandlerE>:
};

void DeadlineScheduler::add(DeadlineHandler* mdh)
{
 80151ec:	b5b0      	push	{r4, r5, r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(mdh);
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d105      	bne.n	8015208 <_ZN6uavcan17DeadlineScheduler3addEPNS_15DeadlineHandlerE+0x1c>
 80151fc:	4b16      	ldr	r3, [pc, #88]	; (8015258 <_ZN6uavcan17DeadlineScheduler3addEPNS_15DeadlineHandlerE+0x6c>)
 80151fe:	4a17      	ldr	r2, [pc, #92]	; (801525c <_ZN6uavcan17DeadlineScheduler3addEPNS_15DeadlineHandlerE+0x70>)
 8015200:	2134      	movs	r1, #52	; 0x34
 8015202:	4817      	ldr	r0, [pc, #92]	; (8015260 <_ZN6uavcan17DeadlineScheduler3addEPNS_15DeadlineHandlerE+0x74>)
 8015204:	f00b f9c2 	bl	802058c <__assert_func>
    handlers_.insertBefore(mdh, MonotonicDeadlineHandlerInsertionComparator(mdh->getDeadline()));
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	1d1c      	adds	r4, r3, #4
 801520c:	683d      	ldr	r5, [r7, #0]
 801520e:	683a      	ldr	r2, [r7, #0]
 8015210:	f107 0310 	add.w	r3, r7, #16
 8015214:	4611      	mov	r1, r2
 8015216:	4618      	mov	r0, r3
 8015218:	f7ff fed7 	bl	8014fca <_ZNK6uavcan15DeadlineHandler11getDeadlineEv>
 801521c:	f107 0210 	add.w	r2, r7, #16
 8015220:	f107 0308 	add.w	r3, r7, #8
 8015224:	4611      	mov	r1, r2
 8015226:	4618      	mov	r0, r3
 8015228:	f7ff ffa2 	bl	8015170 <_ZN6uavcan43MonotonicDeadlineHandlerInsertionComparatorC1ENS_13MonotonicTimeE>
 801522c:	f107 0308 	add.w	r3, r7, #8
 8015230:	461a      	mov	r2, r3
 8015232:	4629      	mov	r1, r5
 8015234:	4620      	mov	r0, r4
 8015236:	f000 fa65 	bl	8015704 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_>
 801523a:	f107 0308 	add.w	r3, r7, #8
 801523e:	4618      	mov	r0, r3
 8015240:	f7ff ffc6 	bl	80151d0 <_ZN6uavcan43MonotonicDeadlineHandlerInsertionComparatorD1Ev>
 8015244:	f107 0310 	add.w	r3, r7, #16
 8015248:	4618      	mov	r0, r3
 801524a:	f7f0 ff63 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
}
 801524e:	bf00      	nop
 8015250:	3718      	adds	r7, #24
 8015252:	46bd      	mov	sp, r7
 8015254:	bdb0      	pop	{r4, r5, r7, pc}
 8015256:	bf00      	nop
 8015258:	080228fc 	.word	0x080228fc
 801525c:	08029f40 	.word	0x08029f40
 8015260:	08022884 	.word	0x08022884

08015264 <_ZN6uavcan17DeadlineScheduler6removeEPNS_15DeadlineHandlerE>:

void DeadlineScheduler::remove(DeadlineHandler* mdh)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(mdh);
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d105      	bne.n	8015280 <_ZN6uavcan17DeadlineScheduler6removeEPNS_15DeadlineHandlerE+0x1c>
 8015274:	4b08      	ldr	r3, [pc, #32]	; (8015298 <_ZN6uavcan17DeadlineScheduler6removeEPNS_15DeadlineHandlerE+0x34>)
 8015276:	4a09      	ldr	r2, [pc, #36]	; (801529c <_ZN6uavcan17DeadlineScheduler6removeEPNS_15DeadlineHandlerE+0x38>)
 8015278:	213a      	movs	r1, #58	; 0x3a
 801527a:	4809      	ldr	r0, [pc, #36]	; (80152a0 <_ZN6uavcan17DeadlineScheduler6removeEPNS_15DeadlineHandlerE+0x3c>)
 801527c:	f00b f986 	bl	802058c <__assert_func>
    handlers_.remove(mdh);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	3304      	adds	r3, #4
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	4611      	mov	r1, r2
 8015288:	4618      	mov	r0, r3
 801528a:	f000 faad 	bl	80157e8 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_>
}
 801528e:	bf00      	nop
 8015290:	3708      	adds	r7, #8
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	080228fc 	.word	0x080228fc
 801529c:	0802a020 	.word	0x0802a020
 80152a0:	08022884 	.word	0x08022884

080152a4 <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE>:

bool DeadlineScheduler::doesExist(const DeadlineHandler* mdh) const
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(mdh);
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d105      	bne.n	80152c0 <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x1c>
 80152b4:	4b10      	ldr	r3, [pc, #64]	; (80152f8 <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x54>)
 80152b6:	4a11      	ldr	r2, [pc, #68]	; (80152fc <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x58>)
 80152b8:	2140      	movs	r1, #64	; 0x40
 80152ba:	4811      	ldr	r0, [pc, #68]	; (8015300 <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x5c>)
 80152bc:	f00b f966 	bl	802058c <__assert_func>
    const DeadlineHandler* p = handlers_.get();
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	3304      	adds	r3, #4
 80152c4:	4618      	mov	r0, r3
 80152c6:	f000 fae5 	bl	8015894 <_ZNK6uavcan14LinkedListRootINS_15DeadlineHandlerEE3getEv>
 80152ca:	60f8      	str	r0, [r7, #12]
#if UAVCAN_DEBUG
    MonotonicTime prev_deadline;
#endif
    while (p)
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d00c      	beq.n	80152ec <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x48>
        {
            std::abort();
        }
        prev_deadline = p->getDeadline();
#endif
        if (p == mdh)
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d101      	bne.n	80152de <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x3a>
        {
            return true;
 80152da:	2301      	movs	r3, #1
 80152dc:	e007      	b.n	80152ee <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x4a>
        }
        p = p->getNextListNode();
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	3304      	adds	r3, #4
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 fae2 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 80152e8:	60f8      	str	r0, [r7, #12]
    while (p)
 80152ea:	e7ef      	b.n	80152cc <_ZNK6uavcan17DeadlineScheduler9doesExistEPKNS_15DeadlineHandlerE+0x28>
    }
    return false;
 80152ec:	2300      	movs	r3, #0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3710      	adds	r7, #16
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	080228fc 	.word	0x080228fc
 80152fc:	0802a064 	.word	0x0802a064
 8015300:	08022884 	.word	0x08022884

08015304 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE>:

MonotonicTime DeadlineScheduler::pollAndGetMonotonicTime(ISystemClock& sysclock)
{
 8015304:	b590      	push	{r4, r7, lr}
 8015306:	b08d      	sub	sp, #52	; 0x34
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	607a      	str	r2, [r7, #4]
    while (true)
    {
        DeadlineHandler* const mdh = handlers_.get();
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	3304      	adds	r3, #4
 8015314:	4618      	mov	r0, r3
 8015316:	f000 fabd 	bl	8015894 <_ZNK6uavcan14LinkedListRootINS_15DeadlineHandlerEE3getEv>
 801531a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (!mdh)
 801531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531e:	2b00      	cmp	r3, #0
 8015320:	d108      	bne.n	8015334 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE+0x30>
        {
            return sysclock.getMonotonic();
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	3308      	adds	r3, #8
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	68fa      	ldr	r2, [r7, #12]
 801532c:	6879      	ldr	r1, [r7, #4]
 801532e:	4610      	mov	r0, r2
 8015330:	4798      	blx	r3
 8015332:	e04e      	b.n	80153d2 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE+0xce>
        {
            UAVCAN_ASSERT(mdh->getDeadline() <= mdh->getNextListNode()->getDeadline());
        }
#endif

        const MonotonicTime ts = sysclock.getMonotonic();
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	3308      	adds	r3, #8
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	f107 0210 	add.w	r2, r7, #16
 8015340:	6879      	ldr	r1, [r7, #4]
 8015342:	4610      	mov	r0, r2
 8015344:	4798      	blx	r3
        if (ts < mdh->getDeadline())
 8015346:	f107 0318 	add.w	r3, r7, #24
 801534a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801534c:	4618      	mov	r0, r3
 801534e:	f7ff fe3c 	bl	8014fca <_ZNK6uavcan15DeadlineHandler11getDeadlineEv>
 8015352:	f107 0218 	add.w	r2, r7, #24
 8015356:	f107 0310 	add.w	r3, r7, #16
 801535a:	4611      	mov	r1, r2
 801535c:	4618      	mov	r0, r3
 801535e:	f000 fab1 	bl	80158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>
 8015362:	4603      	mov	r3, r0
 8015364:	461c      	mov	r4, r3
 8015366:	f107 0318 	add.w	r3, r7, #24
 801536a:	4618      	mov	r0, r3
 801536c:	f7f0 fed2 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015370:	2c00      	cmp	r4, #0
 8015372:	d009      	beq.n	8015388 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE+0x84>
        {
            return ts;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	461a      	mov	r2, r3
 8015378:	f107 0310 	add.w	r3, r7, #16
 801537c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015380:	e882 0003 	stmia.w	r2, {r0, r1}
 8015384:	2400      	movs	r4, #0
 8015386:	e01b      	b.n	80153c0 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE+0xbc>
        }

        handlers_.remove(mdh);
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	3304      	adds	r3, #4
 801538c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801538e:	4618      	mov	r0, r3
 8015390:	f000 fa2a 	bl	80157e8 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_>
        mdh->handleDeadline(ts);   // This handler can be re-registered immediately
 8015394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	3308      	adds	r3, #8
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	f107 0220 	add.w	r2, r7, #32
 80153a0:	f107 0110 	add.w	r1, r7, #16
 80153a4:	c903      	ldmia	r1, {r0, r1}
 80153a6:	e882 0003 	stmia.w	r2, {r0, r1}
 80153aa:	f107 0220 	add.w	r2, r7, #32
 80153ae:	4611      	mov	r1, r2
 80153b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153b2:	4798      	blx	r3
 80153b4:	f107 0320 	add.w	r3, r7, #32
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7f0 feab 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80153be:	2401      	movs	r4, #1
 80153c0:	f107 0310 	add.w	r3, r7, #16
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7f0 fea5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80153ca:	2c01      	cmp	r4, #1
 80153cc:	d101      	bne.n	80153d2 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE+0xce>
        const MonotonicTime ts = sysclock.getMonotonic();
 80153ce:	bf00      	nop
    }
 80153d0:	e79e      	b.n	8015310 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE+0xc>
    UAVCAN_ASSERT(0);
    return MonotonicTime();
}
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	3734      	adds	r7, #52	; 0x34
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd90      	pop	{r4, r7, pc}

080153da <_ZNK6uavcan17DeadlineScheduler19getEarliestDeadlineEv>:

MonotonicTime DeadlineScheduler::getEarliestDeadline() const
{
 80153da:	b580      	push	{r7, lr}
 80153dc:	b084      	sub	sp, #16
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
 80153e2:	6039      	str	r1, [r7, #0]
    const DeadlineHandler* const mdh = handlers_.get();
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	3304      	adds	r3, #4
 80153e8:	4618      	mov	r0, r3
 80153ea:	f000 fa53 	bl	8015894 <_ZNK6uavcan14LinkedListRootINS_15DeadlineHandlerEE3getEv>
 80153ee:	60f8      	str	r0, [r7, #12]
    if (mdh)
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d005      	beq.n	8015402 <_ZNK6uavcan17DeadlineScheduler19getEarliestDeadlineEv+0x28>
    {
        return mdh->getDeadline();
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	68f9      	ldr	r1, [r7, #12]
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ff fde5 	bl	8014fca <_ZNK6uavcan15DeadlineHandler11getDeadlineEv>
 8015400:	e003      	b.n	801540a <_ZNK6uavcan17DeadlineScheduler19getEarliestDeadlineEv+0x30>
    }
    return MonotonicTime::getMax();
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	4618      	mov	r0, r3
 8015406:	f000 fa74 	bl	80158f2 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6getMaxEv>
}
 801540a:	6878      	ldr	r0, [r7, #4]
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}

08015412 <_ZNK6uavcan9Scheduler29computeDispatcherSpinDeadlineENS_13MonotonicTimeE>:

/*
 * Scheduler
 */
MonotonicTime Scheduler::computeDispatcherSpinDeadline(MonotonicTime spin_deadline) const
{
 8015412:	b590      	push	{r4, r7, lr}
 8015414:	b08d      	sub	sp, #52	; 0x34
 8015416:	af00      	add	r7, sp, #0
 8015418:	60f8      	str	r0, [r7, #12]
 801541a:	60b9      	str	r1, [r7, #8]
 801541c:	607a      	str	r2, [r7, #4]
    const MonotonicTime earliest = min(deadline_scheduler_.getEarliestDeadline(), spin_deadline);
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	1d1a      	adds	r2, r3, #4
 8015422:	f107 0320 	add.w	r3, r7, #32
 8015426:	4611      	mov	r1, r2
 8015428:	4618      	mov	r0, r3
 801542a:	f7ff ffd6 	bl	80153da <_ZNK6uavcan17DeadlineScheduler19getEarliestDeadlineEv>
 801542e:	f107 0320 	add.w	r3, r7, #32
 8015432:	6879      	ldr	r1, [r7, #4]
 8015434:	4618      	mov	r0, r3
 8015436:	f000 fa6e 	bl	8015916 <_ZN6uavcan3minINS_13MonotonicTimeEEERKT_S4_S4_>
 801543a:	4602      	mov	r2, r0
 801543c:	f107 0318 	add.w	r3, r7, #24
 8015440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015444:	e883 0003 	stmia.w	r3, {r0, r1}
 8015448:	f107 0320 	add.w	r3, r7, #32
 801544c:	4618      	mov	r0, r3
 801544e:	f7f0 fe61 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    const MonotonicTime ts = getMonotonicTime();
 8015452:	f107 0310 	add.w	r3, r7, #16
 8015456:	68b9      	ldr	r1, [r7, #8]
 8015458:	4618      	mov	r0, r3
 801545a:	f7f1 fa3e 	bl	80068da <_ZNK6uavcan9Scheduler16getMonotonicTimeEv>
    if (earliest > ts)
 801545e:	f107 0210 	add.w	r2, r7, #16
 8015462:	f107 0318 	add.w	r3, r7, #24
 8015466:	4611      	mov	r1, r2
 8015468:	4618      	mov	r0, r3
 801546a:	f000 f933 	bl	80156d4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgtERKS1_>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	d024      	beq.n	80154be <_ZNK6uavcan9Scheduler29computeDispatcherSpinDeadlineENS_13MonotonicTimeE+0xac>
    {
        if (earliest - ts > deadline_resolution_)
 8015474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015478:	f107 0210 	add.w	r2, r7, #16
 801547c:	f107 0118 	add.w	r1, r7, #24
 8015480:	4618      	mov	r0, r3
 8015482:	f000 fa5c 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	f503 7288 	add.w	r2, r3, #272	; 0x110
 801548c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015490:	4611      	mov	r1, r2
 8015492:	4618      	mov	r0, r3
 8015494:	f000 fa8b 	bl	80159ae <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEgtERKS1_>
 8015498:	4603      	mov	r3, r0
 801549a:	461c      	mov	r4, r3
 801549c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7f0 ff0a 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 80154a6:	2c00      	cmp	r4, #0
 80154a8:	d009      	beq.n	80154be <_ZNK6uavcan9Scheduler29computeDispatcherSpinDeadlineENS_13MonotonicTimeE+0xac>
        {
            return ts + deadline_resolution_;
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f107 0110 	add.w	r1, r7, #16
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7f3 fa4f 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 80154bc:	e007      	b.n	80154ce <_ZNK6uavcan9Scheduler29computeDispatcherSpinDeadlineENS_13MonotonicTimeE+0xbc>
        }
    }
    return earliest;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	461a      	mov	r2, r3
 80154c2:	f107 0318 	add.w	r3, r7, #24
 80154c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80154ca:	e882 0003 	stmia.w	r2, {r0, r1}
    const MonotonicTime ts = getMonotonicTime();
 80154ce:	f107 0310 	add.w	r3, r7, #16
 80154d2:	4618      	mov	r0, r3
 80154d4:	f7f0 fe1e 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    const MonotonicTime earliest = min(deadline_scheduler_.getEarliestDeadline(), spin_deadline);
 80154d8:	f107 0318 	add.w	r3, r7, #24
 80154dc:	4618      	mov	r0, r3
 80154de:	f7f0 fe19 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
}
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	3734      	adds	r7, #52	; 0x34
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd90      	pop	{r4, r7, pc}

080154ea <_ZN6uavcan9Scheduler11pollCleanupENS_13MonotonicTimeEm>:

void Scheduler::pollCleanup(MonotonicTime mono_ts, uint32_t num_frames_processed_with_last_spin)
{
 80154ea:	b590      	push	{r4, r7, lr}
 80154ec:	b08b      	sub	sp, #44	; 0x2c
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	60f8      	str	r0, [r7, #12]
 80154f2:	60b9      	str	r1, [r7, #8]
 80154f4:	607a      	str	r2, [r7, #4]
    // cleanup will be performed less frequently if the stack handles more frames per second
    const MonotonicTime deadline = prev_cleanup_ts_ + cleanup_period_ * (num_frames_processed_with_last_spin + 1);
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f503 718c 	add.w	r1, r3, #280	; 0x118
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	1c5a      	adds	r2, r3, #1
 8015506:	f107 0318 	add.w	r3, r7, #24
 801550a:	4618      	mov	r0, r3
 801550c:	f000 fa66 	bl	80159dc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEmlImEES1_T_>
 8015510:	f107 0310 	add.w	r3, r7, #16
 8015514:	f107 0218 	add.w	r2, r7, #24
 8015518:	4621      	mov	r1, r4
 801551a:	4618      	mov	r0, r3
 801551c:	f7f3 fa1d 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 8015520:	f107 0318 	add.w	r3, r7, #24
 8015524:	4618      	mov	r0, r3
 8015526:	f7f0 fec8 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    if (mono_ts > deadline)
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	f107 0210 	add.w	r2, r7, #16
 8015530:	4611      	mov	r1, r2
 8015532:	4618      	mov	r0, r3
 8015534:	f000 f8ce 	bl	80156d4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgtERKS1_>
 8015538:	4603      	mov	r3, r0
 801553a:	2b00      	cmp	r3, #0
 801553c:	d01b      	beq.n	8015576 <_ZN6uavcan9Scheduler11pollCleanupENS_13MonotonicTimeEm+0x8c>
    {
        //UAVCAN_TRACE("Scheduler", "Cleanup with %u processed frames", num_frames_processed_with_last_spin);
        prev_cleanup_ts_ = mono_ts;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	68ba      	ldr	r2, [r7, #8]
 8015542:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015546:	e892 0003 	ldmia.w	r2, {r0, r1}
 801554a:	e883 0003 	stmia.w	r3, {r0, r1}
        dispatcher_.cleanup(mono_ts);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f103 0210 	add.w	r2, r3, #16
 8015554:	68b9      	ldr	r1, [r7, #8]
 8015556:	f107 0320 	add.w	r3, r7, #32
 801555a:	c903      	ldmia	r1, {r0, r1}
 801555c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015560:	f107 0320 	add.w	r3, r7, #32
 8015564:	4619      	mov	r1, r3
 8015566:	4610      	mov	r0, r2
 8015568:	f003 fabe 	bl	8018ae8 <_ZN6uavcan10Dispatcher7cleanupENS_13MonotonicTimeE>
 801556c:	f107 0320 	add.w	r3, r7, #32
 8015570:	4618      	mov	r0, r3
 8015572:	f7f0 fdcf 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    const MonotonicTime deadline = prev_cleanup_ts_ + cleanup_period_ * (num_frames_processed_with_last_spin + 1);
 8015576:	f107 0310 	add.w	r3, r7, #16
 801557a:	4618      	mov	r0, r3
 801557c:	f7f0 fdca 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    }
}
 8015580:	bf00      	nop
 8015582:	372c      	adds	r7, #44	; 0x2c
 8015584:	46bd      	mov	sp, r7
 8015586:	bd90      	pop	{r4, r7, pc}

08015588 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE>:

int Scheduler::spin(MonotonicTime deadline)
{
 8015588:	b590      	push	{r4, r7, lr}
 801558a:	b091      	sub	sp, #68	; 0x44
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	6039      	str	r1, [r7, #0]
    if (inside_spin_)  // Preventing recursive calls
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8015598:	2b00      	cmp	r3, #0
 801559a:	d005      	beq.n	80155a8 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x20>
    {
        UAVCAN_ASSERT(0);
 801559c:	4b49      	ldr	r3, [pc, #292]	; (80156c4 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x13c>)
 801559e:	4a4a      	ldr	r2, [pc, #296]	; (80156c8 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x140>)
 80155a0:	219f      	movs	r1, #159	; 0x9f
 80155a2:	484a      	ldr	r0, [pc, #296]	; (80156cc <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x144>)
 80155a4:	f00a fff2 	bl	802058c <__assert_func>
        return -ErrRecursiveCall;
    }
    InsideSpinSetter iss(*this);
 80155a8:	f107 031c 	add.w	r3, r7, #28
 80155ac:	6879      	ldr	r1, [r7, #4]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7ff fd1d 	bl	8014fee <_ZN6uavcan9Scheduler16InsideSpinSetterC1ERS0_>
    UAVCAN_ASSERT(inside_spin_);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d105      	bne.n	80155ca <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x42>
 80155be:	4b44      	ldr	r3, [pc, #272]	; (80156d0 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x148>)
 80155c0:	4a41      	ldr	r2, [pc, #260]	; (80156c8 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x140>)
 80155c2:	21a3      	movs	r1, #163	; 0xa3
 80155c4:	4841      	ldr	r0, [pc, #260]	; (80156cc <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x144>)
 80155c6:	f00a ffe1 	bl	802058c <__assert_func>

    int retval = 0;
 80155ca:	2300      	movs	r3, #0
 80155cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (true)
    {
        const MonotonicTime dl = computeDispatcherSpinDeadline(deadline);
 80155ce:	683a      	ldr	r2, [r7, #0]
 80155d0:	f107 0320 	add.w	r3, r7, #32
 80155d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80155d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80155dc:	f107 0310 	add.w	r3, r7, #16
 80155e0:	f107 0220 	add.w	r2, r7, #32
 80155e4:	6879      	ldr	r1, [r7, #4]
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7ff ff13 	bl	8015412 <_ZNK6uavcan9Scheduler29computeDispatcherSpinDeadlineENS_13MonotonicTimeE>
 80155ec:	f107 0320 	add.w	r3, r7, #32
 80155f0:	4618      	mov	r0, r3
 80155f2:	f7f0 fd8f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        retval = dispatcher_.spin(dl);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f103 0410 	add.w	r4, r3, #16
 80155fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015600:	f107 0210 	add.w	r2, r7, #16
 8015604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015608:	e883 0003 	stmia.w	r3, {r0, r1}
 801560c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015610:	4619      	mov	r1, r3
 8015612:	4620      	mov	r0, r4
 8015614:	f003 f97b 	bl	801890e <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE>
 8015618:	63f8      	str	r0, [r7, #60]	; 0x3c
 801561a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801561e:	4618      	mov	r0, r3
 8015620:	f7f0 fd78 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        if (retval < 0)
 8015624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015626:	2b00      	cmp	r3, #0
 8015628:	da01      	bge.n	801562e <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0xa6>
 801562a:	2400      	movs	r4, #0
        {
            break;
 801562c:	e036      	b.n	801569c <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x114>
        }

        const MonotonicTime ts = deadline_scheduler_.pollAndGetMonotonicTime(getSystemClock());
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	1d1c      	adds	r4, r3, #4
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f7ff fd0b 	bl	801504e <_ZN6uavcan9Scheduler14getSystemClockEv>
 8015638:	4602      	mov	r2, r0
 801563a:	f107 0308 	add.w	r3, r7, #8
 801563e:	4621      	mov	r1, r4
 8015640:	4618      	mov	r0, r3
 8015642:	f7ff fe5f 	bl	8015304 <_ZN6uavcan17DeadlineScheduler23pollAndGetMonotonicTimeERNS_12ISystemClockE>
        pollCleanup(ts, unsigned(retval));
 8015646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801564a:	f107 0208 	add.w	r2, r7, #8
 801564e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015652:	e883 0003 	stmia.w	r3, {r0, r1}
 8015656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801565c:	4619      	mov	r1, r3
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ff ff43 	bl	80154ea <_ZN6uavcan9Scheduler11pollCleanupENS_13MonotonicTimeEm>
 8015664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015668:	4618      	mov	r0, r3
 801566a:	f7f0 fd53 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        if (ts >= deadline)
 801566e:	f107 0308 	add.w	r3, r7, #8
 8015672:	6839      	ldr	r1, [r7, #0]
 8015674:	4618      	mov	r0, r3
 8015676:	f000 f9d0 	bl	8015a1a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgeERKS1_>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d001      	beq.n	8015684 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0xfc>
 8015680:	2400      	movs	r4, #0
        {
            break;
 8015682:	e000      	b.n	8015686 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0xfe>
 8015684:	2401      	movs	r4, #1
 8015686:	f107 0308 	add.w	r3, r7, #8
 801568a:	4618      	mov	r0, r3
 801568c:	f7f0 fd42 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015690:	2c01      	cmp	r4, #1
 8015692:	d001      	beq.n	8015698 <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x110>
 8015694:	2400      	movs	r4, #0
 8015696:	e001      	b.n	801569c <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x114>
        const MonotonicTime ts = deadline_scheduler_.pollAndGetMonotonicTime(getSystemClock());
 8015698:	bf00      	nop
 801569a:	2401      	movs	r4, #1
 801569c:	f107 0310 	add.w	r3, r7, #16
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7f0 fd37 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80156a6:	2c01      	cmp	r4, #1
 80156a8:	d101      	bne.n	80156ae <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x126>
        const MonotonicTime dl = computeDispatcherSpinDeadline(deadline);
 80156aa:	bf00      	nop
        }
    }
 80156ac:	e78f      	b.n	80155ce <_ZN6uavcan9Scheduler4spinENS_13MonotonicTimeE+0x46>

    return retval;
 80156ae:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
    InsideSpinSetter iss(*this);
 80156b0:	f107 031c 	add.w	r3, r7, #28
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7ff fcae 	bl	8015016 <_ZN6uavcan9Scheduler16InsideSpinSetterD1Ev>
 80156ba:	4623      	mov	r3, r4
}
 80156bc:	4618      	mov	r0, r3
 80156be:	3744      	adds	r7, #68	; 0x44
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd90      	pop	{r4, r7, pc}
 80156c4:	08022900 	.word	0x08022900
 80156c8:	0802a0b4 	.word	0x0802a0b4
 80156cc:	08022884 	.word	0x08022884
 80156d0:	08022904 	.word	0x08022904

080156d4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgtERKS1_>:
    bool operator>(const T& r) const { return usec_ > r.usec_; }
 80156d4:	b490      	push	{r4, r7}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80156e4:	683a      	ldr	r2, [r7, #0]
 80156e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80156ea:	42a2      	cmp	r2, r4
 80156ec:	bf08      	it	eq
 80156ee:	4299      	cmpeq	r1, r3
 80156f0:	bf34      	ite	cc
 80156f2:	2301      	movcc	r3, #1
 80156f4:	2300      	movcs	r3, #0
 80156f6:	b2db      	uxtb	r3, r3
 80156f8:	4618      	mov	r0, r3
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bc90      	pop	{r4, r7}
 8015700:	4770      	bx	lr
	...

08015704 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_>:
void LinkedListRoot<T>::insertBefore(T* node, Predicate predicate)
 8015704:	b590      	push	{r4, r7, lr}
 8015706:	b087      	sub	sp, #28
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
    if (node == UAVCAN_NULLPTR)
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d105      	bne.n	8015722 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0x1e>
        UAVCAN_ASSERT(0);
 8015716:	4b31      	ldr	r3, [pc, #196]	; (80157dc <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0xd8>)
 8015718:	4a31      	ldr	r2, [pc, #196]	; (80157e0 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0xdc>)
 801571a:	2178      	movs	r1, #120	; 0x78
 801571c:	4831      	ldr	r0, [pc, #196]	; (80157e4 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0xe0>)
 801571e:	f00a ff35 	bl	802058c <__assert_func>
    remove(node);
 8015722:	68b9      	ldr	r1, [r7, #8]
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f000 f85f 	bl	80157e8 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_>
    if (root_ == UAVCAN_NULLPTR || predicate(root_))
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d008      	beq.n	8015744 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0x40>
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4619      	mov	r1, r3
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f7ff fd2b 	bl	8015194 <_ZNK6uavcan43MonotonicDeadlineHandlerInsertionComparatorclEPKNS_15DeadlineHandlerE>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	d001      	beq.n	8015748 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0x44>
 8015744:	2301      	movs	r3, #1
 8015746:	e000      	b.n	801574a <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0x46>
 8015748:	2300      	movs	r3, #0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d00b      	beq.n	8015766 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0x62>
        node->setNextListNode(root_);
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	1d1a      	adds	r2, r3, #4
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	4619      	mov	r1, r3
 8015758:	4610      	mov	r0, r2
 801575a:	f000 f975 	bl	8015a48 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15setNextListNodeEPS1_>
        root_ = node;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	601a      	str	r2, [r3, #0]
}
 8015764:	e036      	b.n	80157d4 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0xd0>
        T* p = root_;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	617b      	str	r3, [r7, #20]
        while (p->getNextListNode())
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	3304      	adds	r3, #4
 8015770:	4618      	mov	r0, r3
 8015772:	f000 f89b 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	bf14      	ite	ne
 801577c:	2301      	movne	r3, #1
 801577e:	2300      	moveq	r3, #0
 8015780:	b2db      	uxtb	r3, r3
 8015782:	2b00      	cmp	r3, #0
 8015784:	d014      	beq.n	80157b0 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0xac>
            if (predicate(p->getNextListNode()))
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	3304      	adds	r3, #4
 801578a:	4618      	mov	r0, r3
 801578c:	f000 f88e 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015790:	4603      	mov	r3, r0
 8015792:	4619      	mov	r1, r3
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f7ff fcfd 	bl	8015194 <_ZNK6uavcan43MonotonicDeadlineHandlerInsertionComparatorclEPKNS_15DeadlineHandlerE>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d106      	bne.n	80157ae <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0xaa>
            p = p->getNextListNode();
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	3304      	adds	r3, #4
 80157a4:	4618      	mov	r0, r3
 80157a6:	f000 f881 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 80157aa:	6178      	str	r0, [r7, #20]
        while (p->getNextListNode())
 80157ac:	e7de      	b.n	801576c <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE12insertBeforeINS_43MonotonicDeadlineHandlerInsertionComparatorEEEvPS1_T_+0x68>
                break;
 80157ae:	bf00      	nop
        node->setNextListNode(p->getNextListNode());
 80157b0:	68bb      	ldr	r3, [r7, #8]
 80157b2:	1d1c      	adds	r4, r3, #4
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	3304      	adds	r3, #4
 80157b8:	4618      	mov	r0, r3
 80157ba:	f000 f877 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 80157be:	4603      	mov	r3, r0
 80157c0:	4619      	mov	r1, r3
 80157c2:	4620      	mov	r0, r4
 80157c4:	f000 f940 	bl	8015a48 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15setNextListNodeEPS1_>
        p->setNextListNode(node);
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	3304      	adds	r3, #4
 80157cc:	68b9      	ldr	r1, [r7, #8]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f000 f93a 	bl	8015a48 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15setNextListNodeEPS1_>
}
 80157d4:	bf00      	nop
 80157d6:	371c      	adds	r7, #28
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd90      	pop	{r4, r7, pc}
 80157dc:	08022900 	.word	0x08022900
 80157e0:	08029f80 	.word	0x08029f80
 80157e4:	08022914 	.word	0x08022914

080157e8 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_>:
void LinkedListRoot<T>::remove(const T* node)
 80157e8:	b590      	push	{r4, r7, lr}
 80157ea:	b085      	sub	sp, #20
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d048      	beq.n	801588c <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0xa4>
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d045      	beq.n	801588c <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0xa4>
    if (root_ == node)
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	683a      	ldr	r2, [r7, #0]
 8015806:	429a      	cmp	r2, r3
 8015808:	d109      	bne.n	801581e <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0x36>
        root_ = root_->getNextListNode();
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	3304      	adds	r3, #4
 8015810:	4618      	mov	r0, r3
 8015812:	f000 f84b 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015816:	4602      	mov	r2, r0
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	601a      	str	r2, [r3, #0]
 801581c:	e037      	b.n	801588e <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0xa6>
        T* p = root_;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	3304      	adds	r3, #4
 8015828:	4618      	mov	r0, r3
 801582a:	f000 f83f 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	bf14      	ite	ne
 8015834:	2301      	movne	r3, #1
 8015836:	2300      	moveq	r3, #0
 8015838:	b2db      	uxtb	r3, r3
 801583a:	2b00      	cmp	r3, #0
 801583c:	d027      	beq.n	801588e <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0xa6>
            if (p->getNextListNode() == node)
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	3304      	adds	r3, #4
 8015842:	4618      	mov	r0, r3
 8015844:	f000 f832 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015848:	4602      	mov	r2, r0
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	4293      	cmp	r3, r2
 801584e:	bf0c      	ite	eq
 8015850:	2301      	moveq	r3, #1
 8015852:	2300      	movne	r3, #0
 8015854:	b2db      	uxtb	r3, r3
 8015856:	2b00      	cmp	r3, #0
 8015858:	d011      	beq.n	801587e <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0x96>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	1d1c      	adds	r4, r3, #4
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	3304      	adds	r3, #4
 8015862:	4618      	mov	r0, r3
 8015864:	f000 f822 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015868:	4603      	mov	r3, r0
 801586a:	3304      	adds	r3, #4
 801586c:	4618      	mov	r0, r3
 801586e:	f000 f81d 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015872:	4603      	mov	r3, r0
 8015874:	4619      	mov	r1, r3
 8015876:	4620      	mov	r0, r4
 8015878:	f000 f8e6 	bl	8015a48 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15setNextListNodeEPS1_>
                break;
 801587c:	e007      	b.n	801588e <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0xa6>
            p = p->getNextListNode();
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	3304      	adds	r3, #4
 8015882:	4618      	mov	r0, r3
 8015884:	f000 f812 	bl	80158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>
 8015888:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 801588a:	e7cb      	b.n	8015824 <_ZN6uavcan14LinkedListRootINS_15DeadlineHandlerEE6removeEPKS1_+0x3c>
        return;
 801588c:	bf00      	nop
}
 801588e:	3714      	adds	r7, #20
 8015890:	46bd      	mov	sp, r7
 8015892:	bd90      	pop	{r4, r7, pc}

08015894 <_ZNK6uavcan14LinkedListRootINS_15DeadlineHandlerEE3getEv>:
    T* get() const { return root_; }
 8015894:	b480      	push	{r7}
 8015896:	b083      	sub	sp, #12
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	4618      	mov	r0, r3
 80158a2:	370c      	adds	r7, #12
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <_ZNK6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 80158ac:	b480      	push	{r7}
 80158ae:	b083      	sub	sp, #12
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	4618      	mov	r0, r3
 80158ba:	370c      	adds	r7, #12
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>:
    bool operator<(const T& r) const { return usec_ < r.usec_; }
 80158c4:	b490      	push	{r4, r7}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80158da:	42a2      	cmp	r2, r4
 80158dc:	bf08      	it	eq
 80158de:	4299      	cmpeq	r1, r3
 80158e0:	bf34      	ite	cc
 80158e2:	2301      	movcc	r3, #1
 80158e4:	2300      	movcs	r3, #0
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	4618      	mov	r0, r3
 80158ea:	3708      	adds	r7, #8
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bc90      	pop	{r4, r7}
 80158f0:	4770      	bx	lr

080158f2 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6getMaxEv>:
    static T getMax() { return fromUSec(NumericTraits<uint64_t>::max()); }
 80158f2:	b590      	push	{r4, r7, lr}
 80158f4:	b083      	sub	sp, #12
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	6078      	str	r0, [r7, #4]
 80158fa:	f7f0 f8c3 	bl	8005a84 <_ZN6uavcan13NumericTraitsIyE3maxEv>
 80158fe:	4603      	mov	r3, r0
 8015900:	460c      	mov	r4, r1
 8015902:	6879      	ldr	r1, [r7, #4]
 8015904:	461a      	mov	r2, r3
 8015906:	4623      	mov	r3, r4
 8015908:	4608      	mov	r0, r1
 801590a:	f7f2 ffdc 	bl	80088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	370c      	adds	r7, #12
 8015912:	46bd      	mov	sp, r7
 8015914:	bd90      	pop	{r4, r7, pc}

08015916 <_ZN6uavcan3minINS_13MonotonicTimeEEERKT_S4_S4_>:
const T& min(const T& a, const T& b)
 8015916:	b580      	push	{r7, lr}
 8015918:	b082      	sub	sp, #8
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
 801591e:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	6879      	ldr	r1, [r7, #4]
 8015924:	4618      	mov	r0, r3
 8015926:	f7ff ffcd 	bl	80158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>
 801592a:	4603      	mov	r3, r0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d001      	beq.n	8015934 <_ZN6uavcan3minINS_13MonotonicTimeEEERKT_S4_S4_+0x1e>
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	e000      	b.n	8015936 <_ZN6uavcan3minINS_13MonotonicTimeEEERKT_S4_S4_+0x20>
 8015934:	687b      	ldr	r3, [r7, #4]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3708      	adds	r7, #8
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}

0801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>:
    D operator-(const T& r) const
 801593e:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	60f8      	str	r0, [r7, #12]
 8015948:	60b9      	str	r1, [r7, #8]
 801594a:	607a      	str	r2, [r7, #4]
        return D::fromUSec((usec_ > r.usec_) ? int64_t(usec_ - r.usec_) : -int64_t(r.usec_ - usec_));
 801594c:	68bb      	ldr	r3, [r7, #8]
 801594e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	e9d2 1200 	ldrd	r1, r2, [r2]
 8015958:	42a2      	cmp	r2, r4
 801595a:	bf08      	it	eq
 801595c:	4299      	cmpeq	r1, r3
 801595e:	d20c      	bcs.n	801597a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_+0x3c>
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	e9d3 1200 	ldrd	r1, r2, [r3]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	e9d3 bc00 	ldrd	fp, ip, [r3]
 801596c:	460b      	mov	r3, r1
 801596e:	4614      	mov	r4, r2
 8015970:	ebb3 030b 	subs.w	r3, r3, fp
 8015974:	eb64 040c 	sbc.w	r4, r4, ip
 8015978:	e00e      	b.n	8015998 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_+0x5a>
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8015986:	460b      	mov	r3, r1
 8015988:	4614      	mov	r4, r2
 801598a:	ebb3 030b 	subs.w	r3, r3, fp
 801598e:	eb64 040c 	sbc.w	r4, r4, ip
 8015992:	425b      	negs	r3, r3
 8015994:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015998:	68f9      	ldr	r1, [r7, #12]
 801599a:	461a      	mov	r2, r3
 801599c:	4623      	mov	r3, r4
 801599e:	4608      	mov	r0, r1
 80159a0:	f7f3 f85e 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
    }
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	3710      	adds	r7, #16
 80159a8:	46bd      	mov	sp, r7
 80159aa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080159ae <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEgtERKS1_>:
    bool operator>(const D& r) const { return usec_ > r.usec_; }
 80159ae:	b490      	push	{r4, r7}
 80159b0:	b082      	sub	sp, #8
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	6039      	str	r1, [r7, #0]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80159be:	683a      	ldr	r2, [r7, #0]
 80159c0:	e9d2 1200 	ldrd	r1, r2, [r2]
 80159c4:	4299      	cmp	r1, r3
 80159c6:	eb72 0304 	sbcs.w	r3, r2, r4
 80159ca:	bfb4      	ite	lt
 80159cc:	2301      	movlt	r3, #1
 80159ce:	2300      	movge	r3, #0
 80159d0:	b2db      	uxtb	r3, r3
 80159d2:	4618      	mov	r0, r3
 80159d4:	3708      	adds	r7, #8
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bc90      	pop	{r4, r7}
 80159da:	4770      	bx	lr

080159dc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEmlImEES1_T_>:
    D operator*(Scale scale)   const { return fromUSec(usec_ * scale); }
 80159dc:	b5b0      	push	{r4, r5, r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f04f 0400 	mov.w	r4, #0
 80159f4:	fb03 f502 	mul.w	r5, r3, r2
 80159f8:	fb01 f004 	mul.w	r0, r1, r4
 80159fc:	4428      	add	r0, r5
 80159fe:	fba1 3403 	umull	r3, r4, r1, r3
 8015a02:	1902      	adds	r2, r0, r4
 8015a04:	4614      	mov	r4, r2
 8015a06:	68f9      	ldr	r1, [r7, #12]
 8015a08:	461a      	mov	r2, r3
 8015a0a:	4623      	mov	r3, r4
 8015a0c:	4608      	mov	r0, r1
 8015a0e:	f7f3 f827 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 8015a12:	68f8      	ldr	r0, [r7, #12]
 8015a14:	3710      	adds	r7, #16
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bdb0      	pop	{r4, r5, r7, pc}

08015a1a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgeERKS1_>:
    bool operator>=(const T& r) const { return usec_ >= r.usec_; }
 8015a1a:	b490      	push	{r4, r7}
 8015a1c:	b082      	sub	sp, #8
 8015a1e:	af00      	add	r7, sp, #0
 8015a20:	6078      	str	r0, [r7, #4]
 8015a22:	6039      	str	r1, [r7, #0]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	e9d3 1200 	ldrd	r1, r2, [r3]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015a30:	42a2      	cmp	r2, r4
 8015a32:	bf08      	it	eq
 8015a34:	4299      	cmpeq	r1, r3
 8015a36:	bf2c      	ite	cs
 8015a38:	2301      	movcs	r3, #1
 8015a3a:	2300      	movcc	r3, #0
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3708      	adds	r7, #8
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bc90      	pop	{r4, r7}
 8015a46:	4770      	bx	lr

08015a48 <_ZN6uavcan14LinkedListNodeINS_15DeadlineHandlerEE15setNextListNodeEPS1_>:
    void setNextListNode(T* node)
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
 8015a50:	6039      	str	r1, [r7, #0]
        next_ = node;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	683a      	ldr	r2, [r7, #0]
 8015a56:	601a      	str	r2, [r3, #0]
    }
 8015a58:	bf00      	nop
 8015a5a:	370c      	adds	r7, #12
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a62:	4770      	bx	lr

08015a64 <_ZN6uavcan10TransferID9incrementEv>:
    void increment()
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
        value_ = (value_ + 1) & Max;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	3301      	adds	r3, #1
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	f003 031f 	and.w	r3, r3, #31
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	701a      	strb	r2, [r3, #0]
    }
 8015a7e:	bf00      	nop
 8015a80:	370c      	adds	r7, #12
 8015a82:	46bd      	mov	sp, r7
 8015a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a88:	4770      	bx	lr

08015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>:
    bool isBroadcast() const { return value_ == ValueBroadcast; }
 8015a8a:	b480      	push	{r7}
 8015a8c:	b083      	sub	sp, #12
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	bf0c      	ite	eq
 8015a9a:	2301      	moveq	r3, #1
 8015a9c:	2300      	movne	r3, #0
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	370c      	adds	r7, #12
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aaa:	4770      	bx	lr

08015aac <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE>:
    OutgoingTransferRegistryKey(DataTypeID data_type_id, TransferType transfer_type, NodeID destination_node_id)
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	713b      	strb	r3, [r7, #4]
 8015ab8:	4613      	mov	r3, r2
 8015aba:	71fb      	strb	r3, [r7, #7]
        , destination_node_id_(destination_node_id)
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	68ba      	ldr	r2, [r7, #8]
 8015ac0:	601a      	str	r2, [r3, #0]
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	79fa      	ldrb	r2, [r7, #7]
 8015ac6:	711a      	strb	r2, [r3, #4]
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	793a      	ldrb	r2, [r7, #4]
 8015acc:	715a      	strb	r2, [r3, #5]
        UAVCAN_ASSERT((transfer_type == TransferTypeMessageBroadcast) == destination_node_id.isBroadcast());
 8015ace:	79fb      	ldrb	r3, [r7, #7]
 8015ad0:	2b02      	cmp	r3, #2
 8015ad2:	bf0c      	ite	eq
 8015ad4:	2301      	moveq	r3, #1
 8015ad6:	2300      	movne	r3, #0
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	461c      	mov	r4, r3
 8015adc:	1d3b      	adds	r3, r7, #4
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7ff ffd3 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	429c      	cmp	r4, r3
 8015ae8:	d005      	beq.n	8015af6 <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x4a>
 8015aea:	4b0a      	ldr	r3, [pc, #40]	; (8015b14 <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x68>)
 8015aec:	4a0a      	ldr	r2, [pc, #40]	; (8015b18 <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x6c>)
 8015aee:	2123      	movs	r1, #35	; 0x23
 8015af0:	480a      	ldr	r0, [pc, #40]	; (8015b1c <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x70>)
 8015af2:	f00a fd4b 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(transfer_type != TransferTypeServiceResponse);
 8015af6:	79fb      	ldrb	r3, [r7, #7]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d105      	bne.n	8015b08 <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x5c>
 8015afc:	4b08      	ldr	r3, [pc, #32]	; (8015b20 <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x74>)
 8015afe:	4a06      	ldr	r2, [pc, #24]	; (8015b18 <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x6c>)
 8015b00:	2128      	movs	r1, #40	; 0x28
 8015b02:	4806      	ldr	r0, [pc, #24]	; (8015b1c <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE+0x70>)
 8015b04:	f00a fd42 	bl	802058c <__assert_func>
    }
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3714      	adds	r7, #20
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd90      	pop	{r4, r7, pc}
 8015b12:	bf00      	nop
 8015b14:	0802295c 	.word	0x0802295c
 8015b18:	0802a1cc 	.word	0x0802a1cc
 8015b1c:	080229b4 	.word	0x080229b4
 8015b20:	08022a10 	.word	0x08022a10

08015b24 <_ZN6uavcan10Dispatcher27getOutgoingTransferRegistryEv>:
    OutgoingTransferRegistry& getOutgoingTransferRegistry() { return outgoing_transfer_reg_; }
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	33ac      	adds	r3, #172	; 0xac
 8015b30:	4618      	mov	r0, r3
 8015b32:	370c      	adds	r7, #12
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr

08015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>:
    NodeID getNodeID() const { return self_node_id_; }
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	370c      	adds	r7, #12
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b54:	4770      	bx	lr

08015b56 <_ZN6uavcan15DeadlineHandler27generateDeadlineImmediatelyEv>:
    void generateDeadlineImmediately() { startWithDeadline(MonotonicTime::fromUSec(1)); }
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b084      	sub	sp, #16
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	f107 0108 	add.w	r1, r7, #8
 8015b62:	f04f 0201 	mov.w	r2, #1
 8015b66:	f04f 0300 	mov.w	r3, #0
 8015b6a:	4608      	mov	r0, r1
 8015b6c:	f7f2 feab 	bl	80088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>
 8015b70:	f107 0308 	add.w	r3, r7, #8
 8015b74:	4619      	mov	r1, r3
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f7ff fa78 	bl	801506c <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE>
 8015b7c:	f107 0308 	add.w	r3, r7, #8
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7f0 fac7 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015b86:	bf00      	nop
 8015b88:	3710      	adds	r7, #16
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <_ZNK6uavcan9Scheduler13getDispatcherEv>:
    const Dispatcher& getDispatcher() const { return dispatcher_; }
 8015b8e:	b480      	push	{r7}
 8015b90:	b083      	sub	sp, #12
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	3310      	adds	r3, #16
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	370c      	adds	r7, #12
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba4:	4770      	bx	lr

08015ba6 <_ZNK6uavcan5INode9getNodeIDEv>:
    NodeID getNodeID() const { return getScheduler().getDispatcher().getNodeID(); }
 8015ba6:	b580      	push	{r7, lr}
 8015ba8:	b082      	sub	sp, #8
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	6078      	str	r0, [r7, #4]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	3310      	adds	r3, #16
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	4798      	blx	r3
 8015bba:	4603      	mov	r3, r0
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7ff ffe6 	bl	8015b8e <_ZNK6uavcan9Scheduler13getDispatcherEv>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7ff ffb9 	bl	8015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <_ZN6uavcan17ServiceClientBase9CallState14handleDeadlineENS_13MonotonicTimeE>:
{
/*
 * ServiceClientBase::CallState
 */
void ServiceClientBase::CallState::handleDeadline(MonotonicTime)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	6039      	str	r1, [r7, #0]
    /*
     * What we're doing here is relaying execution from this call stack to a different one.
     * We need it because call registry cannot release memory from this callback, because this will destroy the
     * object method of which we're executing now.
     */
    UAVCAN_ASSERT(timed_out_ == false);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	7e9b      	ldrb	r3, [r3, #26]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d005      	beq.n	8015bf2 <_ZN6uavcan17ServiceClientBase9CallState14handleDeadlineENS_13MonotonicTimeE+0x1e>
 8015be6:	4b09      	ldr	r3, [pc, #36]	; (8015c0c <_ZN6uavcan17ServiceClientBase9CallState14handleDeadlineENS_13MonotonicTimeE+0x38>)
 8015be8:	4a09      	ldr	r2, [pc, #36]	; (8015c10 <_ZN6uavcan17ServiceClientBase9CallState14handleDeadlineENS_13MonotonicTimeE+0x3c>)
 8015bea:	2116      	movs	r1, #22
 8015bec:	4809      	ldr	r0, [pc, #36]	; (8015c14 <_ZN6uavcan17ServiceClientBase9CallState14handleDeadlineENS_13MonotonicTimeE+0x40>)
 8015bee:	f00a fccd 	bl	802058c <__assert_func>
    timed_out_ = true;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2201      	movs	r2, #1
 8015bf6:	769a      	strb	r2, [r3, #26]
    owner_.generateDeadlineImmediately();
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	695b      	ldr	r3, [r3, #20]
 8015bfc:	3308      	adds	r3, #8
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7ff ffa9 	bl	8015b56 <_ZN6uavcan15DeadlineHandler27generateDeadlineImmediatelyEv>
    UAVCAN_TRACE("ServiceClient::CallState", "Relaying execution to the owner's handler via timer callback");
}
 8015c04:	bf00      	nop
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	08022a40 	.word	0x08022a40
 8015c10:	0802a0fc 	.word	0x0802a0fc
 8015c14:	08022a54 	.word	0x08022a54

08015c18 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE>:
 */
int ServiceClientBase::prepareToCall(INode& node,
                                     const char* dtname,
                                     NodeID server_node_id,
                                     ServiceCallID& out_call_id)
{
 8015c18:	b590      	push	{r4, r7, lr}
 8015c1a:	b091      	sub	sp, #68	; 0x44
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	60f8      	str	r0, [r7, #12]
 8015c20:	60b9      	str	r1, [r7, #8]
 8015c22:	607a      	str	r2, [r7, #4]
 8015c24:	703b      	strb	r3, [r7, #0]
    /*
     * Making sure we're not going to get transport error because of invalid input data
     */
    if (!server_node_id.isUnicast() || (server_node_id == node.getNodeID()))
 8015c26:	463b      	mov	r3, r7
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7ef ffda 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	f083 0301 	eor.w	r3, r3, #1
 8015c34:	b2db      	uxtb	r3, r3
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d10b      	bne.n	8015c52 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x3a>
 8015c3a:	68b8      	ldr	r0, [r7, #8]
 8015c3c:	f7ff ffb3 	bl	8015ba6 <_ZNK6uavcan5INode9getNodeIDEv>
 8015c40:	4602      	mov	r2, r0
 8015c42:	463b      	mov	r3, r7
 8015c44:	4611      	mov	r1, r2
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7ef ffe1 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d001      	beq.n	8015c56 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x3e>
 8015c52:	2301      	movs	r3, #1
 8015c54:	e000      	b.n	8015c58 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x40>
 8015c56:	2300      	movs	r3, #0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d002      	beq.n	8015c62 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x4a>
    {
        UAVCAN_TRACE("ServiceClient", "Invalid Server Node ID");
        return -ErrInvalidParam;
 8015c5c:	f06f 0401 	mvn.w	r4, #1
 8015c60:	e083      	b.n	8015d6a <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x152>
    }
    out_call_id.server_node_id = server_node_id;
 8015c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c64:	783a      	ldrb	r2, [r7, #0]
 8015c66:	701a      	strb	r2, [r3, #0]

    /*
     * Determining the Data Type ID
     */
    if (data_type_descriptor_ == UAVCAN_NULLPTR)
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	69db      	ldr	r3, [r3, #28]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d117      	bne.n	8015ca0 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x88>
    {
        GlobalDataTypeRegistry::instance().freeze();
 8015c70:	f7fe ffe4 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8015c74:	4603      	mov	r3, r0
 8015c76:	4618      	mov	r0, r3
 8015c78:	f7fe fffa 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>
        data_type_descriptor_ = GlobalDataTypeRegistry::instance().find(DataTypeKindService, dtname);
 8015c7c:	f7fe ffde 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8015c80:	4603      	mov	r3, r0
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	2100      	movs	r1, #0
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7ff f820 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 8015c8c:	4602      	mov	r2, r0
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	61da      	str	r2, [r3, #28]
        if (data_type_descriptor_ == UAVCAN_NULLPTR)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	69db      	ldr	r3, [r3, #28]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d102      	bne.n	8015ca0 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x88>
        {
            UAVCAN_TRACE("ServiceClient", "Type [%s] is not registered", dtname);
            return -ErrUnknownDataType;
 8015c9a:	f06f 0404 	mvn.w	r4, #4
 8015c9e:	e064      	b.n	8015d6a <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x152>
        }
        UAVCAN_TRACE("ServiceClient", "Data type descriptor inited: %s", data_type_descriptor_->toString().c_str());
    }
    UAVCAN_ASSERT(data_type_descriptor_ != UAVCAN_NULLPTR);
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	69db      	ldr	r3, [r3, #28]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d105      	bne.n	8015cb4 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x9c>
 8015ca8:	4b32      	ldr	r3, [pc, #200]	; (8015d74 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x15c>)
 8015caa:	4a33      	ldr	r2, [pc, #204]	; (8015d78 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x160>)
 8015cac:	213c      	movs	r1, #60	; 0x3c
 8015cae:	4833      	ldr	r0, [pc, #204]	; (8015d7c <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x164>)
 8015cb0:	f00a fc6c 	bl	802058c <__assert_func>

    /*
     * Determining the Transfer ID
     */
    const OutgoingTransferRegistryKey otr_key(data_type_descriptor_->getID(),
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	69db      	ldr	r3, [r3, #28]
                                              TransferTypeServiceRequest, server_node_id);
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7f0 f897 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8015cbe:	4601      	mov	r1, r0
 8015cc0:	f107 0018 	add.w	r0, r7, #24
 8015cc4:	783b      	ldrb	r3, [r7, #0]
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	f7ff fef0 	bl	8015aac <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE>
    const MonotonicTime otr_deadline = node.getMonotonicTime() + TransferSender::getDefaultMaxTransferInterval();
 8015ccc:	f107 0320 	add.w	r3, r7, #32
 8015cd0:	68b9      	ldr	r1, [r7, #8]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7f0 fe49 	bl	800696a <_ZNK6uavcan5INode16getMonotonicTimeEv>
 8015cd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7f0 fea2 	bl	8006a26 <_ZN6uavcan14TransferSender29getDefaultMaxTransferIntervalEv>
 8015ce2:	f107 0310 	add.w	r3, r7, #16
 8015ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015cea:	f107 0120 	add.w	r1, r7, #32
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7f2 fe33 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 8015cf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f7f0 fade 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8015cfe:	f107 0320 	add.w	r3, r7, #32
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7f0 fa06 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    TransferID* const otr_tid =
        node.getDispatcher().getOutgoingTransferRegistry().accessOrCreate(otr_key, otr_deadline);
 8015d08:	68b8      	ldr	r0, [r7, #8]
 8015d0a:	f7f0 fe1b 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7ff ff07 	bl	8015b24 <_ZN6uavcan10Dispatcher27getOutgoingTransferRegistryEv>
 8015d16:	4604      	mov	r4, r0
 8015d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d1c:	f107 0210 	add.w	r2, r7, #16
 8015d20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d24:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015d2c:	f107 0318 	add.w	r3, r7, #24
 8015d30:	4619      	mov	r1, r3
 8015d32:	4620      	mov	r0, r4
 8015d34:	f003 ffb4 	bl	8019ca0 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE>
 8015d38:	63f8      	str	r0, [r7, #60]	; 0x3c
 8015d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7f0 f9e8 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if (!otr_tid)
 8015d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d102      	bne.n	8015d50 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x138>
    {
        UAVCAN_TRACE("ServiceClient", "OTR access failure, dtd=%s", data_type_descriptor_->toString().c_str());
        return -ErrMemory;
 8015d4a:	f06f 0402 	mvn.w	r4, #2
 8015d4e:	e007      	b.n	8015d60 <_ZN6uavcan17ServiceClientBase13prepareToCallERNS_5INodeEPKcNS_6NodeIDERNS_13ServiceCallIDE+0x148>
    }
    out_call_id.transfer_id = *otr_tid;
 8015d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d54:	7812      	ldrb	r2, [r2, #0]
 8015d56:	705a      	strb	r2, [r3, #1]
    otr_tid->increment();
 8015d58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d5a:	f7ff fe83 	bl	8015a64 <_ZN6uavcan10TransferID9incrementEv>

    return 0;
 8015d5e:	2400      	movs	r4, #0
    const MonotonicTime otr_deadline = node.getMonotonicTime() + TransferSender::getDefaultMaxTransferInterval();
 8015d60:	f107 0310 	add.w	r3, r7, #16
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7f0 f9d5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015d6a:	4623      	mov	r3, r4
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	3744      	adds	r7, #68	; 0x44
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd90      	pop	{r4, r7, pc}
 8015d74:	08022ad0 	.word	0x08022ad0
 8015d78:	0802a158 	.word	0x0802a158
 8015d7c:	08022a54 	.word	0x08022a54

08015d80 <_ZN6uavcan17ServiceClientBase9CallStateD1Ev>:
    class CallState : DeadlineHandler
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	4a05      	ldr	r2, [pc, #20]	; (8015da0 <_ZN6uavcan17ServiceClientBase9CallStateD1Ev+0x20>)
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	601a      	str	r2, [r3, #0]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	4618      	mov	r0, r3
 8015d92:	f7f0 fccf 	bl	8006734 <_ZN6uavcan15DeadlineHandlerD1Ev>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3708      	adds	r7, #8
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	0802a0f0 	.word	0x0802a0f0

08015da4 <_ZN6uavcan17ServiceClientBase9CallStateD0Ev>:
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7ff ffe7 	bl	8015d80 <_ZN6uavcan17ServiceClientBase9CallStateD1Ev>
 8015db2:	2120      	movs	r1, #32
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f00a fbc8 	bl	802054a <_ZdlPvj>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3708      	adds	r7, #8
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}

08015dc4 <_ZN6uavcan10TimerEventC1ENS_13MonotonicTimeES1_>:
    TimerEvent(MonotonicTime arg_scheduled_time, MonotonicTime arg_real_time)
 8015dc4:	b480      	push	{r7}
 8015dc6:	b085      	sub	sp, #20
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	60f8      	str	r0, [r7, #12]
 8015dcc:	60b9      	str	r1, [r7, #8]
 8015dce:	607a      	str	r2, [r7, #4]
        , real_time(arg_real_time)
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	68ba      	ldr	r2, [r7, #8]
 8015dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015dd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	3308      	adds	r3, #8
 8015de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015de6:	e883 0003 	stmia.w	r3, {r0, r1}
    { }
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	4618      	mov	r0, r3
 8015dee:	3714      	adds	r7, #20
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <_ZN6uavcan10TimerEventD1Ev>:
struct UAVCAN_EXPORT TimerEvent
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	3308      	adds	r3, #8
 8015e04:	4618      	mov	r0, r3
 8015e06:	f7f0 f985 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7f0 f981 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	4618      	mov	r0, r3
 8015e16:	3708      	adds	r7, #8
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}

08015e1c <_ZN6uavcan9TimerBase14handleDeadlineENS_13MonotonicTimeE>:
{
/*
 * TimerBase
 */
void TimerBase::handleDeadline(MonotonicTime current)
{
 8015e1c:	b590      	push	{r4, r7, lr}
 8015e1e:	b091      	sub	sp, #68	; 0x44
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
 8015e24:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!isRunning());
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7ff f98e 	bl	801514a <_ZNK6uavcan15DeadlineHandler9isRunningEv>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	f083 0301 	eor.w	r3, r3, #1
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d105      	bne.n	8015e46 <_ZN6uavcan9TimerBase14handleDeadlineENS_13MonotonicTimeE+0x2a>
 8015e3a:	4b39      	ldr	r3, [pc, #228]	; (8015f20 <_ZN6uavcan9TimerBase14handleDeadlineENS_13MonotonicTimeE+0x104>)
 8015e3c:	4a39      	ldr	r2, [pc, #228]	; (8015f24 <_ZN6uavcan9TimerBase14handleDeadlineENS_13MonotonicTimeE+0x108>)
 8015e3e:	210f      	movs	r1, #15
 8015e40:	4839      	ldr	r0, [pc, #228]	; (8015f28 <_ZN6uavcan9TimerBase14handleDeadlineENS_13MonotonicTimeE+0x10c>)
 8015e42:	f00a fba3 	bl	802058c <__assert_func>

    const MonotonicTime scheduled_time = getDeadline();
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	f107 0308 	add.w	r3, r7, #8
 8015e4c:	4611      	mov	r1, r2
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7ff f8bb 	bl	8014fca <_ZNK6uavcan15DeadlineHandler11getDeadlineEv>

    if (period_ < MonotonicDuration::getInfinite())
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f103 0418 	add.w	r4, r3, #24
 8015e5a:	f107 0310 	add.w	r3, r7, #16
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7f2 fe11 	bl	8008a86 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE11getInfiniteEv>
 8015e64:	f107 0310 	add.w	r3, r7, #16
 8015e68:	4619      	mov	r1, r3
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	f7f4 f8e8 	bl	800a040 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEltERKS1_>
 8015e70:	4603      	mov	r3, r0
 8015e72:	461c      	mov	r4, r3
 8015e74:	f107 0310 	add.w	r3, r7, #16
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7f0 fa1e 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 8015e7e:	2c00      	cmp	r4, #0
 8015e80:	d015      	beq.n	8015eae <_ZN6uavcan9TimerBase14handleDeadlineENS_13MonotonicTimeE+0x92>
    {
        startWithDeadline(scheduled_time + period_);
 8015e82:	687c      	ldr	r4, [r7, #4]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f103 0218 	add.w	r2, r3, #24
 8015e8a:	f107 0318 	add.w	r3, r7, #24
 8015e8e:	f107 0108 	add.w	r1, r7, #8
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7f2 fd61 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 8015e98:	f107 0318 	add.w	r3, r7, #24
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f7ff f8e4 	bl	801506c <_ZN6uavcan15DeadlineHandler17startWithDeadlineENS_13MonotonicTimeE>
 8015ea4:	f107 0318 	add.w	r3, r7, #24
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f0 f933 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    }

    // Application can re-register the timer with different params, it's OK
    handleTimerEvent(TimerEvent(scheduled_time, current));
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	330c      	adds	r3, #12
 8015eb4:	681c      	ldr	r4, [r3, #0]
 8015eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015eba:	f107 0208 	add.w	r2, r7, #8
 8015ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ec2:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ec6:	683a      	ldr	r2, [r7, #0]
 8015ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ed0:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ed4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8015ed8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015edc:	f107 0320 	add.w	r3, r7, #32
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ff ff6f 	bl	8015dc4 <_ZN6uavcan10TimerEventC1ENS_13MonotonicTimeES1_>
 8015ee6:	f107 0320 	add.w	r3, r7, #32
 8015eea:	4619      	mov	r1, r3
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	47a0      	blx	r4
 8015ef0:	f107 0320 	add.w	r3, r7, #32
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7ff ff7f 	bl	8015df8 <_ZN6uavcan10TimerEventD1Ev>
 8015efa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015efe:	4618      	mov	r0, r3
 8015f00:	f7f0 f908 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8015f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7f0 f903 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    const MonotonicTime scheduled_time = getDeadline();
 8015f0e:	f107 0308 	add.w	r3, r7, #8
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7f0 f8fe 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
}
 8015f18:	bf00      	nop
 8015f1a:	3744      	adds	r7, #68	; 0x44
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd90      	pop	{r4, r7, pc}
 8015f20:	08022af4 	.word	0x08022af4
 8015f24:	0802a260 	.word	0x0802a260
 8015f28:	08022b04 	.word	0x08022b04

08015f2c <_ZN6uavcan9TimerBase13startPeriodicENS_17MonotonicDurationE>:
    period_ = MonotonicDuration::getInfinite();
    DeadlineHandler::startWithDelay(delay);
}

void TimerBase::startPeriodic(MonotonicDuration period)
{
 8015f2c:	b590      	push	{r4, r7, lr}
 8015f2e:	b087      	sub	sp, #28
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(period < MonotonicDuration::getInfinite());
 8015f36:	683c      	ldr	r4, [r7, #0]
 8015f38:	f107 0308 	add.w	r3, r7, #8
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f7f2 fda2 	bl	8008a86 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE11getInfiniteEv>
 8015f42:	f107 0308 	add.w	r3, r7, #8
 8015f46:	4619      	mov	r1, r3
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f7f4 f879 	bl	800a040 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEltERKS1_>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d105      	bne.n	8015f60 <_ZN6uavcan9TimerBase13startPeriodicENS_17MonotonicDurationE+0x34>
 8015f54:	4b15      	ldr	r3, [pc, #84]	; (8015fac <_ZN6uavcan9TimerBase13startPeriodicENS_17MonotonicDurationE+0x80>)
 8015f56:	4a16      	ldr	r2, [pc, #88]	; (8015fb0 <_ZN6uavcan9TimerBase13startPeriodicENS_17MonotonicDurationE+0x84>)
 8015f58:	212c      	movs	r1, #44	; 0x2c
 8015f5a:	4816      	ldr	r0, [pc, #88]	; (8015fb4 <_ZN6uavcan9TimerBase13startPeriodicENS_17MonotonicDurationE+0x88>)
 8015f5c:	f00a fb16 	bl	802058c <__assert_func>
 8015f60:	f107 0308 	add.w	r3, r7, #8
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7f0 f9a8 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    stop();
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7ff f8da 	bl	8015126 <_ZN6uavcan15DeadlineHandler4stopEv>
    period_ = period;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	683a      	ldr	r2, [r7, #0]
 8015f76:	3318      	adds	r3, #24
 8015f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f7c:	e883 0003 	stmia.w	r3, {r0, r1}
    DeadlineHandler::startWithDelay(period);
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	f107 0310 	add.w	r3, r7, #16
 8015f88:	c903      	ldmia	r1, {r0, r1}
 8015f8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f8e:	f107 0310 	add.w	r3, r7, #16
 8015f92:	4619      	mov	r1, r3
 8015f94:	4610      	mov	r0, r2
 8015f96:	f7ff f89d 	bl	80150d4 <_ZN6uavcan15DeadlineHandler14startWithDelayENS_17MonotonicDurationE>
 8015f9a:	f107 0310 	add.w	r3, r7, #16
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7f0 f98b 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
}
 8015fa4:	bf00      	nop
 8015fa6:	371c      	adds	r7, #28
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd90      	pop	{r4, r7, pc}
 8015fac:	08022b78 	.word	0x08022b78
 8015fb0:	0802a2a8 	.word	0x0802a2a8
 8015fb4:	08022b04 	.word	0x08022b04

08015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>:
OutputIt copy(InputIt first, InputIt last, OutputIt result)
 8015fb8:	b480      	push	{r7}
 8015fba:	b085      	sub	sp, #20
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	60f8      	str	r0, [r7, #12]
 8015fc0:	60b9      	str	r1, [r7, #8]
 8015fc2:	607a      	str	r2, [r7, #4]
    while (first != last)
 8015fc4:	68fa      	ldr	r2, [r7, #12]
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d00a      	beq.n	8015fe2 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_+0x2a>
        *result = *first;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	781a      	ldrb	r2, [r3, #0]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	701a      	strb	r2, [r3, #0]
        ++first;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	60fb      	str	r3, [r7, #12]
        ++result;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	3301      	adds	r3, #1
 8015fde:	607b      	str	r3, [r7, #4]
    while (first != last)
 8015fe0:	e7f0      	b.n	8015fc4 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_+0xc>
    return result;
 8015fe2:	687b      	ldr	r3, [r7, #4]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3714      	adds	r7, #20
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEC1Ev>:
    DefaultDataTypeRegistrator()
 8015ff0:	b590      	push	{r4, r7, lr}
 8015ff2:	b085      	sub	sp, #20
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
            GlobalDataTypeRegistry::instance().registerDataType<Type>(Type::DefaultDataTypeID);
 8015ff8:	f7fe fe20 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8015ffc:	4604      	mov	r4, r0
        const GlobalDataTypeRegistry::RegistrationResult res =
 8015ffe:	f107 0308 	add.w	r3, r7, #8
 8016002:	2101      	movs	r1, #1
 8016004:	4618      	mov	r0, r3
 8016006:	f7ef fe24 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 801600a:	68b9      	ldr	r1, [r7, #8]
 801600c:	4620      	mov	r0, r4
 801600e:	f000 f833 	bl	8016078 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE>
 8016012:	4603      	mov	r3, r0
 8016014:	73fb      	strb	r3, [r7, #15]
        if (res != GlobalDataTypeRegistry::RegistrationResultOk)
 8016016:	7bfb      	ldrb	r3, [r7, #15]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d002      	beq.n	8016022 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEC1Ev+0x32>
            handleFatalError("Type reg failed");
 801601c:	4803      	ldr	r0, [pc, #12]	; (801602c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEC1Ev+0x3c>)
 801601e:	f007 ffaf 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	4618      	mov	r0, r3
 8016026:	3714      	adds	r7, #20
 8016028:	46bd      	mov	sp, r7
 801602a:	bd90      	pop	{r4, r7, pc}
 801602c:	08022fb8 	.word	0x08022fb8

08016030 <_ZN6uavcan4copyIPhS1_EET0_T_S3_S2_>:
OutputIt copy(InputIt first, InputIt last, OutputIt result)
 8016030:	b480      	push	{r7}
 8016032:	b085      	sub	sp, #20
 8016034:	af00      	add	r7, sp, #0
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
    while (first != last)
 801603c:	68fa      	ldr	r2, [r7, #12]
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	429a      	cmp	r2, r3
 8016042:	d00a      	beq.n	801605a <_ZN6uavcan4copyIPhS1_EET0_T_S3_S2_+0x2a>
        *result = *first;
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	781a      	ldrb	r2, [r3, #0]
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	701a      	strb	r2, [r3, #0]
        ++first;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	3301      	adds	r3, #1
 8016050:	60fb      	str	r3, [r7, #12]
        ++result;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	3301      	adds	r3, #1
 8016056:	607b      	str	r3, [r7, #4]
    while (first != last)
 8016058:	e7f0      	b.n	801603c <_ZN6uavcan4copyIPhS1_EET0_T_S3_S2_+0xc>
    return result;
 801605a:	687b      	ldr	r3, [r7, #4]
}
 801605c:	4618      	mov	r0, r3
 801605e:	3714      	adds	r7, #20
 8016060:	46bd      	mov	sp, r7
 8016062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016066:	4770      	bx	lr

08016068 <__tcf_0>:
    static Entry entry;
 8016068:	b580      	push	{r7, lr}
 801606a:	af00      	add	r7, sp, #0
 801606c:	4801      	ldr	r0, [pc, #4]	; (8016074 <__tcf_0+0xc>)
 801606e:	f7f4 f844 	bl	800a0fa <_ZN6uavcan22GlobalDataTypeRegistry5EntryD1Ev>
 8016072:	bd80      	pop	{r7, pc}
 8016074:	200085b8 	.word	0x200085b8

08016078 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE>:
GlobalDataTypeRegistry::RegistrationResult GlobalDataTypeRegistry::registerDataType(DataTypeID id)
 8016078:	b5b0      	push	{r4, r5, r7, lr}
 801607a:	b08e      	sub	sp, #56	; 0x38
 801607c:	af02      	add	r7, sp, #8
 801607e:	6078      	str	r0, [r7, #4]
 8016080:	6039      	str	r1, [r7, #0]
    if (isFrozen())
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f7ef fee7 	bl	8005e56 <_ZNK6uavcan22GlobalDataTypeRegistry8isFrozenEv>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	d001      	beq.n	8016092 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x1a>
        return RegistrationResultFrozen;
 801608e:	2303      	movs	r3, #3
 8016090:	e049      	b.n	8016126 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    static Entry entry;
 8016092:	4b27      	ldr	r3, [pc, #156]	; (8016130 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	f003 0301 	and.w	r3, r3, #1
 801609a:	2b00      	cmp	r3, #0
 801609c:	d108      	bne.n	80160b0 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x38>
 801609e:	4825      	ldr	r0, [pc, #148]	; (8016134 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 80160a0:	f7ef fec7 	bl	8005e32 <_ZN6uavcan22GlobalDataTypeRegistry5EntryC1Ev>
 80160a4:	4b22      	ldr	r3, [pc, #136]	; (8016130 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xb8>)
 80160a6:	2201      	movs	r2, #1
 80160a8:	601a      	str	r2, [r3, #0]
 80160aa:	4823      	ldr	r0, [pc, #140]	; (8016138 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xc0>)
 80160ac:	f00a fa8c 	bl	80205c8 <atexit>
        const RegistrationResult remove_res = remove(&entry);
 80160b0:	4920      	ldr	r1, [pc, #128]	; (8016134 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f7fe fcb8 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 80160b8:	4603      	mov	r3, r0
 80160ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (remove_res != RegistrationResultOk)
 80160be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d002      	beq.n	80160cc <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0x54>
            return remove_res;
 80160c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80160ca:	e02c      	b.n	8016126 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
                                          Type::getDataTypeSignature(), Type::getDataTypeFullName());
 80160cc:	f107 0320 	add.w	r3, r7, #32
 80160d0:	4618      	mov	r0, r3
 80160d2:	f000 f835 	bl	8016140 <_ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE20getDataTypeSignatureEv>
    entry.descriptor = DataTypeDescriptor(DataTypeKind(Type::DataTypeKind), id,
 80160d6:	f000 f84f 	bl	8016178 <_ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE19getDataTypeFullNameEv>
 80160da:	4602      	mov	r2, r0
 80160dc:	f107 0320 	add.w	r3, r7, #32
 80160e0:	f107 0008 	add.w	r0, r7, #8
 80160e4:	9200      	str	r2, [sp, #0]
 80160e6:	683a      	ldr	r2, [r7, #0]
 80160e8:	2101      	movs	r1, #1
 80160ea:	f7ef fe2b 	bl	8005d44 <_ZN6uavcan18DataTypeDescriptorC1ENS_12DataTypeKindENS_10DataTypeIDERKNS_17DataTypeSignatureEPKc>
 80160ee:	4b11      	ldr	r3, [pc, #68]	; (8016134 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 80160f0:	f103 0408 	add.w	r4, r3, #8
 80160f4:	f107 0508 	add.w	r5, r7, #8
 80160f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80160fc:	682b      	ldr	r3, [r5, #0]
 80160fe:	6023      	str	r3, [r4, #0]
        const RegistrationResult remove_res = remove(&entry);
 8016100:	490c      	ldr	r1, [pc, #48]	; (8016134 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f7fe fc90 	bl	8014a28 <_ZN6uavcan22GlobalDataTypeRegistry6removeEPNS0_5EntryE>
 8016108:	4603      	mov	r3, r0
 801610a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        if (remove_res != RegistrationResultOk)
 801610e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8016112:	2b00      	cmp	r3, #0
 8016114:	d002      	beq.n	801611c <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xa4>
            return remove_res;
 8016116:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801611a:	e004      	b.n	8016126 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xae>
    return registImpl(&entry);
 801611c:	4905      	ldr	r1, [pc, #20]	; (8016134 <_ZN6uavcan22GlobalDataTypeRegistry16registerDataTypeINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEENS0_18RegistrationResultENS_10DataTypeIDE+0xbc>)
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f7fe fce2 	bl	8014ae8 <_ZN6uavcan22GlobalDataTypeRegistry10registImplEPNS0_5EntryE>
 8016124:	4603      	mov	r3, r0
}
 8016126:	4618      	mov	r0, r3
 8016128:	3730      	adds	r7, #48	; 0x30
 801612a:	46bd      	mov	sp, r7
 801612c:	bdb0      	pop	{r4, r5, r7, pc}
 801612e:	bf00      	nop
 8016130:	200085d8 	.word	0x200085d8
 8016134:	200085b8 	.word	0x200085b8
 8016138:	08016069 	.word	0x08016069
 801613c:	00000000 	.word	0x00000000

08016140 <_ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE20getDataTypeSignatureEv>:

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Allocation_<_tmpl>::getDataTypeSignature()
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
{
    ::uavcan::DataTypeSignature signature(0xB2A812620A11D40ULL);
 8016148:	a309      	add	r3, pc, #36	; (adr r3, 8016170 <_ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE20getDataTypeSignatureEv+0x30>)
 801614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7ef fdc0 	bl	8005cd4 <_ZN6uavcan17DataTypeSignatureC1Ey>

    FieldTypes::node_id::extendDataTypeSignature(signature);
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f000 f819 	bl	801618c <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::first_part_of_unique_id::extendDataTypeSignature(signature);
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f7f3 f8a4 	bl	80092a8 <_ZN6uavcan11IntegerSpecILj1ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    FieldTypes::unique_id::extendDataTypeSignature(signature);
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 f81d 	bl	80161a0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj16EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>

    return signature;
 8016166:	bf00      	nop
}
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}
 8016170:	20a11d40 	.word	0x20a11d40
 8016174:	0b2a8126 	.word	0x0b2a8126

08016178 <_ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE19getDataTypeFullNameEv>:
    static const char* getDataTypeFullName()
 8016178:	b480      	push	{r7}
 801617a:	af00      	add	r7, sp, #0
        return "uavcan.protocol.dynamic_node_id.Allocation";
 801617c:	4b02      	ldr	r3, [pc, #8]	; (8016188 <_ZN6uavcan8protocol15dynamic_node_id11Allocation_ILi0EE19getDataTypeFullNameEv+0x10>)
    }
 801617e:	4618      	mov	r0, r3
 8016180:	46bd      	mov	sp, r7
 8016182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016186:	4770      	bx	lr
 8016188:	0802303c 	.word	0x0802303c

0801618c <_ZN6uavcan11IntegerSpecILj7ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature&) { }
 801618c:	b480      	push	{r7}
 801618e:	b083      	sub	sp, #12
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	bf00      	nop
 8016196:	370c      	adds	r7, #12
 8016198:	46bd      	mov	sp, r7
 801619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619e:	4770      	bx	lr

080161a0 <_ZN6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj16EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>:
    static void extendDataTypeSignature(DataTypeSignature& signature)
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
        RawValueType::extendDataTypeSignature(signature);
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f7f2 fe24 	bl	8008df6 <_ZN6uavcan11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EE23extendDataTypeSignatureERNS_17DataTypeSignatureE>
    }
 80161ae:	bf00      	nop
 80161b0:	3708      	adds	r7, #8
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}
	...

080161b8 <_Z41__static_initialization_and_destruction_0ii>:
    restartTimer(ModeWaitingForTimeSlot);

    return 0;
}

}
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d107      	bne.n	80161d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161ce:	4293      	cmp	r3, r2
 80161d0:	d102      	bne.n	80161d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
typedef Allocation_<0> Allocation;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::dynamic_node_id::Allocation > _uavcan_gdtr_registrator_Allocation;
 80161d2:	4803      	ldr	r0, [pc, #12]	; (80161e0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80161d4:	f7ff ff0c 	bl	8015ff0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol15dynamic_node_id11Allocation_ILi0EEEEC1Ev>
 80161d8:	bf00      	nop
 80161da:	3708      	adds	r7, #8
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	200085b4 	.word	0x200085b4

080161e4 <_GLOBAL__sub_I__ZN6uavcan19DynamicNodeIDClient9terminateEv>:
 80161e4:	b580      	push	{r7, lr}
 80161e6:	af00      	add	r7, sp, #0
 80161e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80161ec:	2001      	movs	r0, #1
 80161ee:	f7ff ffe3 	bl	80161b8 <_Z41__static_initialization_and_destruction_0ii>
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <_ZNK6uavcan10Dispatcher13isPassiveModeEv>:
    bool isPassiveMode() const { return !getNodeID().isUnicast(); }
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b084      	sub	sp, #16
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7ff fc9d 	bl	8015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>
 8016202:	4603      	mov	r3, r0
 8016204:	733b      	strb	r3, [r7, #12]
 8016206:	f107 030c 	add.w	r3, r7, #12
 801620a:	4618      	mov	r0, r3
 801620c:	f7ef fce9 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 8016210:	4603      	mov	r3, r0
 8016212:	f083 0301 	eor.w	r3, r3, #1
 8016216:	b2db      	uxtb	r3, r3
 8016218:	4618      	mov	r0, r3
 801621a:	3710      	adds	r7, #16
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <_ZNK6uavcan5INode13isPassiveModeEv>:
    bool isPassiveMode() const { return getScheduler().getDispatcher().isPassiveMode(); }
 8016220:	b580      	push	{r7, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	3310      	adds	r3, #16
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	4798      	blx	r3
 8016234:	4603      	mov	r3, r0
 8016236:	4618      	mov	r0, r3
 8016238:	f7ff fca9 	bl	8015b8e <_ZNK6uavcan9Scheduler13getDispatcherEv>
 801623c:	4603      	mov	r3, r0
 801623e:	4618      	mov	r0, r3
 8016240:	f7ff ffd8 	bl	80161f4 <_ZNK6uavcan10Dispatcher13isPassiveModeEv>
 8016244:	4603      	mov	r3, r0
 8016246:	4618      	mov	r0, r3
 8016248:	3708      	adds	r7, #8
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}

0801624e <_ZN6uavcan18NodeStatusProvider7getNodeEv>:
    INode& getNode() { return node_status_pub_.getNode(); }
 801624e:	b580      	push	{r7, lr}
 8016250:	b082      	sub	sp, #8
 8016252:	af00      	add	r7, sp, #0
 8016254:	6078      	str	r0, [r7, #4]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	3328      	adds	r3, #40	; 0x28
 801625a:	4618      	mov	r0, r3
 801625c:	f7f0 fcb7 	bl	8006bce <_ZNK6uavcan20GenericPublisherBase7getNodeEv>
 8016260:	4603      	mov	r3, r0
 8016262:	4618      	mov	r0, r3
 8016264:	3708      	adds	r7, #8
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}

0801626a <_ZNK6uavcan18NodeStatusProvider21isNodeInfoInitializedEv>:

namespace uavcan
{

bool NodeStatusProvider::isNodeInfoInitialized() const
{
 801626a:	b580      	push	{r7, lr}
 801626c:	b082      	sub	sp, #8
 801626e:	af00      	add	r7, sp, #0
 8016270:	6078      	str	r0, [r7, #4]
    // Hardware/Software versions are not required
    return !node_info_.name.empty();
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f203 2303 	addw	r3, r3, #515	; 0x203
 8016278:	4618      	mov	r0, r3
 801627a:	f7f2 fde7 	bl	8008e4c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5emptyEv>
 801627e:	4603      	mov	r3, r0
 8016280:	f083 0301 	eor.w	r3, r3, #1
 8016284:	b2db      	uxtb	r3, r3
}
 8016286:	4618      	mov	r0, r3
 8016288:	3708      	adds	r7, #8
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
	...

08016290 <_ZN6uavcan18NodeStatusProvider7publishEv>:

int NodeStatusProvider::publish()
{
 8016290:	b590      	push	{r4, r7, lr}
 8016292:	b087      	sub	sp, #28
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
    const MonotonicDuration uptime = getNode().getMonotonicTime() - creation_timestamp_;
 8016298:	6878      	ldr	r0, [r7, #4]
 801629a:	f7ff ffd8 	bl	801624e <_ZN6uavcan18NodeStatusProvider7getNodeEv>
 801629e:	4602      	mov	r2, r0
 80162a0:	f107 0310 	add.w	r3, r7, #16
 80162a4:	4611      	mov	r1, r2
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7f0 fb5f 	bl	800696a <_ZNK6uavcan5INode16getMonotonicTimeEv>
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f103 0220 	add.w	r2, r3, #32
 80162b2:	f107 0308 	add.w	r3, r7, #8
 80162b6:	f107 0110 	add.w	r1, r7, #16
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7ff fb3f 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 80162c0:	f107 0310 	add.w	r3, r7, #16
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7ef ff25 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    UAVCAN_ASSERT(uptime.isPositive());
 80162ca:	f107 0308 	add.w	r3, r7, #8
 80162ce:	4618      	mov	r0, r3
 80162d0:	f000 f9d4 	bl	801667c <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE10isPositiveEv>
 80162d4:	4603      	mov	r3, r0
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d105      	bne.n	80162e6 <_ZN6uavcan18NodeStatusProvider7publishEv+0x56>
 80162da:	4b1c      	ldr	r3, [pc, #112]	; (801634c <_ZN6uavcan18NodeStatusProvider7publishEv+0xbc>)
 80162dc:	4a1c      	ldr	r2, [pc, #112]	; (8016350 <_ZN6uavcan18NodeStatusProvider7publishEv+0xc0>)
 80162de:	2115      	movs	r1, #21
 80162e0:	481c      	ldr	r0, [pc, #112]	; (8016354 <_ZN6uavcan18NodeStatusProvider7publishEv+0xc4>)
 80162e2:	f00a f953 	bl	802058c <__assert_func>
    node_info_.status.uptime_sec = uint32_t(uptime.toMSec() / 1000);
 80162e6:	f107 0308 	add.w	r3, r7, #8
 80162ea:	4618      	mov	r0, r3
 80162ec:	f000 f9d9 	bl	80166a2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toMSecEv>
 80162f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80162f4:	f04f 0300 	mov.w	r3, #0
 80162f8:	f7ea f8f0 	bl	80004dc <__aeabi_ldivmod>
 80162fc:	4603      	mov	r3, r0
 80162fe:	460c      	mov	r4, r1
 8016300:	461a      	mov	r2, r3
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    UAVCAN_ASSERT(node_info_.status.health <= protocol::NodeStatus::FieldTypes::health::max());
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f893 40d4 	ldrb.w	r4, [r3, #212]	; 0xd4
 801630e:	f7fd fa94 	bl	801383a <_ZN6uavcan11IntegerSpecILj2ELNS_10SignednessE0ELNS_8CastModeE0EE3maxEv>
 8016312:	4603      	mov	r3, r0
 8016314:	429c      	cmp	r4, r3
 8016316:	d905      	bls.n	8016324 <_ZN6uavcan18NodeStatusProvider7publishEv+0x94>
 8016318:	4b0f      	ldr	r3, [pc, #60]	; (8016358 <_ZN6uavcan18NodeStatusProvider7publishEv+0xc8>)
 801631a:	4a0d      	ldr	r2, [pc, #52]	; (8016350 <_ZN6uavcan18NodeStatusProvider7publishEv+0xc0>)
 801631c:	2118      	movs	r1, #24
 801631e:	480d      	ldr	r0, [pc, #52]	; (8016354 <_ZN6uavcan18NodeStatusProvider7publishEv+0xc4>)
 8016320:	f00a f934 	bl	802058c <__assert_func>

    return node_status_pub_.broadcast(node_info_.status);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	33d0      	adds	r3, #208	; 0xd0
 801632e:	4619      	mov	r1, r3
 8016330:	4610      	mov	r0, r2
 8016332:	f000 f9cb 	bl	80166cc <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEE9broadcastERKS3_>
 8016336:	4604      	mov	r4, r0
    const MonotonicDuration uptime = getNode().getMonotonicTime() - creation_timestamp_;
 8016338:	f107 0308 	add.w	r3, r7, #8
 801633c:	4618      	mov	r0, r3
 801633e:	f7ef ffbc 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    return node_status_pub_.broadcast(node_info_.status);
 8016342:	4623      	mov	r3, r4
}
 8016344:	4618      	mov	r0, r3
 8016346:	371c      	adds	r7, #28
 8016348:	46bd      	mov	sp, r7
 801634a:	bd90      	pop	{r4, r7, pc}
 801634c:	08023320 	.word	0x08023320
 8016350:	0802a334 	.word	0x0802a334
 8016354:	08023334 	.word	0x08023334
 8016358:	080233bc 	.word	0x080233bc

0801635c <_ZN6uavcan18NodeStatusProvider16handleTimerEventERKNS_10TimerEventE>:

void NodeStatusProvider::handleTimerEvent(const TimerEvent&)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
    if (getNode().isPassiveMode())
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f7ff ff71 	bl	801624e <_ZN6uavcan18NodeStatusProvider7getNodeEv>
 801636c:	4603      	mov	r3, r0
 801636e:	4618      	mov	r0, r3
 8016370:	f7ff ff56 	bl	8016220 <_ZNK6uavcan5INode13isPassiveModeEv>
 8016374:	4603      	mov	r3, r0
 8016376:	2b00      	cmp	r3, #0
 8016378:	d11f      	bne.n	80163ba <_ZN6uavcan18NodeStatusProvider16handleTimerEventERKNS_10TimerEventE+0x5e>
    {
        UAVCAN_TRACE("NodeStatusProvider", "NodeStatus pub skipped - passive mode");
    }
    else
    {
        if (ad_hoc_status_updater_ != UAVCAN_NULLPTR)
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8016380:	2b00      	cmp	r3, #0
 8016382:	d009      	beq.n	8016398 <_ZN6uavcan18NodeStatusProvider16handleTimerEventERKNS_10TimerEventE+0x3c>
        {
            ad_hoc_status_updater_->updateNodeStatus();
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	4610      	mov	r0, r2
 8016396:	4798      	blx	r3
        }

        const int res = publish();
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f7ff ff79 	bl	8016290 <_ZN6uavcan18NodeStatusProvider7publishEv>
 801639e:	60f8      	str	r0, [r7, #12]
        if (res < 0)
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	da09      	bge.n	80163ba <_ZN6uavcan18NodeStatusProvider16handleTimerEventERKNS_10TimerEventE+0x5e>
        {
            getNode().registerInternalFailure("NodeStatus pub failed");
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f7ff ff51 	bl	801624e <_ZN6uavcan18NodeStatusProvider7getNodeEv>
 80163ac:	4602      	mov	r2, r0
 80163ae:	6813      	ldr	r3, [r2, #0]
 80163b0:	3314      	adds	r3, #20
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	4903      	ldr	r1, [pc, #12]	; (80163c4 <_ZN6uavcan18NodeStatusProvider16handleTimerEventERKNS_10TimerEventE+0x68>)
 80163b6:	4610      	mov	r0, r2
 80163b8:	4798      	blx	r3
        }
    }
}
 80163ba:	bf00      	nop
 80163bc:	3710      	adds	r7, #16
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	08023408 	.word	0x08023408

080163c8 <_ZN6uavcan18NodeStatusProvider24handleGetNodeInfoRequestERKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE>:

void NodeStatusProvider::handleGetNodeInfoRequest(const protocol::GetNodeInfo::Request&,
                                                  protocol::GetNodeInfo::Response& rsp)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	607a      	str	r2, [r7, #4]
    UAVCAN_TRACE("NodeStatusProvider", "Got GetNodeInfo request");
    UAVCAN_ASSERT(isNodeInfoInitialized());
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f7ff ff48 	bl	801626a <_ZNK6uavcan18NodeStatusProvider21isNodeInfoInitializedEv>
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d105      	bne.n	80163ec <_ZN6uavcan18NodeStatusProvider24handleGetNodeInfoRequestERKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x24>
 80163e0:	4b09      	ldr	r3, [pc, #36]	; (8016408 <_ZN6uavcan18NodeStatusProvider24handleGetNodeInfoRequestERKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x40>)
 80163e2:	4a0a      	ldr	r2, [pc, #40]	; (801640c <_ZN6uavcan18NodeStatusProvider24handleGetNodeInfoRequestERKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x44>)
 80163e4:	2136      	movs	r1, #54	; 0x36
 80163e6:	480a      	ldr	r0, [pc, #40]	; (8016410 <_ZN6uavcan18NodeStatusProvider24handleGetNodeInfoRequestERKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS2_9Response_ILi0EEE+0x48>)
 80163e8:	f00a f8d0 	bl	802058c <__assert_func>
    rsp = node_info_;
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	4610      	mov	r0, r2
 80163f2:	33d0      	adds	r3, #208	; 0xd0
 80163f4:	f240 1285 	movw	r2, #389	; 0x185
 80163f8:	4619      	mov	r1, r3
 80163fa:	f00a f937 	bl	802066c <memcpy>
}
 80163fe:	bf00      	nop
 8016400:	3710      	adds	r7, #16
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	08023420 	.word	0x08023420
 801640c:	0802a434 	.word	0x0802a434
 8016410:	08023334 	.word	0x08023334

08016414 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE>:

int NodeStatusProvider::startAndPublish(const TransferPriority priority)
{
 8016414:	b590      	push	{r4, r7, lr}
 8016416:	b08d      	sub	sp, #52	; 0x34
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	7039      	strb	r1, [r7, #0]
    if (!isNodeInfoInitialized())
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f7ff ff23 	bl	801626a <_ZNK6uavcan18NodeStatusProvider21isNodeInfoInitializedEv>
 8016424:	4603      	mov	r3, r0
 8016426:	f083 0301 	eor.w	r3, r3, #1
 801642a:	b2db      	uxtb	r3, r3
 801642c:	2b00      	cmp	r3, #0
 801642e:	d002      	beq.n	8016436 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0x22>
    {
        UAVCAN_TRACE("NodeStatusProvider", "Node info was not initialized");
        return -ErrNotInited;
 8016430:	f06f 0307 	mvn.w	r3, #7
 8016434:	e061      	b.n	80164fa <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xe6>
    }

    int res = -1;
 8016436:	f04f 33ff 	mov.w	r3, #4294967295
 801643a:	62fb      	str	r3, [r7, #44]	; 0x2c

    node_status_pub_.setPriority(priority);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	3328      	adds	r3, #40	; 0x28
 8016440:	7839      	ldrb	r1, [r7, #0]
 8016442:	4618      	mov	r0, r3
 8016444:	f7f0 fbb5 	bl	8006bb2 <_ZN6uavcan20GenericPublisherBase11setPriorityENS_16TransferPriorityE>

    if (!getNode().isPassiveMode())
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f7ff ff00 	bl	801624e <_ZN6uavcan18NodeStatusProvider7getNodeEv>
 801644e:	4603      	mov	r3, r0
 8016450:	4618      	mov	r0, r3
 8016452:	f7ff fee5 	bl	8016220 <_ZNK6uavcan5INode13isPassiveModeEv>
 8016456:	4603      	mov	r3, r0
 8016458:	f083 0301 	eor.w	r3, r3, #1
 801645c:	b2db      	uxtb	r3, r3
 801645e:	2b00      	cmp	r3, #0
 8016460:	d006      	beq.n	8016470 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0x5c>
    {
        res = publish();
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f7ff ff14 	bl	8016290 <_ZN6uavcan18NodeStatusProvider7publishEv>
 8016468:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (res < 0)  // Initial broadcast
 801646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801646c:	2b00      	cmp	r3, #0
 801646e:	db2e      	blt.n	80164ce <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xba>
        {
            goto fail;
        }
    }

    res = gni_srv_.start(GetNodeInfoCallback(this, &NodeStatusProvider::handleGetNodeInfoRequest));
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8016476:	4b23      	ldr	r3, [pc, #140]	; (8016504 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xf0>)
 8016478:	61bb      	str	r3, [r7, #24]
 801647a:	2300      	movs	r3, #0
 801647c:	61fb      	str	r3, [r7, #28]
 801647e:	f107 000c 	add.w	r0, r7, #12
 8016482:	f107 0318 	add.w	r3, r7, #24
 8016486:	cb0c      	ldmia	r3, {r2, r3}
 8016488:	6879      	ldr	r1, [r7, #4]
 801648a:	f000 f947 	bl	801671c <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1ES2_SD_>
 801648e:	f107 030c 	add.w	r3, r7, #12
 8016492:	4619      	mov	r1, r3
 8016494:	4620      	mov	r0, r4
 8016496:	f000 f95a 	bl	801674e <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_>
 801649a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (res < 0)
 801649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801649e:	2b00      	cmp	r3, #0
 80164a0:	db17      	blt.n	80164d2 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xbe>
    {
        goto fail;
    }

    setStatusPublicationPeriod(MonotonicDuration::fromMSec(protocol::NodeStatus::MAX_BROADCASTING_PERIOD_MS));
 80164a2:	f107 0120 	add.w	r1, r7, #32
 80164a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80164aa:	f04f 0300 	mov.w	r3, #0
 80164ae:	4608      	mov	r0, r1
 80164b0:	f7f2 f8d4 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 80164b4:	f107 0320 	add.w	r3, r7, #32
 80164b8:	4619      	mov	r1, r3
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 f82a 	bl	8016514 <_ZN6uavcan18NodeStatusProvider26setStatusPublicationPeriodENS_17MonotonicDurationE>
 80164c0:	f107 0320 	add.w	r3, r7, #32
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7ef fef8 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>

    return res;
 80164ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164cc:	e015      	b.n	80164fa <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xe6>
            goto fail;
 80164ce:	bf00      	nop
 80164d0:	e000      	b.n	80164d4 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xc0>
        goto fail;
 80164d2:	bf00      	nop

fail:
    UAVCAN_ASSERT(res < 0);
 80164d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	db05      	blt.n	80164e6 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xd2>
 80164da:	4b0b      	ldr	r3, [pc, #44]	; (8016508 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xf4>)
 80164dc:	4a0b      	ldr	r2, [pc, #44]	; (801650c <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xf8>)
 80164de:	215a      	movs	r1, #90	; 0x5a
 80164e0:	480b      	ldr	r0, [pc, #44]	; (8016510 <_ZN6uavcan18NodeStatusProvider15startAndPublishENS_16TransferPriorityE+0xfc>)
 80164e2:	f00a f853 	bl	802058c <__assert_func>
    gni_srv_.stop();
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	3350      	adds	r3, #80	; 0x50
 80164ea:	4618      	mov	r0, r3
 80164ec:	f7f5 fbec 	bl	800bcc8 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
    TimerBase::stop();
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	4618      	mov	r0, r3
 80164f4:	f7fe fe17 	bl	8015126 <_ZN6uavcan15DeadlineHandler4stopEv>
    return res;
 80164f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3734      	adds	r7, #52	; 0x34
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd90      	pop	{r4, r7, pc}
 8016502:	bf00      	nop
 8016504:	080163c9 	.word	0x080163c9
 8016508:	08023438 	.word	0x08023438
 801650c:	0802a4ac 	.word	0x0802a4ac
 8016510:	08023334 	.word	0x08023334

08016514 <_ZN6uavcan18NodeStatusProvider26setStatusPublicationPeriodENS_17MonotonicDurationE>:

void NodeStatusProvider::setStatusPublicationPeriod(uavcan::MonotonicDuration period)
{
 8016514:	b590      	push	{r4, r7, lr}
 8016516:	b08f      	sub	sp, #60	; 0x3c
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
 801651c:	6039      	str	r1, [r7, #0]
    const MonotonicDuration maximum = MonotonicDuration::fromMSec(protocol::NodeStatus::MAX_BROADCASTING_PERIOD_MS);
 801651e:	f107 0118 	add.w	r1, r7, #24
 8016522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016526:	f04f 0300 	mov.w	r3, #0
 801652a:	4608      	mov	r0, r1
 801652c:	f7f2 f896 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
    const MonotonicDuration minimum = MonotonicDuration::fromMSec(protocol::NodeStatus::MIN_BROADCASTING_PERIOD_MS);
 8016530:	f107 0110 	add.w	r1, r7, #16
 8016534:	f04f 0202 	mov.w	r2, #2
 8016538:	f04f 0300 	mov.w	r3, #0
 801653c:	4608      	mov	r0, r1
 801653e:	f7f2 f88d 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>

    period = min(period, maximum);
 8016542:	f107 0318 	add.w	r3, r7, #24
 8016546:	4619      	mov	r1, r3
 8016548:	6838      	ldr	r0, [r7, #0]
 801654a:	f7f2 f9de 	bl	800890a <_ZN6uavcan3minINS_17MonotonicDurationEEERKT_S4_S4_>
 801654e:	4602      	mov	r2, r0
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016556:	e883 0003 	stmia.w	r3, {r0, r1}
    period = max(period, minimum);
 801655a:	f107 0310 	add.w	r3, r7, #16
 801655e:	4619      	mov	r1, r3
 8016560:	6838      	ldr	r0, [r7, #0]
 8016562:	f7f2 f9e6 	bl	8008932 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_>
 8016566:	4602      	mov	r2, r0
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801656e:	e883 0003 	stmia.w	r3, {r0, r1}
    TimerBase::startPeriodic(period);
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	6839      	ldr	r1, [r7, #0]
 8016576:	f107 0320 	add.w	r3, r7, #32
 801657a:	c903      	ldmia	r1, {r0, r1}
 801657c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016580:	f107 0320 	add.w	r3, r7, #32
 8016584:	4619      	mov	r1, r3
 8016586:	4610      	mov	r0, r2
 8016588:	f7ff fcd0 	bl	8015f2c <_ZN6uavcan9TimerBase13startPeriodicENS_17MonotonicDurationE>
 801658c:	f107 0320 	add.w	r3, r7, #32
 8016590:	4618      	mov	r0, r3
 8016592:	f7ef fe92 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>

    const MonotonicDuration tx_timeout = period - MonotonicDuration::fromUSec(period.toUSec() / 20);
 8016596:	683c      	ldr	r4, [r7, #0]
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	4618      	mov	r0, r3
 801659c:	f7f3 fd8e 	bl	800a0bc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toUSecEv>
 80165a0:	f04f 0214 	mov.w	r2, #20
 80165a4:	f04f 0300 	mov.w	r3, #0
 80165a8:	f7e9 ff98 	bl	80004dc <__aeabi_ldivmod>
 80165ac:	4602      	mov	r2, r0
 80165ae:	460b      	mov	r3, r1
 80165b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80165b4:	4608      	mov	r0, r1
 80165b6:	f7f2 fa53 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 80165ba:	f107 0308 	add.w	r3, r7, #8
 80165be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80165c2:	4621      	mov	r1, r4
 80165c4:	4618      	mov	r0, r3
 80165c6:	f000 f8f6 	bl	80167b6 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEmiERKS1_>
 80165ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80165ce:	4618      	mov	r0, r3
 80165d0:	f7ef fe73 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    node_status_pub_.setTxTimeout(tx_timeout);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80165da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165de:	f107 0208 	add.w	r2, r7, #8
 80165e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80165ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165ee:	4619      	mov	r1, r3
 80165f0:	4620      	mov	r0, r4
 80165f2:	f7fe f8c4 	bl	801477e <_ZN6uavcan20GenericPublisherBase12setTxTimeoutENS_17MonotonicDurationE>
 80165f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7ef fe5d 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    const MonotonicDuration tx_timeout = period - MonotonicDuration::fromUSec(period.toUSec() / 20);
 8016600:	f107 0308 	add.w	r3, r7, #8
 8016604:	4618      	mov	r0, r3
 8016606:	f7ef fe58 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    const MonotonicDuration minimum = MonotonicDuration::fromMSec(protocol::NodeStatus::MIN_BROADCASTING_PERIOD_MS);
 801660a:	f107 0310 	add.w	r3, r7, #16
 801660e:	4618      	mov	r0, r3
 8016610:	f7ef fe53 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    const MonotonicDuration maximum = MonotonicDuration::fromMSec(protocol::NodeStatus::MAX_BROADCASTING_PERIOD_MS);
 8016614:	f107 0318 	add.w	r3, r7, #24
 8016618:	4618      	mov	r0, r3
 801661a:	f7ef fe4e 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>

    UAVCAN_TRACE("NodeStatusProvider", "Status pub period: %s, TX timeout: %s",
                 period.toString().c_str(), node_status_pub_.getTxTimeout().toString().c_str());
}
 801661e:	bf00      	nop
 8016620:	373c      	adds	r7, #60	; 0x3c
 8016622:	46bd      	mov	sp, r7
 8016624:	bd90      	pop	{r4, r7, pc}

08016626 <_ZN6uavcan18NodeStatusProvider7setModeEh>:
{
    node_info_.status.health = code;
}

void NodeStatusProvider::setMode(uint8_t code)
{
 8016626:	b480      	push	{r7}
 8016628:	b083      	sub	sp, #12
 801662a:	af00      	add	r7, sp, #0
 801662c:	6078      	str	r0, [r7, #4]
 801662e:	460b      	mov	r3, r1
 8016630:	70fb      	strb	r3, [r7, #3]
    node_info_.status.mode = code;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	78fa      	ldrb	r2, [r7, #3]
 8016636:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
}
 801663a:	bf00      	nop
 801663c:	370c      	adds	r7, #12
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr

08016646 <_ZN6uavcan18NodeStatusProvider7setNameERKNS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEE>:
{
    node_info_.status.vendor_specific_status_code = code;
}

void NodeStatusProvider::setName(const NodeName& name)
{
 8016646:	b580      	push	{r7, lr}
 8016648:	b082      	sub	sp, #8
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
 801664e:	6039      	str	r1, [r7, #0]
    if (node_info_.name.empty())
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f203 2303 	addw	r3, r3, #515	; 0x203
 8016656:	4618      	mov	r0, r3
 8016658:	f7f2 fbf8 	bl	8008e4c <_ZNK6uavcan5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EE5emptyEv>
 801665c:	4603      	mov	r3, r0
 801665e:	2b00      	cmp	r3, #0
 8016660:	d008      	beq.n	8016674 <_ZN6uavcan18NodeStatusProvider7setNameERKNS_5ArrayINS_11IntegerSpecILj8ELNS_10SignednessE0ELNS_8CastModeE0EEELNS_9ArrayModeE1ELj80EEE+0x2e>
    {
        node_info_.name = name;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	683a      	ldr	r2, [r7, #0]
 8016666:	f203 2303 	addw	r3, r3, #515	; 0x203
 801666a:	4611      	mov	r1, r2
 801666c:	2252      	movs	r2, #82	; 0x52
 801666e:	4618      	mov	r0, r3
 8016670:	f009 fffc 	bl	802066c <memcpy>
    }
}
 8016674:	bf00      	nop
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}

0801667c <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE10isPositiveEv>:
    bool isPositive() const { return usec_ > 0; }
 801667c:	b490      	push	{r4, r7}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	e9d3 3400 	ldrd	r3, r4, [r3]
 801668a:	2b01      	cmp	r3, #1
 801668c:	f174 0300 	sbcs.w	r3, r4, #0
 8016690:	bfac      	ite	ge
 8016692:	2301      	movge	r3, #1
 8016694:	2300      	movlt	r3, #0
 8016696:	b2db      	uxtb	r3, r3
 8016698:	4618      	mov	r0, r3
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bc90      	pop	{r4, r7}
 80166a0:	4770      	bx	lr

080166a2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toMSecEv>:
    int64_t toMSec() const { return usec_ / 1000; }
 80166a2:	b590      	push	{r4, r7, lr}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80166b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80166b4:	f04f 0300 	mov.w	r3, #0
 80166b8:	f7e9 ff10 	bl	80004dc <__aeabi_ldivmod>
 80166bc:	4603      	mov	r3, r0
 80166be:	460c      	mov	r4, r1
 80166c0:	4618      	mov	r0, r3
 80166c2:	4621      	mov	r1, r4
 80166c4:	370c      	adds	r7, #12
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd90      	pop	{r4, r7, pc}
	...

080166cc <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEE9broadcastERKS3_>:
    int broadcast(const DataType& message)
 80166cc:	b5b0      	push	{r4, r5, r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af02      	add	r7, sp, #8
 80166d2:	6078      	str	r0, [r7, #4]
 80166d4:	6039      	str	r1, [r7, #0]
        return BaseType::publish(message, TransferTypeMessageBroadcast, NodeID::Broadcast);
 80166d6:	687d      	ldr	r5, [r7, #4]
 80166d8:	f04f 0300 	mov.w	r3, #0
 80166dc:	f04f 0400 	mov.w	r4, #0
 80166e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80166e4:	f107 0308 	add.w	r3, r7, #8
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7ef fd06 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 80166ee:	4a0a      	ldr	r2, [pc, #40]	; (8016718 <_ZN6uavcan9PublisherINS_8protocol11NodeStatus_ILi0EEEE9broadcastERKS3_+0x4c>)
 80166f0:	f107 0308 	add.w	r3, r7, #8
 80166f4:	9300      	str	r3, [sp, #0]
 80166f6:	7813      	ldrb	r3, [r2, #0]
 80166f8:	2202      	movs	r2, #2
 80166fa:	6839      	ldr	r1, [r7, #0]
 80166fc:	4628      	mov	r0, r5
 80166fe:	f000 f878 	bl	80167f2 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E7publishERKS3_NS_12TransferTypeENS_6NodeIDENS_13MonotonicTimeE>
 8016702:	4604      	mov	r4, r0
 8016704:	f107 0308 	add.w	r3, r7, #8
 8016708:	4618      	mov	r0, r3
 801670a:	f7ef fd03 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801670e:	4623      	mov	r3, r4
    }
 8016710:	4618      	mov	r0, r3
 8016712:	3710      	adds	r7, #16
 8016714:	46bd      	mov	sp, r7
 8016716:	bdb0      	pop	{r4, r5, r7, pc}
 8016718:	20008604 	.word	0x20008604

0801671c <_ZN6uavcan12MethodBinderIPNS_18NodeStatusProviderEMS1_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS4_9Response_ILi0EEEEEC1ES2_SD_>:
    MethodBinder(ObjectPtr o, MemFunPtr f)
 801671c:	b480      	push	{r7}
 801671e:	b085      	sub	sp, #20
 8016720:	af00      	add	r7, sp, #0
 8016722:	60f8      	str	r0, [r7, #12]
 8016724:	60b9      	str	r1, [r7, #8]
 8016726:	4639      	mov	r1, r7
 8016728:	e881 000c 	stmia.w	r1, {r2, r3}
        , fun_(f)
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	68ba      	ldr	r2, [r7, #8]
 8016730:	601a      	str	r2, [r3, #0]
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	3304      	adds	r3, #4
 8016736:	463a      	mov	r2, r7
 8016738:	e892 0003 	ldmia.w	r2, {r0, r1}
 801673c:	e883 0003 	stmia.w	r3, {r0, r1}
    { }
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	4618      	mov	r0, r3
 8016744:	3714      	adds	r7, #20
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr

0801674e <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_>:
    int start(const Callback& callback)
 801674e:	b580      	push	{r7, lr}
 8016750:	b084      	sub	sp, #16
 8016752:	af00      	add	r7, sp, #0
 8016754:	6078      	str	r0, [r7, #4]
 8016756:	6039      	str	r1, [r7, #0]
        stop();
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	4618      	mov	r0, r3
 801675c:	f7f5 fab4 	bl	800bcc8 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE4stopEv>
        if (!coerceOrFallback<bool>(callback, true))
 8016760:	2301      	movs	r3, #1
 8016762:	72fb      	strb	r3, [r7, #11]
 8016764:	f107 030b 	add.w	r3, r7, #11
 8016768:	4619      	mov	r1, r3
 801676a:	6838      	ldr	r0, [r7, #0]
 801676c:	f7f9 ff04 	bl	8010578 <_ZN6uavcan16coerceOrFallbackIbNS_12MethodBinderIPNS_18NodeStatusProviderEMS2_FvRKNS_8protocol12GetNodeInfo_8Request_ILi0EEERNS5_9Response_ILi0EEEEEEEET_RKT0_RKSG_>
 8016770:	4603      	mov	r3, r0
 8016772:	f083 0301 	eor.w	r3, r3, #1
 8016776:	b2db      	uxtb	r3, r3
 8016778:	2b00      	cmp	r3, #0
 801677a:	d002      	beq.n	8016782 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x34>
            return -ErrInvalidParam;
 801677c:	f06f 0301 	mvn.w	r3, #1
 8016780:	e015      	b.n	80167ae <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x60>
        callback_ = callback;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	683a      	ldr	r2, [r7, #0]
 8016786:	3370      	adds	r3, #112	; 0x70
 8016788:	ca07      	ldmia	r2, {r0, r1, r2}
 801678a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        const int publisher_res = publisher_.init();
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	3348      	adds	r3, #72	; 0x48
 8016792:	4618      	mov	r0, r3
 8016794:	f000 f852 	bl	801683c <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE4initEv>
 8016798:	60f8      	str	r0, [r7, #12]
        if (publisher_res < 0)
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	2b00      	cmp	r3, #0
 801679e:	da01      	bge.n	80167a4 <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x56>
            return publisher_res;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	e004      	b.n	80167ae <_ZN6uavcan13ServiceServerINS_8protocol12GetNodeInfo_ENS_12MethodBinderIPNS_18NodeStatusProviderEMS4_FvRKNS2_8Request_ILi0EEERNS2_9Response_ILi0EEEEEEE5startERKSF_+0x60>
        return SubscriberType::startAsServiceRequestListener();
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	4618      	mov	r0, r3
 80167a8:	f000 f854 	bl	8016854 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>
 80167ac:	4603      	mov	r3, r0
    }
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEmiERKS1_>:
    D operator-(const D& r) const { return fromUSec(usec_ - r.usec_); } // ditto
 80167b6:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80167ba:	b084      	sub	sp, #16
 80167bc:	af00      	add	r7, sp, #0
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	607a      	str	r2, [r7, #4]
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80167d0:	460b      	mov	r3, r1
 80167d2:	4614      	mov	r4, r2
 80167d4:	ebb3 030b 	subs.w	r3, r3, fp
 80167d8:	eb64 040c 	sbc.w	r4, r4, ip
 80167dc:	68f9      	ldr	r1, [r7, #12]
 80167de:	461a      	mov	r2, r3
 80167e0:	4623      	mov	r3, r4
 80167e2:	4608      	mov	r0, r1
 80167e4:	f7f2 f93c 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	3710      	adds	r7, #16
 80167ec:	46bd      	mov	sp, r7
 80167ee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080167f2 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E7publishERKS3_NS_12TransferTypeENS_6NodeIDENS_13MonotonicTimeE>:
    int publish(const DataStruct& message, TransferType transfer_type, NodeID dst_node_id,
 80167f2:	b590      	push	{r4, r7, lr}
 80167f4:	b089      	sub	sp, #36	; 0x24
 80167f6:	af02      	add	r7, sp, #8
 80167f8:	60f8      	str	r0, [r7, #12]
 80167fa:	60b9      	str	r1, [r7, #8]
 80167fc:	713b      	strb	r3, [r7, #4]
 80167fe:	4613      	mov	r3, r2
 8016800:	71fb      	strb	r3, [r7, #7]
        return genericPublish(message, transfer_type, dst_node_id, UAVCAN_NULLPTR, blocking_deadline);
 8016802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016804:	f107 0310 	add.w	r3, r7, #16
 8016808:	e892 0003 	ldmia.w	r2, {r0, r1}
 801680c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016810:	79fa      	ldrb	r2, [r7, #7]
 8016812:	f107 0310 	add.w	r3, r7, #16
 8016816:	9301      	str	r3, [sp, #4]
 8016818:	2300      	movs	r3, #0
 801681a:	9300      	str	r3, [sp, #0]
 801681c:	793b      	ldrb	r3, [r7, #4]
 801681e:	68b9      	ldr	r1, [r7, #8]
 8016820:	68f8      	ldr	r0, [r7, #12]
 8016822:	f000 f84f 	bl	80168c4 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E14genericPublishERKS3_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8016826:	4604      	mov	r4, r0
 8016828:	f107 0310 	add.w	r3, r7, #16
 801682c:	4618      	mov	r0, r3
 801682e:	f7ef fc71 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8016832:	4623      	mov	r3, r4
    }
 8016834:	4618      	mov	r0, r3
 8016836:	371c      	adds	r7, #28
 8016838:	46bd      	mov	sp, r7
 801683a:	bd90      	pop	{r4, r7, pc}

0801683c <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE4initEv>:
    int init()
 801683c:	b580      	push	{r7, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
        return checkInit();
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f7fb f804 	bl	8011852 <_ZN6uavcan16GenericPublisherINS_8protocol12GetNodeInfo_ENS2_9Response_ILi0EEEE9checkInitEv>
 801684a:	4603      	mov	r3, r0
    }
 801684c:	4618      	mov	r0, r3
 801684e:	3708      	adds	r7, #8
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}

08016854 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv>:
    int startAsServiceRequestListener()
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
        return genericStart(&Dispatcher::registerServiceRequestListener);
 801685c:	4b07      	ldr	r3, [pc, #28]	; (801687c <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE29startAsServiceRequestListenerEv+0x28>)
 801685e:	60bb      	str	r3, [r7, #8]
 8016860:	2300      	movs	r3, #0
 8016862:	60fb      	str	r3, [r7, #12]
 8016864:	f107 0308 	add.w	r3, r7, #8
 8016868:	e893 0006 	ldmia.w	r3, {r1, r2}
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 f870 	bl	8016952 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>
 8016872:	4603      	mov	r3, r0
    }
 8016874:	4618      	mov	r0, r3
 8016876:	3710      	adds	r7, #16
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}
 801687c:	08018b9d 	.word	0x08018b9d

08016880 <_ZN6uavcan20StaticTransferBufferILt7EED1Ev>:
class UAVCAN_EXPORT StaticTransferBuffer : public StaticTransferBufferImpl
 8016880:	b580      	push	{r7, lr}
 8016882:	b082      	sub	sp, #8
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	4a05      	ldr	r2, [pc, #20]	; (80168a0 <_ZN6uavcan20StaticTransferBufferILt7EED1Ev+0x20>)
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	601a      	str	r2, [r3, #0]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	4618      	mov	r0, r3
 8016892:	f7f5 fb29 	bl	800bee8 <_ZN6uavcan24StaticTransferBufferImplD1Ev>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4618      	mov	r0, r3
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	0802a2f4 	.word	0x0802a2f4

080168a4 <_ZN6uavcan20StaticTransferBufferILt7EED0Ev>:
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f7ff ffe7 	bl	8016880 <_ZN6uavcan20StaticTransferBufferILt7EED1Ev>
 80168b2:	2114      	movs	r1, #20
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f009 fe48 	bl	802054a <_ZdlPvj>
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	4618      	mov	r0, r3
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E14genericPublishERKS3_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>:
int GenericPublisher<DataSpec, DataStruct>::genericPublish(const DataStruct& message, TransferType transfer_type,
 80168c4:	b590      	push	{r4, r7, lr}
 80168c6:	b091      	sub	sp, #68	; 0x44
 80168c8:	af02      	add	r7, sp, #8
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	60b9      	str	r1, [r7, #8]
 80168ce:	713b      	strb	r3, [r7, #4]
 80168d0:	4613      	mov	r3, r2
 80168d2:	71fb      	strb	r3, [r7, #7]
    const int res = checkInit();
 80168d4:	68f8      	ldr	r0, [r7, #12]
 80168d6:	f000 f881 	bl	80169dc <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E9checkInitEv>
 80168da:	6378      	str	r0, [r7, #52]	; 0x34
    if (res < 0)
 80168dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168de:	2b00      	cmp	r3, #0
 80168e0:	da01      	bge.n	80168e6 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E14genericPublishERKS3_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x22>
        return res;
 80168e2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80168e4:	e030      	b.n	8016948 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E14genericPublishERKS3_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x84>
    Buffer buffer;
 80168e6:	f107 0314 	add.w	r3, r7, #20
 80168ea:	4618      	mov	r0, r3
 80168ec:	f000 f892 	bl	8016a14 <_ZN6uavcan20StaticTransferBufferILt7EEC1Ev>
    const int encode_res = doEncode(message, buffer);
 80168f0:	f107 0314 	add.w	r3, r7, #20
 80168f4:	461a      	mov	r2, r3
 80168f6:	68b9      	ldr	r1, [r7, #8]
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f000 f8a3 	bl	8016a44 <_ZNK6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E8doEncodeERKS3_RNS_15ITransferBufferE>
 80168fe:	6338      	str	r0, [r7, #48]	; 0x30
    if (encode_res < 0)
 8016900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016902:	2b00      	cmp	r3, #0
 8016904:	da01      	bge.n	801690a <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E14genericPublishERKS3_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x46>
        return encode_res;
 8016906:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8016908:	e019      	b.n	801693e <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E14genericPublishERKS3_NS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE+0x7a>
    return GenericPublisherBase::genericPublish(buffer, transfer_type, dst_node_id, tid, blocking_deadline);
 801690a:	68fc      	ldr	r4, [r7, #12]
 801690c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801690e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016916:	e883 0003 	stmia.w	r3, {r0, r1}
 801691a:	79fa      	ldrb	r2, [r7, #7]
 801691c:	f107 0114 	add.w	r1, r7, #20
 8016920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016924:	9301      	str	r3, [sp, #4]
 8016926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016928:	9300      	str	r3, [sp, #0]
 801692a:	793b      	ldrb	r3, [r7, #4]
 801692c:	4620      	mov	r0, r4
 801692e:	f7fd fead 	bl	801468c <_ZN6uavcan20GenericPublisherBase14genericPublishERKNS_24StaticTransferBufferImplENS_12TransferTypeENS_6NodeIDEPNS_10TransferIDENS_13MonotonicTimeE>
 8016932:	4604      	mov	r4, r0
 8016934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016938:	4618      	mov	r0, r3
 801693a:	f7ef fbeb 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    Buffer buffer;
 801693e:	f107 0314 	add.w	r3, r7, #20
 8016942:	4618      	mov	r0, r3
 8016944:	f7ff ff9c 	bl	8016880 <_ZN6uavcan20StaticTransferBufferILt7EED1Ev>
 8016948:	4623      	mov	r3, r4
}
 801694a:	4618      	mov	r0, r3
 801694c:	373c      	adds	r7, #60	; 0x3c
 801694e:	46bd      	mov	sp, r7
 8016950:	bd90      	pop	{r4, r7, pc}

08016952 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::
 8016952:	b590      	push	{r4, r7, lr}
 8016954:	b087      	sub	sp, #28
 8016956:	af00      	add	r7, sp, #0
 8016958:	60f8      	str	r0, [r7, #12]
 801695a:	1d3b      	adds	r3, r7, #4
 801695c:	e883 0006 	stmia.w	r3, {r1, r2}
    const int res = checkInit();
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	f000 f89f 	bl	8016aa4 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>
 8016966:	6178      	str	r0, [r7, #20]
    if (res < 0)
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	2b00      	cmp	r3, #0
 801696c:	da01      	bge.n	8016972 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x20>
        return res;
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	e00d      	b.n	801698e <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE12genericStartEMNS_10DispatcherEFbPS5_E+0x3c>
    return GenericSubscriberBase::genericStart(forwarder_, registration_method);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	1d1c      	adds	r4, r3, #4
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	330c      	adds	r3, #12
 801697a:	4618      	mov	r0, r3
 801697c:	f7f5 ff1e 	bl	800c7bc <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 8016980:	4601      	mov	r1, r0
 8016982:	1d3b      	adds	r3, r7, #4
 8016984:	cb0c      	ldmia	r3, {r2, r3}
 8016986:	4620      	mov	r0, r4
 8016988:	f7fd ff36 	bl	80147f8 <_ZN6uavcan21GenericSubscriberBase12genericStartEPNS_16TransferListenerEMNS_10DispatcherEFbS2_E>
 801698c:	4603      	mov	r3, r0
}
 801698e:	4618      	mov	r0, r3
 8016990:	371c      	adds	r7, #28
 8016992:	46bd      	mov	sp, r7
 8016994:	bd90      	pop	{r4, r7, pc}
	...

08016998 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>:
    class TransferForwarder : public TransferListenerType
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
 80169a0:	4a05      	ldr	r2, [pc, #20]	; (80169b8 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev+0x20>)
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	601a      	str	r2, [r3, #0]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	4618      	mov	r0, r3
 80169aa:	f005 f949 	bl	801bc40 <_ZN6uavcan16TransferListenerD1Ev>
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	4618      	mov	r0, r3
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	0802a324 	.word	0x0802a324

080169bc <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD0Ev>:
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f7ff ffe7 	bl	8016998 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderD1Ev>
 80169ca:	2134      	movs	r1, #52	; 0x34
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f009 fdbc 	bl	802054a <_ZdlPvj>
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	4618      	mov	r0, r3
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}

080169dc <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E9checkInitEv>:
int GenericPublisher<DataSpec, DataStruct>::checkInit()
 80169dc:	b590      	push	{r4, r7, lr}
 80169de:	b083      	sub	sp, #12
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
    if (isInited())
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7fd fdf2 	bl	80145d0 <_ZNK6uavcan20GenericPublisherBase8isInitedEv>
 80169ec:	4603      	mov	r3, r0
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d001      	beq.n	80169f6 <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E9checkInitEv+0x1a>
        return 0;
 80169f2:	2300      	movs	r3, #0
 80169f4:	e009      	b.n	8016a0a <_ZN6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E9checkInitEv+0x2e>
    return doInit(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName(), CanTxQueue::Qos(Qos));
 80169f6:	687c      	ldr	r4, [r7, #4]
 80169f8:	f7f5 f906 	bl	800bc08 <_ZN6uavcan8protocol11NodeStatus_ILi0EE19getDataTypeFullNameEv>
 80169fc:	4602      	mov	r2, r0
 80169fe:	2300      	movs	r3, #0
 8016a00:	2101      	movs	r1, #1
 8016a02:	4620      	mov	r0, r4
 8016a04:	f7fd fdf1 	bl	80145ea <_ZN6uavcan20GenericPublisherBase6doInitENS_12DataTypeKindEPKcNS_10CanTxQueue3QosE>
 8016a08:	4603      	mov	r3, r0
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	370c      	adds	r7, #12
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd90      	pop	{r4, r7, pc}
	...

08016a14 <_ZN6uavcan20StaticTransferBufferILt7EEC1Ev>:
    StaticTransferBuffer() : StaticTransferBufferImpl(buffer_, Size)
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b082      	sub	sp, #8
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	330c      	adds	r3, #12
 8016a22:	2207      	movs	r2, #7
 8016a24:	4619      	mov	r1, r3
 8016a26:	f7ef fbc3 	bl	80061b0 <_ZN6uavcan24StaticTransferBufferImplC1EPht>
 8016a2a:	4a05      	ldr	r2, [pc, #20]	; (8016a40 <_ZN6uavcan20StaticTransferBufferILt7EEC1Ev+0x2c>)
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	601a      	str	r2, [r3, #0]
        StaticAssert<(Size > 0)>::check();
 8016a30:	f7ee ffce 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	4618      	mov	r0, r3
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
 8016a3e:	bf00      	nop
 8016a40:	0802a2f4 	.word	0x0802a2f4

08016a44 <_ZNK6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E8doEncodeERKS3_RNS_15ITransferBufferE>:
int GenericPublisher<DataSpec, DataStruct>::doEncode(const DataStruct& message, ITransferBuffer& buffer) const
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08a      	sub	sp, #40	; 0x28
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
    BitStream bitstream(buffer);
 8016a50:	f107 0318 	add.w	r3, r7, #24
 8016a54:	6879      	ldr	r1, [r7, #4]
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7ef fa2a 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 8016a5c:	f107 0218 	add.w	r2, r7, #24
 8016a60:	f107 0314 	add.w	r3, r7, #20
 8016a64:	4611      	mov	r1, r2
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7ef fa37 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int encode_res = DataStruct::encode(message, codec);
 8016a6c:	f107 0314 	add.w	r3, r7, #20
 8016a70:	2201      	movs	r2, #1
 8016a72:	4619      	mov	r1, r3
 8016a74:	68b8      	ldr	r0, [r7, #8]
 8016a76:	f7fb fe4d 	bl	8012714 <_ZN6uavcan8protocol11NodeStatus_ILi0EE6encodeERKS2_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8016a7a:	6278      	str	r0, [r7, #36]	; 0x24
    if (encode_res <= 0)
 8016a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	dc05      	bgt.n	8016a8e <_ZNK6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E8doEncodeERKS3_RNS_15ITransferBufferE+0x4a>
        UAVCAN_ASSERT(0);   // Impossible, internal error
 8016a82:	4b05      	ldr	r3, [pc, #20]	; (8016a98 <_ZNK6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E8doEncodeERKS3_RNS_15ITransferBufferE+0x54>)
 8016a84:	4a05      	ldr	r2, [pc, #20]	; (8016a9c <_ZNK6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E8doEncodeERKS3_RNS_15ITransferBufferE+0x58>)
 8016a86:	21ab      	movs	r1, #171	; 0xab
 8016a88:	4805      	ldr	r0, [pc, #20]	; (8016aa0 <_ZNK6uavcan16GenericPublisherINS_8protocol11NodeStatus_ILi0EEES3_E8doEncodeERKS3_RNS_15ITransferBufferE+0x5c>)
 8016a8a:	f009 fd7f 	bl	802058c <__assert_func>
    return encode_res;
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016a90:	4618      	mov	r0, r3
 8016a92:	3728      	adds	r7, #40	; 0x28
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	08023530 	.word	0x08023530
 8016a9c:	0802a360 	.word	0x0802a360
 8016aa0:	08023534 	.word	0x08023534

08016aa4 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv>:
int GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::checkInit()
 8016aa4:	b590      	push	{r4, r7, lr}
 8016aa6:	b087      	sub	sp, #28
 8016aa8:	af02      	add	r7, sp, #8
 8016aaa:	6078      	str	r0, [r7, #4]
    if (forwarder_)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	330c      	adds	r3, #12
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7f5 fe83 	bl	800c7bc <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEEcvPS8_Ev>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	bf14      	ite	ne
 8016abc:	2301      	movne	r3, #1
 8016abe:	2300      	moveq	r3, #0
 8016ac0:	b2db      	uxtb	r3, r3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d001      	beq.n	8016aca <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x26>
        return 0;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	e02c      	b.n	8016b24 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    GlobalDataTypeRegistry::instance().freeze();
 8016aca:	f7fe f8b7 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	f7fe f8cd 	bl	8014c70 <_ZN6uavcan22GlobalDataTypeRegistry6freezeEv>
        GlobalDataTypeRegistry::instance().find(DataTypeKind(DataSpec::DataTypeKind), DataSpec::getDataTypeFullName());
 8016ad6:	f7fe f8b1 	bl	8014c3c <_ZN6uavcan22GlobalDataTypeRegistry8instanceEv>
 8016ada:	4604      	mov	r4, r0
    const DataTypeDescriptor* const descr =
 8016adc:	f7f0 f916 	bl	8006d0c <_ZN6uavcan8protocol12GetNodeInfo_19getDataTypeFullNameEv>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	f7fe f8f0 	bl	8014ccc <_ZNK6uavcan22GlobalDataTypeRegistry4findENS_12DataTypeKindEPKc>
 8016aec:	60f8      	str	r0, [r7, #12]
    if (descr == UAVCAN_NULLPTR)
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d102      	bne.n	8016afa <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x56>
        return -ErrUnknownDataType;
 8016af4:	f06f 0304 	mvn.w	r3, #4
 8016af8:	e014      	b.n	8016b24 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x80>
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f103 040c 	add.w	r4, r3, #12
        (*this, *descr, MaxBufferSize, node_.getAllocator());
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	685a      	ldr	r2, [r3, #4]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	3308      	adds	r3, #8
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	4610      	mov	r0, r2
 8016b10:	4798      	blx	r3
 8016b12:	4603      	mov	r3, r0
    forwarder_.template construct<SelfType&, const DataTypeDescriptor&, uint16_t, IPoolAllocator&>
 8016b14:	9300      	str	r3, [sp, #0]
 8016b16:	4b05      	ldr	r3, [pc, #20]	; (8016b2c <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE9checkInitEv+0x88>)
 8016b18:	68fa      	ldr	r2, [r7, #12]
 8016b1a:	6879      	ldr	r1, [r7, #4]
 8016b1c:	4620      	mov	r0, r4
 8016b1e:	f000 f807 	bl	8016b30 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>
    return 0;
 8016b22:	2300      	movs	r3, #0
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3714      	adds	r7, #20
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd90      	pop	{r4, r7, pc}
 8016b2c:	0802a2ea 	.word	0x0802a2ea

08016b30 <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE>:
    void construct(typename ParameterType<P1>::Type p1, typename ParameterType<P2>::Type p2,
 8016b30:	b590      	push	{r4, r7, lr}
 8016b32:	b087      	sub	sp, #28
 8016b34:	af02      	add	r7, sp, #8
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	607a      	str	r2, [r7, #4]
 8016b3c:	603b      	str	r3, [r7, #0]
        ensureNotConstructed();
 8016b3e:	68f8      	ldr	r0, [r7, #12]
 8016b40:	f000 f81c 	bl	8016b7c <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3, p4);
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	4619      	mov	r1, r3
 8016b48:	2034      	movs	r0, #52	; 0x34
 8016b4a:	f7ef f9d5 	bl	8005ef8 <_ZnwjPv>
 8016b4e:	4604      	mov	r4, r0
 8016b50:	2c00      	cmp	r4, #0
 8016b52:	d00b      	beq.n	8016b6c <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3c>
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	881a      	ldrh	r2, [r3, #0]
 8016b58:	6a3b      	ldr	r3, [r7, #32]
 8016b5a:	9300      	str	r3, [sp, #0]
 8016b5c:	4613      	mov	r3, r2
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	68b9      	ldr	r1, [r7, #8]
 8016b62:	4620      	mov	r0, r4
 8016b64:	f000 f81c 	bl	8016ba0 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 8016b68:	4622      	mov	r2, r4
 8016b6a:	e000      	b.n	8016b6e <_ZN6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE9constructIRS7_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorEEEvNS_13ParameterTypeIT_E4TypeENSH_IT0_E4TypeENSH_IT1_E4TypeENSH_IT2_E4TypeE+0x3e>
 8016b6c:	4622      	mov	r2, r4
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8016b72:	bf00      	nop
 8016b74:	3714      	adds	r7, #20
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd90      	pop	{r4, r7, pc}
	...

08016b7c <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv>:
    void ensureNotConstructed() const
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
        if (ptr_)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d002      	beq.n	8016b92 <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 8016b8c:	4803      	ldr	r0, [pc, #12]	; (8016b9c <_ZNK6uavcan15LazyConstructorINS_17GenericSubscriberINS_8protocol12GetNodeInfo_ENS3_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderEE20ensureNotConstructedEv+0x20>)
 8016b8e:	f007 f9f7 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 8016b92:	bf00      	nop
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
 8016b9a:	bf00      	nop
 8016b9c:	08023580 	.word	0x08023580

08016ba0 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>:
        TransferForwarder(SelfType& obj,
 8016ba0:	b590      	push	{r4, r7, lr}
 8016ba2:	b087      	sub	sp, #28
 8016ba4:	af02      	add	r7, sp, #8
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	607a      	str	r2, [r7, #4]
 8016bac:	807b      	strh	r3, [r7, #2]
            obj_(obj)
 8016bae:	68fc      	ldr	r4, [r7, #12]
            TransferListenerType(obj.node_.getDispatcher().getTransferPerfCounter(),
 8016bb0:	68bb      	ldr	r3, [r7, #8]
 8016bb2:	685b      	ldr	r3, [r3, #4]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7ef fec5 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8016bba:	4603      	mov	r3, r0
            obj_(obj)
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7ef fd90 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 8016bc2:	4601      	mov	r1, r0
 8016bc4:	887a      	ldrh	r2, [r7, #2]
 8016bc6:	6a3b      	ldr	r3, [r7, #32]
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	4613      	mov	r3, r2
 8016bcc:	687a      	ldr	r2, [r7, #4]
 8016bce:	4620      	mov	r0, r4
 8016bd0:	f7ef fbc0 	bl	8006354 <_ZN6uavcan16TransferListenerC1ERNS_19TransferPerfCounterERKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE>
 8016bd4:	4a05      	ldr	r2, [pc, #20]	; (8016bec <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarderC1ERS6_RKNS_18DataTypeDescriptorEtRNS_14IPoolAllocatorE+0x4c>)
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	601a      	str	r2, [r3, #0]
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	68ba      	ldr	r2, [r7, #8]
 8016bde:	631a      	str	r2, [r3, #48]	; 0x30
        { }
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	4618      	mov	r0, r3
 8016be4:	3714      	adds	r7, #20
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd90      	pop	{r4, r7, pc}
 8016bea:	bf00      	nop
 8016bec:	0802a324 	.word	0x0802a324

08016bf0 <_Z41__static_initialization_and_destruction_0ii>:
    {
        node_info_.hardware_version = version;
    }
}

}
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
 8016bf8:	6039      	str	r1, [r7, #0]
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d10a      	bne.n	8016c16 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d105      	bne.n	8016c16 <_Z41__static_initialization_and_destruction_0ii+0x26>
const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::NodeStatus > _uavcan_gdtr_registrator_NodeStatus;
 8016c0a:	4805      	ldr	r0, [pc, #20]	; (8016c20 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8016c0c:	f7f1 ff4e 	bl	8008aac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev>
const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetNodeInfo > _uavcan_gdtr_registrator_GetNodeInfo;
 8016c10:	4804      	ldr	r0, [pc, #16]	; (8016c24 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8016c12:	f7f1 ffaf 	bl	8008b74 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev>
 8016c16:	bf00      	nop
 8016c18:	3708      	adds	r7, #8
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}
 8016c1e:	bf00      	nop
 8016c20:	200085dc 	.word	0x200085dc
 8016c24:	200085e0 	.word	0x200085e0

08016c28 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE17TransferForwarder22handleIncomingTransferERNS_16IncomingTransferE>:
        void handleIncomingTransfer(IncomingTransfer& transfer)
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
            obj_.handleIncomingTransfer(transfer);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c36:	6839      	ldr	r1, [r7, #0]
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f000 f81d 	bl	8016c78 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>
        }
 8016c3e:	bf00      	nop
 8016c40:	3708      	adds	r7, #8
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}

08016c46 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEED1Ev>:
class UAVCAN_EXPORT ReceivedDataStructure : public DataType_, Noncopyable
 8016c46:	b580      	push	{r7, lr}
 8016c48:	b082      	sub	sp, #8
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
 8016c4e:	6878      	ldr	r0, [r7, #4]
 8016c50:	f7ee fed0 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	4618      	mov	r0, r3
 8016c58:	3708      	adds	r7, #8
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}

08016c5e <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>:
    struct ReceivedDataStructureSpec : public ReceivedDataStructure<DataStruct>
 8016c5e:	b580      	push	{r7, lr}
 8016c60:	b082      	sub	sp, #8
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7ff ffec 	bl	8016c46 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEED1Ev>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	4618      	mov	r0, r3
 8016c72:	3708      	adds	r7, #8
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE>:
void GenericSubscriber<DataSpec, DataStruct, TransferListenerType>::handleIncomingTransfer(IncomingTransfer& transfer)
 8016c78:	b590      	push	{r4, r7, lr}
 8016c7a:	b089      	sub	sp, #36	; 0x24
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	6039      	str	r1, [r7, #0]
    ReceivedDataStructureSpec rx_struct(&transfer);
 8016c82:	f107 0318 	add.w	r3, r7, #24
 8016c86:	6839      	ldr	r1, [r7, #0]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f000 f849 	bl	8016d20 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>
    BitStream bitstream(transfer);
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	f107 030c 	add.w	r3, r7, #12
 8016c94:	4611      	mov	r1, r2
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7ef f90a 	bl	8005eb0 <_ZN6uavcan9BitStreamC1ERNS_15ITransferBufferE>
    ScalarCodec codec(bitstream);
 8016c9c:	f107 020c 	add.w	r2, r7, #12
 8016ca0:	f107 0308 	add.w	r3, r7, #8
 8016ca4:	4611      	mov	r1, r2
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7ef f917 	bl	8005eda <_ZN6uavcan11ScalarCodecC1ERNS_9BitStreamE>
    const int decode_res = DataStruct::decode(rx_struct, codec);
 8016cac:	f107 0108 	add.w	r1, r7, #8
 8016cb0:	f107 0318 	add.w	r3, r7, #24
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f000 f841 	bl	8016d3e <_ZN6uavcan8protocol12GetNodeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>
 8016cbc:	61f8      	str	r0, [r7, #28]
    transfer.release();
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	3310      	adds	r3, #16
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	6838      	ldr	r0, [r7, #0]
 8016cc8:	4798      	blx	r3
    if (decode_res <= 0)
 8016cca:	69fb      	ldr	r3, [r7, #28]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	dc13      	bgt.n	8016cf8 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x80>
        failure_count_++;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	689b      	ldr	r3, [r3, #8]
 8016cd4:	1c5a      	adds	r2, r3, #1
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	609a      	str	r2, [r3, #8]
        node_.getDispatcher().getTransferPerfCounter().addError();
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	685b      	ldr	r3, [r3, #4]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7ef fe30 	bl	8006944 <_ZN6uavcan5INode13getDispatcherEv>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7ef fcfb 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 8016cec:	4603      	mov	r3, r0
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7ef f95f 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
 8016cf4:	2400      	movs	r4, #0
        return;
 8016cf6:	e009      	b.n	8016d0c <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE22handleIncomingTransferERNS_16IncomingTransferE+0x94>
    handleReceivedDataStruct(rx_struct);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	3308      	adds	r3, #8
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	f107 0218 	add.w	r2, r7, #24
 8016d04:	4611      	mov	r1, r2
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	4798      	blx	r3
 8016d0a:	2401      	movs	r4, #1
 8016d0c:	f107 0318 	add.w	r3, r7, #24
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7ff ffa4 	bl	8016c5e <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecD1Ev>
 8016d16:	2c01      	cmp	r4, #1
    ReceivedDataStructureSpec rx_struct(&transfer);
 8016d18:	bf00      	nop
}
 8016d1a:	3724      	adds	r7, #36	; 0x24
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd90      	pop	{r4, r7, pc}

08016d20 <_ZN6uavcan17GenericSubscriberINS_8protocol12GetNodeInfo_ENS2_8Request_ILi0EEENS_16TransferListenerEE25ReceivedDataStructureSpecC1EPKNS_16IncomingTransferE>:
        ReceivedDataStructureSpec(const IncomingTransfer* arg_transfer) :
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
 8016d28:	6039      	str	r1, [r7, #0]
            ReceivedDataStructure<DataStruct>(arg_transfer)
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6839      	ldr	r1, [r7, #0]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f000 f816 	bl	8016d60 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>
        { }
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	4618      	mov	r0, r3
 8016d38:	3708      	adds	r7, #8
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}

08016d3e <_ZN6uavcan8protocol12GetNodeInfo_8Request_ILi0EE6decodeERS3_RNS_11ScalarCodecENS_25TailArrayOptimizationModeE>:
int GetNodeInfo_::Request_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
 8016d3e:	b480      	push	{r7}
 8016d40:	b087      	sub	sp, #28
 8016d42:	af00      	add	r7, sp, #0
 8016d44:	60f8      	str	r0, [r7, #12]
 8016d46:	60b9      	str	r1, [r7, #8]
 8016d48:	4613      	mov	r3, r2
 8016d4a:	71fb      	strb	r3, [r7, #7]
    int res = 1;
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	617b      	str	r3, [r7, #20]
    return res;
 8016d50:	697b      	ldr	r3, [r7, #20]
}
 8016d52:	4618      	mov	r0, r3
 8016d54:	371c      	adds	r7, #28
 8016d56:	46bd      	mov	sp, r7
 8016d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5c:	4770      	bx	lr
	...

08016d60 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE>:
    ReceivedDataStructure(const IncomingTransfer* arg_transfer)
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
 8016d68:	6039      	str	r1, [r7, #0]
        : _transfer_(arg_transfer)
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f000 f81a 	bl	8016da4 <_ZN6uavcan8protocol12GetNodeInfo_8Request_ILi0EEC1Ev>
 8016d70:	6878      	ldr	r0, [r7, #4]
 8016d72:	f7ee fe34 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	683a      	ldr	r2, [r7, #0]
 8016d7a:	601a      	str	r2, [r3, #0]
        UAVCAN_ASSERT(arg_transfer != UAVCAN_NULLPTR);
 8016d7c:	683b      	ldr	r3, [r7, #0]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d105      	bne.n	8016d8e <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x2e>
 8016d82:	4b05      	ldr	r3, [pc, #20]	; (8016d98 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x38>)
 8016d84:	4a05      	ldr	r2, [pc, #20]	; (8016d9c <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x3c>)
 8016d86:	213d      	movs	r1, #61	; 0x3d
 8016d88:	4805      	ldr	r0, [pc, #20]	; (8016da0 <_ZN6uavcan21ReceivedDataStructureINS_8protocol12GetNodeInfo_8Request_ILi0EEEEC1EPKNS_16IncomingTransferE+0x40>)
 8016d8a:	f009 fbff 	bl	802058c <__assert_func>
    }
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	4618      	mov	r0, r3
 8016d92:	3708      	adds	r7, #8
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	080236f8 	.word	0x080236f8
 8016d9c:	0802a4f8 	.word	0x0802a4f8
 8016da0:	08023710 	.word	0x08023710

08016da4 <_ZN6uavcan8protocol12GetNodeInfo_8Request_ILi0EEC1Ev>:
        Request_()
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b082      	sub	sp, #8
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
            ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check
 8016dac:	f7ee fe10 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        }
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	4618      	mov	r0, r3
 8016db4:	3708      	adds	r7, #8
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <_GLOBAL__sub_I__ZNK6uavcan18NodeStatusProvider21isNodeInfoInitializedEv>:
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016dc2:	2001      	movs	r0, #1
 8016dc4:	f7ff ff14 	bl	8016bf0 <_Z41__static_initialization_and_destruction_0ii>
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>:
    const DataTypeDescriptor& getDataTypeDescriptor() const { return data_type_; }
 8016dca:	b480      	push	{r7}
 8016dcc:	b083      	sub	sp, #12
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	689b      	ldr	r3, [r3, #8]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	370c      	adds	r7, #12
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr

08016de2 <_ZNK6uavcan14LinkedListRootINS_16TransferListenerEE3getEv>:
    T* get() const { return root_; }
 8016de2:	b480      	push	{r7}
 8016de4:	b083      	sub	sp, #12
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	6078      	str	r0, [r7, #4]
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	4618      	mov	r0, r3
 8016df0:	370c      	adds	r7, #12
 8016df2:	46bd      	mov	sp, r7
 8016df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df8:	4770      	bx	lr

08016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 8016dfa:	b480      	push	{r7}
 8016dfc:	b083      	sub	sp, #12
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	6078      	str	r0, [r7, #4]
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	4618      	mov	r0, r3
 8016e08:	370c      	adds	r7, #12
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e10:	4770      	bx	lr

08016e12 <_ZN6uavcan3minItEERKT_S3_S3_>:
const T& min(const T& a, const T& b)
 8016e12:	b480      	push	{r7}
 8016e14:	b083      	sub	sp, #12
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	6078      	str	r0, [r7, #4]
 8016e1a:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	881a      	ldrh	r2, [r3, #0]
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	881b      	ldrh	r3, [r3, #0]
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d201      	bcs.n	8016e2c <_ZN6uavcan3minItEERKT_S3_S3_+0x1a>
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	e000      	b.n	8016e2e <_ZN6uavcan3minItEERKT_S3_S3_+0x1c>
 8016e2c:	687b      	ldr	r3, [r7, #4]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	370c      	adds	r7, #12
 8016e32:	46bd      	mov	sp, r7
 8016e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e38:	4770      	bx	lr
	...

08016e3c <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj>:
    LimitedPoolAllocator(IPoolAllocator& allocator, std::size_t max_blocks)
 8016e3c:	b580      	push	{r7, lr}
 8016e3e:	b086      	sub	sp, #24
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	607a      	str	r2, [r7, #4]
        , used_blocks_(0)
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7ef f880 	bl	8005f50 <_ZN6uavcan14IPoolAllocatorC1Ev>
 8016e50:	4a13      	ldr	r2, [pc, #76]	; (8016ea0 <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj+0x64>)
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	601a      	str	r2, [r3, #0]
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	68ba      	ldr	r2, [r7, #8]
 8016e5a:	605a      	str	r2, [r3, #4]
        , max_blocks_(static_cast<uint16_t>(min<std::size_t>(max_blocks, 0xFFFFU)))
 8016e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e60:	617b      	str	r3, [r7, #20]
 8016e62:	f107 0214 	add.w	r2, r7, #20
 8016e66:	1d3b      	adds	r3, r7, #4
 8016e68:	4611      	mov	r1, r2
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7fd f9b4 	bl	80141d8 <_ZN6uavcan3minIjEERKT_S3_S3_>
 8016e70:	4603      	mov	r3, r0
 8016e72:	681b      	ldr	r3, [r3, #0]
        , used_blocks_(0)
 8016e74:	b29a      	uxth	r2, r3
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	811a      	strh	r2, [r3, #8]
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	815a      	strh	r2, [r3, #10]
        UAVCAN_ASSERT(max_blocks_ > 0);
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	891b      	ldrh	r3, [r3, #8]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d105      	bne.n	8016e94 <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj+0x58>
 8016e88:	4b06      	ldr	r3, [pc, #24]	; (8016ea4 <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj+0x68>)
 8016e8a:	4a07      	ldr	r2, [pc, #28]	; (8016ea8 <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj+0x6c>)
 8016e8c:	217c      	movs	r1, #124	; 0x7c
 8016e8e:	4807      	ldr	r0, [pc, #28]	; (8016eac <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj+0x70>)
 8016e90:	f009 fb7c 	bl	802058c <__assert_func>
    }
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	4618      	mov	r0, r3
 8016e98:	3718      	adds	r7, #24
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	0802c770 	.word	0x0802c770
 8016ea4:	0802376c 	.word	0x0802376c
 8016ea8:	0802a890 	.word	0x0802a890
 8016eac:	0802377c 	.word	0x0802377c

08016eb0 <_ZN6uavcan14CanSelectMasksC1Ev>:
    CanSelectMasks() :
 8016eb0:	b480      	push	{r7}
 8016eb2:	b083      	sub	sp, #12
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
        write(0)
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	701a      	strb	r2, [r3, #0]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	705a      	strb	r2, [r3, #1]
    { }
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	370c      	adds	r7, #12
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed0:	4770      	bx	lr
	...

08016ed4 <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt>:
        Entry(const CanFrame& arg_frame, MonotonicTime arg_deadline, Qos arg_qos, CanIOFlags arg_flags)
 8016ed4:	b590      	push	{r4, r7, lr}
 8016ed6:	b085      	sub	sp, #20
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	607a      	str	r2, [r7, #4]
 8016ee0:	70fb      	strb	r3, [r7, #3]
            , flags(arg_flags)
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f001 f80d 	bl	8017f04 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEEC1Ev>
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	687a      	ldr	r2, [r7, #4]
 8016eee:	3308      	adds	r3, #8
 8016ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ef4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	68ba      	ldr	r2, [r7, #8]
 8016efc:	f103 0410 	add.w	r4, r3, #16
 8016f00:	4613      	mov	r3, r2
 8016f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	78fa      	ldrb	r2, [r7, #3]
 8016f0c:	f883 2020 	strb.w	r2, [r3, #32]
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	8c3a      	ldrh	r2, [r7, #32]
 8016f14:	845a      	strh	r2, [r3, #34]	; 0x22
            UAVCAN_ASSERT((qos == Volatile) || (qos == Persistent));
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d00a      	beq.n	8016f36 <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x62>
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d005      	beq.n	8016f36 <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x62>
 8016f2a:	4b06      	ldr	r3, [pc, #24]	; (8016f44 <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x70>)
 8016f2c:	4a06      	ldr	r2, [pc, #24]	; (8016f48 <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x74>)
 8016f2e:	213a      	movs	r1, #58	; 0x3a
 8016f30:	4806      	ldr	r0, [pc, #24]	; (8016f4c <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x78>)
 8016f32:	f009 fb2b 	bl	802058c <__assert_func>
            IsDynamicallyAllocatable<Entry>::check();
 8016f36:	f001 f800 	bl	8017f3a <_ZN6uavcan24IsDynamicallyAllocatableINS_10CanTxQueue5EntryEE5checkEv>
        }
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3714      	adds	r7, #20
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd90      	pop	{r4, r7, pc}
 8016f44:	080237c0 	.word	0x080237c0
 8016f48:	0802a614 	.word	0x0802a614
 8016f4c:	080237ec 	.word	0x080237ec

08016f50 <_ZNK6uavcan10CanTxQueue5Entry9isExpiredENS_13MonotonicTimeE>:
        bool isExpired(MonotonicTime timestamp) const { return timestamp > deadline; }
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b082      	sub	sp, #8
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
 8016f5a:	683a      	ldr	r2, [r7, #0]
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	3308      	adds	r3, #8
 8016f60:	4619      	mov	r1, r3
 8016f62:	4610      	mov	r0, r2
 8016f64:	f7fe fbb6 	bl	80156d4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgtERKS1_>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	3708      	adds	r7, #8
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}

08016f72 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKS1_>:
        bool qosHigherThan(const Entry& rhs) const { return qosHigherThan(rhs.frame, Qos(rhs.qos)); }
 8016f72:	b580      	push	{r7, lr}
 8016f74:	b082      	sub	sp, #8
 8016f76:	af00      	add	r7, sp, #0
 8016f78:	6078      	str	r0, [r7, #4]
 8016f7a:	6039      	str	r1, [r7, #0]
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	f103 0110 	add.w	r1, r3, #16
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f000 f8e4 	bl	8017158 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKNS_8CanFrameENS0_3QosE>
 8016f90:	4603      	mov	r3, r0
 8016f92:	4618      	mov	r0, r3
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorC1ERKNS_8CanFrameE>:
        explicit PriorityInsertionComparator(const CanFrame& frm) : frm_(frm) { }
 8016f9a:	b480      	push	{r7}
 8016f9c:	b083      	sub	sp, #12
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
 8016fa2:	6039      	str	r1, [r7, #0]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	683a      	ldr	r2, [r7, #0]
 8016fa8:	601a      	str	r2, [r3, #0]
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	4618      	mov	r0, r3
 8016fae:	370c      	adds	r7, #12
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr

08016fb8 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE>:
        bool operator()(const Entry* entry)
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b082      	sub	sp, #8
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	6039      	str	r1, [r7, #0]
            UAVCAN_ASSERT(entry);
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d105      	bne.n	8016fd4 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE+0x1c>
 8016fc8:	4b09      	ldr	r3, [pc, #36]	; (8016ff0 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE+0x38>)
 8016fca:	4a0a      	ldr	r2, [pc, #40]	; (8016ff4 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE+0x3c>)
 8016fcc:	2154      	movs	r1, #84	; 0x54
 8016fce:	480a      	ldr	r0, [pc, #40]	; (8016ff8 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE+0x40>)
 8016fd0:	f009 fadc 	bl	802058c <__assert_func>
            return frm_.priorityHigherThan(entry->frame);
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681a      	ldr	r2, [r3, #0]
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	3310      	adds	r3, #16
 8016fdc:	4619      	mov	r1, r3
 8016fde:	4610      	mov	r0, r2
 8016fe0:	f7fc ffe9 	bl	8013fb6 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_>
 8016fe4:	4603      	mov	r3, r0
        }
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3708      	adds	r7, #8
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	08023834 	.word	0x08023834
 8016ff4:	0802a734 	.word	0x0802a734
 8016ff8:	080237ec 	.word	0x080237ec

08016ffc <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEED1Ev>:
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f7ee fcf5 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	4618      	mov	r0, r3
 801700e:	3708      	adds	r7, #8
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <_ZN6uavcan10CanTxQueueC1ERNS_14IPoolAllocatorERNS_12ISystemClockEj>:
    CanTxQueue(IPoolAllocator& allocator, ISystemClock& sysclock, std::size_t allocator_quota)
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
 801701a:	60f8      	str	r0, [r7, #12]
 801701c:	60b9      	str	r1, [r7, #8]
 801701e:	607a      	str	r2, [r7, #4]
 8017020:	603b      	str	r3, [r7, #0]
        , rejected_frames_cnt_(0)
 8017022:	68f8      	ldr	r0, [r7, #12]
 8017024:	f7ee fcdb 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	3304      	adds	r3, #4
 801702c:	4618      	mov	r0, r3
 801702e:	f000 ff8f 	bl	8017f50 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEEC1Ev>
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	3308      	adds	r3, #8
 8017036:	683a      	ldr	r2, [r7, #0]
 8017038:	68b9      	ldr	r1, [r7, #8]
 801703a:	4618      	mov	r0, r3
 801703c:	f7ff fefe 	bl	8016e3c <_ZN6uavcan20LimitedPoolAllocatorC1ERNS_14IPoolAllocatorEj>
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	615a      	str	r2, [r3, #20]
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	2200      	movs	r2, #0
 801704a:	619a      	str	r2, [r3, #24]
    { }
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	4618      	mov	r0, r3
 8017050:	3710      	adds	r7, #16
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}

08017056 <_ZNK6uavcan10CanTxQueue21getRejectedFrameCountEv>:
    uint32_t getRejectedFrameCount() const { return rejected_frames_cnt_; }
 8017056:	b480      	push	{r7}
 8017058:	b083      	sub	sp, #12
 801705a:	af00      	add	r7, sp, #0
 801705c:	6078      	str	r0, [r7, #4]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	699b      	ldr	r3, [r3, #24]
 8017062:	4618      	mov	r0, r3
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr

0801706e <_ZNK6uavcan10CanTxQueue7isEmptyEv>:
    bool isEmpty() const { return queue_.isEmpty(); }
 801706e:	b580      	push	{r7, lr}
 8017070:	b082      	sub	sp, #8
 8017072:	af00      	add	r7, sp, #0
 8017074:	6078      	str	r0, [r7, #4]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	3304      	adds	r3, #4
 801707a:	4618      	mov	r0, r3
 801707c:	f000 ff77 	bl	8017f6e <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE7isEmptyEv>
 8017080:	4603      	mov	r3, r0
 8017082:	4618      	mov	r0, r3
 8017084:	3708      	adds	r7, #8
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}

0801708a <_ZN6uavcan20CanIfacePerfCountersC1Ev>:
    CanIfacePerfCounters()
 801708a:	b490      	push	{r4, r7}
 801708c:	b082      	sub	sp, #8
 801708e:	af00      	add	r7, sp, #0
 8017090:	6078      	str	r0, [r7, #4]
        , errors(0)
 8017092:	687a      	ldr	r2, [r7, #4]
 8017094:	f04f 0300 	mov.w	r3, #0
 8017098:	f04f 0400 	mov.w	r4, #0
 801709c:	e9c2 3400 	strd	r3, r4, [r2]
 80170a0:	687a      	ldr	r2, [r7, #4]
 80170a2:	f04f 0300 	mov.w	r3, #0
 80170a6:	f04f 0400 	mov.w	r4, #0
 80170aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80170ae:	687a      	ldr	r2, [r7, #4]
 80170b0:	f04f 0300 	mov.w	r3, #0
 80170b4:	f04f 0400 	mov.w	r4, #0
 80170b8:	e9c2 3404 	strd	r3, r4, [r2, #16]
    { }
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	4618      	mov	r0, r3
 80170c0:	3708      	adds	r7, #8
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bc90      	pop	{r4, r7}
 80170c6:	4770      	bx	lr

080170c8 <_ZN6uavcan12CanIOManager18IfaceFrameCountersC1Ev>:
        IfaceFrameCounters()
 80170c8:	b490      	push	{r4, r7}
 80170ca:	b082      	sub	sp, #8
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
            , frames_rx(0)
 80170d0:	687a      	ldr	r2, [r7, #4]
 80170d2:	f04f 0300 	mov.w	r3, #0
 80170d6:	f04f 0400 	mov.w	r4, #0
 80170da:	e9c2 3400 	strd	r3, r4, [r2]
 80170de:	687a      	ldr	r2, [r7, #4]
 80170e0:	f04f 0300 	mov.w	r3, #0
 80170e4:	f04f 0400 	mov.w	r4, #0
 80170e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
        { }
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	4618      	mov	r0, r3
 80170f0:	3708      	adds	r7, #8
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bc90      	pop	{r4, r7}
 80170f6:	4770      	bx	lr

080170f8 <_ZN6uavcan10CanTxQueue5EntryD1Ev>:
    struct Entry : public LinkedListNode<Entry>  // Not required to be packed - fits the block in any case
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	3308      	adds	r3, #8
 8017104:	4618      	mov	r0, r3
 8017106:	f7ef f805 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	4618      	mov	r0, r3
 801710e:	f000 ff08 	bl	8017f22 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEED1Ev>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	4618      	mov	r0, r3
 8017116:	3708      	adds	r7, #8
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <_ZN6uavcan10CanTxQueue5Entry7destroyERPS1_RNS_14IPoolAllocatorE>:

/*
 * CanTxQueue::Entry
 */
void CanTxQueue::Entry::destroy(Entry*& obj, IPoolAllocator& allocator)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b082      	sub	sp, #8
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	6039      	str	r1, [r7, #0]
    if (obj != UAVCAN_NULLPTR)
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d010      	beq.n	8017150 <_ZN6uavcan10CanTxQueue5Entry7destroyERPS1_RNS_14IPoolAllocatorE+0x34>
    {
        obj->~Entry();
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	4618      	mov	r0, r3
 8017134:	f7ff ffe0 	bl	80170f8 <_ZN6uavcan10CanTxQueue5EntryD1Ev>
        allocator.deallocate(obj);
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	330c      	adds	r3, #12
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	6812      	ldr	r2, [r2, #0]
 8017144:	4611      	mov	r1, r2
 8017146:	6838      	ldr	r0, [r7, #0]
 8017148:	4798      	blx	r3
        obj = UAVCAN_NULLPTR;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2200      	movs	r2, #0
 801714e:	601a      	str	r2, [r3, #0]
    }
}
 8017150:	bf00      	nop
 8017152:	3708      	adds	r7, #8
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKNS_8CanFrameENS0_3QosE>:

bool CanTxQueue::Entry::qosHigherThan(const CanFrame& rhs_frame, Qos rhs_qos) const
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b084      	sub	sp, #16
 801715c:	af00      	add	r7, sp, #0
 801715e:	60f8      	str	r0, [r7, #12]
 8017160:	60b9      	str	r1, [r7, #8]
 8017162:	4613      	mov	r3, r2
 8017164:	71fb      	strb	r3, [r7, #7]
    if (qos != rhs_qos)
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	f893 3020 	ldrb.w	r3, [r3, #32]
 801716c:	79fa      	ldrb	r2, [r7, #7]
 801716e:	429a      	cmp	r2, r3
 8017170:	d009      	beq.n	8017186 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKNS_8CanFrameENS0_3QosE+0x2e>
    {
        return qos > rhs_qos;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017178:	79fa      	ldrb	r2, [r7, #7]
 801717a:	429a      	cmp	r2, r3
 801717c:	bf34      	ite	cc
 801717e:	2301      	movcc	r3, #1
 8017180:	2300      	movcs	r3, #0
 8017182:	b2db      	uxtb	r3, r3
 8017184:	e006      	b.n	8017194 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKNS_8CanFrameENS0_3QosE+0x3c>
    }
    return frame.priorityHigherThan(rhs_frame);
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	3310      	adds	r3, #16
 801718a:	68b9      	ldr	r1, [r7, #8]
 801718c:	4618      	mov	r0, r3
 801718e:	f7fc ff12 	bl	8013fb6 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_>
 8017192:	4603      	mov	r3, r0
}
 8017194:	4618      	mov	r0, r3
 8017196:	3710      	adds	r7, #16
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}

0801719c <_ZN6uavcan10CanTxQueueD1Ev>:
#endif

/*
 * CanTxQueue
 */
CanTxQueue::~CanTxQueue()
 801719c:	b580      	push	{r7, lr}
 801719e:	b084      	sub	sp, #16
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
{
    Entry* p = queue_.get();
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	3304      	adds	r3, #4
 80171a8:	4618      	mov	r0, r3
 80171aa:	f000 fef1 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 80171ae:	4603      	mov	r3, r0
 80171b0:	60bb      	str	r3, [r7, #8]
    while (p)
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d00d      	beq.n	80171d4 <_ZN6uavcan10CanTxQueueD1Ev+0x38>
    {
        Entry* const next = p->getNextListNode();
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f000 fef4 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 80171c0:	60f8      	str	r0, [r7, #12]
        remove(p);
 80171c2:	f107 0308 	add.w	r3, r7, #8
 80171c6:	4619      	mov	r1, r3
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f000 f975 	bl	80174b8 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE>
        p = next;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	60bb      	str	r3, [r7, #8]
    while (p)
 80171d2:	e7ee      	b.n	80171b2 <_ZN6uavcan10CanTxQueueD1Ev+0x16>
CanTxQueue::~CanTxQueue()
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	3308      	adds	r3, #8
 80171d8:	4618      	mov	r0, r3
 80171da:	f001 f83f 	bl	801825c <_ZN6uavcan20LimitedPoolAllocatorD1Ev>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	3304      	adds	r3, #4
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7ff ff0a 	bl	8016ffc <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEED1Ev>
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f7ee fc03 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
    }
}
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4618      	mov	r0, r3
 80171f2:	3710      	adds	r7, #16
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <_ZN6uavcan10CanTxQueue21registerRejectedFrameEv>:

void CanTxQueue::registerRejectedFrame()
{
 80171f8:	b590      	push	{r4, r7, lr}
 80171fa:	b083      	sub	sp, #12
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
    if (rejected_frames_cnt_ < NumericTraits<uint32_t>::max())
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	699c      	ldr	r4, [r3, #24]
 8017204:	f7ee fc22 	bl	8005a4c <_ZN6uavcan13NumericTraitsImE3maxEv>
 8017208:	4603      	mov	r3, r0
 801720a:	429c      	cmp	r4, r3
 801720c:	bf34      	ite	cc
 801720e:	2301      	movcc	r3, #1
 8017210:	2300      	movcs	r3, #0
 8017212:	b2db      	uxtb	r3, r3
 8017214:	2b00      	cmp	r3, #0
 8017216:	d004      	beq.n	8017222 <_ZN6uavcan10CanTxQueue21registerRejectedFrameEv+0x2a>
    {
        rejected_frames_cnt_++;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	699b      	ldr	r3, [r3, #24]
 801721c:	1c5a      	adds	r2, r3, #1
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	619a      	str	r2, [r3, #24]
    }
}
 8017222:	bf00      	nop
 8017224:	370c      	adds	r7, #12
 8017226:	46bd      	mov	sp, r7
 8017228:	bd90      	pop	{r4, r7, pc}
	...

0801722c <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt>:

void CanTxQueue::push(const CanFrame& frame, MonotonicTime tx_deadline, Qos qos, CanIOFlags flags)
{
 801722c:	b5b0      	push	{r4, r5, r7, lr}
 801722e:	b094      	sub	sp, #80	; 0x50
 8017230:	af02      	add	r7, sp, #8
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	70fb      	strb	r3, [r7, #3]
    const MonotonicTime timestamp = sysclock_.getMonotonic();
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	6959      	ldr	r1, [r3, #20]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	695b      	ldr	r3, [r3, #20]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	3308      	adds	r3, #8
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	f107 0220 	add.w	r2, r7, #32
 801724c:	4610      	mov	r0, r2
 801724e:	4798      	blx	r3

    if (timestamp >= tx_deadline)
 8017250:	f107 0320 	add.w	r3, r7, #32
 8017254:	6879      	ldr	r1, [r7, #4]
 8017256:	4618      	mov	r0, r3
 8017258:	f7fe fbdf 	bl	8015a1a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgeERKS1_>
 801725c:	4603      	mov	r3, r0
 801725e:	2b00      	cmp	r3, #0
 8017260:	d004      	beq.n	801726c <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x40>
    {
        UAVCAN_TRACE("CanTxQueue", "Push rejected: already expired");
        registerRejectedFrame();
 8017262:	68f8      	ldr	r0, [r7, #12]
 8017264:	f7ff ffc8 	bl	80171f8 <_ZN6uavcan10CanTxQueue21registerRejectedFrameEv>
 8017268:	2400      	movs	r4, #0
        return;
 801726a:	e0c4      	b.n	80173f6 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1ca>
    }

    void* praw = allocator_.allocate(sizeof(Entry));
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	3308      	adds	r3, #8
 8017270:	2128      	movs	r1, #40	; 0x28
 8017272:	4618      	mov	r0, r3
 8017274:	f006 fe15 	bl	801dea2 <_ZN6uavcan20LimitedPoolAllocator8allocateEj>
 8017278:	6478      	str	r0, [r7, #68]	; 0x44
    if (praw == UAVCAN_NULLPTR)
 801727a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801727c:	2b00      	cmp	r3, #0
 801727e:	d139      	bne.n	80172f4 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0xc8>
    {
        UAVCAN_TRACE("CanTxQueue", "Push OOM #1, cleanup");
        // No memory left in the pool, so we try to remove expired frames
        Entry* p = queue_.get();
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	3304      	adds	r3, #4
 8017284:	4618      	mov	r0, r3
 8017286:	f000 fe83 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 801728a:	4603      	mov	r3, r0
 801728c:	61bb      	str	r3, [r7, #24]
        while (p)
 801728e:	69bb      	ldr	r3, [r7, #24]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d028      	beq.n	80172e6 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0xba>
        {
            Entry* const next = p->getNextListNode();
 8017294:	69bb      	ldr	r3, [r7, #24]
 8017296:	4618      	mov	r0, r3
 8017298:	f000 fe86 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 801729c:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (p->isExpired(timestamp))
 801729e:	69bc      	ldr	r4, [r7, #24]
 80172a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80172a4:	f107 0220 	add.w	r2, r7, #32
 80172a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80172b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80172b4:	4619      	mov	r1, r3
 80172b6:	4620      	mov	r0, r4
 80172b8:	f7ff fe4a 	bl	8016f50 <_ZNK6uavcan10CanTxQueue5Entry9isExpiredENS_13MonotonicTimeE>
 80172bc:	4603      	mov	r3, r0
 80172be:	461c      	mov	r4, r3
 80172c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80172c4:	4618      	mov	r0, r3
 80172c6:	f7ee ff25 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80172ca:	2c00      	cmp	r4, #0
 80172cc:	d008      	beq.n	80172e0 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0xb4>
            {
                UAVCAN_TRACE("CanTxQueue", "Push: Expired %s", p->toString().c_str());
                registerRejectedFrame();
 80172ce:	68f8      	ldr	r0, [r7, #12]
 80172d0:	f7ff ff92 	bl	80171f8 <_ZN6uavcan10CanTxQueue21registerRejectedFrameEv>
                remove(p);
 80172d4:	f107 0318 	add.w	r3, r7, #24
 80172d8:	4619      	mov	r1, r3
 80172da:	68f8      	ldr	r0, [r7, #12]
 80172dc:	f000 f8ec 	bl	80174b8 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE>
            }
            p = next;
 80172e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172e2:	61bb      	str	r3, [r7, #24]
        while (p)
 80172e4:	e7d3      	b.n	801728e <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x62>
        }
        praw = allocator_.allocate(sizeof(Entry));         // Try again
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	3308      	adds	r3, #8
 80172ea:	2128      	movs	r1, #40	; 0x28
 80172ec:	4618      	mov	r0, r3
 80172ee:	f006 fdd8 	bl	801dea2 <_ZN6uavcan20LimitedPoolAllocator8allocateEj>
 80172f2:	6478      	str	r0, [r7, #68]	; 0x44
    }

    if (praw == UAVCAN_NULLPTR)
 80172f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d13c      	bne.n	8017374 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x148>
    {
        UAVCAN_TRACE("CanTxQueue", "Push OOM #2, QoS arbitration");
        registerRejectedFrame();
 80172fa:	68f8      	ldr	r0, [r7, #12]
 80172fc:	f7ff ff7c 	bl	80171f8 <_ZN6uavcan10CanTxQueue21registerRejectedFrameEv>

        // Find a frame with lowest QoS
        Entry* p = queue_.get();
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	3304      	adds	r3, #4
 8017304:	4618      	mov	r0, r3
 8017306:	f000 fe43 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 801730a:	6438      	str	r0, [r7, #64]	; 0x40
        if (p == UAVCAN_NULLPTR)
 801730c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801730e:	2b00      	cmp	r3, #0
 8017310:	d02b      	beq.n	801736a <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x13e>
        {
            UAVCAN_TRACE("CanTxQueue", "Push rejected: Nothing to replace");
            return;
        }
        Entry* lowestqos = p;
 8017312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017314:	617b      	str	r3, [r7, #20]
        while (p)
 8017316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017318:	2b00      	cmp	r3, #0
 801731a:	d00f      	beq.n	801733c <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x110>
        {
            if (lowestqos->qosHigherThan(*p))
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017320:	4618      	mov	r0, r3
 8017322:	f7ff fe26 	bl	8016f72 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKS1_>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d001      	beq.n	8017330 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x104>
            {
                lowestqos = p;
 801732c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801732e:	617b      	str	r3, [r7, #20]
            }
            p = p->getNextListNode();
 8017330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017332:	4618      	mov	r0, r3
 8017334:	f000 fe38 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8017338:	6438      	str	r0, [r7, #64]	; 0x40
        while (p)
 801733a:	e7ec      	b.n	8017316 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0xea>
        }
        // Note that frame with *equal* QoS will be replaced too.
        if (lowestqos->qosHigherThan(frame, qos))           // Frame that we want to transmit has lowest QoS
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	78fa      	ldrb	r2, [r7, #3]
 8017340:	68b9      	ldr	r1, [r7, #8]
 8017342:	4618      	mov	r0, r3
 8017344:	f7ff ff08 	bl	8017158 <_ZNK6uavcan10CanTxQueue5Entry13qosHigherThanERKNS_8CanFrameENS0_3QosE>
 8017348:	4603      	mov	r3, r0
 801734a:	2b00      	cmp	r3, #0
 801734c:	d10f      	bne.n	801736e <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x142>
        {
            UAVCAN_TRACE("CanTxQueue", "Push rejected: low QoS");
            return;                                         // What a loser.
        }
        UAVCAN_TRACE("CanTxQueue", "Push: Replacing %s", lowestqos->toString().c_str());
        remove(lowestqos);
 801734e:	f107 0314 	add.w	r3, r7, #20
 8017352:	4619      	mov	r1, r3
 8017354:	68f8      	ldr	r0, [r7, #12]
 8017356:	f000 f8af 	bl	80174b8 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE>
        praw = allocator_.allocate(sizeof(Entry));        // Try again
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	3308      	adds	r3, #8
 801735e:	2128      	movs	r1, #40	; 0x28
 8017360:	4618      	mov	r0, r3
 8017362:	f006 fd9e 	bl	801dea2 <_ZN6uavcan20LimitedPoolAllocator8allocateEj>
 8017366:	6478      	str	r0, [r7, #68]	; 0x44
 8017368:	e004      	b.n	8017374 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x148>
            return;
 801736a:	bf00      	nop
 801736c:	e000      	b.n	8017370 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x144>
            return;                                         // What a loser.
 801736e:	bf00      	nop
 8017370:	2400      	movs	r4, #0
 8017372:	e040      	b.n	80173f6 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1ca>
    }

    if (praw == UAVCAN_NULLPTR)
 8017374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017376:	2b00      	cmp	r3, #0
 8017378:	d101      	bne.n	801737e <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x152>
 801737a:	2400      	movs	r4, #0
    {
        return;                                            // Seems that there is no memory at all.
 801737c:	e03b      	b.n	80173f6 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1ca>
    }
    Entry* entry = new (praw) Entry(frame, tx_deadline, qos, flags);
 801737e:	687a      	ldr	r2, [r7, #4]
 8017380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017388:	e883 0003 	stmia.w	r3, {r0, r1}
 801738c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8017390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017392:	4619      	mov	r1, r3
 8017394:	2028      	movs	r0, #40	; 0x28
 8017396:	f7ee fdaf 	bl	8005ef8 <_ZnwjPv>
 801739a:	4604      	mov	r4, r0
 801739c:	2c00      	cmp	r4, #0
 801739e:	d00b      	beq.n	80173b8 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x18c>
 80173a0:	78fa      	ldrb	r2, [r7, #3]
 80173a2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80173a6:	9300      	str	r3, [sp, #0]
 80173a8:	4613      	mov	r3, r2
 80173aa:	462a      	mov	r2, r5
 80173ac:	68b9      	ldr	r1, [r7, #8]
 80173ae:	4620      	mov	r0, r4
 80173b0:	f7ff fd90 	bl	8016ed4 <_ZN6uavcan10CanTxQueue5EntryC1ERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt>
 80173b4:	4623      	mov	r3, r4
 80173b6:	e000      	b.n	80173ba <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x18e>
 80173b8:	4623      	mov	r3, r4
 80173ba:	61fb      	str	r3, [r7, #28]
 80173bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7ee fea7 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    UAVCAN_ASSERT(entry);
 80173c6:	69fb      	ldr	r3, [r7, #28]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d105      	bne.n	80173d8 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1ac>
 80173cc:	4b0f      	ldr	r3, [pc, #60]	; (801740c <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1e0>)
 80173ce:	4a10      	ldr	r2, [pc, #64]	; (8017410 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1e4>)
 80173d0:	21b0      	movs	r1, #176	; 0xb0
 80173d2:	4810      	ldr	r0, [pc, #64]	; (8017414 <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt+0x1e8>)
 80173d4:	f009 f8da 	bl	802058c <__assert_func>
    queue_.insertBefore(entry, PriorityInsertionComparator(frame));
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	1d1c      	adds	r4, r3, #4
 80173dc:	69fd      	ldr	r5, [r7, #28]
 80173de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80173e2:	68b9      	ldr	r1, [r7, #8]
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7ff fdd8 	bl	8016f9a <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorC1ERKNS_8CanFrameE>
 80173ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80173ec:	4629      	mov	r1, r5
 80173ee:	4620      	mov	r0, r4
 80173f0:	f000 fde6 	bl	8017fc0 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_>
 80173f4:	2401      	movs	r4, #1
 80173f6:	f107 0320 	add.w	r3, r7, #32
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7ee fe8a 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8017400:	2c01      	cmp	r4, #1
    const MonotonicTime timestamp = sysclock_.getMonotonic();
 8017402:	bf00      	nop
}
 8017404:	3748      	adds	r7, #72	; 0x48
 8017406:	46bd      	mov	sp, r7
 8017408:	bdb0      	pop	{r4, r5, r7, pc}
 801740a:	bf00      	nop
 801740c:	08023834 	.word	0x08023834
 8017410:	0802a598 	.word	0x0802a598
 8017414:	0802383c 	.word	0x0802383c

08017418 <_ZN6uavcan10CanTxQueue4peekEv>:

CanTxQueue::Entry* CanTxQueue::peek()
{
 8017418:	b590      	push	{r4, r7, lr}
 801741a:	b08b      	sub	sp, #44	; 0x2c
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
    const MonotonicTime timestamp = sysclock_.getMonotonic();
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6959      	ldr	r1, [r3, #20]
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	695b      	ldr	r3, [r3, #20]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	3308      	adds	r3, #8
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	f107 0210 	add.w	r2, r7, #16
 8017432:	4610      	mov	r0, r2
 8017434:	4798      	blx	r3
    Entry* p = queue_.get();
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	3304      	adds	r3, #4
 801743a:	4618      	mov	r0, r3
 801743c:	f000 fda8 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 8017440:	4603      	mov	r3, r0
 8017442:	60fb      	str	r3, [r7, #12]
    while (p)
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d02a      	beq.n	80174a0 <_ZN6uavcan10CanTxQueue4peekEv+0x88>
    {
        if (p->isExpired(timestamp))
 801744a:	68fc      	ldr	r4, [r7, #12]
 801744c:	f107 0318 	add.w	r3, r7, #24
 8017450:	f107 0210 	add.w	r2, r7, #16
 8017454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017458:	e883 0003 	stmia.w	r3, {r0, r1}
 801745c:	f107 0318 	add.w	r3, r7, #24
 8017460:	4619      	mov	r1, r3
 8017462:	4620      	mov	r0, r4
 8017464:	f7ff fd74 	bl	8016f50 <_ZNK6uavcan10CanTxQueue5Entry9isExpiredENS_13MonotonicTimeE>
 8017468:	4603      	mov	r3, r0
 801746a:	461c      	mov	r4, r3
 801746c:	f107 0318 	add.w	r3, r7, #24
 8017470:	4618      	mov	r0, r3
 8017472:	f7ee fe4f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8017476:	2c00      	cmp	r4, #0
 8017478:	d010      	beq.n	801749c <_ZN6uavcan10CanTxQueue4peekEv+0x84>
        {
            UAVCAN_TRACE("CanTxQueue", "Peek: Expired %s", p->toString().c_str());
            Entry* const next = p->getNextListNode();
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	4618      	mov	r0, r3
 801747e:	f000 fd93 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8017482:	6278      	str	r0, [r7, #36]	; 0x24
            registerRejectedFrame();
 8017484:	6878      	ldr	r0, [r7, #4]
 8017486:	f7ff feb7 	bl	80171f8 <_ZN6uavcan10CanTxQueue21registerRejectedFrameEv>
            remove(p);
 801748a:	f107 030c 	add.w	r3, r7, #12
 801748e:	4619      	mov	r1, r3
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f000 f811 	bl	80174b8 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE>
            p = next;
 8017496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017498:	60fb      	str	r3, [r7, #12]
 801749a:	e7d3      	b.n	8017444 <_ZN6uavcan10CanTxQueue4peekEv+0x2c>
        }
        else
        {
            return p;
 801749c:	68fc      	ldr	r4, [r7, #12]
 801749e:	e000      	b.n	80174a2 <_ZN6uavcan10CanTxQueue4peekEv+0x8a>
        }
    }
    return UAVCAN_NULLPTR;
 80174a0:	2400      	movs	r4, #0
    const MonotonicTime timestamp = sysclock_.getMonotonic();
 80174a2:	f107 0310 	add.w	r3, r7, #16
 80174a6:	4618      	mov	r0, r3
 80174a8:	f7ee fe34 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80174ac:	4623      	mov	r3, r4
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	372c      	adds	r7, #44	; 0x2c
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd90      	pop	{r4, r7, pc}
	...

080174b8 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE>:

void CanTxQueue::remove(Entry*& entry)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
    if (entry == UAVCAN_NULLPTR)
 80174c2:	683b      	ldr	r3, [r7, #0]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d105      	bne.n	80174d6 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE+0x1e>
    {
        UAVCAN_ASSERT(0);
 80174ca:	4b0c      	ldr	r3, [pc, #48]	; (80174fc <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE+0x44>)
 80174cc:	4a0c      	ldr	r2, [pc, #48]	; (8017500 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE+0x48>)
 80174ce:	21ce      	movs	r1, #206	; 0xce
 80174d0:	480c      	ldr	r0, [pc, #48]	; (8017504 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE+0x4c>)
 80174d2:	f009 f85b 	bl	802058c <__assert_func>
        return;
    }
    queue_.remove(entry);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	1d1a      	adds	r2, r3, #4
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	4619      	mov	r1, r3
 80174e0:	4610      	mov	r0, r2
 80174e2:	f000 fddb 	bl	801809c <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_>
    Entry::destroy(entry, allocator_);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	3308      	adds	r3, #8
 80174ea:	4619      	mov	r1, r3
 80174ec:	6838      	ldr	r0, [r7, #0]
 80174ee:	f7ff fe15 	bl	801711c <_ZN6uavcan10CanTxQueue5Entry7destroyERPS1_RNS_14IPoolAllocatorE>
}
 80174f2:	bf00      	nop
 80174f4:	3708      	adds	r7, #8
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	bf00      	nop
 80174fc:	080238b4 	.word	0x080238b4
 8017500:	0802a798 	.word	0x0802a798
 8017504:	0802383c 	.word	0x0802383c

08017508 <_ZNK6uavcan10CanTxQueue26getTopPriorityPendingFrameEv>:

const CanFrame* CanTxQueue::getTopPriorityPendingFrame() const
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
    return (queue_.get() == UAVCAN_NULLPTR) ? UAVCAN_NULLPTR : &queue_.get()->frame;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	3304      	adds	r3, #4
 8017514:	4618      	mov	r0, r3
 8017516:	f000 fd3b 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 801751a:	4603      	mov	r3, r0
 801751c:	2b00      	cmp	r3, #0
 801751e:	d007      	beq.n	8017530 <_ZNK6uavcan10CanTxQueue26getTopPriorityPendingFrameEv+0x28>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	3304      	adds	r3, #4
 8017524:	4618      	mov	r0, r3
 8017526:	f000 fd33 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 801752a:	4603      	mov	r3, r0
 801752c:	3310      	adds	r3, #16
 801752e:	e000      	b.n	8017532 <_ZNK6uavcan10CanTxQueue26getTopPriorityPendingFrameEv+0x2a>
 8017530:	2300      	movs	r3, #0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3708      	adds	r7, #8
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}

0801753a <_ZNK6uavcan10CanTxQueue24topPriorityHigherOrEqualERKNS_8CanFrameE>:

bool CanTxQueue::topPriorityHigherOrEqual(const CanFrame& rhs_frame) const
{
 801753a:	b580      	push	{r7, lr}
 801753c:	b084      	sub	sp, #16
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	6039      	str	r1, [r7, #0]
    const Entry* entry = queue_.get();
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	3304      	adds	r3, #4
 8017548:	4618      	mov	r0, r3
 801754a:	f000 fd21 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 801754e:	60f8      	str	r0, [r7, #12]
    if (entry == UAVCAN_NULLPTR)
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d101      	bne.n	801755a <_ZNK6uavcan10CanTxQueue24topPriorityHigherOrEqualERKNS_8CanFrameE+0x20>
    {
        return false;
 8017556:	2300      	movs	r3, #0
 8017558:	e009      	b.n	801756e <_ZNK6uavcan10CanTxQueue24topPriorityHigherOrEqualERKNS_8CanFrameE+0x34>
    }
    return !rhs_frame.priorityHigherThan(entry->frame);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	3310      	adds	r3, #16
 801755e:	4619      	mov	r1, r3
 8017560:	6838      	ldr	r0, [r7, #0]
 8017562:	f7fc fd28 	bl	8013fb6 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_>
 8017566:	4603      	mov	r3, r0
 8017568:	f083 0301 	eor.w	r3, r3, #1
 801756c:	b2db      	uxtb	r3, r3
}
 801756e:	4618      	mov	r0, r3
 8017570:	3710      	adds	r7, #16
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
	...

08017578 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt>:

/*
 * CanIOManager
 */
int CanIOManager::sendToIface(uint8_t iface_index, const CanFrame& frame, MonotonicTime tx_deadline, CanIOFlags flags)
{
 8017578:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801757c:	b088      	sub	sp, #32
 801757e:	af00      	add	r7, sp, #0
 8017580:	60f8      	str	r0, [r7, #12]
 8017582:	607a      	str	r2, [r7, #4]
 8017584:	603b      	str	r3, [r7, #0]
 8017586:	460b      	mov	r3, r1
 8017588:	72fb      	strb	r3, [r7, #11]
    UAVCAN_ASSERT(iface_index < MaxCanIfaces);
 801758a:	7afb      	ldrb	r3, [r7, #11]
 801758c:	2b02      	cmp	r3, #2
 801758e:	d905      	bls.n	801759c <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0x24>
 8017590:	4b28      	ldr	r3, [pc, #160]	; (8017634 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xbc>)
 8017592:	4a29      	ldr	r2, [pc, #164]	; (8017638 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xc0>)
 8017594:	21e9      	movs	r1, #233	; 0xe9
 8017596:	4829      	ldr	r0, [pc, #164]	; (801763c <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xc4>)
 8017598:	f008 fff8 	bl	802058c <__assert_func>
    ICanIface* const iface = driver_.getIface(iface_index);
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	3308      	adds	r3, #8
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	7af9      	ldrb	r1, [r7, #11]
 80175ac:	4610      	mov	r0, r2
 80175ae:	4798      	blx	r3
 80175b0:	61f8      	str	r0, [r7, #28]
    if (iface == UAVCAN_NULLPTR)
 80175b2:	69fb      	ldr	r3, [r7, #28]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d105      	bne.n	80175c4 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0x4c>
    {
        UAVCAN_ASSERT(0);   // Nonexistent interface
 80175b8:	4b21      	ldr	r3, [pc, #132]	; (8017640 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xc8>)
 80175ba:	4a1f      	ldr	r2, [pc, #124]	; (8017638 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xc0>)
 80175bc:	21ed      	movs	r1, #237	; 0xed
 80175be:	481f      	ldr	r0, [pc, #124]	; (801763c <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xc4>)
 80175c0:	f008 ffe4 	bl	802058c <__assert_func>
        return -ErrLogic;
    }
    const int res = iface->send(frame, tx_deadline, flags);
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	3308      	adds	r3, #8
 80175ca:	681c      	ldr	r4, [r3, #0]
 80175cc:	683a      	ldr	r2, [r7, #0]
 80175ce:	f107 0310 	add.w	r3, r7, #16
 80175d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80175da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80175dc:	f107 0210 	add.w	r2, r7, #16
 80175e0:	6879      	ldr	r1, [r7, #4]
 80175e2:	69f8      	ldr	r0, [r7, #28]
 80175e4:	47a0      	blx	r4
 80175e6:	4603      	mov	r3, r0
 80175e8:	61bb      	str	r3, [r7, #24]
 80175ea:	f107 0310 	add.w	r3, r7, #16
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7ee fd90 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if (res != 1)
    {
        UAVCAN_TRACE("CanIOManager", "Send failed: code %i, iface %i, frame %s",
                     res, iface_index, frame.toString().c_str());
    }
    if (res > 0)
 80175f4:	69bb      	ldr	r3, [r7, #24]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	dd15      	ble.n	8017626 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt+0xae>
    {
        counters_[iface_index].frames_tx += unsigned(res);
 80175fa:	7afb      	ldrb	r3, [r7, #11]
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	011b      	lsls	r3, r3, #4
 8017600:	4413      	add	r3, r2
 8017602:	3368      	adds	r3, #104	; 0x68
 8017604:	e9d3 1200 	ldrd	r1, r2, [r3]
 8017608:	69bb      	ldr	r3, [r7, #24]
 801760a:	469b      	mov	fp, r3
 801760c:	f04f 0c00 	mov.w	ip, #0
 8017610:	7af8      	ldrb	r0, [r7, #11]
 8017612:	eb1b 0301 	adds.w	r3, fp, r1
 8017616:	eb4c 0402 	adc.w	r4, ip, r2
 801761a:	68f9      	ldr	r1, [r7, #12]
 801761c:	0102      	lsls	r2, r0, #4
 801761e:	440a      	add	r2, r1
 8017620:	3268      	adds	r2, #104	; 0x68
 8017622:	e9c2 3400 	strd	r3, r4, [r2]
    }
    return res;
 8017626:	69bb      	ldr	r3, [r7, #24]
}
 8017628:	4618      	mov	r0, r3
 801762a:	3720      	adds	r7, #32
 801762c:	46bd      	mov	sp, r7
 801762e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8017632:	bf00      	nop
 8017634:	080238b8 	.word	0x080238b8
 8017638:	0802a7d8 	.word	0x0802a7d8
 801763c:	0802383c 	.word	0x0802383c
 8017640:	080238b4 	.word	0x080238b4

08017644 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh>:

int CanIOManager::sendFromTxQueue(uint8_t iface_index)
{
 8017644:	b590      	push	{r4, r7, lr}
 8017646:	b08b      	sub	sp, #44	; 0x2c
 8017648:	af02      	add	r7, sp, #8
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	460b      	mov	r3, r1
 801764e:	70fb      	strb	r3, [r7, #3]
    UAVCAN_ASSERT(iface_index < MaxCanIfaces);
 8017650:	78fb      	ldrb	r3, [r7, #3]
 8017652:	2b02      	cmp	r3, #2
 8017654:	d905      	bls.n	8017662 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0x1e>
 8017656:	4b26      	ldr	r3, [pc, #152]	; (80176f0 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0xac>)
 8017658:	4a26      	ldr	r2, [pc, #152]	; (80176f4 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0xb0>)
 801765a:	21ff      	movs	r1, #255	; 0xff
 801765c:	4826      	ldr	r0, [pc, #152]	; (80176f8 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0xb4>)
 801765e:	f008 ff95 	bl	802058c <__assert_func>
    CanTxQueue::Entry* entry = tx_queues_[iface_index]->peek();
 8017662:	78fb      	ldrb	r3, [r7, #3]
 8017664:	015b      	lsls	r3, r3, #5
 8017666:	3308      	adds	r3, #8
 8017668:	687a      	ldr	r2, [r7, #4]
 801766a:	4413      	add	r3, r2
 801766c:	4618      	mov	r0, r3
 801766e:	f000 fd64 	bl	801813a <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 8017672:	4603      	mov	r3, r0
 8017674:	4618      	mov	r0, r3
 8017676:	f7ff fecf 	bl	8017418 <_ZN6uavcan10CanTxQueue4peekEv>
 801767a:	4603      	mov	r3, r0
 801767c:	60fb      	str	r3, [r7, #12]
    if (entry == UAVCAN_NULLPTR)
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d101      	bne.n	8017688 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0x44>
    {
        return 0;
 8017684:	2300      	movs	r3, #0
 8017686:	e02e      	b.n	80176e6 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0xa2>
    }
    const int res = sendToIface(iface_index, entry->frame, entry->deadline, entry->flags);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f103 0410 	add.w	r4, r3, #16
 801768e:	68fa      	ldr	r2, [r7, #12]
 8017690:	f107 0310 	add.w	r3, r7, #16
 8017694:	3208      	adds	r2, #8
 8017696:	e892 0003 	ldmia.w	r2, {r0, r1}
 801769a:	e883 0003 	stmia.w	r3, {r0, r1}
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80176a2:	f107 0210 	add.w	r2, r7, #16
 80176a6:	78f9      	ldrb	r1, [r7, #3]
 80176a8:	9300      	str	r3, [sp, #0]
 80176aa:	4613      	mov	r3, r2
 80176ac:	4622      	mov	r2, r4
 80176ae:	6878      	ldr	r0, [r7, #4]
 80176b0:	f7ff ff62 	bl	8017578 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt>
 80176b4:	61f8      	str	r0, [r7, #28]
 80176b6:	f107 0310 	add.w	r3, r7, #16
 80176ba:	4618      	mov	r0, r3
 80176bc:	f7ee fd2a 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if (res > 0)
 80176c0:	69fb      	ldr	r3, [r7, #28]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	dd0e      	ble.n	80176e4 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh+0xa0>
    {
        tx_queues_[iface_index]->remove(entry);
 80176c6:	78fb      	ldrb	r3, [r7, #3]
 80176c8:	015b      	lsls	r3, r3, #5
 80176ca:	3308      	adds	r3, #8
 80176cc:	687a      	ldr	r2, [r7, #4]
 80176ce:	4413      	add	r3, r2
 80176d0:	4618      	mov	r0, r3
 80176d2:	f000 fd32 	bl	801813a <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 80176d6:	4602      	mov	r2, r0
 80176d8:	f107 030c 	add.w	r3, r7, #12
 80176dc:	4619      	mov	r1, r3
 80176de:	4610      	mov	r0, r2
 80176e0:	f7ff feea 	bl	80174b8 <_ZN6uavcan10CanTxQueue6removeERPNS0_5EntryE>
    }
    return res;
 80176e4:	69fb      	ldr	r3, [r7, #28]
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3724      	adds	r7, #36	; 0x24
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd90      	pop	{r4, r7, pc}
 80176ee:	bf00      	nop
 80176f0:	080238b8 	.word	0x080238b8
 80176f4:	0802a854 	.word	0x0802a854
 80176f8:	0802383c 	.word	0x0802383c

080176fc <_ZN6uavcan12CanIOManager10callSelectERNS_14CanSelectMasksERA3_PKNS_8CanFrameENS_13MonotonicTimeE>:

int CanIOManager::callSelect(CanSelectMasks& inout_masks, const CanFrame* (& pending_tx)[MaxCanIfaces],
                             MonotonicTime blocking_deadline)
{
 80176fc:	b5b0      	push	{r4, r5, r7, lr}
 80176fe:	b08a      	sub	sp, #40	; 0x28
 8017700:	af00      	add	r7, sp, #0
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	60b9      	str	r1, [r7, #8]
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	603b      	str	r3, [r7, #0]
    const CanSelectMasks in_masks = inout_masks;
 801770a:	68ba      	ldr	r2, [r7, #8]
 801770c:	f107 0314 	add.w	r3, r7, #20
 8017710:	8812      	ldrh	r2, [r2, #0]
 8017712:	801a      	strh	r2, [r3, #0]

    const int res = driver_.select(inout_masks, pending_tx, blocking_deadline);
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	681d      	ldr	r5, [r3, #0]
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	3314      	adds	r3, #20
 8017720:	681c      	ldr	r4, [r3, #0]
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	f107 0318 	add.w	r3, r7, #24
 8017728:	e892 0003 	ldmia.w	r2, {r0, r1}
 801772c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017730:	f107 0318 	add.w	r3, r7, #24
 8017734:	687a      	ldr	r2, [r7, #4]
 8017736:	68b9      	ldr	r1, [r7, #8]
 8017738:	4628      	mov	r0, r5
 801773a:	47a0      	blx	r4
 801773c:	4603      	mov	r3, r0
 801773e:	627b      	str	r3, [r7, #36]	; 0x24
 8017740:	f107 0318 	add.w	r3, r7, #24
 8017744:	4618      	mov	r0, r3
 8017746:	f7ee fce5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if (res < 0)
 801774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774c:	2b00      	cmp	r3, #0
 801774e:	da02      	bge.n	8017756 <_ZN6uavcan12CanIOManager10callSelectERNS_14CanSelectMasksERA3_PKNS_8CanFrameENS_13MonotonicTimeE+0x5a>
    {
        return -ErrDriver;
 8017750:	f06f 0303 	mvn.w	r3, #3
 8017754:	e00e      	b.n	8017774 <_ZN6uavcan12CanIOManager10callSelectERNS_14CanSelectMasksERA3_PKNS_8CanFrameENS_13MonotonicTimeE+0x78>
    }

    inout_masks.read  &= in_masks.read;  // Driver is not required to clean the masks
 8017756:	68bb      	ldr	r3, [r7, #8]
 8017758:	781a      	ldrb	r2, [r3, #0]
 801775a:	7d3b      	ldrb	r3, [r7, #20]
 801775c:	4013      	ands	r3, r2
 801775e:	b2da      	uxtb	r2, r3
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	701a      	strb	r2, [r3, #0]
    inout_masks.write &= in_masks.write;
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	785a      	ldrb	r2, [r3, #1]
 8017768:	7d7b      	ldrb	r3, [r7, #21]
 801776a:	4013      	ands	r3, r2
 801776c:	b2da      	uxtb	r2, r3
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	705a      	strb	r2, [r3, #1]
    return res;
 8017772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017774:	4618      	mov	r0, r3
 8017776:	3728      	adds	r7, #40	; 0x28
 8017778:	46bd      	mov	sp, r7
 801777a:	bdb0      	pop	{r4, r5, r7, pc}

0801777c <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj>:

CanIOManager::CanIOManager(ICanDriver& driver, IPoolAllocator& allocator, ISystemClock& sysclock,
 801777c:	b5b0      	push	{r4, r5, r7, lr}
 801777e:	b086      	sub	sp, #24
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
 8017788:	603b      	str	r3, [r7, #0]
                           std::size_t mem_blocks_per_iface)
    : driver_(driver)
    , sysclock_(sysclock)
    , num_ifaces_(driver.getNumIfaces())
 801778a:	68f8      	ldr	r0, [r7, #12]
 801778c:	f7ee f927 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	68ba      	ldr	r2, [r7, #8]
 8017794:	601a      	str	r2, [r3, #0]
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	683a      	ldr	r2, [r7, #0]
 801779a:	605a      	str	r2, [r3, #4]
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	3308      	adds	r3, #8
 80177a0:	2402      	movs	r4, #2
 80177a2:	461d      	mov	r5, r3
 80177a4:	2c00      	cmp	r4, #0
 80177a6:	db05      	blt.n	80177b4 <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0x38>
 80177a8:	4628      	mov	r0, r5
 80177aa:	f000 fcd3 	bl	8018154 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEC1Ev>
 80177ae:	3520      	adds	r5, #32
 80177b0:	3c01      	subs	r4, #1
 80177b2:	e7f7      	b.n	80177a4 <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0x28>
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	3368      	adds	r3, #104	; 0x68
 80177b8:	2402      	movs	r4, #2
 80177ba:	461d      	mov	r5, r3
 80177bc:	2c00      	cmp	r4, #0
 80177be:	db05      	blt.n	80177cc <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0x50>
 80177c0:	4628      	mov	r0, r5
 80177c2:	f7ff fc81 	bl	80170c8 <_ZN6uavcan12CanIOManager18IfaceFrameCountersC1Ev>
 80177c6:	3510      	adds	r5, #16
 80177c8:	3c01      	subs	r4, #1
 80177ca:	e7f7      	b.n	80177bc <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0x40>
 80177cc:	68bb      	ldr	r3, [r7, #8]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	3310      	adds	r3, #16
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	68b8      	ldr	r0, [r7, #8]
 80177d6:	4798      	blx	r3
 80177d8:	4603      	mov	r3, r0
 80177da:	461a      	mov	r2, r3
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
{
    if (num_ifaces_ < 1 || num_ifaces_ > MaxCanIfaces)
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d004      	beq.n	80177f6 <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0x7a>
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80177f2:	2b03      	cmp	r3, #3
 80177f4:	d902      	bls.n	80177fc <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0x80>
    {
        handleFatalError("Num ifaces");
 80177f6:	4819      	ldr	r0, [pc, #100]	; (801785c <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0xe0>)
 80177f8:	f006 fbc2 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }

    if (mem_blocks_per_iface == 0)
 80177fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d10f      	bne.n	8017822 <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0xa6>
    {
        mem_blocks_per_iface = allocator.getBlockCapacity() / (num_ifaces_ + 1U) + 1U;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	3310      	adds	r3, #16
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	4798      	blx	r3
 801780e:	4603      	mov	r3, r0
 8017810:	461a      	mov	r2, r3
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017818:	3301      	adds	r3, #1
 801781a:	fbb2 f3f3 	udiv	r3, r2, r3
 801781e:	3301      	adds	r3, #1
 8017820:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    UAVCAN_TRACE("CanIOManager", "Memory blocks per iface: %u, total: %u",
                 unsigned(mem_blocks_per_iface), unsigned(allocator.getBlockCapacity()));

    for (int i = 0; i < num_ifaces_; i++)
 8017822:	2300      	movs	r3, #0
 8017824:	617b      	str	r3, [r7, #20]
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801782c:	461a      	mov	r2, r3
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	4293      	cmp	r3, r2
 8017832:	da0e      	bge.n	8017852 <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0xd6>
    {
        tx_queues_[i].construct<IPoolAllocator&, ISystemClock&, std::size_t>
        (allocator, sysclock, mem_blocks_per_iface);
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	015b      	lsls	r3, r3, #5
 8017838:	3308      	adds	r3, #8
 801783a:	68fa      	ldr	r2, [r7, #12]
 801783c:	18d0      	adds	r0, r2, r3
 801783e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017842:	683a      	ldr	r2, [r7, #0]
 8017844:	6879      	ldr	r1, [r7, #4]
 8017846:	f000 fc9b 	bl	8018180 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE9constructIRNS_14IPoolAllocatorERNS_12ISystemClockEjEEvNS_13ParameterTypeIT_E4TypeENS8_IT0_E4TypeENS8_IT1_E4TypeE>
    for (int i = 0; i < num_ifaces_; i++)
 801784a:	697b      	ldr	r3, [r7, #20]
 801784c:	3301      	adds	r3, #1
 801784e:	617b      	str	r3, [r7, #20]
 8017850:	e7e9      	b.n	8017826 <_ZN6uavcan12CanIOManagerC1ERNS_10ICanDriverERNS_14IPoolAllocatorERNS_12ISystemClockEj+0xaa>
    }
}
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	4618      	mov	r0, r3
 8017856:	3718      	adds	r7, #24
 8017858:	46bd      	mov	sp, r7
 801785a:	bdb0      	pop	{r4, r5, r7, pc}
 801785c:	080238d4 	.word	0x080238d4

08017860 <_ZNK6uavcan12CanIOManager17makePendingTxMaskEv>:

uint8_t CanIOManager::makePendingTxMask() const
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b084      	sub	sp, #16
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
    uint8_t write_mask = 0;
 8017868:	2300      	movs	r3, #0
 801786a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < getNumIfaces(); i++)
 801786c:	2300      	movs	r3, #0
 801786e:	73bb      	strb	r3, [r7, #14]
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f7ee fc5c 	bl	800612e <_ZNK6uavcan12CanIOManager12getNumIfacesEv>
 8017876:	4603      	mov	r3, r0
 8017878:	461a      	mov	r2, r3
 801787a:	7bbb      	ldrb	r3, [r7, #14]
 801787c:	4293      	cmp	r3, r2
 801787e:	bf34      	ite	cc
 8017880:	2301      	movcc	r3, #1
 8017882:	2300      	movcs	r3, #0
 8017884:	b2db      	uxtb	r3, r3
 8017886:	2b00      	cmp	r3, #0
 8017888:	d01f      	beq.n	80178ca <_ZNK6uavcan12CanIOManager17makePendingTxMaskEv+0x6a>
    {
        if (!tx_queues_[i]->isEmpty())
 801788a:	7bbb      	ldrb	r3, [r7, #14]
 801788c:	015b      	lsls	r3, r3, #5
 801788e:	3308      	adds	r3, #8
 8017890:	687a      	ldr	r2, [r7, #4]
 8017892:	4413      	add	r3, r2
 8017894:	4618      	mov	r0, r3
 8017896:	f000 fc95 	bl	80181c4 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 801789a:	4603      	mov	r3, r0
 801789c:	4618      	mov	r0, r3
 801789e:	f7ff fbe6 	bl	801706e <_ZNK6uavcan10CanTxQueue7isEmptyEv>
 80178a2:	4603      	mov	r3, r0
 80178a4:	f083 0301 	eor.w	r3, r3, #1
 80178a8:	b2db      	uxtb	r3, r3
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d009      	beq.n	80178c2 <_ZNK6uavcan12CanIOManager17makePendingTxMaskEv+0x62>
        {
            write_mask = uint8_t(write_mask | (1 << i));
 80178ae:	7bbb      	ldrb	r3, [r7, #14]
 80178b0:	2201      	movs	r2, #1
 80178b2:	fa02 f303 	lsl.w	r3, r2, r3
 80178b6:	b25a      	sxtb	r2, r3
 80178b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178bc:	4313      	orrs	r3, r2
 80178be:	b25b      	sxtb	r3, r3
 80178c0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < getNumIfaces(); i++)
 80178c2:	7bbb      	ldrb	r3, [r7, #14]
 80178c4:	3301      	adds	r3, #1
 80178c6:	73bb      	strb	r3, [r7, #14]
 80178c8:	e7d2      	b.n	8017870 <_ZNK6uavcan12CanIOManager17makePendingTxMaskEv+0x10>
        }
    }
    return write_mask;
 80178ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3710      	adds	r7, #16
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh>:

CanIfacePerfCounters CanIOManager::getIfacePerfCounters(uint8_t iface_index) const
{
 80178d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178d6:	b08d      	sub	sp, #52	; 0x34
 80178d8:	af00      	add	r7, sp, #0
 80178da:	60f8      	str	r0, [r7, #12]
 80178dc:	60b9      	str	r1, [r7, #8]
 80178de:	4613      	mov	r3, r2
 80178e0:	71fb      	strb	r3, [r7, #7]
    ICanIface* const iface = driver_.getIface(iface_index);
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	681a      	ldr	r2, [r3, #0]
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	3308      	adds	r3, #8
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	79f9      	ldrb	r1, [r7, #7]
 80178f2:	4610      	mov	r0, r2
 80178f4:	4798      	blx	r3
 80178f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (iface == UAVCAN_NULLPTR || iface_index >= MaxCanIfaces)
 80178f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d002      	beq.n	8017904 <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh+0x30>
 80178fe:	79fb      	ldrb	r3, [r7, #7]
 8017900:	2b02      	cmp	r3, #2
 8017902:	d906      	bls.n	8017912 <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh+0x3e>
    {
        UAVCAN_ASSERT(0);
 8017904:	4b24      	ldr	r3, [pc, #144]	; (8017998 <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh+0xc4>)
 8017906:	4a25      	ldr	r2, [pc, #148]	; (801799c <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh+0xc8>)
 8017908:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801790c:	4824      	ldr	r0, [pc, #144]	; (80179a0 <_ZNK6uavcan12CanIOManager20getIfacePerfCountersEh+0xcc>)
 801790e:	f008 fe3d 	bl	802058c <__assert_func>
        return CanIfacePerfCounters();
    }
    CanIfacePerfCounters cnt;
 8017912:	f107 0310 	add.w	r3, r7, #16
 8017916:	4618      	mov	r0, r3
 8017918:	f7ff fbb7 	bl	801708a <_ZN6uavcan20CanIfacePerfCountersC1Ev>
    cnt.errors = iface->getErrorCount() + tx_queues_[iface_index]->getRejectedFrameCount();
 801791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	3318      	adds	r3, #24
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017926:	4798      	blx	r3
 8017928:	4605      	mov	r5, r0
 801792a:	460e      	mov	r6, r1
 801792c:	79fb      	ldrb	r3, [r7, #7]
 801792e:	015b      	lsls	r3, r3, #5
 8017930:	3308      	adds	r3, #8
 8017932:	68ba      	ldr	r2, [r7, #8]
 8017934:	4413      	add	r3, r2
 8017936:	4618      	mov	r0, r3
 8017938:	f000 fc44 	bl	80181c4 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 801793c:	4603      	mov	r3, r0
 801793e:	4618      	mov	r0, r3
 8017940:	f7ff fb89 	bl	8017056 <_ZNK6uavcan10CanTxQueue21getRejectedFrameCountEv>
 8017944:	4603      	mov	r3, r0
 8017946:	4619      	mov	r1, r3
 8017948:	f04f 0200 	mov.w	r2, #0
 801794c:	194b      	adds	r3, r1, r5
 801794e:	eb42 0406 	adc.w	r4, r2, r6
 8017952:	e9c7 3408 	strd	r3, r4, [r7, #32]
    cnt.frames_rx = counters_[iface_index].frames_rx;
 8017956:	79fb      	ldrb	r3, [r7, #7]
 8017958:	68ba      	ldr	r2, [r7, #8]
 801795a:	3307      	adds	r3, #7
 801795c:	011b      	lsls	r3, r3, #4
 801795e:	4413      	add	r3, r2
 8017960:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017964:	e9c7 3406 	strd	r3, r4, [r7, #24]
    cnt.frames_tx = counters_[iface_index].frames_tx;
 8017968:	79fb      	ldrb	r3, [r7, #7]
 801796a:	68ba      	ldr	r2, [r7, #8]
 801796c:	011b      	lsls	r3, r3, #4
 801796e:	4413      	add	r3, r2
 8017970:	3368      	adds	r3, #104	; 0x68
 8017972:	e9d3 3400 	ldrd	r3, r4, [r3]
 8017976:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return cnt;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	461d      	mov	r5, r3
 801797e:	f107 0410 	add.w	r4, r7, #16
 8017982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017986:	e894 0003 	ldmia.w	r4, {r0, r1}
 801798a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 801798e:	68f8      	ldr	r0, [r7, #12]
 8017990:	3734      	adds	r7, #52	; 0x34
 8017992:	46bd      	mov	sp, r7
 8017994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017996:	bf00      	nop
 8017998:	080238b4 	.word	0x080238b4
 801799c:	0802a8ec 	.word	0x0802a8ec
 80179a0:	0802383c 	.word	0x0802383c

080179a4 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt>:

int CanIOManager::send(const CanFrame& frame, MonotonicTime tx_deadline, MonotonicTime blocking_deadline,
                       uint8_t iface_mask, CanTxQueue::Qos qos, CanIOFlags flags)
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b09b      	sub	sp, #108	; 0x6c
 80179a8:	af02      	add	r7, sp, #8
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	607a      	str	r2, [r7, #4]
 80179b0:	603b      	str	r3, [r7, #0]
    const uint8_t num_ifaces = getNumIfaces();
 80179b2:	68f8      	ldr	r0, [r7, #12]
 80179b4:	f7ee fbbb 	bl	800612e <_ZNK6uavcan12CanIOManager12getNumIfacesEv>
 80179b8:	4603      	mov	r3, r0
 80179ba:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    const uint8_t all_ifaces_mask = uint8_t((1U << num_ifaces) - 1);
 80179be:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80179c2:	2201      	movs	r2, #1
 80179c4:	fa02 f303 	lsl.w	r3, r2, r3
 80179c8:	b2db      	uxtb	r3, r3
 80179ca:	3b01      	subs	r3, #1
 80179cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    iface_mask &= all_ifaces_mask;
 80179d0:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80179d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80179d8:	4013      	ands	r3, r2
 80179da:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

    if (blocking_deadline > tx_deadline)
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	6879      	ldr	r1, [r7, #4]
 80179e2:	4618      	mov	r0, r3
 80179e4:	f7fd fe76 	bl	80156d4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgtERKS1_>
 80179e8:	4603      	mov	r3, r0
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d005      	beq.n	80179fa <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x56>
    {
        blocking_deadline = tx_deadline;
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	687a      	ldr	r2, [r7, #4]
 80179f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179f6:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    int retval = 0;
 80179fa:	2300      	movs	r3, #0
 80179fc:	65fb      	str	r3, [r7, #92]	; 0x5c

    while (true)        // Somebody please refactor this.
    {
        if (iface_mask == 0)
 80179fe:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	f000 8152 	beq.w	8017cac <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x308>
        {
            break;
        }

        CanSelectMasks masks;
 8017a08:	f107 031c 	add.w	r3, r7, #28
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7ff fa4f 	bl	8016eb0 <_ZN6uavcan14CanSelectMasksC1Ev>
        masks.write = iface_mask | makePendingTxMask();
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f7ff ff24 	bl	8017860 <_ZNK6uavcan12CanIOManager17makePendingTxMaskEv>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	461a      	mov	r2, r3
 8017a1c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8017a20:	4313      	orrs	r3, r2
 8017a22:	b2db      	uxtb	r3, r3
 8017a24:	777b      	strb	r3, [r7, #29]
        {
            // Building the list of next pending frames per iface.
            // The driver will give them a scrutinizing look before deciding whether he wants to accept them.
            const CanFrame* pending_tx[MaxCanIfaces] = {};
 8017a26:	f107 0310 	add.w	r3, r7, #16
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	601a      	str	r2, [r3, #0]
 8017a2e:	605a      	str	r2, [r3, #4]
 8017a30:	609a      	str	r2, [r3, #8]
            for (int i = 0; i < num_ifaces; i++)
 8017a32:	2300      	movs	r3, #0
 8017a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8017a36:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8017a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017a3c:	429a      	cmp	r2, r3
 8017a3e:	da35      	bge.n	8017aac <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x108>
            {
                CanTxQueue& q = *tx_queues_[i];
 8017a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a42:	015b      	lsls	r3, r3, #5
 8017a44:	3308      	adds	r3, #8
 8017a46:	68fa      	ldr	r2, [r7, #12]
 8017a48:	4413      	add	r3, r2
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f000 fbc7 	bl	80181de <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEdeEv>
 8017a50:	64b8      	str	r0, [r7, #72]	; 0x48
                if (iface_mask & (1 << i))      // I hate myself so much right now.
 8017a52:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8017a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a58:	fa42 f303 	asr.w	r3, r2, r3
 8017a5c:	f003 0301 	and.w	r3, r3, #1
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d014      	beq.n	8017a8e <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0xea>
                {
                    pending_tx[i] = q.topPriorityHigherOrEqual(frame) ? q.getTopPriorityPendingFrame() : &frame;
 8017a64:	68b9      	ldr	r1, [r7, #8]
 8017a66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017a68:	f7ff fd67 	bl	801753a <_ZNK6uavcan10CanTxQueue24topPriorityHigherOrEqualERKNS_8CanFrameE>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d004      	beq.n	8017a7c <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0xd8>
 8017a72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017a74:	f7ff fd48 	bl	8017508 <_ZNK6uavcan10CanTxQueue26getTopPriorityPendingFrameEv>
 8017a78:	4602      	mov	r2, r0
 8017a7a:	e000      	b.n	8017a7e <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0xda>
 8017a7c:	68ba      	ldr	r2, [r7, #8]
 8017a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a80:	009b      	lsls	r3, r3, #2
 8017a82:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017a86:	440b      	add	r3, r1
 8017a88:	f843 2c50 	str.w	r2, [r3, #-80]
 8017a8c:	e00a      	b.n	8017aa4 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x100>
                }
                else
                {
                    pending_tx[i] = q.getTopPriorityPendingFrame();
 8017a8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8017a90:	f7ff fd3a 	bl	8017508 <_ZNK6uavcan10CanTxQueue26getTopPriorityPendingFrameEv>
 8017a94:	4602      	mov	r2, r0
 8017a96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a98:	009b      	lsls	r3, r3, #2
 8017a9a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8017a9e:	440b      	add	r3, r1
 8017aa0:	f843 2c50 	str.w	r2, [r3, #-80]
            for (int i = 0; i < num_ifaces; i++)
 8017aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8017aaa:	e7c4      	b.n	8017a36 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x92>
                }
            }

            const int select_res = callSelect(masks, pending_tx, blocking_deadline);
 8017aac:	683a      	ldr	r2, [r7, #0]
 8017aae:	f107 0320 	add.w	r3, r7, #32
 8017ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ab6:	e883 0003 	stmia.w	r3, {r0, r1}
 8017aba:	f107 0320 	add.w	r3, r7, #32
 8017abe:	f107 0210 	add.w	r2, r7, #16
 8017ac2:	f107 011c 	add.w	r1, r7, #28
 8017ac6:	68f8      	ldr	r0, [r7, #12]
 8017ac8:	f7ff fe18 	bl	80176fc <_ZN6uavcan12CanIOManager10callSelectERNS_14CanSelectMasksERA3_PKNS_8CanFrameENS_13MonotonicTimeE>
 8017acc:	6478      	str	r0, [r7, #68]	; 0x44
 8017ace:	f107 0320 	add.w	r3, r7, #32
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7ee fb1e 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (select_res < 0)
 8017ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	da02      	bge.n	8017ae4 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x140>
            {
                return -ErrDriver;
 8017ade:	f06f 0303 	mvn.w	r3, #3
 8017ae2:	e0ea      	b.n	8017cba <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x316>
            }
            UAVCAN_ASSERT(masks.read == 0);
 8017ae4:	7f3b      	ldrb	r3, [r7, #28]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d006      	beq.n	8017af8 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x154>
 8017aea:	4b76      	ldr	r3, [pc, #472]	; (8017cc4 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x320>)
 8017aec:	4a76      	ldr	r2, [pc, #472]	; (8017cc8 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x324>)
 8017aee:	f240 117f 	movw	r1, #383	; 0x17f
 8017af2:	4876      	ldr	r0, [pc, #472]	; (8017ccc <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x328>)
 8017af4:	f008 fd4a 	bl	802058c <__assert_func>
        }

        // Transmission
        for (uint8_t i = 0; i < num_ifaces; i++)
 8017af8:	2300      	movs	r3, #0
 8017afa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8017afe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017b02:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d26d      	bcs.n	8017be6 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x242>
        {
            if (masks.write & (1 << i))
 8017b0a:	7f7b      	ldrb	r3, [r7, #29]
 8017b0c:	461a      	mov	r2, r3
 8017b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b12:	fa42 f303 	asr.w	r3, r2, r3
 8017b16:	f003 0301 	and.w	r3, r3, #1
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d05d      	beq.n	8017bda <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x236>
            {
                int res = 0;
 8017b1e:	2300      	movs	r3, #0
 8017b20:	653b      	str	r3, [r7, #80]	; 0x50
                if (iface_mask & (1 << i))
 8017b22:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8017b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b2a:	fa42 f303 	asr.w	r3, r2, r3
 8017b2e:	f003 0301 	and.w	r3, r3, #1
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d044      	beq.n	8017bc0 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x21c>
                {
                    if (tx_queues_[i]->topPriorityHigherOrEqual(frame))
 8017b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b3a:	015b      	lsls	r3, r3, #5
 8017b3c:	3308      	adds	r3, #8
 8017b3e:	68fa      	ldr	r2, [r7, #12]
 8017b40:	4413      	add	r3, r2
 8017b42:	4618      	mov	r0, r3
 8017b44:	f000 faf9 	bl	801813a <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	68b9      	ldr	r1, [r7, #8]
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7ff fcf4 	bl	801753a <_ZNK6uavcan10CanTxQueue24topPriorityHigherOrEqualERKNS_8CanFrameE>
 8017b52:	4603      	mov	r3, r0
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d006      	beq.n	8017b66 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x1c2>
                    {
                        res = sendFromTxQueue(i);                 // May return 0 if nothing to transmit (e.g. expired)
 8017b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b5c:	4619      	mov	r1, r3
 8017b5e:	68f8      	ldr	r0, [r7, #12]
 8017b60:	f7ff fd70 	bl	8017644 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh>
 8017b64:	6538      	str	r0, [r7, #80]	; 0x50
                    }
                    if (res <= 0)
 8017b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	dc30      	bgt.n	8017bce <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x22a>
                    {
                        res = sendToIface(i, frame, tx_deadline, flags);
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b76:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017b7e:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8017b82:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8017b86:	9300      	str	r3, [sp, #0]
 8017b88:	4613      	mov	r3, r2
 8017b8a:	68ba      	ldr	r2, [r7, #8]
 8017b8c:	68f8      	ldr	r0, [r7, #12]
 8017b8e:	f7ff fcf3 	bl	8017578 <_ZN6uavcan12CanIOManager11sendToIfaceEhRKNS_8CanFrameENS_13MonotonicTimeEt>
 8017b92:	6538      	str	r0, [r7, #80]	; 0x50
 8017b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f7ee fabb 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
                        if (res > 0)
 8017b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	dd14      	ble.n	8017bce <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x22a>
                        {
                            iface_mask &= uint8_t(~(1 << i));     // Mark transmitted
 8017ba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ba8:	2201      	movs	r2, #1
 8017baa:	fa02 f303 	lsl.w	r3, r2, r3
 8017bae:	b2db      	uxtb	r3, r3
 8017bb0:	43db      	mvns	r3, r3
 8017bb2:	b2da      	uxtb	r2, r3
 8017bb4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8017bb8:	4013      	ands	r3, r2
 8017bba:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8017bbe:	e006      	b.n	8017bce <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x22a>
                        }
                    }
                }
                else
                {
                    res = sendFromTxQueue(i);
 8017bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bc4:	4619      	mov	r1, r3
 8017bc6:	68f8      	ldr	r0, [r7, #12]
 8017bc8:	f7ff fd3c 	bl	8017644 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh>
 8017bcc:	6538      	str	r0, [r7, #80]	; 0x50
                }
                if (res > 0)
 8017bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	dd02      	ble.n	8017bda <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x236>
                {
                    retval++;
 8017bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
        for (uint8_t i = 0; i < num_ifaces; i++)
 8017bda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017bde:	3301      	adds	r3, #1
 8017be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8017be4:	e78b      	b.n	8017afe <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x15a>
                }
            }
        }

        // Timeout. Enqueue the frame if wasn't transmitted and leave.
        const bool timed_out = sysclock_.getMonotonic() >= blocking_deadline;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	6859      	ldr	r1, [r3, #4]
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	3308      	adds	r3, #8
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017bf8:	4610      	mov	r0, r2
 8017bfa:	4798      	blx	r3
 8017bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c00:	6839      	ldr	r1, [r7, #0]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f7fd ff09 	bl	8015a1a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgeERKS1_>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7ee fa7e 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        if (masks.write == 0 || timed_out)
 8017c18:	7f7b      	ldrb	r3, [r7, #29]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d004      	beq.n	8017c28 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x284>
 8017c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	f43f aeeb 	beq.w	80179fe <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x5a>
        {
            if (!timed_out)
 8017c28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017c2c:	f083 0301 	eor.w	r3, r3, #1
 8017c30:	b2db      	uxtb	r3, r3
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d13f      	bne.n	8017cb6 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x312>
            {
                UAVCAN_TRACE("CanIOManager", "Send: Premature timeout in select(), will try again");
                continue;
            }
            for (uint8_t i = 0; i < num_ifaces; i++)
 8017c36:	2300      	movs	r3, #0
 8017c38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017c3c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8017c40:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8017c44:	429a      	cmp	r2, r3
 8017c46:	d233      	bcs.n	8017cb0 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x30c>
            {
                if (iface_mask & (1 << i))
 8017c48:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8017c4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017c50:	fa42 f303 	asr.w	r3, r2, r3
 8017c54:	f003 0301 	and.w	r3, r3, #1
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d021      	beq.n	8017ca0 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x2fc>
                {
                    tx_queues_[i]->push(frame, tx_deadline, qos, flags);
 8017c5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017c60:	015b      	lsls	r3, r3, #5
 8017c62:	3308      	adds	r3, #8
 8017c64:	68fa      	ldr	r2, [r7, #12]
 8017c66:	4413      	add	r3, r2
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f000 fa66 	bl	801813a <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 8017c6e:	4604      	mov	r4, r0
 8017c70:	687a      	ldr	r2, [r7, #4]
 8017c72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017c76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017c7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017c7e:	f897 1074 	ldrb.w	r1, [r7, #116]	; 0x74
 8017c82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8017c86:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8017c8a:	9300      	str	r3, [sp, #0]
 8017c8c:	460b      	mov	r3, r1
 8017c8e:	68b9      	ldr	r1, [r7, #8]
 8017c90:	4620      	mov	r0, r4
 8017c92:	f7ff facb 	bl	801722c <_ZN6uavcan10CanTxQueue4pushERKNS_8CanFrameENS_13MonotonicTimeENS0_3QosEt>
 8017c96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7ee fa3a 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            for (uint8_t i = 0; i < num_ifaces; i++)
 8017ca0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017caa:	e7c7      	b.n	8017c3c <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x298>
            break;
 8017cac:	bf00      	nop
 8017cae:	e000      	b.n	8017cb2 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x30e>
                }
            }
            break;
 8017cb0:	bf00      	nop
        }
    }
    return retval;
 8017cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017cb4:	e001      	b.n	8017cba <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x316>
                continue;
 8017cb6:	bf00      	nop
    }
 8017cb8:	e6a1      	b.n	80179fe <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt+0x5a>
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3764      	adds	r7, #100	; 0x64
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd90      	pop	{r4, r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	080238e0 	.word	0x080238e0
 8017cc8:	0802a94c 	.word	0x0802a94c
 8017ccc:	0802383c 	.word	0x0802383c

08017cd0 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt>:

int CanIOManager::receive(CanRxFrame& out_frame, MonotonicTime blocking_deadline, CanIOFlags& out_flags)
{
 8017cd0:	b590      	push	{r4, r7, lr}
 8017cd2:	b095      	sub	sp, #84	; 0x54
 8017cd4:	af02      	add	r7, sp, #8
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	607a      	str	r2, [r7, #4]
 8017cdc:	603b      	str	r3, [r7, #0]
    const uint8_t num_ifaces = getNumIfaces();
 8017cde:	68f8      	ldr	r0, [r7, #12]
 8017ce0:	f7ee fa25 	bl	800612e <_ZNK6uavcan12CanIOManager12getNumIfacesEv>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

    while (true)
    {
        CanSelectMasks masks;
 8017cea:	f107 031c 	add.w	r3, r7, #28
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7ff f8de 	bl	8016eb0 <_ZN6uavcan14CanSelectMasksC1Ev>
        masks.write = makePendingTxMask();
 8017cf4:	68f8      	ldr	r0, [r7, #12]
 8017cf6:	f7ff fdb3 	bl	8017860 <_ZNK6uavcan12CanIOManager17makePendingTxMaskEv>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	777b      	strb	r3, [r7, #29]
        masks.read = uint8_t((1 << num_ifaces) - 1);
 8017cfe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8017d02:	2201      	movs	r2, #1
 8017d04:	fa02 f303 	lsl.w	r3, r2, r3
 8017d08:	b2db      	uxtb	r3, r3
 8017d0a:	3b01      	subs	r3, #1
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	773b      	strb	r3, [r7, #28]
        {
            const CanFrame* pending_tx[MaxCanIfaces] = {};
 8017d10:	f107 0310 	add.w	r3, r7, #16
 8017d14:	2200      	movs	r2, #0
 8017d16:	601a      	str	r2, [r3, #0]
 8017d18:	605a      	str	r2, [r3, #4]
 8017d1a:	609a      	str	r2, [r3, #8]
            for (int i = 0; i < num_ifaces; i++)      // Dear compiler, kindly unroll this. Thanks.
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8017d20:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8017d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d26:	429a      	cmp	r2, r3
 8017d28:	da17      	bge.n	8017d5a <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x8a>
            {
                pending_tx[i] = tx_queues_[i]->getTopPriorityPendingFrame();
 8017d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d2c:	015b      	lsls	r3, r3, #5
 8017d2e:	3308      	adds	r3, #8
 8017d30:	68fa      	ldr	r2, [r7, #12]
 8017d32:	4413      	add	r3, r2
 8017d34:	4618      	mov	r0, r3
 8017d36:	f000 fa00 	bl	801813a <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7ff fbe3 	bl	8017508 <_ZNK6uavcan10CanTxQueue26getTopPriorityPendingFrameEv>
 8017d42:	4602      	mov	r2, r0
 8017d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d46:	009b      	lsls	r3, r3, #2
 8017d48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8017d4c:	440b      	add	r3, r1
 8017d4e:	f843 2c38 	str.w	r2, [r3, #-56]
            for (int i = 0; i < num_ifaces; i++)      // Dear compiler, kindly unroll this. Thanks.
 8017d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d54:	3301      	adds	r3, #1
 8017d56:	647b      	str	r3, [r7, #68]	; 0x44
 8017d58:	e7e2      	b.n	8017d20 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x50>
            }

            const int select_res = callSelect(masks, pending_tx, blocking_deadline);
 8017d5a:	687a      	ldr	r2, [r7, #4]
 8017d5c:	f107 0320 	add.w	r3, r7, #32
 8017d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d64:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d68:	f107 0320 	add.w	r3, r7, #32
 8017d6c:	f107 0210 	add.w	r2, r7, #16
 8017d70:	f107 011c 	add.w	r1, r7, #28
 8017d74:	68f8      	ldr	r0, [r7, #12]
 8017d76:	f7ff fcc1 	bl	80176fc <_ZN6uavcan12CanIOManager10callSelectERNS_14CanSelectMasksERA3_PKNS_8CanFrameENS_13MonotonicTimeE>
 8017d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8017d7c:	f107 0320 	add.w	r3, r7, #32
 8017d80:	4618      	mov	r0, r3
 8017d82:	f7ee f9c7 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (select_res < 0)
 8017d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	da02      	bge.n	8017d92 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0xc2>
            {
                return -ErrDriver;
 8017d8c:	f06f 0303 	mvn.w	r3, #3
 8017d90:	e0ae      	b.n	8017ef0 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x220>
            }
        }

        // Write - if buffers are not empty, one frame will be sent for each iface per one receive() call
        for (uint8_t i = 0; i < num_ifaces; i++)
 8017d92:	2300      	movs	r3, #0
 8017d94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017d98:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8017d9c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8017da0:	429a      	cmp	r2, r3
 8017da2:	d215      	bcs.n	8017dd0 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x100>
        {
            if (masks.write & (1 << i))
 8017da4:	7f7b      	ldrb	r3, [r7, #29]
 8017da6:	461a      	mov	r2, r3
 8017da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017dac:	fa42 f303 	asr.w	r3, r2, r3
 8017db0:	f003 0301 	and.w	r3, r3, #1
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d005      	beq.n	8017dc4 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0xf4>
            {
                (void)sendFromTxQueue(i);  // It may fail, we don't care. Requested operation was receive, not send.
 8017db8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	68f8      	ldr	r0, [r7, #12]
 8017dc0:	f7ff fc40 	bl	8017644 <_ZN6uavcan12CanIOManager15sendFromTxQueueEh>
        for (uint8_t i = 0; i < num_ifaces; i++)
 8017dc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017dc8:	3301      	adds	r3, #1
 8017dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8017dce:	e7e3      	b.n	8017d98 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0xc8>
            }
        }

        // Read
        for (uint8_t i = 0; i < num_ifaces; i++)
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017dd6:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8017dda:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d26a      	bcs.n	8017eb8 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x1e8>
        {
            if (masks.read & (1 << i))
 8017de2:	7f3b      	ldrb	r3, [r7, #28]
 8017de4:	461a      	mov	r2, r3
 8017de6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8017dea:	fa42 f303 	asr.w	r3, r2, r3
 8017dee:	f003 0301 	and.w	r3, r3, #1
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d05a      	beq.n	8017eac <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x1dc>
            {
                ICanIface* const iface = driver_.getIface(i);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	681a      	ldr	r2, [r3, #0]
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	3308      	adds	r3, #8
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
 8017e08:	4610      	mov	r0, r2
 8017e0a:	4798      	blx	r3
 8017e0c:	63b8      	str	r0, [r7, #56]	; 0x38
                if (iface == UAVCAN_NULLPTR)
 8017e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d106      	bne.n	8017e22 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x152>
                {
                    UAVCAN_ASSERT(0);   // Nonexistent interface
 8017e14:	4b38      	ldr	r3, [pc, #224]	; (8017ef8 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x228>)
 8017e16:	4a39      	ldr	r2, [pc, #228]	; (8017efc <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x22c>)
 8017e18:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8017e1c:	4838      	ldr	r0, [pc, #224]	; (8017f00 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x230>)
 8017e1e:	f008 fbb5 	bl	802058c <__assert_func>
                    continue;
                }

                const int res = iface->receive(out_frame, out_frame.ts_mono, out_frame.ts_utc, out_flags);
 8017e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	330c      	adds	r3, #12
 8017e28:	681c      	ldr	r4, [r3, #0]
 8017e2a:	68b9      	ldr	r1, [r7, #8]
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	f103 0210 	add.w	r2, r3, #16
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	f103 0018 	add.w	r0, r3, #24
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017e40:	47a0      	blx	r4
 8017e42:	4603      	mov	r3, r0
 8017e44:	637b      	str	r3, [r7, #52]	; 0x34
                if (res == 0)
 8017e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d106      	bne.n	8017e5a <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x18a>
                {
                    UAVCAN_ASSERT(0);   // select() reported that iface has pending RX frames, but receive() returned none
 8017e4c:	4b2a      	ldr	r3, [pc, #168]	; (8017ef8 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x228>)
 8017e4e:	4a2b      	ldr	r2, [pc, #172]	; (8017efc <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x22c>)
 8017e50:	f240 11e7 	movw	r1, #487	; 0x1e7
 8017e54:	482a      	ldr	r0, [pc, #168]	; (8017f00 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x230>)
 8017e56:	f008 fb99 	bl	802058c <__assert_func>
                    continue;
                }
                out_frame.iface_index = i;
 8017e5a:	68bb      	ldr	r3, [r7, #8]
 8017e5c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8017e60:	f883 2020 	strb.w	r2, [r3, #32]

                if ((res > 0) && !(out_flags & CanIOFlagLoopback))
 8017e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	dd18      	ble.n	8017e9c <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x1cc>
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	881b      	ldrh	r3, [r3, #0]
 8017e6e:	f003 0301 	and.w	r3, r3, #1
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d112      	bne.n	8017e9c <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x1cc>
                {
                    counters_[i].frames_rx += 1;
 8017e76:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8017e7a:	68fa      	ldr	r2, [r7, #12]
 8017e7c:	3307      	adds	r3, #7
 8017e7e:	011b      	lsls	r3, r3, #4
 8017e80:	4413      	add	r3, r2
 8017e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017e86:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8017e8a:	1c43      	adds	r3, r0, #1
 8017e8c:	f141 0400 	adc.w	r4, r1, #0
 8017e90:	68f9      	ldr	r1, [r7, #12]
 8017e92:	3207      	adds	r2, #7
 8017e94:	0112      	lsls	r2, r2, #4
 8017e96:	440a      	add	r2, r1
 8017e98:	e9c2 3400 	strd	r3, r4, [r2]
                }
                return (res < 0) ? -ErrDriver : res;
 8017e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	db01      	blt.n	8017ea6 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x1d6>
 8017ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ea4:	e024      	b.n	8017ef0 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x220>
 8017ea6:	f06f 0303 	mvn.w	r3, #3
 8017eaa:	e021      	b.n	8017ef0 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x220>
        for (uint8_t i = 0; i < num_ifaces; i++)
 8017eac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8017eb6:	e78e      	b.n	8017dd6 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x106>
            }
        }

        // Timeout checked in the last order - this way we can operate with expired deadline:
        if (sysclock_.getMonotonic() >= blocking_deadline)
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	6859      	ldr	r1, [r3, #4]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	3308      	adds	r3, #8
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017eca:	4610      	mov	r0, r2
 8017ecc:	4798      	blx	r3
 8017ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017ed2:	6879      	ldr	r1, [r7, #4]
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7fd fda0 	bl	8015a1a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgeERKS1_>
 8017eda:	4603      	mov	r3, r0
 8017edc:	461c      	mov	r4, r3
 8017ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7ee f916 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8017ee8:	2c00      	cmp	r4, #0
 8017eea:	f43f aefe 	beq.w	8017cea <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt+0x1a>
        {
            break;
        }
    }
    return 0;
 8017eee:	2300      	movs	r3, #0
}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	374c      	adds	r7, #76	; 0x4c
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd90      	pop	{r4, r7, pc}
 8017ef8:	080238b4 	.word	0x080238b4
 8017efc:	0802a9f0 	.word	0x0802a9f0
 8017f00:	0802383c 	.word	0x0802383c

08017f04 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEEC1Ev>:
    LinkedListNode()
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f7ed fd66 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2200      	movs	r2, #0
 8017f16:	601a      	str	r2, [r3, #0]
    { }
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3708      	adds	r7, #8
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}

08017f22 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEED1Ev>:
    ~LinkedListNode() { }
 8017f22:	b580      	push	{r7, lr}
 8017f24:	b082      	sub	sp, #8
 8017f26:	af00      	add	r7, sp, #0
 8017f28:	6078      	str	r0, [r7, #4]
 8017f2a:	6878      	ldr	r0, [r7, #4]
 8017f2c:	f7ed fd62 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	4618      	mov	r0, r3
 8017f34:	3708      	adds	r7, #8
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd80      	pop	{r7, pc}

08017f3a <_ZN6uavcan24IsDynamicallyAllocatableINS_10CanTxQueue5EntryEE5checkEv>:
    static void check()
 8017f3a:	b480      	push	{r7}
 8017f3c:	b083      	sub	sp, #12
 8017f3e:	af00      	add	r7, sp, #0
        char dummy[(sizeof(T) <= MemPoolBlockSize) ? 1 : -1] = { '0' };
 8017f40:	2330      	movs	r3, #48	; 0x30
 8017f42:	713b      	strb	r3, [r7, #4]
    }
 8017f44:	bf00      	nop
 8017f46:	370c      	adds	r7, #12
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4e:	4770      	bx	lr

08017f50 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEEC1Ev>:
    LinkedListRoot()
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	f7ed fd40 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	2200      	movs	r2, #0
 8017f62:	601a      	str	r2, [r3, #0]
    { }
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	4618      	mov	r0, r3
 8017f68:	3708      	adds	r7, #8
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}

08017f6e <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE7isEmptyEv>:
    bool isEmpty() const { return get() == UAVCAN_NULLPTR; }
 8017f6e:	b580      	push	{r7, lr}
 8017f70:	b082      	sub	sp, #8
 8017f72:	af00      	add	r7, sp, #0
 8017f74:	6078      	str	r0, [r7, #4]
 8017f76:	6878      	ldr	r0, [r7, #4]
 8017f78:	f000 f80a 	bl	8017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	bf0c      	ite	eq
 8017f82:	2301      	moveq	r3, #1
 8017f84:	2300      	movne	r3, #0
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3708      	adds	r7, #8
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}

08017f90 <_ZNK6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE3getEv>:
    T* get() const { return root_; }
 8017f90:	b480      	push	{r7}
 8017f92:	b083      	sub	sp, #12
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	370c      	adds	r7, #12
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa6:	4770      	bx	lr

08017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 8017fa8:	b480      	push	{r7}
 8017faa:	b083      	sub	sp, #12
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	370c      	adds	r7, #12
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fbe:	4770      	bx	lr

08017fc0 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_>:
void LinkedListRoot<T>::insertBefore(T* node, Predicate predicate)
 8017fc0:	b590      	push	{r4, r7, lr}
 8017fc2:	b087      	sub	sp, #28
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	60f8      	str	r0, [r7, #12]
 8017fc8:	60b9      	str	r1, [r7, #8]
 8017fca:	607a      	str	r2, [r7, #4]
    if (node == UAVCAN_NULLPTR)
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d105      	bne.n	8017fde <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0x1e>
        UAVCAN_ASSERT(0);
 8017fd2:	4b2f      	ldr	r3, [pc, #188]	; (8018090 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0xd0>)
 8017fd4:	4a2f      	ldr	r2, [pc, #188]	; (8018094 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0xd4>)
 8017fd6:	2178      	movs	r1, #120	; 0x78
 8017fd8:	482f      	ldr	r0, [pc, #188]	; (8018098 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0xd8>)
 8017fda:	f008 fad7 	bl	802058c <__assert_func>
    remove(node);
 8017fde:	68b9      	ldr	r1, [r7, #8]
 8017fe0:	68f8      	ldr	r0, [r7, #12]
 8017fe2:	f000 f85b 	bl	801809c <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_>
    if (root_ == UAVCAN_NULLPTR || predicate(root_))
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d009      	beq.n	8018002 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0x42>
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	681a      	ldr	r2, [r3, #0]
 8017ff2:	1d3b      	adds	r3, r7, #4
 8017ff4:	4611      	mov	r1, r2
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fe ffde 	bl	8016fb8 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d001      	beq.n	8018006 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0x46>
 8018002:	2301      	movs	r3, #1
 8018004:	e000      	b.n	8018008 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0x48>
 8018006:	2300      	movs	r3, #0
 8018008:	2b00      	cmp	r3, #0
 801800a:	d00a      	beq.n	8018022 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0x62>
        node->setNextListNode(root_);
 801800c:	68ba      	ldr	r2, [r7, #8]
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	4619      	mov	r1, r3
 8018014:	4610      	mov	r0, r2
 8018016:	f000 f8ef 	bl	80181f8 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15setNextListNodeEPS2_>
        root_ = node;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	68ba      	ldr	r2, [r7, #8]
 801801e:	601a      	str	r2, [r3, #0]
}
 8018020:	e031      	b.n	8018086 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0xc6>
        T* p = root_;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	617b      	str	r3, [r7, #20]
        while (p->getNextListNode())
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	4618      	mov	r0, r3
 801802c:	f7ff ffbc 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8018030:	4603      	mov	r3, r0
 8018032:	2b00      	cmp	r3, #0
 8018034:	bf14      	ite	ne
 8018036:	2301      	movne	r3, #1
 8018038:	2300      	moveq	r3, #0
 801803a:	b2db      	uxtb	r3, r3
 801803c:	2b00      	cmp	r3, #0
 801803e:	d013      	beq.n	8018068 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0xa8>
            if (predicate(p->getNextListNode()))
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	4618      	mov	r0, r3
 8018044:	f7ff ffb0 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8018048:	4602      	mov	r2, r0
 801804a:	1d3b      	adds	r3, r7, #4
 801804c:	4611      	mov	r1, r2
 801804e:	4618      	mov	r0, r3
 8018050:	f7fe ffb2 	bl	8016fb8 <_ZN6uavcan10CanTxQueue27PriorityInsertionComparatorclEPKNS0_5EntryE>
 8018054:	4603      	mov	r3, r0
 8018056:	2b00      	cmp	r3, #0
 8018058:	d105      	bne.n	8018066 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0xa6>
            p = p->getNextListNode();
 801805a:	697b      	ldr	r3, [r7, #20]
 801805c:	4618      	mov	r0, r3
 801805e:	f7ff ffa3 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8018062:	6178      	str	r0, [r7, #20]
        while (p->getNextListNode())
 8018064:	e7e0      	b.n	8018028 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE12insertBeforeINS1_27PriorityInsertionComparatorEEEvPS2_T_+0x68>
                break;
 8018066:	bf00      	nop
        node->setNextListNode(p->getNextListNode());
 8018068:	68bc      	ldr	r4, [r7, #8]
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	4618      	mov	r0, r3
 801806e:	f7ff ff9b 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8018072:	4603      	mov	r3, r0
 8018074:	4619      	mov	r1, r3
 8018076:	4620      	mov	r0, r4
 8018078:	f000 f8be 	bl	80181f8 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15setNextListNodeEPS2_>
        p->setNextListNode(node);
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	68b9      	ldr	r1, [r7, #8]
 8018080:	4618      	mov	r0, r3
 8018082:	f000 f8b9 	bl	80181f8 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15setNextListNodeEPS2_>
}
 8018086:	bf00      	nop
 8018088:	371c      	adds	r7, #28
 801808a:	46bd      	mov	sp, r7
 801808c:	bd90      	pop	{r4, r7, pc}
 801808e:	bf00      	nop
 8018090:	080238b4 	.word	0x080238b4
 8018094:	0802a694 	.word	0x0802a694
 8018098:	080238f0 	.word	0x080238f0

0801809c <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_>:
void LinkedListRoot<T>::remove(const T* node)
 801809c:	b590      	push	{r4, r7, lr}
 801809e:	b085      	sub	sp, #20
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d041      	beq.n	8018132 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x96>
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d03e      	beq.n	8018132 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x96>
    if (root_ == node)
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	683a      	ldr	r2, [r7, #0]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d108      	bne.n	80180d0 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x34>
        root_ = root_->getNextListNode();
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7ff ff70 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 80180c8:	4602      	mov	r2, r0
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	601a      	str	r2, [r3, #0]
 80180ce:	e031      	b.n	8018134 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x98>
        T* p = root_;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	4618      	mov	r0, r3
 80180da:	f7ff ff65 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 80180de:	4603      	mov	r3, r0
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	bf14      	ite	ne
 80180e4:	2301      	movne	r3, #1
 80180e6:	2300      	moveq	r3, #0
 80180e8:	b2db      	uxtb	r3, r3
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d022      	beq.n	8018134 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x98>
            if (p->getNextListNode() == node)
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7ff ff59 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 80180f6:	4602      	mov	r2, r0
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	4293      	cmp	r3, r2
 80180fc:	bf0c      	ite	eq
 80180fe:	2301      	moveq	r3, #1
 8018100:	2300      	movne	r3, #0
 8018102:	b2db      	uxtb	r3, r3
 8018104:	2b00      	cmp	r3, #0
 8018106:	d00e      	beq.n	8018126 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x8a>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 8018108:	68fc      	ldr	r4, [r7, #12]
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	4618      	mov	r0, r3
 801810e:	f7ff ff4b 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 8018112:	4603      	mov	r3, r0
 8018114:	4618      	mov	r0, r3
 8018116:	f7ff ff47 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 801811a:	4603      	mov	r3, r0
 801811c:	4619      	mov	r1, r3
 801811e:	4620      	mov	r0, r4
 8018120:	f000 f86a 	bl	80181f8 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15setNextListNodeEPS2_>
                break;
 8018124:	e006      	b.n	8018134 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x98>
            p = p->getNextListNode();
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	4618      	mov	r0, r3
 801812a:	f7ff ff3d 	bl	8017fa8 <_ZNK6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15getNextListNodeEv>
 801812e:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 8018130:	e7d1      	b.n	80180d6 <_ZN6uavcan14LinkedListRootINS_10CanTxQueue5EntryEE6removeEPKS2_+0x3a>
        return;
 8018132:	bf00      	nop
}
 8018134:	3714      	adds	r7, #20
 8018136:	46bd      	mov	sp, r7
 8018138:	bd90      	pop	{r4, r7, pc}

0801813a <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>:
    T*       operator->()       { ensureConstructed(); return ptr_; }
 801813a:	b580      	push	{r7, lr}
 801813c:	b082      	sub	sp, #8
 801813e:	af00      	add	r7, sp, #0
 8018140:	6078      	str	r0, [r7, #4]
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f000 f866 	bl	8018214 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE17ensureConstructedEv>
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	69db      	ldr	r3, [r3, #28]
 801814c:	4618      	mov	r0, r3
 801814e:	3708      	adds	r7, #8
 8018150:	46bd      	mov	sp, r7
 8018152:	bd80      	pop	{r7, pc}

08018154 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEC1Ev>:
    LazyConstructor()
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
        : ptr_(UAVCAN_NULLPTR)
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2200      	movs	r2, #0
 8018160:	61da      	str	r2, [r3, #28]
        fill(data_.pool, data_.pool + sizeof(T), uint8_t(0));
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	331c      	adds	r3, #28
 8018168:	2200      	movs	r2, #0
 801816a:	73fa      	strb	r2, [r7, #15]
 801816c:	f107 020f 	add.w	r2, r7, #15
 8018170:	4619      	mov	r1, r3
 8018172:	f7f0 fa2d 	bl	80085d0 <_ZN6uavcan4fillIPhhEEvT_S2_RKT0_>
    }
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	4618      	mov	r0, r3
 801817a:	3710      	adds	r7, #16
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}

08018180 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE9constructIRNS_14IPoolAllocatorERNS_12ISystemClockEjEEvNS_13ParameterTypeIT_E4TypeENS8_IT0_E4TypeENS8_IT1_E4TypeE>:
    void construct(typename ParameterType<P1>::Type p1, typename ParameterType<P2>::Type p2,
 8018180:	b590      	push	{r4, r7, lr}
 8018182:	b085      	sub	sp, #20
 8018184:	af00      	add	r7, sp, #0
 8018186:	60f8      	str	r0, [r7, #12]
 8018188:	60b9      	str	r1, [r7, #8]
 801818a:	607a      	str	r2, [r7, #4]
 801818c:	603b      	str	r3, [r7, #0]
        ensureNotConstructed();
 801818e:	68f8      	ldr	r0, [r7, #12]
 8018190:	f000 f852 	bl	8018238 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE20ensureNotConstructedEv>
        ptr_ = new (static_cast<void*>(data_.pool)) T(p1, p2, p3);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	4619      	mov	r1, r3
 8018198:	201c      	movs	r0, #28
 801819a:	f7ed fead 	bl	8005ef8 <_ZnwjPv>
 801819e:	4604      	mov	r4, r0
 80181a0:	2c00      	cmp	r4, #0
 80181a2:	d008      	beq.n	80181b6 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE9constructIRNS_14IPoolAllocatorERNS_12ISystemClockEjEEvNS_13ParameterTypeIT_E4TypeENS8_IT0_E4TypeENS8_IT1_E4TypeE+0x36>
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	687a      	ldr	r2, [r7, #4]
 80181aa:	68b9      	ldr	r1, [r7, #8]
 80181ac:	4620      	mov	r0, r4
 80181ae:	f7fe ff31 	bl	8017014 <_ZN6uavcan10CanTxQueueC1ERNS_14IPoolAllocatorERNS_12ISystemClockEj>
 80181b2:	4622      	mov	r2, r4
 80181b4:	e000      	b.n	80181b8 <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEE9constructIRNS_14IPoolAllocatorERNS_12ISystemClockEjEEvNS_13ParameterTypeIT_E4TypeENS8_IT0_E4TypeENS8_IT1_E4TypeE+0x38>
 80181b6:	4622      	mov	r2, r4
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	61da      	str	r2, [r3, #28]
    }
 80181bc:	bf00      	nop
 80181be:	3714      	adds	r7, #20
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd90      	pop	{r4, r7, pc}

080181c4 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEEptEv>:
    const T* operator->() const { ensureConstructed(); return ptr_; }
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b082      	sub	sp, #8
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f000 f821 	bl	8018214 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE17ensureConstructedEv>
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	69db      	ldr	r3, [r3, #28]
 80181d6:	4618      	mov	r0, r3
 80181d8:	3708      	adds	r7, #8
 80181da:	46bd      	mov	sp, r7
 80181dc:	bd80      	pop	{r7, pc}

080181de <_ZN6uavcan15LazyConstructorINS_10CanTxQueueEEdeEv>:
    T&       operator*()       { ensureConstructed(); return *ptr_; }
 80181de:	b580      	push	{r7, lr}
 80181e0:	b082      	sub	sp, #8
 80181e2:	af00      	add	r7, sp, #0
 80181e4:	6078      	str	r0, [r7, #4]
 80181e6:	6878      	ldr	r0, [r7, #4]
 80181e8:	f000 f814 	bl	8018214 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE17ensureConstructedEv>
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	69db      	ldr	r3, [r3, #28]
 80181f0:	4618      	mov	r0, r3
 80181f2:	3708      	adds	r7, #8
 80181f4:	46bd      	mov	sp, r7
 80181f6:	bd80      	pop	{r7, pc}

080181f8 <_ZN6uavcan14LinkedListNodeINS_10CanTxQueue5EntryEE15setNextListNodeEPS2_>:
    void setNextListNode(T* node)
 80181f8:	b480      	push	{r7}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
        next_ = node;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	683a      	ldr	r2, [r7, #0]
 8018206:	601a      	str	r2, [r3, #0]
    }
 8018208:	bf00      	nop
 801820a:	370c      	adds	r7, #12
 801820c:	46bd      	mov	sp, r7
 801820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018212:	4770      	bx	lr

08018214 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE17ensureConstructedEv>:
    void ensureConstructed() const
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
        if (!ptr_)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	69db      	ldr	r3, [r3, #28]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d102      	bne.n	801822a <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE17ensureConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 8018224:	4803      	ldr	r0, [pc, #12]	; (8018234 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE17ensureConstructedEv+0x20>)
 8018226:	f005 feab 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 801822a:	bf00      	nop
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	08023938 	.word	0x08023938

08018238 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE20ensureNotConstructedEv>:
    void ensureNotConstructed() const
 8018238:	b580      	push	{r7, lr}
 801823a:	b082      	sub	sp, #8
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
        if (ptr_)
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	69db      	ldr	r3, [r3, #28]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d002      	beq.n	801824e <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE20ensureNotConstructedEv+0x16>
            handleFatalError("LazyConstructor<T>");
 8018248:	4803      	ldr	r0, [pc, #12]	; (8018258 <_ZNK6uavcan15LazyConstructorINS_10CanTxQueueEE20ensureNotConstructedEv+0x20>)
 801824a:	f005 fe99 	bl	801df80 <_ZN6uavcan16handleFatalErrorEPKc>
    }
 801824e:	bf00      	nop
 8018250:	3708      	adds	r7, #8
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	08023938 	.word	0x08023938

0801825c <_ZN6uavcan20LimitedPoolAllocatorD1Ev>:
class LimitedPoolAllocator : public IPoolAllocator
 801825c:	b580      	push	{r7, lr}
 801825e:	b082      	sub	sp, #8
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	4a05      	ldr	r2, [pc, #20]	; (801827c <_ZN6uavcan20LimitedPoolAllocatorD1Ev+0x20>)
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	601a      	str	r2, [r3, #0]
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	4618      	mov	r0, r3
 801826e:	f7ed fe4f 	bl	8005f10 <_ZN6uavcan14IPoolAllocatorD1Ev>
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	4618      	mov	r0, r3
 8018276:	3708      	adds	r7, #8
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}
 801827c:	0802c770 	.word	0x0802c770

08018280 <_ZN6uavcan20LimitedPoolAllocatorD0Ev>:
 8018280:	b580      	push	{r7, lr}
 8018282:	b082      	sub	sp, #8
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f7ff ffe7 	bl	801825c <_ZN6uavcan20LimitedPoolAllocatorD1Ev>
 801828e:	210c      	movs	r1, #12
 8018290:	6878      	ldr	r0, [r7, #4]
 8018292:	f008 f95a 	bl	802054a <_ZdlPvj>
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	4618      	mov	r0, r3
 801829a:	3708      	adds	r7, #8
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}

080182a0 <_ZNK6uavcan6NodeIDneES0_>:
    bool operator!=(NodeID rhs) const { return !operator==(rhs); }
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b082      	sub	sp, #8
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
 80182a8:	7039      	strb	r1, [r7, #0]
 80182aa:	7839      	ldrb	r1, [r7, #0]
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	f7ed fcae 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 80182b2:	4603      	mov	r3, r0
 80182b4:	f083 0301 	eor.w	r3, r3, #1
 80182b8:	b2db      	uxtb	r3, r3
 80182ba:	4618      	mov	r0, r3
 80182bc:	3708      	adds	r7, #8
 80182be:	46bd      	mov	sp, r7
 80182c0:	bd80      	pop	{r7, pc}

080182c2 <_ZNK6uavcan10DataTypeIDltES0_>:
    bool operator<(DataTypeID rhs) const { return value_ < rhs.value_; }
 80182c2:	b480      	push	{r7}
 80182c4:	b083      	sub	sp, #12
 80182c6:	af00      	add	r7, sp, #0
 80182c8:	6078      	str	r0, [r7, #4]
 80182ca:	6039      	str	r1, [r7, #0]
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	bf34      	ite	cc
 80182d6:	2301      	movcc	r3, #1
 80182d8:	2300      	movcs	r3, #0
 80182da:	b2db      	uxtb	r3, r3
 80182dc:	4618      	mov	r0, r3
 80182de:	370c      	adds	r7, #12
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr

080182e8 <_ZN6uavcan7UtcTimeC1Ev>:
class UAVCAN_EXPORT UtcDuration : public DurationBase<UtcDuration> { };

class UAVCAN_EXPORT UtcTime : public TimeBase<UtcTime, UtcDuration> /// Implicitly convertible to/from uavcan.Timestamp
{
public:
    UtcTime() { }
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b082      	sub	sp, #8
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f000 fd2a 	bl	8018d4c <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEEC1Ev>
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	4618      	mov	r0, r3
 80182fc:	3708      	adds	r7, #8
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}

08018302 <_ZN6uavcan7UtcTimeD1Ev>:
class UAVCAN_EXPORT UtcTime : public TimeBase<UtcTime, UtcDuration> /// Implicitly convertible to/from uavcan.Timestamp
 8018302:	b580      	push	{r7, lr}
 8018304:	b082      	sub	sp, #8
 8018306:	af00      	add	r7, sp, #0
 8018308:	6078      	str	r0, [r7, #4]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	4618      	mov	r0, r3
 801830e:	f000 fd31 	bl	8018d74 <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEED1Ev>
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	4618      	mov	r0, r3
 8018316:	3708      	adds	r7, #8
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}

0801831c <_ZN6uavcan10CanRxFrameC1Ev>:
    CanRxFrame()
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
        : iface_index(0)
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	4618      	mov	r0, r3
 8018328:	f7ed fe78 	bl	800601c <_ZN6uavcan8CanFrameC1Ev>
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	3310      	adds	r3, #16
 8018330:	4618      	mov	r0, r3
 8018332:	f7ed fee2 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	3318      	adds	r3, #24
 801833a:	4618      	mov	r0, r3
 801833c:	f7ff ffd4 	bl	80182e8 <_ZN6uavcan7UtcTimeC1Ev>
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	2200      	movs	r2, #0
 8018344:	f883 2020 	strb.w	r2, [r3, #32]
    { }
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	4618      	mov	r0, r3
 801834c:	3708      	adds	r7, #8
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}

08018352 <_ZN6uavcan5FrameC1Ev>:
    Frame() :
 8018352:	b580      	push	{r7, lr}
 8018354:	b082      	sub	sp, #8
 8018356:	af00      	add	r7, sp, #0
 8018358:	6078      	str	r0, [r7, #4]
        toggle_(false)
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	3307      	adds	r3, #7
 801835e:	4618      	mov	r0, r3
 8018360:	f7ed fba6 	bl	8005ab0 <_ZN6uavcan16TransferPriorityC1Ev>
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2203      	movs	r2, #3
 8018368:	721a      	strb	r2, [r3, #8]
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	330c      	adds	r3, #12
 801836e:	4618      	mov	r0, r3
 8018370:	f7ed fc60 	bl	8005c34 <_ZN6uavcan10DataTypeIDC1Ev>
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	2200      	movs	r2, #0
 8018378:	611a      	str	r2, [r3, #16]
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	3314      	adds	r3, #20
 801837e:	4618      	mov	r0, r3
 8018380:	f7ed fbe4 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	3315      	adds	r3, #21
 8018388:	4618      	mov	r0, r3
 801838a:	f7ed fbdf 	bl	8005b4c <_ZN6uavcan6NodeIDC1Ev>
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	3316      	adds	r3, #22
 8018392:	4618      	mov	r0, r3
 8018394:	f7ed fb9a 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2200      	movs	r2, #0
 801839c:	75da      	strb	r2, [r3, #23]
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2200      	movs	r2, #0
 80183a2:	761a      	strb	r2, [r3, #24]
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	2200      	movs	r2, #0
 80183a8:	765a      	strb	r2, [r3, #25]
    { }
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	4618      	mov	r0, r3
 80183ae:	3708      	adds	r7, #8
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}

080183b4 <_ZNK6uavcan5Frame13getDataTypeIDEv>:
    DataTypeID getDataTypeID()     const { return data_type_id_; }
 80183b4:	b480      	push	{r7}
 80183b6:	b083      	sub	sp, #12
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	68db      	ldr	r3, [r3, #12]
 80183c0:	4618      	mov	r0, r3
 80183c2:	370c      	adds	r7, #12
 80183c4:	46bd      	mov	sp, r7
 80183c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ca:	4770      	bx	lr

080183cc <_ZNK6uavcan5Frame12getDstNodeIDEv>:
    NodeID getDstNodeID()          const { return dst_node_id_; }
 80183cc:	b480      	push	{r7}
 80183ce:	b083      	sub	sp, #12
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	7d5b      	ldrb	r3, [r3, #21]
 80183d8:	4618      	mov	r0, r3
 80183da:	370c      	adds	r7, #12
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr

080183e4 <_ZN6uavcan7RxFrameC1Ev>:
    MonotonicTime ts_mono_;
    UtcTime ts_utc_;
    uint8_t iface_index_;

public:
    RxFrame()
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b082      	sub	sp, #8
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
        : iface_index_(0)
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7ff ffaf 	bl	8018352 <_ZN6uavcan5FrameC1Ev>
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	3320      	adds	r3, #32
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7ed fe7e 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	3328      	adds	r3, #40	; 0x28
 8018402:	4618      	mov	r0, r3
 8018404:	f7ff ff70 	bl	80182e8 <_ZN6uavcan7UtcTimeC1Ev>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2200      	movs	r2, #0
 801840c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    { }
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	4618      	mov	r0, r3
 8018414:	3708      	adds	r7, #8
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}

0801841a <_ZN6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorC1ENS_10DataTypeIDE>:
            explicit DataTypeIDInsertionComparator(DataTypeID id) : id_(id) { }
 801841a:	b480      	push	{r7}
 801841c:	b083      	sub	sp, #12
 801841e:	af00      	add	r7, sp, #0
 8018420:	6078      	str	r0, [r7, #4]
 8018422:	6039      	str	r1, [r7, #0]
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	683a      	ldr	r2, [r7, #0]
 8018428:	601a      	str	r2, [r3, #0]
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	4618      	mov	r0, r3
 801842e:	370c      	adds	r7, #12
 8018430:	46bd      	mov	sp, r7
 8018432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018436:	4770      	bx	lr

08018438 <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE>:
            bool operator()(const TransferListener* listener) const
 8018438:	b590      	push	{r4, r7, lr}
 801843a:	b083      	sub	sp, #12
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
                UAVCAN_ASSERT(listener);
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d105      	bne.n	8018454 <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE+0x1c>
 8018448:	4b0c      	ldr	r3, [pc, #48]	; (801847c <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE+0x44>)
 801844a:	4a0d      	ldr	r2, [pc, #52]	; (8018480 <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE+0x48>)
 801844c:	2162      	movs	r1, #98	; 0x62
 801844e:	480d      	ldr	r0, [pc, #52]	; (8018484 <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE+0x4c>)
 8018450:	f008 f89c 	bl	802058c <__assert_func>
                return id_ > listener->getDataTypeDescriptor().getID();
 8018454:	687c      	ldr	r4, [r7, #4]
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	4618      	mov	r0, r3
 801845a:	f7fe fcb6 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 801845e:	4603      	mov	r3, r0
 8018460:	4618      	mov	r0, r3
 8018462:	f7ed fcc3 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8018466:	4603      	mov	r3, r0
 8018468:	4619      	mov	r1, r3
 801846a:	4620      	mov	r0, r4
 801846c:	f7fc fa30 	bl	80148d0 <_ZNK6uavcan10DataTypeIDgtES0_>
 8018470:	4603      	mov	r3, r0
            }
 8018472:	4618      	mov	r0, r3
 8018474:	370c      	adds	r7, #12
 8018476:	46bd      	mov	sp, r7
 8018478:	bd90      	pop	{r4, r7, pc}
 801847a:	bf00      	nop
 801847c:	0802394c 	.word	0x0802394c
 8018480:	0802ad08 	.word	0x0802ad08
 8018484:	08023958 	.word	0x08023958

08018488 <_ZN6uavcan29LoopbackFrameListenerRegistry15invokeListenersERNS_7RxFrameE>:
    }
    return false;
}

void LoopbackFrameListenerRegistry::invokeListeners(RxFrame& frame)
{
 8018488:	b580      	push	{r7, lr}
 801848a:	b084      	sub	sp, #16
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
 8018490:	6039      	str	r1, [r7, #0]
    LoopbackFrameListenerBase* p = listeners_.get();
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	3304      	adds	r3, #4
 8018496:	4618      	mov	r0, r3
 8018498:	f000 fc77 	bl	8018d8a <_ZNK6uavcan14LinkedListRootINS_25LoopbackFrameListenerBaseEE3getEv>
 801849c:	60f8      	str	r0, [r7, #12]
    while (p)
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d00f      	beq.n	80184c4 <_ZN6uavcan29LoopbackFrameListenerRegistry15invokeListenersERNS_7RxFrameE+0x3c>
    {
        LoopbackFrameListenerBase* const next = p->getNextListNode();
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	3304      	adds	r3, #4
 80184a8:	4618      	mov	r0, r3
 80184aa:	f000 fc7a 	bl	8018da2 <_ZNK6uavcan14LinkedListNodeINS_25LoopbackFrameListenerBaseEE15getNextListNodeEv>
 80184ae:	60b8      	str	r0, [r7, #8]
        p->handleLoopbackFrame(frame);     // p may be modified
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	3308      	adds	r3, #8
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	6839      	ldr	r1, [r7, #0]
 80184ba:	68f8      	ldr	r0, [r7, #12]
 80184bc:	4798      	blx	r3
        p = next;
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	60fb      	str	r3, [r7, #12]
    while (p)
 80184c2:	e7ec      	b.n	801849e <_ZN6uavcan29LoopbackFrameListenerRegistry15invokeListenersERNS_7RxFrameE+0x16>
    }
}
 80184c4:	bf00      	nop
 80184c6:	3710      	adds	r7, #16
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}

080184cc <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE>:

/*
 * Dispatcher::ListenerRegister
 */
bool Dispatcher::ListenerRegistry::add(TransferListener* listener, Mode mode)
{
 80184cc:	b590      	push	{r4, r7, lr}
 80184ce:	b089      	sub	sp, #36	; 0x24
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	60f8      	str	r0, [r7, #12]
 80184d4:	60b9      	str	r1, [r7, #8]
 80184d6:	4613      	mov	r3, r2
 80184d8:	71fb      	strb	r3, [r7, #7]
    if (mode == UniqueListener)
 80184da:	79fb      	ldrb	r3, [r7, #7]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d12a      	bne.n	8018536 <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE+0x6a>
    {
        TransferListener* p = list_.get();
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7fe fc7d 	bl	8016de2 <_ZNK6uavcan14LinkedListRootINS_16TransferListenerEE3getEv>
 80184e8:	61f8      	str	r0, [r7, #28]
        while (p)
 80184ea:	69fb      	ldr	r3, [r7, #28]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d022      	beq.n	8018536 <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE+0x6a>
        {
            if (p->getDataTypeDescriptor().getID() == listener->getDataTypeDescriptor().getID())
 80184f0:	69f8      	ldr	r0, [r7, #28]
 80184f2:	f7fe fc6a 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 80184f6:	4603      	mov	r3, r0
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7ed fc77 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 80184fe:	4603      	mov	r3, r0
 8018500:	617b      	str	r3, [r7, #20]
 8018502:	68b8      	ldr	r0, [r7, #8]
 8018504:	f7fe fc61 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 8018508:	4603      	mov	r3, r0
 801850a:	4618      	mov	r0, r3
 801850c:	f7ed fc6e 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8018510:	4602      	mov	r2, r0
 8018512:	f107 0314 	add.w	r3, r7, #20
 8018516:	4611      	mov	r1, r2
 8018518:	4618      	mov	r0, r3
 801851a:	f7ed fbb7 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 801851e:	4603      	mov	r3, r0
 8018520:	2b00      	cmp	r3, #0
 8018522:	d001      	beq.n	8018528 <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE+0x5c>
            {
                return false;
 8018524:	2300      	movs	r3, #0
 8018526:	e01b      	b.n	8018560 <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE+0x94>
            }
            p = p->getNextListNode();
 8018528:	69fb      	ldr	r3, [r7, #28]
 801852a:	3304      	adds	r3, #4
 801852c:	4618      	mov	r0, r3
 801852e:	f7fe fc64 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018532:	61f8      	str	r0, [r7, #28]
        while (p)
 8018534:	e7d9      	b.n	80184ea <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE+0x1e>
        }
    }
    // Objective is to arrange entries by Data Type ID in ascending order from root.
    list_.insertBefore(listener, DataTypeIDInsertionComparator(listener->getDataTypeDescriptor().getID()));
 8018536:	68fc      	ldr	r4, [r7, #12]
 8018538:	68b8      	ldr	r0, [r7, #8]
 801853a:	f7fe fc46 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 801853e:	4603      	mov	r3, r0
 8018540:	4618      	mov	r0, r3
 8018542:	f7ed fc53 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 8018546:	4602      	mov	r2, r0
 8018548:	f107 0318 	add.w	r3, r7, #24
 801854c:	4611      	mov	r1, r2
 801854e:	4618      	mov	r0, r3
 8018550:	f7ff ff63 	bl	801841a <_ZN6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorC1ENS_10DataTypeIDE>
 8018554:	69ba      	ldr	r2, [r7, #24]
 8018556:	68b9      	ldr	r1, [r7, #8]
 8018558:	4620      	mov	r0, r4
 801855a:	f000 fc2f 	bl	8018dbc <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_>
    return true;
 801855e:	2301      	movs	r3, #1
}
 8018560:	4618      	mov	r0, r3
 8018562:	3724      	adds	r7, #36	; 0x24
 8018564:	46bd      	mov	sp, r7
 8018566:	bd90      	pop	{r4, r7, pc}

08018568 <_ZN6uavcan10Dispatcher16ListenerRegistry6removeEPNS_16TransferListenerE>:

void Dispatcher::ListenerRegistry::remove(TransferListener* listener)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	6039      	str	r1, [r7, #0]
    list_.remove(listener);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6839      	ldr	r1, [r7, #0]
 8018576:	4618      	mov	r0, r3
 8018578:	f000 fc94 	bl	8018ea4 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_>
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE>:

bool Dispatcher::ListenerRegistry::exists(DataTypeID dtid) const
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
 801858c:	6039      	str	r1, [r7, #0]
    TransferListener* p = list_.get();
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	4618      	mov	r0, r3
 8018592:	f7fe fc26 	bl	8016de2 <_ZNK6uavcan14LinkedListRootINS_16TransferListenerEE3getEv>
 8018596:	60f8      	str	r0, [r7, #12]
    while (p)
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d01a      	beq.n	80185d4 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE+0x50>
    {
        if (p->getDataTypeDescriptor().getID() == dtid)
 801859e:	68f8      	ldr	r0, [r7, #12]
 80185a0:	f7fe fc13 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 80185a4:	4603      	mov	r3, r0
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7ed fc20 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 80185ac:	4603      	mov	r3, r0
 80185ae:	60bb      	str	r3, [r7, #8]
 80185b0:	f107 0308 	add.w	r3, r7, #8
 80185b4:	6839      	ldr	r1, [r7, #0]
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7ed fb68 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 80185bc:	4603      	mov	r3, r0
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d001      	beq.n	80185c6 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE+0x42>
        {
            return true;
 80185c2:	2301      	movs	r3, #1
 80185c4:	e007      	b.n	80185d6 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE+0x52>
        }
        p = p->getNextListNode();
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	3304      	adds	r3, #4
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7fe fc15 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 80185d0:	60f8      	str	r0, [r7, #12]
    while (p)
 80185d2:	e7e1      	b.n	8018598 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE+0x14>
    }
    return false;
 80185d4:	2300      	movs	r3, #0
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3710      	adds	r7, #16
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}

080185de <_ZN6uavcan10Dispatcher16ListenerRegistry7cleanupENS_13MonotonicTimeE>:

void Dispatcher::ListenerRegistry::cleanup(MonotonicTime ts)
{
 80185de:	b580      	push	{r7, lr}
 80185e0:	b086      	sub	sp, #24
 80185e2:	af00      	add	r7, sp, #0
 80185e4:	6078      	str	r0, [r7, #4]
 80185e6:	6039      	str	r1, [r7, #0]
    TransferListener* p = list_.get();
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	4618      	mov	r0, r3
 80185ec:	f7fe fbf9 	bl	8016de2 <_ZNK6uavcan14LinkedListRootINS_16TransferListenerEE3getEv>
 80185f0:	6178      	str	r0, [r7, #20]
    while (p)
 80185f2:	697b      	ldr	r3, [r7, #20]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d01a      	beq.n	801862e <_ZN6uavcan10Dispatcher16ListenerRegistry7cleanupENS_13MonotonicTimeE+0x50>
    {
        TransferListener* const next = p->getNextListNode();
 80185f8:	697b      	ldr	r3, [r7, #20]
 80185fa:	3304      	adds	r3, #4
 80185fc:	4618      	mov	r0, r3
 80185fe:	f7fe fbfc 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018602:	6138      	str	r0, [r7, #16]
        p->cleanup(ts); // p may be modified
 8018604:	683a      	ldr	r2, [r7, #0]
 8018606:	f107 0308 	add.w	r3, r7, #8
 801860a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801860e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018612:	f107 0308 	add.w	r3, r7, #8
 8018616:	4619      	mov	r1, r3
 8018618:	6978      	ldr	r0, [r7, #20]
 801861a:	f003 fb41 	bl	801bca0 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE>
 801861e:	f107 0308 	add.w	r3, r7, #8
 8018622:	4618      	mov	r0, r3
 8018624:	f7ed fd76 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        p = next;
 8018628:	693b      	ldr	r3, [r7, #16]
 801862a:	617b      	str	r3, [r7, #20]
    while (p)
 801862c:	e7e1      	b.n	80185f2 <_ZN6uavcan10Dispatcher16ListenerRegistry7cleanupENS_13MonotonicTimeE+0x14>
    }
}
 801862e:	bf00      	nop
 8018630:	3718      	adds	r7, #24
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}

08018636 <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE>:

void Dispatcher::ListenerRegistry::handleFrame(const RxFrame& frame)
{
 8018636:	b580      	push	{r7, lr}
 8018638:	b086      	sub	sp, #24
 801863a:	af00      	add	r7, sp, #0
 801863c:	6078      	str	r0, [r7, #4]
 801863e:	6039      	str	r1, [r7, #0]
    TransferListener* p = list_.get();
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	4618      	mov	r0, r3
 8018644:	f7fe fbcd 	bl	8016de2 <_ZNK6uavcan14LinkedListRootINS_16TransferListenerEE3getEv>
 8018648:	6178      	str	r0, [r7, #20]
    while (p)
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d03f      	beq.n	80186d0 <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE+0x9a>
    {
        TransferListener* const next = p->getNextListNode();
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	3304      	adds	r3, #4
 8018654:	4618      	mov	r0, r3
 8018656:	f7fe fbd0 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 801865a:	6138      	str	r0, [r7, #16]
        if (p->getDataTypeDescriptor().getID() == frame.getDataTypeID())
 801865c:	6978      	ldr	r0, [r7, #20]
 801865e:	f7fe fbb4 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 8018662:	4603      	mov	r3, r0
 8018664:	4618      	mov	r0, r3
 8018666:	f7ed fbc1 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 801866a:	4603      	mov	r3, r0
 801866c:	60bb      	str	r3, [r7, #8]
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	4618      	mov	r0, r3
 8018672:	f7ff fe9f 	bl	80183b4 <_ZNK6uavcan5Frame13getDataTypeIDEv>
 8018676:	4602      	mov	r2, r0
 8018678:	f107 0308 	add.w	r3, r7, #8
 801867c:	4611      	mov	r1, r2
 801867e:	4618      	mov	r0, r3
 8018680:	f7ed fb04 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 8018684:	4603      	mov	r3, r0
 8018686:	2b00      	cmp	r3, #0
 8018688:	d007      	beq.n	801869a <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE+0x64>
        {
            p->handleFrame(frame); // p may be modified
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	330c      	adds	r3, #12
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	6839      	ldr	r1, [r7, #0]
 8018694:	6978      	ldr	r0, [r7, #20]
 8018696:	4798      	blx	r3
 8018698:	e016      	b.n	80186c8 <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE+0x92>
        }
        else if (p->getDataTypeDescriptor().getID() < frame.getDataTypeID())  // Listeners are ordered by data type id!
 801869a:	6978      	ldr	r0, [r7, #20]
 801869c:	f7fe fb95 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 80186a0:	4603      	mov	r3, r0
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7ed fba2 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 80186a8:	4603      	mov	r3, r0
 80186aa:	60fb      	str	r3, [r7, #12]
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7ff fe80 	bl	80183b4 <_ZNK6uavcan5Frame13getDataTypeIDEv>
 80186b4:	4602      	mov	r2, r0
 80186b6:	f107 030c 	add.w	r3, r7, #12
 80186ba:	4611      	mov	r1, r2
 80186bc:	4618      	mov	r0, r3
 80186be:	f7ff fe00 	bl	80182c2 <_ZNK6uavcan10DataTypeIDltES0_>
 80186c2:	4603      	mov	r3, r0
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d102      	bne.n	80186ce <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE+0x98>
        }
        else
        {
            ;  // Nothing to do with this one
        }
        p = next;
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	617b      	str	r3, [r7, #20]
    while (p)
 80186cc:	e7bd      	b.n	801864a <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE+0x14>
            break;
 80186ce:	bf00      	nop
    }
}
 80186d0:	bf00      	nop
 80186d2:	3718      	adds	r7, #24
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}

080186d8 <_ZN6uavcan7RxFrameD1Ev>:
class UAVCAN_EXPORT RxFrame : public Frame
 80186d8:	b580      	push	{r7, lr}
 80186da:	b082      	sub	sp, #8
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	3328      	adds	r3, #40	; 0x28
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7ff fe0c 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	3320      	adds	r3, #32
 80186ee:	4618      	mov	r0, r3
 80186f0:	f7ed fd10 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	4618      	mov	r0, r3
 80186f8:	3708      	adds	r7, #8
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
	...

08018700 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE>:

/*
 * Dispatcher
 */
void Dispatcher::handleFrame(const CanRxFrame& can_frame)
{
 8018700:	b590      	push	{r4, r7, lr}
 8018702:	b093      	sub	sp, #76	; 0x4c
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
    RxFrame frame;
 801870a:	f107 0308 	add.w	r3, r7, #8
 801870e:	4618      	mov	r0, r3
 8018710:	f7ff fe68 	bl	80183e4 <_ZN6uavcan7RxFrameC1Ev>
    if (!frame.parse(can_frame))
 8018714:	f107 0308 	add.w	r3, r7, #8
 8018718:	6839      	ldr	r1, [r7, #0]
 801871a:	4618      	mov	r0, r3
 801871c:	f001 f852 	bl	80197c4 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE>
 8018720:	4603      	mov	r3, r0
 8018722:	f083 0301 	eor.w	r3, r3, #1
 8018726:	b2db      	uxtb	r3, r3
 8018728:	2b00      	cmp	r3, #0
 801872a:	d001      	beq.n	8018730 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x30>
 801872c:	2400      	movs	r4, #0
    {
        // This is not counted as a transport error
        UAVCAN_TRACE("Dispatcher", "Invalid CAN frame received: %s", can_frame.toString().c_str());
        return;
 801872e:	e05c      	b.n	80187ea <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xea>
    }

    if ((frame.getDstNodeID() != NodeID::Broadcast) &&
 8018730:	f107 0308 	add.w	r3, r7, #8
 8018734:	4618      	mov	r0, r3
 8018736:	f7ff fe49 	bl	80183cc <_ZNK6uavcan5Frame12getDstNodeIDEv>
 801873a:	4603      	mov	r3, r0
 801873c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8018740:	4b2f      	ldr	r3, [pc, #188]	; (8018800 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x100>)
 8018742:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018746:	7819      	ldrb	r1, [r3, #0]
 8018748:	4610      	mov	r0, r2
 801874a:	f7ff fda9 	bl	80182a0 <_ZNK6uavcan6NodeIDneES0_>
 801874e:	4603      	mov	r3, r0
 8018750:	2b00      	cmp	r3, #0
 8018752:	d016      	beq.n	8018782 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x82>
        (frame.getDstNodeID() != getNodeID()))
 8018754:	f107 0308 	add.w	r3, r7, #8
 8018758:	4618      	mov	r0, r3
 801875a:	f7ff fe37 	bl	80183cc <_ZNK6uavcan5Frame12getDstNodeIDEv>
 801875e:	4603      	mov	r3, r0
 8018760:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8018764:	6878      	ldr	r0, [r7, #4]
 8018766:	f7fd f9e9 	bl	8015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>
 801876a:	4602      	mov	r2, r0
 801876c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018770:	4611      	mov	r1, r2
 8018772:	4618      	mov	r0, r3
 8018774:	f7ff fd94 	bl	80182a0 <_ZNK6uavcan6NodeIDneES0_>
 8018778:	4603      	mov	r3, r0
    if ((frame.getDstNodeID() != NodeID::Broadcast) &&
 801877a:	2b00      	cmp	r3, #0
 801877c:	d001      	beq.n	8018782 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x82>
 801877e:	2301      	movs	r3, #1
 8018780:	e000      	b.n	8018784 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x84>
 8018782:	2300      	movs	r3, #0
 8018784:	2b00      	cmp	r3, #0
 8018786:	d001      	beq.n	801878c <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x8c>
 8018788:	2400      	movs	r4, #0
    {
        return;
 801878a:	e02e      	b.n	80187ea <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xea>
    }

    switch (frame.getTransferType())
 801878c:	f107 0308 	add.w	r3, r7, #8
 8018790:	4618      	mov	r0, r3
 8018792:	f7ed fcd9 	bl	8006148 <_ZNK6uavcan5Frame15getTransferTypeEv>
 8018796:	4603      	mov	r3, r0
 8018798:	2b01      	cmp	r3, #1
 801879a:	d00d      	beq.n	80187b8 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xb8>
 801879c:	2b02      	cmp	r3, #2
 801879e:	d002      	beq.n	80187a6 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xa6>
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d012      	beq.n	80187ca <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xca>
 80187a4:	e01a      	b.n	80187dc <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xdc>
    {
    case TransferTypeMessageBroadcast:
    {
        lmsg_.handleFrame(frame);
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	33d8      	adds	r3, #216	; 0xd8
 80187aa:	f107 0208 	add.w	r2, r7, #8
 80187ae:	4611      	mov	r1, r2
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7ff ff40 	bl	8018636 <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE>
        break;
 80187b6:	e017      	b.n	80187e8 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xe8>
    }
    case TransferTypeServiceRequest:
    {
        lsrv_req_.handleFrame(frame);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	33dc      	adds	r3, #220	; 0xdc
 80187bc:	f107 0208 	add.w	r2, r7, #8
 80187c0:	4611      	mov	r1, r2
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7ff ff37 	bl	8018636 <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE>
        break;
 80187c8:	e00e      	b.n	80187e8 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xe8>
    }
    case TransferTypeServiceResponse:
    {
        lsrv_resp_.handleFrame(frame);
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	33e0      	adds	r3, #224	; 0xe0
 80187ce:	f107 0208 	add.w	r2, r7, #8
 80187d2:	4611      	mov	r1, r2
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7ff ff2e 	bl	8018636 <_ZN6uavcan10Dispatcher16ListenerRegistry11handleFrameERKNS_7RxFrameE>
        break;
 80187da:	e005      	b.n	80187e8 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0xe8>
    }
    default:
    {
        UAVCAN_ASSERT(0);
 80187dc:	4b09      	ldr	r3, [pc, #36]	; (8018804 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x104>)
 80187de:	4a0a      	ldr	r2, [pc, #40]	; (8018808 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x108>)
 80187e0:	21b8      	movs	r1, #184	; 0xb8
 80187e2:	480a      	ldr	r0, [pc, #40]	; (801880c <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE+0x10c>)
 80187e4:	f007 fed2 	bl	802058c <__assert_func>
 80187e8:	2401      	movs	r4, #1
 80187ea:	f107 0308 	add.w	r3, r7, #8
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7ff ff72 	bl	80186d8 <_ZN6uavcan7RxFrameD1Ev>
 80187f4:	2c01      	cmp	r4, #1
    RxFrame frame;
 80187f6:	bf00      	nop
        break;
    }
    }
}
 80187f8:	374c      	adds	r7, #76	; 0x4c
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bd90      	pop	{r4, r7, pc}
 80187fe:	bf00      	nop
 8018800:	20008604 	.word	0x20008604
 8018804:	08023a20 	.word	0x08023a20
 8018808:	0802ad84 	.word	0x0802ad84
 801880c:	080239a4 	.word	0x080239a4

08018810 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE>:
void Dispatcher::notifyRxFrameListener(const CanRxFrame&, CanIOFlags)
{
}
#else
void Dispatcher::handleLoopbackFrame(const CanRxFrame& can_frame)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b092      	sub	sp, #72	; 0x48
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	6039      	str	r1, [r7, #0]
    RxFrame frame;
 801881a:	f107 0308 	add.w	r3, r7, #8
 801881e:	4618      	mov	r0, r3
 8018820:	f7ff fde0 	bl	80183e4 <_ZN6uavcan7RxFrameC1Ev>
    if (!frame.parse(can_frame))
 8018824:	f107 0308 	add.w	r3, r7, #8
 8018828:	6839      	ldr	r1, [r7, #0]
 801882a:	4618      	mov	r0, r3
 801882c:	f000 ffca 	bl	80197c4 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE>
 8018830:	4603      	mov	r3, r0
 8018832:	f083 0301 	eor.w	r3, r3, #1
 8018836:	b2db      	uxtb	r3, r3
 8018838:	2b00      	cmp	r3, #0
 801883a:	d005      	beq.n	8018848 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x38>
    {
        UAVCAN_TRACE("Dispatcher", "Invalid loopback CAN frame: %s", can_frame.toString().c_str());
        UAVCAN_ASSERT(0);  // No way!
 801883c:	4b18      	ldr	r3, [pc, #96]	; (80188a0 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x90>)
 801883e:	4a19      	ldr	r2, [pc, #100]	; (80188a4 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x94>)
 8018840:	21cd      	movs	r1, #205	; 0xcd
 8018842:	4819      	ldr	r0, [pc, #100]	; (80188a8 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x98>)
 8018844:	f007 fea2 	bl	802058c <__assert_func>
        return;
    }
    UAVCAN_ASSERT(frame.getSrcNodeID() == getNodeID());
 8018848:	f107 0308 	add.w	r3, r7, #8
 801884c:	4618      	mov	r0, r3
 801884e:	f7ed fc87 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 8018852:	4603      	mov	r3, r0
 8018854:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f7fd f96f 	bl	8015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>
 801885e:	4602      	mov	r2, r0
 8018860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018864:	4611      	mov	r1, r2
 8018866:	4618      	mov	r0, r3
 8018868:	f7ed f9d1 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 801886c:	4603      	mov	r3, r0
 801886e:	2b00      	cmp	r3, #0
 8018870:	d105      	bne.n	801887e <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x6e>
 8018872:	4b0e      	ldr	r3, [pc, #56]	; (80188ac <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x9c>)
 8018874:	4a0b      	ldr	r2, [pc, #44]	; (80188a4 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x94>)
 8018876:	21d0      	movs	r1, #208	; 0xd0
 8018878:	480b      	ldr	r0, [pc, #44]	; (80188a8 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE+0x98>)
 801887a:	f007 fe87 	bl	802058c <__assert_func>
    loopback_listeners_.invokeListeners(frame);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	33e4      	adds	r3, #228	; 0xe4
 8018882:	f107 0208 	add.w	r2, r7, #8
 8018886:	4611      	mov	r1, r2
 8018888:	4618      	mov	r0, r3
 801888a:	f7ff fdfd 	bl	8018488 <_ZN6uavcan29LoopbackFrameListenerRegistry15invokeListenersERNS_7RxFrameE>
    RxFrame frame;
 801888e:	f107 0308 	add.w	r3, r7, #8
 8018892:	4618      	mov	r0, r3
 8018894:	f7ff ff20 	bl	80186d8 <_ZN6uavcan7RxFrameD1Ev>
}
 8018898:	bf00      	nop
 801889a:	3748      	adds	r7, #72	; 0x48
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	08023a20 	.word	0x08023a20
 80188a4:	0802adc4 	.word	0x0802adc4
 80188a8:	080239a4 	.word	0x080239a4
 80188ac:	08023a24 	.word	0x08023a24

080188b0 <_ZN6uavcan10Dispatcher21notifyRxFrameListenerERKNS_10CanRxFrameEt>:

void Dispatcher::notifyRxFrameListener(const CanRxFrame& can_frame, CanIOFlags flags)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b084      	sub	sp, #16
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	60f8      	str	r0, [r7, #12]
 80188b8:	60b9      	str	r1, [r7, #8]
 80188ba:	4613      	mov	r3, r2
 80188bc:	80fb      	strh	r3, [r7, #6]
    if (rx_listener_ != UAVCAN_NULLPTR)
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d00b      	beq.n	80188e0 <_ZN6uavcan10Dispatcher21notifyRxFrameListenerERKNS_10CanRxFrameEt+0x30>
    {
        rx_listener_->handleRxFrame(can_frame, flags);
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	3308      	adds	r3, #8
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	88fa      	ldrh	r2, [r7, #6]
 80188dc:	68b9      	ldr	r1, [r7, #8]
 80188de:	4798      	blx	r3
    }
}
 80188e0:	bf00      	nop
 80188e2:	3710      	adds	r7, #16
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <_ZN6uavcan10CanRxFrameD1Ev>:
struct UAVCAN_EXPORT CanRxFrame : public CanFrame
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b082      	sub	sp, #8
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	6078      	str	r0, [r7, #4]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	3318      	adds	r3, #24
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7ff fd04 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	3310      	adds	r3, #16
 80188fe:	4618      	mov	r0, r3
 8018900:	f7ed fc08 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	4618      	mov	r0, r3
 8018908:	3708      	adds	r7, #8
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}

0801890e <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE>:
#endif

int Dispatcher::spin(MonotonicTime deadline)
{
 801890e:	b5b0      	push	{r4, r5, r7, lr}
 8018910:	b094      	sub	sp, #80	; 0x50
 8018912:	af00      	add	r7, sp, #0
 8018914:	6078      	str	r0, [r7, #4]
 8018916:	6039      	str	r1, [r7, #0]
    int num_frames_processed = 0;
 8018918:	2300      	movs	r3, #0
 801891a:	64fb      	str	r3, [r7, #76]	; 0x4c
    do
    {
        CanIOFlags flags = 0;
 801891c:	2300      	movs	r3, #0
 801891e:	86fb      	strh	r3, [r7, #54]	; 0x36
        CanRxFrame frame;
 8018920:	f107 0308 	add.w	r3, r7, #8
 8018924:	4618      	mov	r0, r3
 8018926:	f7ff fcf9 	bl	801831c <_ZN6uavcan10CanRxFrameC1Ev>
        const int res = canio_.receive(frame, deadline, flags);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	f103 0508 	add.w	r5, r3, #8
 8018930:	683a      	ldr	r2, [r7, #0]
 8018932:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018936:	e892 0003 	ldmia.w	r2, {r0, r1}
 801893a:	e883 0003 	stmia.w	r3, {r0, r1}
 801893e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8018942:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018946:	f107 0108 	add.w	r1, r7, #8
 801894a:	4628      	mov	r0, r5
 801894c:	f7ff f9c0 	bl	8017cd0 <_ZN6uavcan12CanIOManager7receiveERNS_10CanRxFrameENS_13MonotonicTimeERt>
 8018950:	64b8      	str	r0, [r7, #72]	; 0x48
 8018952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018956:	4618      	mov	r0, r3
 8018958:	f7ed fbdc 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        if (res < 0)
 801895c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801895e:	2b00      	cmp	r3, #0
 8018960:	da02      	bge.n	8018968 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0x5a>
        {
            return res;
 8018962:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018964:	2500      	movs	r5, #0
 8018966:	e01f      	b.n	80189a8 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0x9a>
        }
        if (res > 0)
 8018968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801896a:	2b00      	cmp	r3, #0
 801896c:	dd1b      	ble.n	80189a6 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0x98>
        {
            if (flags & CanIOFlagLoopback)
 801896e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018970:	f003 0301 	and.w	r3, r3, #1
 8018974:	2b00      	cmp	r3, #0
 8018976:	d006      	beq.n	8018986 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0x78>
            {
                handleLoopbackFrame(frame);
 8018978:	f107 0308 	add.w	r3, r7, #8
 801897c:	4619      	mov	r1, r3
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f7ff ff46 	bl	8018810 <_ZN6uavcan10Dispatcher19handleLoopbackFrameERKNS_10CanRxFrameE>
 8018984:	e008      	b.n	8018998 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0x8a>
            }
            else
            {
                num_frames_processed++;
 8018986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018988:	3301      	adds	r3, #1
 801898a:	64fb      	str	r3, [r7, #76]	; 0x4c
                handleFrame(frame);
 801898c:	f107 0308 	add.w	r3, r7, #8
 8018990:	4619      	mov	r1, r3
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f7ff feb4 	bl	8018700 <_ZN6uavcan10Dispatcher11handleFrameERKNS_10CanRxFrameE>
            }
            notifyRxFrameListener(frame, flags);
 8018998:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801899a:	f107 0308 	add.w	r3, r7, #8
 801899e:	4619      	mov	r1, r3
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f7ff ff85 	bl	80188b0 <_ZN6uavcan10Dispatcher21notifyRxFrameListenerERKNS_10CanRxFrameEt>
 80189a6:	2501      	movs	r5, #1
 80189a8:	f107 0308 	add.w	r3, r7, #8
 80189ac:	4618      	mov	r0, r3
 80189ae:	f7ff ff9b 	bl	80188e8 <_ZN6uavcan10CanRxFrameD1Ev>
 80189b2:	2d01      	cmp	r5, #1
 80189b4:	d11e      	bne.n	80189f4 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0xe6>
        CanRxFrame frame;
 80189b6:	bf00      	nop
        }
    }
    while (sysclock_.getMonotonic() < deadline);
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	3308      	adds	r3, #8
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80189ce:	4610      	mov	r0, r2
 80189d0:	4798      	blx	r3
 80189d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189d6:	6839      	ldr	r1, [r7, #0]
 80189d8:	4618      	mov	r0, r3
 80189da:	f7fc ff73 	bl	80158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>
 80189de:	4603      	mov	r3, r0
 80189e0:	461d      	mov	r5, r3
 80189e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189e6:	4618      	mov	r0, r3
 80189e8:	f7ed fb94 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 80189ec:	2d00      	cmp	r5, #0
 80189ee:	d000      	beq.n	80189f2 <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0xe4>
    do
 80189f0:	e794      	b.n	801891c <_ZN6uavcan10Dispatcher4spinENS_13MonotonicTimeE+0xe>

    return num_frames_processed;
 80189f2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80189f4:	4623      	mov	r3, r4
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3750      	adds	r7, #80	; 0x50
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018a00 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth>:
    return num_frames_processed;
}

int Dispatcher::send(const Frame& frame, MonotonicTime tx_deadline, MonotonicTime blocking_deadline,
                     CanTxQueue::Qos qos, CanIOFlags flags, uint8_t iface_mask)
{
 8018a00:	b590      	push	{r4, r7, lr}
 8018a02:	b093      	sub	sp, #76	; 0x4c
 8018a04:	af04      	add	r7, sp, #16
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	60b9      	str	r1, [r7, #8]
 8018a0a:	607a      	str	r2, [r7, #4]
 8018a0c:	603b      	str	r3, [r7, #0]
    if (frame.getSrcNodeID() != getNodeID())
 8018a0e:	68b8      	ldr	r0, [r7, #8]
 8018a10:	f7ed fba6 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 8018a14:	4603      	mov	r3, r0
 8018a16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8018a1a:	68f8      	ldr	r0, [r7, #12]
 8018a1c:	f7fd f88e 	bl	8015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>
 8018a20:	4602      	mov	r2, r0
 8018a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a26:	4611      	mov	r1, r2
 8018a28:	4618      	mov	r0, r3
 8018a2a:	f7ff fc39 	bl	80182a0 <_ZNK6uavcan6NodeIDneES0_>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d006      	beq.n	8018a42 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0x42>
    {
        UAVCAN_ASSERT(0);
 8018a34:	4b29      	ldr	r3, [pc, #164]	; (8018adc <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0xdc>)
 8018a36:	4a2a      	ldr	r2, [pc, #168]	; (8018ae0 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0xe0>)
 8018a38:	f44f 7192 	mov.w	r1, #292	; 0x124
 8018a3c:	4829      	ldr	r0, [pc, #164]	; (8018ae4 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0xe4>)
 8018a3e:	f007 fda5 	bl	802058c <__assert_func>
        return -ErrLogic;
    }

    CanFrame can_frame;
 8018a42:	f107 0314 	add.w	r3, r7, #20
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7ed fae8 	bl	800601c <_ZN6uavcan8CanFrameC1Ev>
    if (!frame.compile(can_frame))
 8018a4c:	f107 0314 	add.w	r3, r7, #20
 8018a50:	4619      	mov	r1, r3
 8018a52:	68b8      	ldr	r0, [r7, #8]
 8018a54:	f000 fd08 	bl	8019468 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	f083 0301 	eor.w	r3, r3, #1
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d006      	beq.n	8018a72 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0x72>
    {
        UAVCAN_TRACE("Dispatcher", "Unable to send: frame is malformed: %s", frame.toString().c_str());
        UAVCAN_ASSERT(0);
 8018a64:	4b1d      	ldr	r3, [pc, #116]	; (8018adc <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0xdc>)
 8018a66:	4a1e      	ldr	r2, [pc, #120]	; (8018ae0 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0xe0>)
 8018a68:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8018a6c:	481d      	ldr	r0, [pc, #116]	; (8018ae4 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth+0xe4>)
 8018a6e:	f007 fd8d 	bl	802058c <__assert_func>
        return -ErrLogic;
    }
    return canio_.send(can_frame, tx_deadline, blocking_deadline, iface_mask, qos, flags);
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	f103 0408 	add.w	r4, r3, #8
 8018a78:	687a      	ldr	r2, [r7, #4]
 8018a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a82:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a86:	683a      	ldr	r2, [r7, #0]
 8018a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a90:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a94:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018a98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018a9c:	f107 0114 	add.w	r1, r7, #20
 8018aa0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018aa4:	9302      	str	r3, [sp, #8]
 8018aa6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8018aaa:	9301      	str	r3, [sp, #4]
 8018aac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	f7fe ff75 	bl	80179a4 <_ZN6uavcan12CanIOManager4sendERKNS_8CanFrameENS_13MonotonicTimeES4_hNS_10CanTxQueue3QosEt>
 8018aba:	4604      	mov	r4, r0
 8018abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7ed fb27 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8018ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7ed fb22 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8018ad0:	4623      	mov	r3, r4
}
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	373c      	adds	r7, #60	; 0x3c
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd90      	pop	{r4, r7, pc}
 8018ada:	bf00      	nop
 8018adc:	08023a20 	.word	0x08023a20
 8018ae0:	0802ae0c 	.word	0x0802ae0c
 8018ae4:	080239a4 	.word	0x080239a4

08018ae8 <_ZN6uavcan10Dispatcher7cleanupENS_13MonotonicTimeE>:

void Dispatcher::cleanup(MonotonicTime ts)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b08a      	sub	sp, #40	; 0x28
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	6039      	str	r1, [r7, #0]
    outgoing_transfer_reg_.cleanup(ts);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8018af8:	6839      	ldr	r1, [r7, #0]
 8018afa:	f107 0308 	add.w	r3, r7, #8
 8018afe:	c903      	ldmia	r1, {r0, r1}
 8018b00:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b04:	f107 0308 	add.w	r3, r7, #8
 8018b08:	4619      	mov	r1, r3
 8018b0a:	4610      	mov	r0, r2
 8018b0c:	f001 f94a 	bl	8019da4 <_ZN6uavcan24OutgoingTransferRegistry7cleanupENS_13MonotonicTimeE>
 8018b10:	f107 0308 	add.w	r3, r7, #8
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7ed fafd 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    lmsg_.cleanup(ts);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8018b20:	6839      	ldr	r1, [r7, #0]
 8018b22:	f107 0310 	add.w	r3, r7, #16
 8018b26:	c903      	ldmia	r1, {r0, r1}
 8018b28:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b2c:	f107 0310 	add.w	r3, r7, #16
 8018b30:	4619      	mov	r1, r3
 8018b32:	4610      	mov	r0, r2
 8018b34:	f7ff fd53 	bl	80185de <_ZN6uavcan10Dispatcher16ListenerRegistry7cleanupENS_13MonotonicTimeE>
 8018b38:	f107 0310 	add.w	r3, r7, #16
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f7ed fae9 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    lsrv_req_.cleanup(ts);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8018b48:	6839      	ldr	r1, [r7, #0]
 8018b4a:	f107 0318 	add.w	r3, r7, #24
 8018b4e:	c903      	ldmia	r1, {r0, r1}
 8018b50:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b54:	f107 0318 	add.w	r3, r7, #24
 8018b58:	4619      	mov	r1, r3
 8018b5a:	4610      	mov	r0, r2
 8018b5c:	f7ff fd3f 	bl	80185de <_ZN6uavcan10Dispatcher16ListenerRegistry7cleanupENS_13MonotonicTimeE>
 8018b60:	f107 0318 	add.w	r3, r7, #24
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7ed fad5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    lsrv_resp_.cleanup(ts);
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8018b70:	6839      	ldr	r1, [r7, #0]
 8018b72:	f107 0320 	add.w	r3, r7, #32
 8018b76:	c903      	ldmia	r1, {r0, r1}
 8018b78:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b7c:	f107 0320 	add.w	r3, r7, #32
 8018b80:	4619      	mov	r1, r3
 8018b82:	4610      	mov	r0, r2
 8018b84:	f7ff fd2b 	bl	80185de <_ZN6uavcan10Dispatcher16ListenerRegistry7cleanupENS_13MonotonicTimeE>
 8018b88:	f107 0320 	add.w	r3, r7, #32
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7ed fac1 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
}
 8018b92:	bf00      	nop
 8018b94:	3728      	adds	r7, #40	; 0x28
 8018b96:	46bd      	mov	sp, r7
 8018b98:	bd80      	pop	{r7, pc}
	...

08018b9c <_ZN6uavcan10Dispatcher30registerServiceRequestListenerEPNS_16TransferListenerE>:
    }
    return lmsg_.add(listener, ListenerRegistry::ManyListeners);       // Multiple subscribers are OK
}

bool Dispatcher::registerServiceRequestListener(TransferListener* listener)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
    if (listener->getDataTypeDescriptor().getKind() != DataTypeKindService)
 8018ba6:	6838      	ldr	r0, [r7, #0]
 8018ba8:	f7fe f90f 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 8018bac:	4603      	mov	r3, r0
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7ed f910 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	bf14      	ite	ne
 8018bba:	2301      	movne	r3, #1
 8018bbc:	2300      	moveq	r3, #0
 8018bbe:	b2db      	uxtb	r3, r3
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d006      	beq.n	8018bd2 <_ZN6uavcan10Dispatcher30registerServiceRequestListenerEPNS_16TransferListenerE+0x36>
    {
        UAVCAN_ASSERT(0);
 8018bc4:	4b09      	ldr	r3, [pc, #36]	; (8018bec <_ZN6uavcan10Dispatcher30registerServiceRequestListenerEPNS_16TransferListenerE+0x50>)
 8018bc6:	4a0a      	ldr	r2, [pc, #40]	; (8018bf0 <_ZN6uavcan10Dispatcher30registerServiceRequestListenerEPNS_16TransferListenerE+0x54>)
 8018bc8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8018bcc:	4809      	ldr	r0, [pc, #36]	; (8018bf4 <_ZN6uavcan10Dispatcher30registerServiceRequestListenerEPNS_16TransferListenerE+0x58>)
 8018bce:	f007 fcdd 	bl	802058c <__assert_func>
        return false;
    }
    return lsrv_req_.add(listener, ListenerRegistry::UniqueListener);  // Only one server per data type
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	33dc      	adds	r3, #220	; 0xdc
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	6839      	ldr	r1, [r7, #0]
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f7ff fc76 	bl	80184cc <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE>
 8018be0:	4603      	mov	r3, r0
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3708      	adds	r7, #8
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	08023a20 	.word	0x08023a20
 8018bf0:	0802aeac 	.word	0x0802aeac
 8018bf4:	080239a4 	.word	0x080239a4

08018bf8 <_ZN6uavcan10Dispatcher31registerServiceResponseListenerEPNS_16TransferListenerE>:

bool Dispatcher::registerServiceResponseListener(TransferListener* listener)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	6039      	str	r1, [r7, #0]
    if (listener->getDataTypeDescriptor().getKind() != DataTypeKindService)
 8018c02:	6838      	ldr	r0, [r7, #0]
 8018c04:	f7fe f8e1 	bl	8016dca <_ZNK6uavcan16TransferListener21getDataTypeDescriptorEv>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7ed f8e2 	bl	8005dd4 <_ZNK6uavcan18DataTypeDescriptor7getKindEv>
 8018c10:	4603      	mov	r3, r0
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	bf14      	ite	ne
 8018c16:	2301      	movne	r3, #1
 8018c18:	2300      	moveq	r3, #0
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d006      	beq.n	8018c2e <_ZN6uavcan10Dispatcher31registerServiceResponseListenerEPNS_16TransferListenerE+0x36>
    {
        UAVCAN_ASSERT(0);
 8018c20:	4b09      	ldr	r3, [pc, #36]	; (8018c48 <_ZN6uavcan10Dispatcher31registerServiceResponseListenerEPNS_16TransferListenerE+0x50>)
 8018c22:	4a0a      	ldr	r2, [pc, #40]	; (8018c4c <_ZN6uavcan10Dispatcher31registerServiceResponseListenerEPNS_16TransferListenerE+0x54>)
 8018c24:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8018c28:	4809      	ldr	r0, [pc, #36]	; (8018c50 <_ZN6uavcan10Dispatcher31registerServiceResponseListenerEPNS_16TransferListenerE+0x58>)
 8018c2a:	f007 fcaf 	bl	802058c <__assert_func>
        return false;
    }
    return lsrv_resp_.add(listener, ListenerRegistry::ManyListeners);  // Multiple callers may call same srv
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	33e0      	adds	r3, #224	; 0xe0
 8018c32:	2201      	movs	r2, #1
 8018c34:	6839      	ldr	r1, [r7, #0]
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7ff fc48 	bl	80184cc <_ZN6uavcan10Dispatcher16ListenerRegistry3addEPNS_16TransferListenerENS1_4ModeE>
 8018c3c:	4603      	mov	r3, r0
}
 8018c3e:	4618      	mov	r0, r3
 8018c40:	3708      	adds	r7, #8
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	08023a20 	.word	0x08023a20
 8018c4c:	0802af00 	.word	0x0802af00
 8018c50:	080239a4 	.word	0x080239a4

08018c54 <_ZN6uavcan10Dispatcher25unregisterMessageListenerEPNS_16TransferListenerE>:

void Dispatcher::unregisterMessageListener(TransferListener* listener)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b082      	sub	sp, #8
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
    lmsg_.remove(listener);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	33d8      	adds	r3, #216	; 0xd8
 8018c62:	6839      	ldr	r1, [r7, #0]
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7ff fc7f 	bl	8018568 <_ZN6uavcan10Dispatcher16ListenerRegistry6removeEPNS_16TransferListenerE>
}
 8018c6a:	bf00      	nop
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}

08018c72 <_ZN6uavcan10Dispatcher32unregisterServiceRequestListenerEPNS_16TransferListenerE>:

void Dispatcher::unregisterServiceRequestListener(TransferListener* listener)
{
 8018c72:	b580      	push	{r7, lr}
 8018c74:	b082      	sub	sp, #8
 8018c76:	af00      	add	r7, sp, #0
 8018c78:	6078      	str	r0, [r7, #4]
 8018c7a:	6039      	str	r1, [r7, #0]
    lsrv_req_.remove(listener);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	33dc      	adds	r3, #220	; 0xdc
 8018c80:	6839      	ldr	r1, [r7, #0]
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7ff fc70 	bl	8018568 <_ZN6uavcan10Dispatcher16ListenerRegistry6removeEPNS_16TransferListenerE>
}
 8018c88:	bf00      	nop
 8018c8a:	3708      	adds	r7, #8
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <_ZN6uavcan10Dispatcher33unregisterServiceResponseListenerEPNS_16TransferListenerE>:

void Dispatcher::unregisterServiceResponseListener(TransferListener* listener)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b082      	sub	sp, #8
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
 8018c98:	6039      	str	r1, [r7, #0]
    lsrv_resp_.remove(listener);
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	33e0      	adds	r3, #224	; 0xe0
 8018c9e:	6839      	ldr	r1, [r7, #0]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ff fc61 	bl	8018568 <_ZN6uavcan10Dispatcher16ListenerRegistry6removeEPNS_16TransferListenerE>
}
 8018ca6:	bf00      	nop
 8018ca8:	3708      	adds	r7, #8
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}

08018cae <_ZNK6uavcan10Dispatcher13hasSubscriberENS_10DataTypeIDE>:

bool Dispatcher::hasSubscriber(DataTypeID dtid) const
{
 8018cae:	b580      	push	{r7, lr}
 8018cb0:	b082      	sub	sp, #8
 8018cb2:	af00      	add	r7, sp, #0
 8018cb4:	6078      	str	r0, [r7, #4]
 8018cb6:	6039      	str	r1, [r7, #0]
    return lmsg_.exists(dtid);
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	33d8      	adds	r3, #216	; 0xd8
 8018cbc:	6839      	ldr	r1, [r7, #0]
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7ff fc60 	bl	8018584 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE>
 8018cc4:	4603      	mov	r3, r0
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	3708      	adds	r7, #8
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}

08018cce <_ZNK6uavcan10Dispatcher12hasPublisherENS_10DataTypeIDE>:

bool Dispatcher::hasPublisher(DataTypeID dtid) const
{
 8018cce:	b580      	push	{r7, lr}
 8018cd0:	b082      	sub	sp, #8
 8018cd2:	af00      	add	r7, sp, #0
 8018cd4:	6078      	str	r0, [r7, #4]
 8018cd6:	6039      	str	r1, [r7, #0]
    return outgoing_transfer_reg_.exists(dtid, TransferTypeMessageBroadcast);
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	33ac      	adds	r3, #172	; 0xac
 8018cdc:	2202      	movs	r2, #2
 8018cde:	6839      	ldr	r1, [r7, #0]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f001 f831 	bl	8019d48 <_ZNK6uavcan24OutgoingTransferRegistry6existsENS_10DataTypeIDENS_12TransferTypeE>
 8018ce6:	4603      	mov	r3, r0
}
 8018ce8:	4618      	mov	r0, r3
 8018cea:	3708      	adds	r7, #8
 8018cec:	46bd      	mov	sp, r7
 8018cee:	bd80      	pop	{r7, pc}

08018cf0 <_ZNK6uavcan10Dispatcher9hasServerENS_10DataTypeIDE>:

bool Dispatcher::hasServer(DataTypeID dtid) const
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b082      	sub	sp, #8
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
 8018cf8:	6039      	str	r1, [r7, #0]
    return lsrv_req_.exists(dtid);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	33dc      	adds	r3, #220	; 0xdc
 8018cfe:	6839      	ldr	r1, [r7, #0]
 8018d00:	4618      	mov	r0, r3
 8018d02:	f7ff fc3f 	bl	8018584 <_ZNK6uavcan10Dispatcher16ListenerRegistry6existsENS_10DataTypeIDE>
 8018d06:	4603      	mov	r3, r0
}
 8018d08:	4618      	mov	r0, r3
 8018d0a:	3708      	adds	r7, #8
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	bd80      	pop	{r7, pc}

08018d10 <_ZN6uavcan10Dispatcher9setNodeIDENS_6NodeIDE>:

bool Dispatcher::setNodeID(NodeID nid)
{
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
 8018d18:	7039      	strb	r1, [r7, #0]
    if (!self_node_id_is_set_)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8018d20:	f083 0301 	eor.w	r3, r3, #1
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d009      	beq.n	8018d3e <_ZN6uavcan10Dispatcher9setNodeIDENS_6NodeIDE+0x2e>
    {
        self_node_id_ = nid;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	783a      	ldrb	r2, [r7, #0]
 8018d2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        self_node_id_is_set_ = true;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	2201      	movs	r2, #1
 8018d36:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
        return true;
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	e000      	b.n	8018d40 <_ZN6uavcan10Dispatcher9setNodeIDENS_6NodeIDE+0x30>
    }
    return false;
 8018d3e:	2300      	movs	r3, #0
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	370c      	adds	r7, #12
 8018d44:	46bd      	mov	sp, r7
 8018d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4a:	4770      	bx	lr

08018d4c <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEEC1Ev>:
    TimeBase()
 8018d4c:	b590      	push	{r4, r7, lr}
 8018d4e:	b083      	sub	sp, #12
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
        : usec_(0)
 8018d54:	687a      	ldr	r2, [r7, #4]
 8018d56:	f04f 0300 	mov.w	r3, #0
 8018d5a:	f04f 0400 	mov.w	r4, #0
 8018d5e:	e9c2 3400 	strd	r3, r4, [r2]
        StaticAssert<(sizeof(T) == 8)>::check();
 8018d62:	f7ec fe35 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        StaticAssert<(sizeof(D) == 8)>::check();
 8018d66:	f7ec fe33 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	370c      	adds	r7, #12
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd90      	pop	{r4, r7, pc}

08018d74 <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEED1Ev>:
    ~TimeBase() { }
 8018d74:	b480      	push	{r7}
 8018d76:	b083      	sub	sp, #12
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	4618      	mov	r0, r3
 8018d80:	370c      	adds	r7, #12
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr

08018d8a <_ZNK6uavcan14LinkedListRootINS_25LoopbackFrameListenerBaseEE3getEv>:
    T* get() const { return root_; }
 8018d8a:	b480      	push	{r7}
 8018d8c:	b083      	sub	sp, #12
 8018d8e:	af00      	add	r7, sp, #0
 8018d90:	6078      	str	r0, [r7, #4]
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	4618      	mov	r0, r3
 8018d98:	370c      	adds	r7, #12
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr

08018da2 <_ZNK6uavcan14LinkedListNodeINS_25LoopbackFrameListenerBaseEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 8018da2:	b480      	push	{r7}
 8018da4:	b083      	sub	sp, #12
 8018da6:	af00      	add	r7, sp, #0
 8018da8:	6078      	str	r0, [r7, #4]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	4618      	mov	r0, r3
 8018db0:	370c      	adds	r7, #12
 8018db2:	46bd      	mov	sp, r7
 8018db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db8:	4770      	bx	lr
	...

08018dbc <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_>:
void LinkedListRoot<T>::insertBefore(T* node, Predicate predicate)
 8018dbc:	b590      	push	{r4, r7, lr}
 8018dbe:	b087      	sub	sp, #28
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	60f8      	str	r0, [r7, #12]
 8018dc4:	60b9      	str	r1, [r7, #8]
 8018dc6:	607a      	str	r2, [r7, #4]
    if (node == UAVCAN_NULLPTR)
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d105      	bne.n	8018dda <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0x1e>
        UAVCAN_ASSERT(0);
 8018dce:	4b32      	ldr	r3, [pc, #200]	; (8018e98 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0xdc>)
 8018dd0:	4a32      	ldr	r2, [pc, #200]	; (8018e9c <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0xe0>)
 8018dd2:	2178      	movs	r1, #120	; 0x78
 8018dd4:	4832      	ldr	r0, [pc, #200]	; (8018ea0 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0xe4>)
 8018dd6:	f007 fbd9 	bl	802058c <__assert_func>
    remove(node);
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	68f8      	ldr	r0, [r7, #12]
 8018dde:	f000 f861 	bl	8018ea4 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_>
    if (root_ == UAVCAN_NULLPTR || predicate(root_))
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d009      	beq.n	8018dfe <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0x42>
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	1d3b      	adds	r3, r7, #4
 8018df0:	4611      	mov	r1, r2
 8018df2:	4618      	mov	r0, r3
 8018df4:	f7ff fb20 	bl	8018438 <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE>
 8018df8:	4603      	mov	r3, r0
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d001      	beq.n	8018e02 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0x46>
 8018dfe:	2301      	movs	r3, #1
 8018e00:	e000      	b.n	8018e04 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0x48>
 8018e02:	2300      	movs	r3, #0
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d00b      	beq.n	8018e20 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0x64>
        node->setNextListNode(root_);
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	1d1a      	adds	r2, r3, #4
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4619      	mov	r1, r3
 8018e12:	4610      	mov	r0, r2
 8018e14:	f000 f89c 	bl	8018f50 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEE15setNextListNodeEPS1_>
        root_ = node;
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	68ba      	ldr	r2, [r7, #8]
 8018e1c:	601a      	str	r2, [r3, #0]
}
 8018e1e:	e037      	b.n	8018e90 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0xd4>
        T* p = root_;
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	617b      	str	r3, [r7, #20]
        while (p->getNextListNode())
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	3304      	adds	r3, #4
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f7fd ffe5 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018e30:	4603      	mov	r3, r0
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	bf14      	ite	ne
 8018e36:	2301      	movne	r3, #1
 8018e38:	2300      	moveq	r3, #0
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d015      	beq.n	8018e6c <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0xb0>
            if (predicate(p->getNextListNode()))
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	3304      	adds	r3, #4
 8018e44:	4618      	mov	r0, r3
 8018e46:	f7fd ffd8 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018e4a:	4602      	mov	r2, r0
 8018e4c:	1d3b      	adds	r3, r7, #4
 8018e4e:	4611      	mov	r1, r2
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7ff faf1 	bl	8018438 <_ZNK6uavcan10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorclEPKNS_16TransferListenerE>
 8018e56:	4603      	mov	r3, r0
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d106      	bne.n	8018e6a <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0xae>
            p = p->getNextListNode();
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	3304      	adds	r3, #4
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7fd ffca 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018e66:	6178      	str	r0, [r7, #20]
        while (p->getNextListNode())
 8018e68:	e7dd      	b.n	8018e26 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE12insertBeforeINS_10Dispatcher16ListenerRegistry29DataTypeIDInsertionComparatorEEEvPS1_T_+0x6a>
                break;
 8018e6a:	bf00      	nop
        node->setNextListNode(p->getNextListNode());
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	1d1c      	adds	r4, r3, #4
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	3304      	adds	r3, #4
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7fd ffc0 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	4620      	mov	r0, r4
 8018e80:	f000 f866 	bl	8018f50 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEE15setNextListNodeEPS1_>
        p->setNextListNode(node);
 8018e84:	697b      	ldr	r3, [r7, #20]
 8018e86:	3304      	adds	r3, #4
 8018e88:	68b9      	ldr	r1, [r7, #8]
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f000 f860 	bl	8018f50 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEE15setNextListNodeEPS1_>
}
 8018e90:	bf00      	nop
 8018e92:	371c      	adds	r7, #28
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd90      	pop	{r4, r7, pc}
 8018e98:	08023a20 	.word	0x08023a20
 8018e9c:	0802ac54 	.word	0x0802ac54
 8018ea0:	08023a48 	.word	0x08023a48

08018ea4 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_>:
void LinkedListRoot<T>::remove(const T* node)
 8018ea4:	b590      	push	{r4, r7, lr}
 8018ea6:	b085      	sub	sp, #20
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d048      	beq.n	8018f48 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0xa4>
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d045      	beq.n	8018f48 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0xa4>
    if (root_ == node)
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	683a      	ldr	r2, [r7, #0]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d109      	bne.n	8018eda <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0x36>
        root_ = root_->getNextListNode();
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	3304      	adds	r3, #4
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7fd ff94 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	601a      	str	r2, [r3, #0]
 8018ed8:	e037      	b.n	8018f4a <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0xa6>
        T* p = root_;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	3304      	adds	r3, #4
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fd ff88 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018eea:	4603      	mov	r3, r0
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	bf14      	ite	ne
 8018ef0:	2301      	movne	r3, #1
 8018ef2:	2300      	moveq	r3, #0
 8018ef4:	b2db      	uxtb	r3, r3
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d027      	beq.n	8018f4a <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0xa6>
            if (p->getNextListNode() == node)
 8018efa:	68fb      	ldr	r3, [r7, #12]
 8018efc:	3304      	adds	r3, #4
 8018efe:	4618      	mov	r0, r3
 8018f00:	f7fd ff7b 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018f04:	4602      	mov	r2, r0
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	4293      	cmp	r3, r2
 8018f0a:	bf0c      	ite	eq
 8018f0c:	2301      	moveq	r3, #1
 8018f0e:	2300      	movne	r3, #0
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d011      	beq.n	8018f3a <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0x96>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	1d1c      	adds	r4, r3, #4
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	3304      	adds	r3, #4
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7fd ff6b 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018f24:	4603      	mov	r3, r0
 8018f26:	3304      	adds	r3, #4
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7fd ff66 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	4619      	mov	r1, r3
 8018f32:	4620      	mov	r0, r4
 8018f34:	f000 f80c 	bl	8018f50 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEE15setNextListNodeEPS1_>
                break;
 8018f38:	e007      	b.n	8018f4a <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0xa6>
            p = p->getNextListNode();
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	3304      	adds	r3, #4
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fd ff5b 	bl	8016dfa <_ZNK6uavcan14LinkedListNodeINS_16TransferListenerEE15getNextListNodeEv>
 8018f44:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 8018f46:	e7cb      	b.n	8018ee0 <_ZN6uavcan14LinkedListRootINS_16TransferListenerEE6removeEPKS1_+0x3c>
        return;
 8018f48:	bf00      	nop
}
 8018f4a:	3714      	adds	r7, #20
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd90      	pop	{r4, r7, pc}

08018f50 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEE15setNextListNodeEPS1_>:
    void setNextListNode(T* node)
 8018f50:	b480      	push	{r7}
 8018f52:	b083      	sub	sp, #12
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	6039      	str	r1, [r7, #0]
        next_ = node;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	683a      	ldr	r2, [r7, #0]
 8018f5e:	601a      	str	r2, [r3, #0]
    }
 8018f60:	bf00      	nop
 8018f62:	370c      	adds	r7, #12
 8018f64:	46bd      	mov	sp, r7
 8018f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6a:	4770      	bx	lr

08018f6c <_ZN6uavcan16TransferPriorityC1Eh>:
    TransferPriority(uint8_t value)   // Implicit
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
 8018f74:	460b      	mov	r3, r1
 8018f76:	70fb      	strb	r3, [r7, #3]
        : value_(value)
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	78fa      	ldrb	r2, [r7, #3]
 8018f7c:	701a      	strb	r2, [r3, #0]
        UAVCAN_ASSERT(isValid());
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f000 f820 	bl	8018fc4 <_ZNK6uavcan16TransferPriority7isValidEv>
 8018f84:	4603      	mov	r3, r0
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d105      	bne.n	8018f96 <_ZN6uavcan16TransferPriorityC1Eh+0x2a>
 8018f8a:	4b05      	ldr	r3, [pc, #20]	; (8018fa0 <_ZN6uavcan16TransferPriorityC1Eh+0x34>)
 8018f8c:	4a05      	ldr	r2, [pc, #20]	; (8018fa4 <_ZN6uavcan16TransferPriorityC1Eh+0x38>)
 8018f8e:	2131      	movs	r1, #49	; 0x31
 8018f90:	4805      	ldr	r0, [pc, #20]	; (8018fa8 <_ZN6uavcan16TransferPriorityC1Eh+0x3c>)
 8018f92:	f007 fafb 	bl	802058c <__assert_func>
    }
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	3708      	adds	r7, #8
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bd80      	pop	{r7, pc}
 8018fa0:	08023a90 	.word	0x08023a90
 8018fa4:	0802af88 	.word	0x0802af88
 8018fa8:	08023a9c 	.word	0x08023a9c

08018fac <_ZNK6uavcan16TransferPriority3getEv>:
    uint8_t get() const { return value_; }
 8018fac:	b480      	push	{r7}
 8018fae:	b083      	sub	sp, #12
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	781b      	ldrb	r3, [r3, #0]
 8018fb8:	4618      	mov	r0, r3
 8018fba:	370c      	adds	r7, #12
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc2:	4770      	bx	lr

08018fc4 <_ZNK6uavcan16TransferPriority7isValidEv>:
    bool isValid() const { return value_ < (1U << BitLen); }
 8018fc4:	b480      	push	{r7}
 8018fc6:	b083      	sub	sp, #12
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	2b1f      	cmp	r3, #31
 8018fd2:	bf94      	ite	ls
 8018fd4:	2301      	movls	r3, #1
 8018fd6:	2300      	movhi	r3, #0
 8018fd8:	b2db      	uxtb	r3, r3
 8018fda:	4618      	mov	r0, r3
 8018fdc:	370c      	adds	r7, #12
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe4:	4770      	bx	lr
	...

08018fe8 <_ZN6uavcan10TransferIDC1Eh>:
    TransferID(uint8_t value)    // implicit
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	70fb      	strb	r3, [r7, #3]
        : value_(value)
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	78fa      	ldrb	r2, [r7, #3]
 8018ff8:	701a      	strb	r2, [r3, #0]
        value_ &= Max;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	f003 031f 	and.w	r3, r3, #31
 8019002:	b2da      	uxtb	r2, r3
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	701a      	strb	r2, [r3, #0]
        UAVCAN_ASSERT(value == value_);
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	781b      	ldrb	r3, [r3, #0]
 801900c:	78fa      	ldrb	r2, [r7, #3]
 801900e:	429a      	cmp	r2, r3
 8019010:	d005      	beq.n	801901e <_ZN6uavcan10TransferIDC1Eh+0x36>
 8019012:	4b05      	ldr	r3, [pc, #20]	; (8019028 <_ZN6uavcan10TransferIDC1Eh+0x40>)
 8019014:	4a05      	ldr	r2, [pc, #20]	; (801902c <_ZN6uavcan10TransferIDC1Eh+0x44>)
 8019016:	2158      	movs	r1, #88	; 0x58
 8019018:	4805      	ldr	r0, [pc, #20]	; (8019030 <_ZN6uavcan10TransferIDC1Eh+0x48>)
 801901a:	f007 fab7 	bl	802058c <__assert_func>
    }
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	4618      	mov	r0, r3
 8019022:	3708      	adds	r7, #8
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}
 8019028:	08023ae4 	.word	0x08023ae4
 801902c:	0802afc4 	.word	0x0802afc4
 8019030:	08023a9c 	.word	0x08023a9c

08019034 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE>:
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	4603      	mov	r3, r0
 801903c:	71fb      	strb	r3, [r7, #7]
    if (tt == TransferTypeServiceResponse ||
 801903e:	79fb      	ldrb	r3, [r7, #7]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d002      	beq.n	801904a <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x16>
 8019044:	79fb      	ldrb	r3, [r7, #7]
 8019046:	2b01      	cmp	r3, #1
 8019048:	d101      	bne.n	801904e <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x1a>
        return DataTypeKindService;
 801904a:	2300      	movs	r3, #0
 801904c:	e00a      	b.n	8019064 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x30>
    else if (tt == TransferTypeMessageBroadcast)
 801904e:	79fb      	ldrb	r3, [r7, #7]
 8019050:	2b02      	cmp	r3, #2
 8019052:	d101      	bne.n	8019058 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x24>
        return DataTypeKindMessage;
 8019054:	2301      	movs	r3, #1
 8019056:	e005      	b.n	8019064 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x30>
        UAVCAN_ASSERT(0);
 8019058:	4b04      	ldr	r3, [pc, #16]	; (801906c <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x38>)
 801905a:	4a05      	ldr	r2, [pc, #20]	; (8019070 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x3c>)
 801905c:	2129      	movs	r1, #41	; 0x29
 801905e:	4805      	ldr	r0, [pc, #20]	; (8019074 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x40>)
 8019060:	f007 fa94 	bl	802058c <__assert_func>
}
 8019064:	4618      	mov	r0, r3
 8019066:	3708      	adds	r7, #8
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}
 801906c:	08023b04 	.word	0x08023b04
 8019070:	0802b468 	.word	0x0802b468
 8019074:	08023b08 	.word	0x08023b08

08019078 <_ZNK6uavcan10DataTypeID22isValidForDataTypeKindENS_12DataTypeKindE>:
    bool isValidForDataTypeKind(DataTypeKind dtkind) const
 8019078:	b590      	push	{r4, r7, lr}
 801907a:	b085      	sub	sp, #20
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	460b      	mov	r3, r1
 8019082:	70fb      	strb	r3, [r7, #3]
        return value_ <= getMaxValueForDataTypeKind(dtkind).get();
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681c      	ldr	r4, [r3, #0]
 8019088:	78fb      	ldrb	r3, [r7, #3]
 801908a:	4618      	mov	r0, r3
 801908c:	f004 fd8c 	bl	801dba8 <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE>
 8019090:	4603      	mov	r3, r0
 8019092:	60fb      	str	r3, [r7, #12]
 8019094:	f107 030c 	add.w	r3, r7, #12
 8019098:	4618      	mov	r0, r3
 801909a:	f7ec fdea 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 801909e:	4603      	mov	r3, r0
 80190a0:	429c      	cmp	r4, r3
 80190a2:	bf94      	ite	ls
 80190a4:	2301      	movls	r3, #1
 80190a6:	2300      	movhi	r3, #0
 80190a8:	b2db      	uxtb	r3, r3
    }
 80190aa:	4618      	mov	r0, r3
 80190ac:	3714      	adds	r7, #20
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd90      	pop	{r4, r7, pc}

080190b2 <_ZNK6uavcan8CanFrame10isExtendedEv>:
    bool isExtended()                  const { return id & FlagEFF; }
 80190b2:	b480      	push	{r7}
 80190b4:	b083      	sub	sp, #12
 80190b6:	af00      	add	r7, sp, #0
 80190b8:	6078      	str	r0, [r7, #4]
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	0fdb      	lsrs	r3, r3, #31
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	4618      	mov	r0, r3
 80190c4:	370c      	adds	r7, #12
 80190c6:	46bd      	mov	sp, r7
 80190c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190cc:	4770      	bx	lr

080190ce <_ZNK6uavcan8CanFrame27isRemoteTransmissionRequestEv>:
    bool isRemoteTransmissionRequest() const { return id & FlagRTR; }
 80190ce:	b480      	push	{r7}
 80190d0:	b083      	sub	sp, #12
 80190d2:	af00      	add	r7, sp, #0
 80190d4:	6078      	str	r0, [r7, #4]
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80190de:	2b00      	cmp	r3, #0
 80190e0:	bf14      	ite	ne
 80190e2:	2301      	movne	r3, #1
 80190e4:	2300      	moveq	r3, #0
 80190e6:	b2db      	uxtb	r3, r3
 80190e8:	4618      	mov	r0, r3
 80190ea:	370c      	adds	r7, #12
 80190ec:	46bd      	mov	sp, r7
 80190ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f2:	4770      	bx	lr

080190f4 <_ZNK6uavcan8CanFrame12isErrorFrameEv>:
    bool isErrorFrame()                const { return id & FlagERR; }
 80190f4:	b480      	push	{r7}
 80190f6:	b083      	sub	sp, #12
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019104:	2b00      	cmp	r3, #0
 8019106:	bf14      	ite	ne
 8019108:	2301      	movne	r3, #1
 801910a:	2300      	moveq	r3, #0
 801910c:	b2db      	uxtb	r3, r3
 801910e:	4618      	mov	r0, r3
 8019110:	370c      	adds	r7, #12
 8019112:	46bd      	mov	sp, r7
 8019114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019118:	4770      	bx	lr

0801911a <_ZNK6uavcan5Frame18getPayloadCapacityEv>:
    uint8_t getPayloadCapacity() const { return PayloadCapacity; }
 801911a:	b480      	push	{r7}
 801911c:	b083      	sub	sp, #12
 801911e:	af00      	add	r7, sp, #0
 8019120:	6078      	str	r0, [r7, #4]
 8019122:	2307      	movs	r3, #7
 8019124:	4618      	mov	r0, r3
 8019126:	370c      	adds	r7, #12
 8019128:	46bd      	mov	sp, r7
 801912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912e:	4770      	bx	lr

08019130 <_ZN6uavcan11TransferCRC3addEh>:
                value_ = uint16_t(value_ << 1);
            }
        }
    }
#else
    void add(uint8_t byte)
 8019130:	b480      	push	{r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	460b      	mov	r3, r1
 801913a:	70fb      	strb	r3, [r7, #3]
    {
        value_ = uint16_t(uint16_t((value_ << 8) ^ Table[uint16_t((value_ >> 8) ^ byte) & 0xFFU]) & 0xFFFFU);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	881b      	ldrh	r3, [r3, #0]
 8019140:	021b      	lsls	r3, r3, #8
 8019142:	b21a      	sxth	r2, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	881b      	ldrh	r3, [r3, #0]
 8019148:	121b      	asrs	r3, r3, #8
 801914a:	b219      	sxth	r1, r3
 801914c:	78fb      	ldrb	r3, [r7, #3]
 801914e:	b21b      	sxth	r3, r3
 8019150:	404b      	eors	r3, r1
 8019152:	b21b      	sxth	r3, r3
 8019154:	b29b      	uxth	r3, r3
 8019156:	b2db      	uxtb	r3, r3
 8019158:	4907      	ldr	r1, [pc, #28]	; (8019178 <_ZN6uavcan11TransferCRC3addEh+0x48>)
 801915a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801915e:	b21b      	sxth	r3, r3
 8019160:	4053      	eors	r3, r2
 8019162:	b21b      	sxth	r3, r3
 8019164:	b29a      	uxth	r2, r3
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	801a      	strh	r2, [r3, #0]
    }
 801916a:	bf00      	nop
 801916c:	370c      	adds	r7, #12
 801916e:	46bd      	mov	sp, r7
 8019170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019174:	4770      	bx	lr
 8019176:	bf00      	nop
 8019178:	0802aa54 	.word	0x0802aa54

0801917c <_ZN6uavcan11TransferCRC3addEPKhj>:
#endif

    void add(const uint8_t* bytes, unsigned len)
 801917c:	b580      	push	{r7, lr}
 801917e:	b084      	sub	sp, #16
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	607a      	str	r2, [r7, #4]
    {
        UAVCAN_ASSERT(bytes);
 8019188:	68bb      	ldr	r3, [r7, #8]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d105      	bne.n	801919a <_ZN6uavcan11TransferCRC3addEPKhj+0x1e>
 801918e:	4b0e      	ldr	r3, [pc, #56]	; (80191c8 <_ZN6uavcan11TransferCRC3addEPKhj+0x4c>)
 8019190:	4a0e      	ldr	r2, [pc, #56]	; (80191cc <_ZN6uavcan11TransferCRC3addEPKhj+0x50>)
 8019192:	2144      	movs	r1, #68	; 0x44
 8019194:	480e      	ldr	r0, [pc, #56]	; (80191d0 <_ZN6uavcan11TransferCRC3addEPKhj+0x54>)
 8019196:	f007 f9f9 	bl	802058c <__assert_func>
        while (len--)
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	1e5a      	subs	r2, r3, #1
 801919e:	607a      	str	r2, [r7, #4]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	bf14      	ite	ne
 80191a4:	2301      	movne	r3, #1
 80191a6:	2300      	moveq	r3, #0
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d008      	beq.n	80191c0 <_ZN6uavcan11TransferCRC3addEPKhj+0x44>
        {
            add(*bytes++);
 80191ae:	68bb      	ldr	r3, [r7, #8]
 80191b0:	1c5a      	adds	r2, r3, #1
 80191b2:	60ba      	str	r2, [r7, #8]
 80191b4:	781b      	ldrb	r3, [r3, #0]
 80191b6:	4619      	mov	r1, r3
 80191b8:	68f8      	ldr	r0, [r7, #12]
 80191ba:	f7ff ffb9 	bl	8019130 <_ZN6uavcan11TransferCRC3addEh>
        while (len--)
 80191be:	e7ec      	b.n	801919a <_ZN6uavcan11TransferCRC3addEPKhj+0x1e>
        }
    }
 80191c0:	bf00      	nop
 80191c2:	3710      	adds	r7, #16
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	08023b48 	.word	0x08023b48
 80191cc:	0802b3ac 	.word	0x0802b3ac
 80191d0:	08023b50 	.word	0x08023b50

080191d4 <_ZNK6uavcan11TransferCRC3getEv>:

    uint16_t get() const { return value_; }
 80191d4:	b480      	push	{r7}
 80191d6:	b083      	sub	sp, #12
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	881b      	ldrh	r3, [r3, #0]
 80191e0:	4618      	mov	r0, r3
 80191e2:	370c      	adds	r7, #12
 80191e4:	46bd      	mov	sp, r7
 80191e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ea:	4770      	bx	lr

080191ec <_ZN6uavcan5Frame10setPayloadEPKhj>:
{
/**
 * Frame
 */
uint8_t Frame::setPayload(const uint8_t* data, unsigned len)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b086      	sub	sp, #24
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	60b9      	str	r1, [r7, #8]
 80191f6:	607a      	str	r2, [r7, #4]
    const uint8_t maxlen = getPayloadCapacity();
 80191f8:	68f8      	ldr	r0, [r7, #12]
 80191fa:	f7ff ff8e 	bl	801911a <_ZNK6uavcan5Frame18getPayloadCapacityEv>
 80191fe:	4603      	mov	r3, r0
 8019200:	75fb      	strb	r3, [r7, #23]
    len = min(unsigned(maxlen), len);
 8019202:	7dfb      	ldrb	r3, [r7, #23]
 8019204:	613b      	str	r3, [r7, #16]
 8019206:	1d3a      	adds	r2, r7, #4
 8019208:	f107 0310 	add.w	r3, r7, #16
 801920c:	4611      	mov	r1, r2
 801920e:	4618      	mov	r0, r3
 8019210:	f7fa ffe2 	bl	80141d8 <_ZN6uavcan3minIjEERKT_S3_S3_>
 8019214:	4603      	mov	r3, r0
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	607b      	str	r3, [r7, #4]
    (void)copy(data, data + len, payload_);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	68ba      	ldr	r2, [r7, #8]
 801921e:	4413      	add	r3, r2
 8019220:	68fa      	ldr	r2, [r7, #12]
 8019222:	4619      	mov	r1, r3
 8019224:	68b8      	ldr	r0, [r7, #8]
 8019226:	f7fc fec7 	bl	8015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>
    payload_len_ = uint_fast8_t(len);
 801922a:	687a      	ldr	r2, [r7, #4]
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	611a      	str	r2, [r3, #16]
    return static_cast<uint8_t>(len);
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	b2db      	uxtb	r3, r3
}
 8019234:	4618      	mov	r0, r3
 8019236:	3718      	adds	r7, #24
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}

0801923c <_ZN6uavcan5Frame5parseERKNS_8CanFrameE>:
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
}

bool Frame::parse(const CanFrame& can_frame)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b08a      	sub	sp, #40	; 0x28
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	6039      	str	r1, [r7, #0]
    if (can_frame.isErrorFrame() || can_frame.isRemoteTransmissionRequest() || !can_frame.isExtended())
 8019246:	6838      	ldr	r0, [r7, #0]
 8019248:	f7ff ff54 	bl	80190f4 <_ZNK6uavcan8CanFrame12isErrorFrameEv>
 801924c:	4603      	mov	r3, r0
 801924e:	2b00      	cmp	r3, #0
 8019250:	d10e      	bne.n	8019270 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x34>
 8019252:	6838      	ldr	r0, [r7, #0]
 8019254:	f7ff ff3b 	bl	80190ce <_ZNK6uavcan8CanFrame27isRemoteTransmissionRequestEv>
 8019258:	4603      	mov	r3, r0
 801925a:	2b00      	cmp	r3, #0
 801925c:	d108      	bne.n	8019270 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x34>
 801925e:	6838      	ldr	r0, [r7, #0]
 8019260:	f7ff ff27 	bl	80190b2 <_ZNK6uavcan8CanFrame10isExtendedEv>
 8019264:	4603      	mov	r3, r0
 8019266:	f083 0301 	eor.w	r3, r3, #1
 801926a:	b2db      	uxtb	r3, r3
 801926c:	2b00      	cmp	r3, #0
 801926e:	d001      	beq.n	8019274 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x38>
 8019270:	2301      	movs	r3, #1
 8019272:	e000      	b.n	8019276 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x3a>
 8019274:	2300      	movs	r3, #0
 8019276:	2b00      	cmp	r3, #0
 8019278:	d001      	beq.n	801927e <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x42>
    {
        UAVCAN_TRACE("Frame", "Parsing failed at line %d", __LINE__);
        return false;
 801927a:	2300      	movs	r3, #0
 801927c:	e0e7      	b.n	801944e <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x212>
    }

    if (can_frame.dlc > sizeof(can_frame.data))
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	7b1b      	ldrb	r3, [r3, #12]
 8019282:	2b08      	cmp	r3, #8
 8019284:	d905      	bls.n	8019292 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x56>
    {
        UAVCAN_ASSERT(0);  // This is not a protocol error, so UAVCAN_ASSERT() is ok
 8019286:	4b74      	ldr	r3, [pc, #464]	; (8019458 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x21c>)
 8019288:	4a74      	ldr	r2, [pc, #464]	; (801945c <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x220>)
 801928a:	212c      	movs	r1, #44	; 0x2c
 801928c:	4874      	ldr	r0, [pc, #464]	; (8019460 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x224>)
 801928e:	f007 f97d 	bl	802058c <__assert_func>
        return false;
    }

    if (can_frame.dlc < 1)
 8019292:	683b      	ldr	r3, [r7, #0]
 8019294:	7b1b      	ldrb	r3, [r3, #12]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d101      	bne.n	801929e <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x62>
    {
        UAVCAN_TRACE("Frame", "Parsing failed at line %d", __LINE__);
        return false;
 801929a:	2300      	movs	r3, #0
 801929c:	e0d7      	b.n	801944e <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x212>
    }

    /*
     * CAN ID parsing
     */
    const uint32_t id = can_frame.id & CanFrame::MaskExtID;
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80192a6:	627b      	str	r3, [r7, #36]	; 0x24

    transfer_priority_ = static_cast<uint8_t>(bitunpack<24, 5>(id));
 80192a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80192aa:	f000 facf 	bl	801984c <_ZN6uavcanL9bitunpackILi24ELi5EEEmm>
 80192ae:	4603      	mov	r3, r0
 80192b0:	b2da      	uxtb	r2, r3
 80192b2:	f107 0308 	add.w	r3, r7, #8
 80192b6:	4611      	mov	r1, r2
 80192b8:	4618      	mov	r0, r3
 80192ba:	f7ff fe57 	bl	8018f6c <_ZN6uavcan16TransferPriorityC1Eh>
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	7a3a      	ldrb	r2, [r7, #8]
 80192c2:	71da      	strb	r2, [r3, #7]
    src_node_id_ = static_cast<uint8_t>(bitunpack<0, 7>(id));
 80192c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80192c6:	f000 fad3 	bl	8019870 <_ZN6uavcanL9bitunpackILi0ELi7EEEmm>
 80192ca:	4603      	mov	r3, r0
 80192cc:	b2da      	uxtb	r2, r3
 80192ce:	f107 030c 	add.w	r3, r7, #12
 80192d2:	4611      	mov	r1, r2
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7ec fc47 	bl	8005b68 <_ZN6uavcan6NodeIDC1Eh>
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	7b3a      	ldrb	r2, [r7, #12]
 80192de:	751a      	strb	r2, [r3, #20]

    const bool service_not_message = bitunpack<7, 1>(id) != 0U;
 80192e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80192e2:	f000 fad6 	bl	8019892 <_ZN6uavcanL9bitunpackILi7ELi1EEEmm>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	bf14      	ite	ne
 80192ec:	2301      	movne	r3, #1
 80192ee:	2300      	moveq	r3, #0
 80192f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (service_not_message)
 80192f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d02f      	beq.n	801935c <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x120>
    {
        const bool request_not_response = bitunpack<15, 1>(id) != 0U;
 80192fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80192fe:	f000 fada 	bl	80198b6 <_ZN6uavcanL9bitunpackILi15ELi1EEEmm>
 8019302:	4603      	mov	r3, r0
 8019304:	2b00      	cmp	r3, #0
 8019306:	bf14      	ite	ne
 8019308:	2301      	movne	r3, #1
 801930a:	2300      	moveq	r3, #0
 801930c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        transfer_type_ = request_not_response ? TransferTypeServiceRequest : TransferTypeServiceResponse;
 8019310:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019314:	2b00      	cmp	r3, #0
 8019316:	d001      	beq.n	801931c <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0xe0>
 8019318:	2201      	movs	r2, #1
 801931a:	e000      	b.n	801931e <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0xe2>
 801931c:	2200      	movs	r2, #0
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	721a      	strb	r2, [r3, #8]

        dst_node_id_ = static_cast<uint8_t>(bitunpack<8, 7>(id));
 8019322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019324:	f000 fad9 	bl	80198da <_ZN6uavcanL9bitunpackILi8ELi7EEEmm>
 8019328:	4603      	mov	r3, r0
 801932a:	b2da      	uxtb	r2, r3
 801932c:	f107 0310 	add.w	r3, r7, #16
 8019330:	4611      	mov	r1, r2
 8019332:	4618      	mov	r0, r3
 8019334:	f7ec fc18 	bl	8005b68 <_ZN6uavcan6NodeIDC1Eh>
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	7c3a      	ldrb	r2, [r7, #16]
 801933c:	755a      	strb	r2, [r3, #21]
        data_type_id_ = static_cast<uint16_t>(bitunpack<16, 8>(id));
 801933e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019340:	f000 fadd 	bl	80198fe <_ZN6uavcanL9bitunpackILi16ELi8EEEmm>
 8019344:	4603      	mov	r3, r0
 8019346:	b29a      	uxth	r2, r3
 8019348:	f107 0314 	add.w	r3, r7, #20
 801934c:	4611      	mov	r1, r2
 801934e:	4618      	mov	r0, r3
 8019350:	f7ec fc7f 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	697a      	ldr	r2, [r7, #20]
 8019358:	60da      	str	r2, [r3, #12]
 801935a:	e02e      	b.n	80193ba <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x17e>
    }
    else
    {
        transfer_type_ = TransferTypeMessageBroadcast;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	2202      	movs	r2, #2
 8019360:	721a      	strb	r2, [r3, #8]
        dst_node_id_ = NodeID::Broadcast;
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	4a3f      	ldr	r2, [pc, #252]	; (8019464 <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x228>)
 8019366:	7812      	ldrb	r2, [r2, #0]
 8019368:	755a      	strb	r2, [r3, #21]

        data_type_id_ = static_cast<uint16_t>(bitunpack<8, 16>(id));
 801936a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801936c:	f000 fad8 	bl	8019920 <_ZN6uavcanL9bitunpackILi8ELi16EEEmm>
 8019370:	4603      	mov	r3, r0
 8019372:	b29a      	uxth	r2, r3
 8019374:	f107 0318 	add.w	r3, r7, #24
 8019378:	4611      	mov	r1, r2
 801937a:	4618      	mov	r0, r3
 801937c:	f7ec fc69 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	69ba      	ldr	r2, [r7, #24]
 8019384:	60da      	str	r2, [r3, #12]

        if (src_node_id_.isBroadcast())
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	3314      	adds	r3, #20
 801938a:	4618      	mov	r0, r3
 801938c:	f7fc fb7d 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 8019390:	4603      	mov	r3, r0
 8019392:	2b00      	cmp	r3, #0
 8019394:	d011      	beq.n	80193ba <_ZN6uavcan5Frame5parseERKNS_8CanFrameE+0x17e>
        {
            // Removing the discriminator
            data_type_id_ = static_cast<uint16_t>(data_type_id_.get() & 3U);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	330c      	adds	r3, #12
 801939a:	4618      	mov	r0, r3
 801939c:	f7ec fc69 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 80193a0:	4603      	mov	r3, r0
 80193a2:	f003 0303 	and.w	r3, r3, #3
 80193a6:	b29a      	uxth	r2, r3
 80193a8:	f107 031c 	add.w	r3, r7, #28
 80193ac:	4611      	mov	r1, r2
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7ec fc4f 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	69fa      	ldr	r2, [r7, #28]
 80193b8:	60da      	str	r2, [r3, #12]
    }

    /*
     * CAN payload parsing
     */
    payload_len_ = static_cast<uint8_t>(can_frame.dlc - 1U);
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	7b1b      	ldrb	r3, [r3, #12]
 80193be:	3b01      	subs	r3, #1
 80193c0:	b2db      	uxtb	r3, r3
 80193c2:	461a      	mov	r2, r3
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	611a      	str	r2, [r3, #16]
    (void)copy(can_frame.data, can_frame.data + payload_len_, payload_);
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	1d18      	adds	r0, r3, #4
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	1d1a      	adds	r2, r3, #4
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	691b      	ldr	r3, [r3, #16]
 80193d4:	4413      	add	r3, r2
 80193d6:	687a      	ldr	r2, [r7, #4]
 80193d8:	4619      	mov	r1, r3
 80193da:	f7fc fded 	bl	8015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>

    const uint8_t tail = can_frame.data[can_frame.dlc - 1U];
 80193de:	683b      	ldr	r3, [r7, #0]
 80193e0:	7b1b      	ldrb	r3, [r3, #12]
 80193e2:	3b01      	subs	r3, #1
 80193e4:	683a      	ldr	r2, [r7, #0]
 80193e6:	4413      	add	r3, r2
 80193e8:	791b      	ldrb	r3, [r3, #4]
 80193ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    start_of_transfer_ = (tail & (1U << 7)) != 0;
 80193ee:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80193f2:	b2db      	uxtb	r3, r3
 80193f4:	09db      	lsrs	r3, r3, #7
 80193f6:	b2da      	uxtb	r2, r3
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	75da      	strb	r2, [r3, #23]
    end_of_transfer_   = (tail & (1U << 6)) != 0;
 80193fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019404:	2b00      	cmp	r3, #0
 8019406:	bf14      	ite	ne
 8019408:	2301      	movne	r3, #1
 801940a:	2300      	moveq	r3, #0
 801940c:	b2da      	uxtb	r2, r3
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	761a      	strb	r2, [r3, #24]
    toggle_            = (tail & (1U << 5)) != 0;
 8019412:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019416:	f003 0320 	and.w	r3, r3, #32
 801941a:	2b00      	cmp	r3, #0
 801941c:	bf14      	ite	ne
 801941e:	2301      	movne	r3, #1
 8019420:	2300      	moveq	r3, #0
 8019422:	b2da      	uxtb	r2, r3
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	765a      	strb	r2, [r3, #25]

    transfer_id_ = tail & TransferID::Max;
 8019428:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801942c:	f003 031f 	and.w	r3, r3, #31
 8019430:	b2da      	uxtb	r2, r3
 8019432:	f107 0320 	add.w	r3, r7, #32
 8019436:	4611      	mov	r1, r2
 8019438:	4618      	mov	r0, r3
 801943a:	f7ff fdd5 	bl	8018fe8 <_ZN6uavcan10TransferIDC1Eh>
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019444:	759a      	strb	r2, [r3, #22]

    return isValid();
 8019446:	6878      	ldr	r0, [r7, #4]
 8019448:	f000 f902 	bl	8019650 <_ZNK6uavcan5Frame7isValidEv>
 801944c:	4603      	mov	r3, r0
}
 801944e:	4618      	mov	r0, r3
 8019450:	3728      	adds	r7, #40	; 0x28
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
 8019456:	bf00      	nop
 8019458:	08023b04 	.word	0x08023b04
 801945c:	0802af54 	.word	0x0802af54
 8019460:	08023b94 	.word	0x08023b94
 8019464:	20008604 	.word	0x20008604

08019468 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE>:
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
}

bool Frame::compile(CanFrame& out_can_frame) const
{
 8019468:	b590      	push	{r4, r7, lr}
 801946a:	b085      	sub	sp, #20
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
 8019470:	6039      	str	r1, [r7, #0]
    if (!isValid())
 8019472:	6878      	ldr	r0, [r7, #4]
 8019474:	f000 f8ec 	bl	8019650 <_ZNK6uavcan5Frame7isValidEv>
 8019478:	4603      	mov	r3, r0
 801947a:	f083 0301 	eor.w	r3, r3, #1
 801947e:	b2db      	uxtb	r3, r3
 8019480:	2b00      	cmp	r3, #0
 8019482:	d005      	beq.n	8019490 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x28>
    {
        UAVCAN_ASSERT(0);        // This is an application error, so we need to maximize it.
 8019484:	4b6e      	ldr	r3, [pc, #440]	; (8019640 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1d8>)
 8019486:	4a6f      	ldr	r2, [pc, #444]	; (8019644 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1dc>)
 8019488:	2174      	movs	r1, #116	; 0x74
 801948a:	486f      	ldr	r0, [pc, #444]	; (8019648 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1e0>)
 801948c:	f007 f87e 	bl	802058c <__assert_func>

    /*
     * CAN ID field
     */
    out_can_frame.id = CanFrame::FlagEFF |
        bitpack<0, 7>(src_node_id_.get()) |
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	3314      	adds	r3, #20
 8019494:	4618      	mov	r0, r3
 8019496:	f7ec fb87 	bl	8005ba8 <_ZNK6uavcan6NodeID3getEv>
 801949a:	4603      	mov	r3, r0
 801949c:	4618      	mov	r0, r3
 801949e:	f000 fa51 	bl	8019944 <_ZN6uavcanL7bitpackILi0ELi7EEEmm>
 80194a2:	4604      	mov	r4, r0
        bitpack<24, 5>(transfer_priority_.get());
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	3307      	adds	r3, #7
 80194a8:	4618      	mov	r0, r3
 80194aa:	f7ff fd7f 	bl	8018fac <_ZNK6uavcan16TransferPriority3getEv>
 80194ae:	4603      	mov	r3, r0
 80194b0:	4618      	mov	r0, r3
 80194b2:	f000 fa6b 	bl	801998c <_ZN6uavcanL7bitpackILi24ELi5EEEmm>
 80194b6:	4603      	mov	r3, r0
        bitpack<0, 7>(src_node_id_.get()) |
 80194b8:	4323      	orrs	r3, r4
 80194ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    out_can_frame.id = CanFrame::FlagEFF |
 80194be:	683b      	ldr	r3, [r7, #0]
 80194c0:	601a      	str	r2, [r3, #0]

    if (transfer_type_ == TransferTypeMessageBroadcast)
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	7a1b      	ldrb	r3, [r3, #8]
 80194c6:	2b02      	cmp	r3, #2
 80194c8:	d115      	bne.n	80194f6 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x8e>
    {
        out_can_frame.id |=
            bitpack<7, 1>(0U) |
 80194ca:	2000      	movs	r0, #0
 80194cc:	f000 fa82 	bl	80199d4 <_ZN6uavcanL7bitpackILi7ELi1EEEmm>
 80194d0:	4604      	mov	r4, r0
            bitpack<8, 16>(data_type_id_.get());
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	330c      	adds	r3, #12
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ec fbcb 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 80194dc:	4603      	mov	r3, r0
 80194de:	4618      	mov	r0, r3
 80194e0:	f000 fa9c 	bl	8019a1c <_ZN6uavcanL7bitpackILi8ELi16EEEmm>
 80194e4:	4603      	mov	r3, r0
            bitpack<7, 1>(0U) |
 80194e6:	ea44 0203 	orr.w	r2, r4, r3
        out_can_frame.id |=
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	431a      	orrs	r2, r3
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	601a      	str	r2, [r3, #0]
 80194f4:	e031      	b.n	801955a <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0xf2>
    }
    else
    {
        const bool request_not_response = transfer_type_ == TransferTypeServiceRequest;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	7a1b      	ldrb	r3, [r3, #8]
 80194fa:	2b01      	cmp	r3, #1
 80194fc:	bf0c      	ite	eq
 80194fe:	2301      	moveq	r3, #1
 8019500:	2300      	movne	r3, #0
 8019502:	73bb      	strb	r3, [r7, #14]
        out_can_frame.id |=
            bitpack<7, 1>(1U) |
 8019504:	2001      	movs	r0, #1
 8019506:	f000 fa65 	bl	80199d4 <_ZN6uavcanL7bitpackILi7ELi1EEEmm>
 801950a:	4604      	mov	r4, r0
            bitpack<8, 7>(dst_node_id_.get()) |
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	3315      	adds	r3, #21
 8019510:	4618      	mov	r0, r3
 8019512:	f7ec fb49 	bl	8005ba8 <_ZNK6uavcan6NodeID3getEv>
 8019516:	4603      	mov	r3, r0
 8019518:	4618      	mov	r0, r3
 801951a:	f000 faa5 	bl	8019a68 <_ZN6uavcanL7bitpackILi8ELi7EEEmm>
 801951e:	4603      	mov	r3, r0
            bitpack<7, 1>(1U) |
 8019520:	431c      	orrs	r4, r3
            bitpack<15, 1>(request_not_response ? 1U : 0U) |
 8019522:	7bbb      	ldrb	r3, [r7, #14]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d001      	beq.n	801952c <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0xc4>
 8019528:	2301      	movs	r3, #1
 801952a:	e000      	b.n	801952e <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0xc6>
 801952c:	2300      	movs	r3, #0
 801952e:	4618      	mov	r0, r3
 8019530:	f000 fabe 	bl	8019ab0 <_ZN6uavcanL7bitpackILi15ELi1EEEmm>
 8019534:	4603      	mov	r3, r0
            bitpack<8, 7>(dst_node_id_.get()) |
 8019536:	431c      	orrs	r4, r3
            bitpack<16, 8>(data_type_id_.get());
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	330c      	adds	r3, #12
 801953c:	4618      	mov	r0, r3
 801953e:	f7ec fb98 	bl	8005c72 <_ZNK6uavcan10DataTypeID3getEv>
 8019542:	4603      	mov	r3, r0
 8019544:	4618      	mov	r0, r3
 8019546:	f000 fad7 	bl	8019af8 <_ZN6uavcanL7bitpackILi16ELi8EEEmm>
 801954a:	4603      	mov	r3, r0
            bitpack<15, 1>(request_not_response ? 1U : 0U) |
 801954c:	ea44 0203 	orr.w	r2, r4, r3
        out_can_frame.id |=
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	431a      	orrs	r2, r3
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	601a      	str	r2, [r3, #0]
    }

    /*
     * Payload
     */
    uint8_t tail = transfer_id_.get();
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	3316      	adds	r3, #22
 801955e:	4618      	mov	r0, r3
 8019560:	f7ec fada 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 8019564:	4603      	mov	r3, r0
 8019566:	73fb      	strb	r3, [r7, #15]
    if (start_of_transfer_)
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	7ddb      	ldrb	r3, [r3, #23]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d003      	beq.n	8019578 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x110>
    {
        tail |= (1U << 7);
 8019570:	7bfb      	ldrb	r3, [r7, #15]
 8019572:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019576:	73fb      	strb	r3, [r7, #15]
    }
    if (end_of_transfer_)
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	7e1b      	ldrb	r3, [r3, #24]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d003      	beq.n	8019588 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x120>
    {
        tail |= (1U << 6);
 8019580:	7bfb      	ldrb	r3, [r7, #15]
 8019582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019586:	73fb      	strb	r3, [r7, #15]
    }
    if (toggle_)
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	7e5b      	ldrb	r3, [r3, #25]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d003      	beq.n	8019598 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x130>
    {
        tail |= (1U << 5);
 8019590:	7bfb      	ldrb	r3, [r7, #15]
 8019592:	f043 0320 	orr.w	r3, r3, #32
 8019596:	73fb      	strb	r3, [r7, #15]
    }

    UAVCAN_ASSERT(payload_len_ < sizeof(static_cast<CanFrame*>(UAVCAN_NULLPTR)->data));
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	691b      	ldr	r3, [r3, #16]
 801959c:	2b07      	cmp	r3, #7
 801959e:	d905      	bls.n	80195ac <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x144>
 80195a0:	4b2a      	ldr	r3, [pc, #168]	; (801964c <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1e4>)
 80195a2:	4a28      	ldr	r2, [pc, #160]	; (8019644 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1dc>)
 80195a4:	21a0      	movs	r1, #160	; 0xa0
 80195a6:	4828      	ldr	r0, [pc, #160]	; (8019648 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1e0>)
 80195a8:	f006 fff0 	bl	802058c <__assert_func>

    out_can_frame.dlc = static_cast<uint8_t>(payload_len_);
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	691b      	ldr	r3, [r3, #16]
 80195b0:	b2da      	uxtb	r2, r3
 80195b2:	683b      	ldr	r3, [r7, #0]
 80195b4:	731a      	strb	r2, [r3, #12]
    (void)copy(payload_, payload_ + payload_len_, out_can_frame.data);
 80195b6:	6878      	ldr	r0, [r7, #4]
 80195b8:	687a      	ldr	r2, [r7, #4]
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	691b      	ldr	r3, [r3, #16]
 80195be:	18d1      	adds	r1, r2, r3
 80195c0:	683b      	ldr	r3, [r7, #0]
 80195c2:	3304      	adds	r3, #4
 80195c4:	461a      	mov	r2, r3
 80195c6:	f7fc fcf7 	bl	8015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>

    out_can_frame.data[out_can_frame.dlc] = tail;
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	7b1b      	ldrb	r3, [r3, #12]
 80195ce:	461a      	mov	r2, r3
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	4413      	add	r3, r2
 80195d4:	7bfa      	ldrb	r2, [r7, #15]
 80195d6:	711a      	strb	r2, [r3, #4]
    out_can_frame.dlc++;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	7b1b      	ldrb	r3, [r3, #12]
 80195dc:	3301      	adds	r3, #1
 80195de:	b2da      	uxtb	r2, r3
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	731a      	strb	r2, [r3, #12]

    /*
     * Discriminator
     */
    if (src_node_id_.isBroadcast())
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	3314      	adds	r3, #20
 80195e8:	4618      	mov	r0, r3
 80195ea:	f7fc fa4e 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 80195ee:	4603      	mov	r3, r0
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d01f      	beq.n	8019634 <_ZNK6uavcan5Frame7compileERNS_8CanFrameE+0x1cc>
    {
        TransferCRC crc;
 80195f4:	f107 030c 	add.w	r3, r7, #12
 80195f8:	4618      	mov	r0, r3
 80195fa:	f7ec fe6b 	bl	80062d4 <_ZN6uavcan11TransferCRCC1Ev>
        crc.add(out_can_frame.data, out_can_frame.dlc);
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	1d19      	adds	r1, r3, #4
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	7b1b      	ldrb	r3, [r3, #12]
 8019606:	461a      	mov	r2, r3
 8019608:	f107 030c 	add.w	r3, r7, #12
 801960c:	4618      	mov	r0, r3
 801960e:	f7ff fdb5 	bl	801917c <_ZN6uavcan11TransferCRC3addEPKhj>
        out_can_frame.id |= bitpack<10, 14>(crc.get() & ((1U << 14) - 1U));
 8019612:	f107 030c 	add.w	r3, r7, #12
 8019616:	4618      	mov	r0, r3
 8019618:	f7ff fddc 	bl	80191d4 <_ZNK6uavcan11TransferCRC3getEv>
 801961c:	4603      	mov	r3, r0
 801961e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019622:	4618      	mov	r0, r3
 8019624:	f000 fa8c 	bl	8019b40 <_ZN6uavcanL7bitpackILi10ELi14EEEmm>
 8019628:	4602      	mov	r2, r0
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	431a      	orrs	r2, r3
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	601a      	str	r2, [r3, #0]
    }

    return true;
 8019634:	2301      	movs	r3, #1
}
 8019636:	4618      	mov	r0, r3
 8019638:	3714      	adds	r7, #20
 801963a:	46bd      	mov	sp, r7
 801963c:	bd90      	pop	{r4, r7, pc}
 801963e:	bf00      	nop
 8019640:	08023b04 	.word	0x08023b04
 8019644:	0802aff4 	.word	0x0802aff4
 8019648:	08023b94 	.word	0x08023b94
 801964c:	08023c0c 	.word	0x08023c0c

08019650 <_ZNK6uavcan5Frame7isValidEv>:

bool Frame::isValid() const
{
 8019650:	b590      	push	{r4, r7, lr}
 8019652:	b083      	sub	sp, #12
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
    /*
     * Toggle
     */
    if (start_of_transfer_ && toggle_)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	7ddb      	ldrb	r3, [r3, #23]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d005      	beq.n	801966c <_ZNK6uavcan5Frame7isValidEv+0x1c>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	7e5b      	ldrb	r3, [r3, #25]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d001      	beq.n	801966c <_ZNK6uavcan5Frame7isValidEv+0x1c>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 8019668:	2300      	movs	r3, #0
 801966a:	e0a6      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    /*
     * Node ID
     */
    if (!src_node_id_.isValid() || !dst_node_id_.isValid())
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	3314      	adds	r3, #20
 8019670:	4618      	mov	r0, r3
 8019672:	f7ec faa5 	bl	8005bc0 <_ZNK6uavcan6NodeID7isValidEv>
 8019676:	4603      	mov	r3, r0
 8019678:	f083 0301 	eor.w	r3, r3, #1
 801967c:	b2db      	uxtb	r3, r3
 801967e:	2b00      	cmp	r3, #0
 8019680:	d10a      	bne.n	8019698 <_ZNK6uavcan5Frame7isValidEv+0x48>
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	3315      	adds	r3, #21
 8019686:	4618      	mov	r0, r3
 8019688:	f7ec fa9a 	bl	8005bc0 <_ZNK6uavcan6NodeID7isValidEv>
 801968c:	4603      	mov	r3, r0
 801968e:	f083 0301 	eor.w	r3, r3, #1
 8019692:	b2db      	uxtb	r3, r3
 8019694:	2b00      	cmp	r3, #0
 8019696:	d001      	beq.n	801969c <_ZNK6uavcan5Frame7isValidEv+0x4c>
 8019698:	2301      	movs	r3, #1
 801969a:	e000      	b.n	801969e <_ZNK6uavcan5Frame7isValidEv+0x4e>
 801969c:	2300      	movs	r3, #0
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d001      	beq.n	80196a6 <_ZNK6uavcan5Frame7isValidEv+0x56>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 80196a2:	2300      	movs	r3, #0
 80196a4:	e089      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    if (src_node_id_.isUnicast() && (src_node_id_ == dst_node_id_))
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	3314      	adds	r3, #20
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7ec fa99 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 80196b0:	4603      	mov	r3, r0
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d00c      	beq.n	80196d0 <_ZNK6uavcan5Frame7isValidEv+0x80>
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	f103 0214 	add.w	r2, r3, #20
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	7d59      	ldrb	r1, [r3, #21]
 80196c0:	4610      	mov	r0, r2
 80196c2:	f7ec faa4 	bl	8005c0e <_ZNK6uavcan6NodeIDeqES0_>
 80196c6:	4603      	mov	r3, r0
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d001      	beq.n	80196d0 <_ZNK6uavcan5Frame7isValidEv+0x80>
 80196cc:	2301      	movs	r3, #1
 80196ce:	e000      	b.n	80196d2 <_ZNK6uavcan5Frame7isValidEv+0x82>
 80196d0:	2300      	movs	r3, #0
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d001      	beq.n	80196da <_ZNK6uavcan5Frame7isValidEv+0x8a>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 80196d6:	2300      	movs	r3, #0
 80196d8:	e06f      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    /*
     * Transfer type
     */
    if (transfer_type_ >= NumTransferTypes)
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	7a1b      	ldrb	r3, [r3, #8]
 80196de:	2b02      	cmp	r3, #2
 80196e0:	d901      	bls.n	80196e6 <_ZNK6uavcan5Frame7isValidEv+0x96>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 80196e2:	2300      	movs	r3, #0
 80196e4:	e069      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    if ((transfer_type_ == TransferTypeMessageBroadcast) != dst_node_id_.isBroadcast())
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	7a1b      	ldrb	r3, [r3, #8]
 80196ea:	2b02      	cmp	r3, #2
 80196ec:	bf0c      	ite	eq
 80196ee:	2301      	moveq	r3, #1
 80196f0:	2300      	movne	r3, #0
 80196f2:	b2db      	uxtb	r3, r3
 80196f4:	461c      	mov	r4, r3
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	3315      	adds	r3, #21
 80196fa:	4618      	mov	r0, r3
 80196fc:	f7fc f9c5 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 8019700:	4603      	mov	r3, r0
 8019702:	429c      	cmp	r4, r3
 8019704:	bf14      	ite	ne
 8019706:	2301      	movne	r3, #1
 8019708:	2300      	moveq	r3, #0
 801970a:	b2db      	uxtb	r3, r3
 801970c:	2b00      	cmp	r3, #0
 801970e:	d001      	beq.n	8019714 <_ZNK6uavcan5Frame7isValidEv+0xc4>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 8019710:	2300      	movs	r3, #0
 8019712:	e052      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    // Anonymous transfers
    if (src_node_id_.isBroadcast() &&
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	3314      	adds	r3, #20
 8019718:	4618      	mov	r0, r3
 801971a:	f7fc f9b6 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 801971e:	4603      	mov	r3, r0
 8019720:	2b00      	cmp	r3, #0
 8019722:	d013      	beq.n	801974c <_ZNK6uavcan5Frame7isValidEv+0xfc>
        (!start_of_transfer_ || !end_of_transfer_ || (transfer_type_ != TransferTypeMessageBroadcast)))
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	7ddb      	ldrb	r3, [r3, #23]
 8019728:	f083 0301 	eor.w	r3, r3, #1
 801972c:	b2db      	uxtb	r3, r3
    if (src_node_id_.isBroadcast() &&
 801972e:	2b00      	cmp	r3, #0
 8019730:	d10a      	bne.n	8019748 <_ZNK6uavcan5Frame7isValidEv+0xf8>
        (!start_of_transfer_ || !end_of_transfer_ || (transfer_type_ != TransferTypeMessageBroadcast)))
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	7e1b      	ldrb	r3, [r3, #24]
 8019736:	f083 0301 	eor.w	r3, r3, #1
 801973a:	b2db      	uxtb	r3, r3
 801973c:	2b00      	cmp	r3, #0
 801973e:	d103      	bne.n	8019748 <_ZNK6uavcan5Frame7isValidEv+0xf8>
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	7a1b      	ldrb	r3, [r3, #8]
 8019744:	2b02      	cmp	r3, #2
 8019746:	d001      	beq.n	801974c <_ZNK6uavcan5Frame7isValidEv+0xfc>
    if (src_node_id_.isBroadcast() &&
 8019748:	2301      	movs	r3, #1
 801974a:	e000      	b.n	801974e <_ZNK6uavcan5Frame7isValidEv+0xfe>
 801974c:	2300      	movs	r3, #0
 801974e:	2b00      	cmp	r3, #0
 8019750:	d001      	beq.n	8019756 <_ZNK6uavcan5Frame7isValidEv+0x106>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 8019752:	2300      	movs	r3, #0
 8019754:	e031      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    /*
     * Payload
     */
    if (payload_len_ > getPayloadCapacity())
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	691c      	ldr	r4, [r3, #16]
 801975a:	6878      	ldr	r0, [r7, #4]
 801975c:	f7ff fcdd 	bl	801911a <_ZNK6uavcan5Frame18getPayloadCapacityEv>
 8019760:	4603      	mov	r3, r0
 8019762:	429c      	cmp	r4, r3
 8019764:	bf8c      	ite	hi
 8019766:	2301      	movhi	r3, #1
 8019768:	2300      	movls	r3, #0
 801976a:	b2db      	uxtb	r3, r3
 801976c:	2b00      	cmp	r3, #0
 801976e:	d001      	beq.n	8019774 <_ZNK6uavcan5Frame7isValidEv+0x124>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 8019770:	2300      	movs	r3, #0
 8019772:	e022      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    /*
     * Data type ID
     */
    if (!data_type_id_.isValidForDataTypeKind(getDataTypeKindForTransferType(transfer_type_)))
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f103 040c 	add.w	r4, r3, #12
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	7a1b      	ldrb	r3, [r3, #8]
 801977e:	4618      	mov	r0, r3
 8019780:	f7ff fc58 	bl	8019034 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE>
 8019784:	4603      	mov	r3, r0
 8019786:	4619      	mov	r1, r3
 8019788:	4620      	mov	r0, r4
 801978a:	f7ff fc75 	bl	8019078 <_ZNK6uavcan10DataTypeID22isValidForDataTypeKindENS_12DataTypeKindE>
 801978e:	4603      	mov	r3, r0
 8019790:	f083 0301 	eor.w	r3, r3, #1
 8019794:	b2db      	uxtb	r3, r3
 8019796:	2b00      	cmp	r3, #0
 8019798:	d001      	beq.n	801979e <_ZNK6uavcan5Frame7isValidEv+0x14e>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 801979a:	2300      	movs	r3, #0
 801979c:	e00d      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    /*
     * Priority
     */
    if (!transfer_priority_.isValid())
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	3307      	adds	r3, #7
 80197a2:	4618      	mov	r0, r3
 80197a4:	f7ff fc0e 	bl	8018fc4 <_ZNK6uavcan16TransferPriority7isValidEv>
 80197a8:	4603      	mov	r3, r0
 80197aa:	f083 0301 	eor.w	r3, r3, #1
 80197ae:	b2db      	uxtb	r3, r3
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d001      	beq.n	80197b8 <_ZNK6uavcan5Frame7isValidEv+0x168>
    {
        UAVCAN_TRACE("Frame", "Validness check failed at line %d", __LINE__);
        return false;
 80197b4:	2300      	movs	r3, #0
 80197b6:	e000      	b.n	80197ba <_ZNK6uavcan5Frame7isValidEv+0x16a>
    }

    return true;
 80197b8:	2301      	movs	r3, #1
}
 80197ba:	4618      	mov	r0, r3
 80197bc:	370c      	adds	r7, #12
 80197be:	46bd      	mov	sp, r7
 80197c0:	bd90      	pop	{r4, r7, pc}
	...

080197c4 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE>:

/**
 * RxFrame
 */
bool RxFrame::parse(const CanRxFrame& can_frame)
{
 80197c4:	b580      	push	{r7, lr}
 80197c6:	b082      	sub	sp, #8
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	6039      	str	r1, [r7, #0]
    if (!Frame::parse(can_frame))
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	683a      	ldr	r2, [r7, #0]
 80197d2:	4611      	mov	r1, r2
 80197d4:	4618      	mov	r0, r3
 80197d6:	f7ff fd31 	bl	801923c <_ZN6uavcan5Frame5parseERKNS_8CanFrameE>
 80197da:	4603      	mov	r3, r0
 80197dc:	f083 0301 	eor.w	r3, r3, #1
 80197e0:	b2db      	uxtb	r3, r3
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d001      	beq.n	80197ea <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE+0x26>
    {
        return false;
 80197e6:	2300      	movs	r3, #0
 80197e8:	e025      	b.n	8019836 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE+0x72>
    }
    if (can_frame.ts_mono.isZero())  // Monotonic timestamps are mandatory.
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	3310      	adds	r3, #16
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7ee ffbc 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 80197f4:	4603      	mov	r3, r0
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d006      	beq.n	8019808 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE+0x44>
    {
        UAVCAN_ASSERT(0);                   // If it is not set, it's a driver failure.
 80197fa:	4b11      	ldr	r3, [pc, #68]	; (8019840 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE+0x7c>)
 80197fc:	4a11      	ldr	r2, [pc, #68]	; (8019844 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE+0x80>)
 80197fe:	f44f 719c 	mov.w	r1, #312	; 0x138
 8019802:	4811      	ldr	r0, [pc, #68]	; (8019848 <_ZN6uavcan7RxFrame5parseERKNS_10CanRxFrameE+0x84>)
 8019804:	f006 fec2 	bl	802058c <__assert_func>
        return false;
    }
    ts_mono_ = can_frame.ts_mono;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	683a      	ldr	r2, [r7, #0]
 801980c:	3320      	adds	r3, #32
 801980e:	3210      	adds	r2, #16
 8019810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019814:	e883 0003 	stmia.w	r3, {r0, r1}
    ts_utc_ = can_frame.ts_utc;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	683a      	ldr	r2, [r7, #0]
 801981c:	3328      	adds	r3, #40	; 0x28
 801981e:	3218      	adds	r2, #24
 8019820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019824:	e883 0003 	stmia.w	r3, {r0, r1}
    iface_index_ = can_frame.iface_index;
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return true;
 8019834:	2301      	movs	r3, #1
}
 8019836:	4618      	mov	r0, r3
 8019838:	3708      	adds	r7, #8
 801983a:	46bd      	mov	sp, r7
 801983c:	bd80      	pop	{r7, pc}
 801983e:	bf00      	nop
 8019840:	08023b04 	.word	0x08023b04
 8019844:	0802b4bc 	.word	0x0802b4bc
 8019848:	08023b94 	.word	0x08023b94

0801984c <_ZN6uavcanL9bitunpackILi24ELi5EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 801984c:	b580      	push	{r7, lr}
 801984e:	b082      	sub	sp, #8
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019854:	f7ec f8bc 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019858:	f7ec f8ba 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 801985c:	f7ec f8b8 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	0e1b      	lsrs	r3, r3, #24
 8019864:	f003 031f 	and.w	r3, r3, #31
}
 8019868:	4618      	mov	r0, r3
 801986a:	3708      	adds	r7, #8
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}

08019870 <_ZN6uavcanL9bitunpackILi0ELi7EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 8019870:	b580      	push	{r7, lr}
 8019872:	b082      	sub	sp, #8
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019878:	f7ec f8aa 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 801987c:	f7ec f8a8 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019880:	f7ec f8a6 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801988a:	4618      	mov	r0, r3
 801988c:	3708      	adds	r7, #8
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}

08019892 <_ZN6uavcanL9bitunpackILi7ELi1EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 8019892:	b580      	push	{r7, lr}
 8019894:	b082      	sub	sp, #8
 8019896:	af00      	add	r7, sp, #0
 8019898:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 801989a:	f7ec f899 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 801989e:	f7ec f897 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 80198a2:	f7ec f895 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	09db      	lsrs	r3, r3, #7
 80198aa:	f003 0301 	and.w	r3, r3, #1
}
 80198ae:	4618      	mov	r0, r3
 80198b0:	3708      	adds	r7, #8
 80198b2:	46bd      	mov	sp, r7
 80198b4:	bd80      	pop	{r7, pc}

080198b6 <_ZN6uavcanL9bitunpackILi15ELi1EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 80198b6:	b580      	push	{r7, lr}
 80198b8:	b082      	sub	sp, #8
 80198ba:	af00      	add	r7, sp, #0
 80198bc:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 80198be:	f7ec f887 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 80198c2:	f7ec f885 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 80198c6:	f7ec f883 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	0bdb      	lsrs	r3, r3, #15
 80198ce:	f003 0301 	and.w	r3, r3, #1
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	3708      	adds	r7, #8
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}

080198da <_ZN6uavcanL9bitunpackILi8ELi7EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 80198da:	b580      	push	{r7, lr}
 80198dc:	b082      	sub	sp, #8
 80198de:	af00      	add	r7, sp, #0
 80198e0:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 80198e2:	f7ec f875 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 80198e6:	f7ec f873 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 80198ea:	f7ec f871 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	0a1b      	lsrs	r3, r3, #8
 80198f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80198f6:	4618      	mov	r0, r3
 80198f8:	3708      	adds	r7, #8
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}

080198fe <_ZN6uavcanL9bitunpackILi16ELi8EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 80198fe:	b580      	push	{r7, lr}
 8019900:	b082      	sub	sp, #8
 8019902:	af00      	add	r7, sp, #0
 8019904:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019906:	f7ec f863 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 801990a:	f7ec f861 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 801990e:	f7ec f85f 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	0c1b      	lsrs	r3, r3, #16
 8019916:	b2db      	uxtb	r3, r3
}
 8019918:	4618      	mov	r0, r3
 801991a:	3708      	adds	r7, #8
 801991c:	46bd      	mov	sp, r7
 801991e:	bd80      	pop	{r7, pc}

08019920 <_ZN6uavcanL9bitunpackILi8ELi16EEEmm>:
inline static uint32_t bitunpack(uint32_t val)
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019928:	f7ec f852 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 801992c:	f7ec f850 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019930:	f7ec f84e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    return (val >> OFFSET) & ((1UL << WIDTH) - 1);
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	0a1b      	lsrs	r3, r3, #8
 8019938:	b29b      	uxth	r3, r3
}
 801993a:	4618      	mov	r0, r3
 801993c:	3708      	adds	r7, #8
 801993e:	46bd      	mov	sp, r7
 8019940:	bd80      	pop	{r7, pc}
	...

08019944 <_ZN6uavcanL7bitpackILi0ELi7EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 8019944:	b580      	push	{r7, lr}
 8019946:	b082      	sub	sp, #8
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 801994c:	f7ec f840 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019950:	f7ec f83e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019954:	f7ec f83c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801995e:	687a      	ldr	r2, [r7, #4]
 8019960:	429a      	cmp	r2, r3
 8019962:	d005      	beq.n	8019970 <_ZN6uavcanL7bitpackILi0ELi7EEEmm+0x2c>
 8019964:	4b06      	ldr	r3, [pc, #24]	; (8019980 <_ZN6uavcanL7bitpackILi0ELi7EEEmm+0x3c>)
 8019966:	4a07      	ldr	r2, [pc, #28]	; (8019984 <_ZN6uavcanL7bitpackILi0ELi7EEEmm+0x40>)
 8019968:	216c      	movs	r1, #108	; 0x6c
 801996a:	4807      	ldr	r0, [pc, #28]	; (8019988 <_ZN6uavcanL7bitpackILi0ELi7EEEmm+0x44>)
 801996c:	f006 fe0e 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8019976:	4618      	mov	r0, r3
 8019978:	3708      	adds	r7, #8
 801997a:	46bd      	mov	sp, r7
 801997c:	bd80      	pop	{r7, pc}
 801997e:	bf00      	nop
 8019980:	08023c4c 	.word	0x08023c4c
 8019984:	0802b02c 	.word	0x0802b02c
 8019988:	08023b94 	.word	0x08023b94

0801998c <_ZN6uavcanL7bitpackILi24ELi5EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019994:	f7ec f81c 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019998:	f7ec f81a 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 801999c:	f7ec f818 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	f003 031f 	and.w	r3, r3, #31
 80199a6:	687a      	ldr	r2, [r7, #4]
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d005      	beq.n	80199b8 <_ZN6uavcanL7bitpackILi24ELi5EEEmm+0x2c>
 80199ac:	4b06      	ldr	r3, [pc, #24]	; (80199c8 <_ZN6uavcanL7bitpackILi24ELi5EEEmm+0x3c>)
 80199ae:	4a07      	ldr	r2, [pc, #28]	; (80199cc <_ZN6uavcanL7bitpackILi24ELi5EEEmm+0x40>)
 80199b0:	216c      	movs	r1, #108	; 0x6c
 80199b2:	4807      	ldr	r0, [pc, #28]	; (80199d0 <_ZN6uavcanL7bitpackILi24ELi5EEEmm+0x44>)
 80199b4:	f006 fdea 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	061b      	lsls	r3, r3, #24
 80199bc:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
}
 80199c0:	4618      	mov	r0, r3
 80199c2:	3708      	adds	r7, #8
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	08023c4c 	.word	0x08023c4c
 80199cc:	0802b0ac 	.word	0x0802b0ac
 80199d0:	08023b94 	.word	0x08023b94

080199d4 <_ZN6uavcanL7bitpackILi7ELi1EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b082      	sub	sp, #8
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 80199dc:	f7eb fff8 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 80199e0:	f7eb fff6 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 80199e4:	f7eb fff4 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	f003 0301 	and.w	r3, r3, #1
 80199ee:	687a      	ldr	r2, [r7, #4]
 80199f0:	429a      	cmp	r2, r3
 80199f2:	d005      	beq.n	8019a00 <_ZN6uavcanL7bitpackILi7ELi1EEEmm+0x2c>
 80199f4:	4b06      	ldr	r3, [pc, #24]	; (8019a10 <_ZN6uavcanL7bitpackILi7ELi1EEEmm+0x3c>)
 80199f6:	4a07      	ldr	r2, [pc, #28]	; (8019a14 <_ZN6uavcanL7bitpackILi7ELi1EEEmm+0x40>)
 80199f8:	216c      	movs	r1, #108	; 0x6c
 80199fa:	4807      	ldr	r0, [pc, #28]	; (8019a18 <_ZN6uavcanL7bitpackILi7ELi1EEEmm+0x44>)
 80199fc:	f006 fdc6 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	01db      	lsls	r3, r3, #7
 8019a04:	b2db      	uxtb	r3, r3
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	3708      	adds	r7, #8
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	08023c4c 	.word	0x08023c4c
 8019a14:	0802b1ac 	.word	0x0802b1ac
 8019a18:	08023b94 	.word	0x08023b94

08019a1c <_ZN6uavcanL7bitpackILi8ELi16EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b082      	sub	sp, #8
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019a24:	f7eb ffd4 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019a28:	f7eb ffd2 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019a2c:	f7eb ffd0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	687a      	ldr	r2, [r7, #4]
 8019a36:	429a      	cmp	r2, r3
 8019a38:	d005      	beq.n	8019a46 <_ZN6uavcanL7bitpackILi8ELi16EEEmm+0x2a>
 8019a3a:	4b08      	ldr	r3, [pc, #32]	; (8019a5c <_ZN6uavcanL7bitpackILi8ELi16EEEmm+0x40>)
 8019a3c:	4a08      	ldr	r2, [pc, #32]	; (8019a60 <_ZN6uavcanL7bitpackILi8ELi16EEEmm+0x44>)
 8019a3e:	216c      	movs	r1, #108	; 0x6c
 8019a40:	4808      	ldr	r0, [pc, #32]	; (8019a64 <_ZN6uavcanL7bitpackILi8ELi16EEEmm+0x48>)
 8019a42:	f006 fda3 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	021b      	lsls	r3, r3, #8
 8019a4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
}
 8019a52:	4618      	mov	r0, r3
 8019a54:	3708      	adds	r7, #8
 8019a56:	46bd      	mov	sp, r7
 8019a58:	bd80      	pop	{r7, pc}
 8019a5a:	bf00      	nop
 8019a5c:	08023c4c 	.word	0x08023c4c
 8019a60:	0802b12c 	.word	0x0802b12c
 8019a64:	08023b94 	.word	0x08023b94

08019a68 <_ZN6uavcanL7bitpackILi8ELi7EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019a70:	f7eb ffae 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019a74:	f7eb ffac 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019a78:	f7eb ffaa 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a82:	687a      	ldr	r2, [r7, #4]
 8019a84:	429a      	cmp	r2, r3
 8019a86:	d005      	beq.n	8019a94 <_ZN6uavcanL7bitpackILi8ELi7EEEmm+0x2c>
 8019a88:	4b06      	ldr	r3, [pc, #24]	; (8019aa4 <_ZN6uavcanL7bitpackILi8ELi7EEEmm+0x3c>)
 8019a8a:	4a07      	ldr	r2, [pc, #28]	; (8019aa8 <_ZN6uavcanL7bitpackILi8ELi7EEEmm+0x40>)
 8019a8c:	216c      	movs	r1, #108	; 0x6c
 8019a8e:	4807      	ldr	r0, [pc, #28]	; (8019aac <_ZN6uavcanL7bitpackILi8ELi7EEEmm+0x44>)
 8019a90:	f006 fd7c 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	021b      	lsls	r3, r3, #8
 8019a98:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3708      	adds	r7, #8
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	bd80      	pop	{r7, pc}
 8019aa4:	08023c4c 	.word	0x08023c4c
 8019aa8:	0802b22c 	.word	0x0802b22c
 8019aac:	08023b94 	.word	0x08023b94

08019ab0 <_ZN6uavcanL7bitpackILi15ELi1EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b082      	sub	sp, #8
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019ab8:	f7eb ff8a 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019abc:	f7eb ff88 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019ac0:	f7eb ff86 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	f003 0301 	and.w	r3, r3, #1
 8019aca:	687a      	ldr	r2, [r7, #4]
 8019acc:	429a      	cmp	r2, r3
 8019ace:	d005      	beq.n	8019adc <_ZN6uavcanL7bitpackILi15ELi1EEEmm+0x2c>
 8019ad0:	4b06      	ldr	r3, [pc, #24]	; (8019aec <_ZN6uavcanL7bitpackILi15ELi1EEEmm+0x3c>)
 8019ad2:	4a07      	ldr	r2, [pc, #28]	; (8019af0 <_ZN6uavcanL7bitpackILi15ELi1EEEmm+0x40>)
 8019ad4:	216c      	movs	r1, #108	; 0x6c
 8019ad6:	4807      	ldr	r0, [pc, #28]	; (8019af4 <_ZN6uavcanL7bitpackILi15ELi1EEEmm+0x44>)
 8019ad8:	f006 fd58 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	03db      	lsls	r3, r3, #15
 8019ae0:	b29b      	uxth	r3, r3
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	3708      	adds	r7, #8
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}
 8019aea:	bf00      	nop
 8019aec:	08023c4c 	.word	0x08023c4c
 8019af0:	0802b2ac 	.word	0x0802b2ac
 8019af4:	08023b94 	.word	0x08023b94

08019af8 <_ZN6uavcanL7bitpackILi16ELi8EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b082      	sub	sp, #8
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019b00:	f7eb ff66 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019b04:	f7eb ff64 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019b08:	f7eb ff62 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	687a      	ldr	r2, [r7, #4]
 8019b12:	429a      	cmp	r2, r3
 8019b14:	d005      	beq.n	8019b22 <_ZN6uavcanL7bitpackILi16ELi8EEEmm+0x2a>
 8019b16:	4b07      	ldr	r3, [pc, #28]	; (8019b34 <_ZN6uavcanL7bitpackILi16ELi8EEEmm+0x3c>)
 8019b18:	4a07      	ldr	r2, [pc, #28]	; (8019b38 <_ZN6uavcanL7bitpackILi16ELi8EEEmm+0x40>)
 8019b1a:	216c      	movs	r1, #108	; 0x6c
 8019b1c:	4807      	ldr	r0, [pc, #28]	; (8019b3c <_ZN6uavcanL7bitpackILi16ELi8EEEmm+0x44>)
 8019b1e:	f006 fd35 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	041b      	lsls	r3, r3, #16
 8019b26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3708      	adds	r7, #8
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}
 8019b32:	bf00      	nop
 8019b34:	08023c4c 	.word	0x08023c4c
 8019b38:	0802b32c 	.word	0x0802b32c
 8019b3c:	08023b94 	.word	0x08023b94

08019b40 <_ZN6uavcanL7bitpackILi10ELi14EEEmm>:
inline static uint32_t bitpack(uint32_t field)
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b082      	sub	sp, #8
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
    StaticAssert<(OFFSET >= 0)>::check();
 8019b48:	f7eb ff42 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<(WIDTH > 0)>::check();
 8019b4c:	f7eb ff40 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    StaticAssert<((OFFSET + WIDTH) <= 29)>::check();
 8019b50:	f7eb ff3e 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    UAVCAN_ASSERT((field & ((1UL << WIDTH) - 1)) == field);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019b5a:	687a      	ldr	r2, [r7, #4]
 8019b5c:	429a      	cmp	r2, r3
 8019b5e:	d005      	beq.n	8019b6c <_ZN6uavcanL7bitpackILi10ELi14EEEmm+0x2c>
 8019b60:	4b06      	ldr	r3, [pc, #24]	; (8019b7c <_ZN6uavcanL7bitpackILi10ELi14EEEmm+0x3c>)
 8019b62:	4a07      	ldr	r2, [pc, #28]	; (8019b80 <_ZN6uavcanL7bitpackILi10ELi14EEEmm+0x40>)
 8019b64:	216c      	movs	r1, #108	; 0x6c
 8019b66:	4807      	ldr	r0, [pc, #28]	; (8019b84 <_ZN6uavcanL7bitpackILi10ELi14EEEmm+0x44>)
 8019b68:	f006 fd10 	bl	802058c <__assert_func>
    return uint32_t((field & ((1UL << WIDTH) - 1)) << OFFSET);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	029a      	lsls	r2, r3, #10
 8019b70:	4b05      	ldr	r3, [pc, #20]	; (8019b88 <_ZN6uavcanL7bitpackILi10ELi14EEEmm+0x48>)
 8019b72:	4013      	ands	r3, r2
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	3708      	adds	r7, #8
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	08023c4c 	.word	0x08023c4c
 8019b80:	0802b3e8 	.word	0x0802b3e8
 8019b84:	08023b94 	.word	0x08023b94
 8019b88:	00fffc00 	.word	0x00fffc00

08019b8c <_ZNK6uavcan27OutgoingTransferRegistryKey13getDataTypeIDEv>:
    DataTypeID getDataTypeID() const { return data_type_id_; }
 8019b8c:	b480      	push	{r7}
 8019b8e:	b083      	sub	sp, #12
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	6078      	str	r0, [r7, #4]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	4618      	mov	r0, r3
 8019b9a:	370c      	adds	r7, #12
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba2:	4770      	bx	lr

08019ba4 <_ZNK6uavcan27OutgoingTransferRegistryKey15getTransferTypeEv>:
    TransferType getTransferType() const { return TransferType(transfer_type_); }
 8019ba4:	b480      	push	{r7}
 8019ba6:	b083      	sub	sp, #12
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	791b      	ldrb	r3, [r3, #4]
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	370c      	adds	r7, #12
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bba:	4770      	bx	lr

08019bbc <_ZN6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateC1ENS_13MonotonicTimeE>:
        explicit DeadlineExpiredPredicate(MonotonicTime ts)
 8019bbc:	b480      	push	{r7}
 8019bbe:	b083      	sub	sp, #12
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
 8019bc4:	6039      	str	r1, [r7, #0]
            : ts_(ts)
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	683a      	ldr	r2, [r7, #0]
 8019bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019bce:	e883 0003 	stmia.w	r3, {r0, r1}
        { }
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	370c      	adds	r7, #12
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bde:	4770      	bx	lr

08019be0 <_ZNK6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE>:
        bool operator()(const OutgoingTransferRegistryKey& key, const Value& value) const
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b086      	sub	sp, #24
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	60f8      	str	r0, [r7, #12]
 8019be8:	60b9      	str	r1, [r7, #8]
 8019bea:	607a      	str	r2, [r7, #4]
            UAVCAN_ASSERT(!value.deadline.isZero());
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7ee fdbc 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	f083 0301 	eor.w	r3, r3, #1
 8019bfa:	b2db      	uxtb	r3, r3
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d105      	bne.n	8019c0c <_ZNK6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x2c>
 8019c00:	4b09      	ldr	r3, [pc, #36]	; (8019c28 <_ZNK6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x48>)
 8019c02:	4a0a      	ldr	r2, [pc, #40]	; (8019c2c <_ZNK6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x4c>)
 8019c04:	2154      	movs	r1, #84	; 0x54
 8019c06:	480a      	ldr	r0, [pc, #40]	; (8019c30 <_ZNK6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x50>)
 8019c08:	f006 fcc0 	bl	802058c <__assert_func>
            const bool expired = value.deadline <= ts_;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	68fa      	ldr	r2, [r7, #12]
 8019c10:	4611      	mov	r1, r2
 8019c12:	4618      	mov	r0, r3
 8019c14:	f000 f8f0 	bl	8019df8 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEleERKS1_>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	75fb      	strb	r3, [r7, #23]
            return expired;
 8019c1c:	7dfb      	ldrb	r3, [r7, #23]
        }
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3718      	adds	r7, #24
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}
 8019c26:	bf00      	nop
 8019c28:	08023c74 	.word	0x08023c74
 8019c2c:	0802b7e8 	.word	0x0802b7e8
 8019c30:	08023c90 	.word	0x08023c90

08019c34 <_ZN6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateC1ENS_10DataTypeIDENS_12TransferTypeE>:
        ExistenceCheckingPredicate(DataTypeID dtid, TransferType tt)
 8019c34:	b480      	push	{r7}
 8019c36:	b085      	sub	sp, #20
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	60f8      	str	r0, [r7, #12]
 8019c3c:	60b9      	str	r1, [r7, #8]
 8019c3e:	4613      	mov	r3, r2
 8019c40:	71fb      	strb	r3, [r7, #7]
            , tt_(tt)
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	68ba      	ldr	r2, [r7, #8]
 8019c46:	601a      	str	r2, [r3, #0]
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	79fa      	ldrb	r2, [r7, #7]
 8019c4c:	711a      	strb	r2, [r3, #4]
        { }
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	4618      	mov	r0, r3
 8019c52:	3714      	adds	r7, #20
 8019c54:	46bd      	mov	sp, r7
 8019c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5a:	4770      	bx	lr

08019c5c <_ZNK6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE>:
        bool operator()(const OutgoingTransferRegistryKey& key, const Value&) const
 8019c5c:	b590      	push	{r4, r7, lr}
 8019c5e:	b085      	sub	sp, #20
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	60f8      	str	r0, [r7, #12]
 8019c64:	60b9      	str	r1, [r7, #8]
 8019c66:	607a      	str	r2, [r7, #4]
            return dtid_ == key.getDataTypeID() && tt_ == key.getTransferType();
 8019c68:	68fc      	ldr	r4, [r7, #12]
 8019c6a:	68b8      	ldr	r0, [r7, #8]
 8019c6c:	f7ff ff8e 	bl	8019b8c <_ZNK6uavcan27OutgoingTransferRegistryKey13getDataTypeIDEv>
 8019c70:	4603      	mov	r3, r0
 8019c72:	4619      	mov	r1, r3
 8019c74:	4620      	mov	r0, r4
 8019c76:	f7ec f809 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d009      	beq.n	8019c94 <_ZNK6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x38>
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	791c      	ldrb	r4, [r3, #4]
 8019c84:	68b8      	ldr	r0, [r7, #8]
 8019c86:	f7ff ff8d 	bl	8019ba4 <_ZNK6uavcan27OutgoingTransferRegistryKey15getTransferTypeEv>
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	429c      	cmp	r4, r3
 8019c8e:	d101      	bne.n	8019c94 <_ZNK6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x38>
 8019c90:	2301      	movs	r3, #1
 8019c92:	e000      	b.n	8019c96 <_ZNK6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE+0x3a>
 8019c94:	2300      	movs	r3, #0
        }
 8019c96:	4618      	mov	r0, r3
 8019c98:	3714      	adds	r7, #20
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd90      	pop	{r4, r7, pc}
	...

08019ca0 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE>:
 */
const MonotonicDuration OutgoingTransferRegistry::MinEntryLifetime = MonotonicDuration::fromMSec(2000);

TransferID* OutgoingTransferRegistry::accessOrCreate(const OutgoingTransferRegistryKey& key,
                                                     MonotonicTime new_deadline)
{
 8019ca0:	b5b0      	push	{r4, r5, r7, lr}
 8019ca2:	b08a      	sub	sp, #40	; 0x28
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	60f8      	str	r0, [r7, #12]
 8019ca8:	60b9      	str	r1, [r7, #8]
 8019caa:	607a      	str	r2, [r7, #4]
    UAVCAN_ASSERT(!new_deadline.isZero());
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f7ee fd5c 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	f083 0301 	eor.w	r3, r3, #1
 8019cba:	b2db      	uxtb	r3, r3
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d105      	bne.n	8019ccc <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0x2c>
 8019cc0:	4b1e      	ldr	r3, [pc, #120]	; (8019d3c <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0x9c>)
 8019cc2:	4a1f      	ldr	r2, [pc, #124]	; (8019d40 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0xa0>)
 8019cc4:	211e      	movs	r1, #30
 8019cc6:	481f      	ldr	r0, [pc, #124]	; (8019d44 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0xa4>)
 8019cc8:	f006 fc60 	bl	802058c <__assert_func>
    Value* p = map_.access(key);
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	3304      	adds	r3, #4
 8019cd0:	68b9      	ldr	r1, [r7, #8]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f000 f8a8 	bl	8019e28 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_>
 8019cd8:	6278      	str	r0, [r7, #36]	; 0x24
    if (p == UAVCAN_NULLPTR)
 8019cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d120      	bne.n	8019d22 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0x82>
    {
        p = map_.insert(key, Value());
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	1d1d      	adds	r5, r3, #4
 8019ce4:	f04f 0300 	mov.w	r3, #0
 8019ce8:	f04f 0400 	mov.w	r4, #0
 8019cec:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	763b      	strb	r3, [r7, #24]
 8019cf4:	f107 0310 	add.w	r3, r7, #16
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	f7f2 fcbc 	bl	800c676 <_ZN6uavcan24OutgoingTransferRegistry5ValueC1Ev>
 8019cfe:	f107 0310 	add.w	r3, r7, #16
 8019d02:	461a      	mov	r2, r3
 8019d04:	68b9      	ldr	r1, [r7, #8]
 8019d06:	4628      	mov	r0, r5
 8019d08:	f000 f8c0 	bl	8019e8c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_>
 8019d0c:	6278      	str	r0, [r7, #36]	; 0x24
 8019d0e:	f107 0310 	add.w	r3, r7, #16
 8019d12:	4618      	mov	r0, r3
 8019d14:	f7f1 feee 	bl	800baf4 <_ZN6uavcan24OutgoingTransferRegistry5ValueD1Ev>
        if (p == UAVCAN_NULLPTR)
 8019d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d101      	bne.n	8019d22 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0x82>
        {
            return UAVCAN_NULLPTR;
 8019d1e:	2300      	movs	r3, #0
 8019d20:	e007      	b.n	8019d32 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE+0x92>
        }
        UAVCAN_TRACE("OutgoingTransferRegistry", "Created %s", key.toString().c_str());
    }
    p->deadline = new_deadline;
 8019d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d24:	687a      	ldr	r2, [r7, #4]
 8019d26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d2a:	e883 0003 	stmia.w	r3, {r0, r1}
    return &p->tid;
 8019d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d30:	3308      	adds	r3, #8
}
 8019d32:	4618      	mov	r0, r3
 8019d34:	3728      	adds	r7, #40	; 0x28
 8019d36:	46bd      	mov	sp, r7
 8019d38:	bdb0      	pop	{r4, r5, r7, pc}
 8019d3a:	bf00      	nop
 8019d3c:	08023cec 	.word	0x08023cec
 8019d40:	0802b4f4 	.word	0x0802b4f4
 8019d44:	08023d04 	.word	0x08023d04

08019d48 <_ZNK6uavcan24OutgoingTransferRegistry6existsENS_10DataTypeIDENS_12TransferTypeE>:

bool OutgoingTransferRegistry::exists(DataTypeID dtid, TransferType tt) const
{
 8019d48:	b590      	push	{r4, r7, lr}
 8019d4a:	b087      	sub	sp, #28
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	60f8      	str	r0, [r7, #12]
 8019d50:	60b9      	str	r1, [r7, #8]
 8019d52:	4613      	mov	r3, r2
 8019d54:	71fb      	strb	r3, [r7, #7]
    return UAVCAN_NULLPTR != map_.find(ExistenceCheckingPredicate(dtid, tt));
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	1d1c      	adds	r4, r3, #4
 8019d5a:	79fa      	ldrb	r2, [r7, #7]
 8019d5c:	f107 0310 	add.w	r3, r7, #16
 8019d60:	68b9      	ldr	r1, [r7, #8]
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7ff ff66 	bl	8019c34 <_ZN6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateC1ENS_10DataTypeIDENS_12TransferTypeE>
 8019d68:	f107 0310 	add.w	r3, r7, #16
 8019d6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019d70:	4620      	mov	r0, r4
 8019d72:	f000 f907 	bl	8019f84 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_>
 8019d76:	4603      	mov	r3, r0
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	bf14      	ite	ne
 8019d7c:	2301      	movne	r3, #1
 8019d7e:	2300      	moveq	r3, #0
 8019d80:	b2db      	uxtb	r3, r3
}
 8019d82:	4618      	mov	r0, r3
 8019d84:	371c      	adds	r7, #28
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd90      	pop	{r4, r7, pc}

08019d8a <_ZN6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateD1Ev>:
    class DeadlineExpiredPredicate
 8019d8a:	b580      	push	{r7, lr}
 8019d8c:	b082      	sub	sp, #8
 8019d8e:	af00      	add	r7, sp, #0
 8019d90:	6078      	str	r0, [r7, #4]
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7ec f9bd 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	3708      	adds	r7, #8
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}

08019da4 <_ZN6uavcan24OutgoingTransferRegistry7cleanupENS_13MonotonicTimeE>:

void OutgoingTransferRegistry::cleanup(MonotonicTime ts)
{
 8019da4:	b590      	push	{r4, r7, lr}
 8019da6:	b087      	sub	sp, #28
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
 8019dac:	6039      	str	r1, [r7, #0]
    map_.removeAllWhere(DeadlineExpiredPredicate(ts));
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	1d1c      	adds	r4, r3, #4
 8019db2:	683a      	ldr	r2, [r7, #0]
 8019db4:	f107 0310 	add.w	r3, r7, #16
 8019db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019dbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8019dc0:	f107 0210 	add.w	r2, r7, #16
 8019dc4:	f107 0308 	add.w	r3, r7, #8
 8019dc8:	4611      	mov	r1, r2
 8019dca:	4618      	mov	r0, r3
 8019dcc:	f7ff fef6 	bl	8019bbc <_ZN6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateC1ENS_13MonotonicTimeE>
 8019dd0:	f107 0308 	add.w	r3, r7, #8
 8019dd4:	4619      	mov	r1, r3
 8019dd6:	4620      	mov	r0, r4
 8019dd8:	f000 f929 	bl	801a02e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_>
 8019ddc:	f107 0308 	add.w	r3, r7, #8
 8019de0:	4618      	mov	r0, r3
 8019de2:	f7ff ffd2 	bl	8019d8a <_ZN6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateD1Ev>
 8019de6:	f107 0310 	add.w	r3, r7, #16
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7ec f992 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
}
 8019df0:	bf00      	nop
 8019df2:	371c      	adds	r7, #28
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd90      	pop	{r4, r7, pc}

08019df8 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEleERKS1_>:
    bool operator<=(const T& r) const { return usec_ <= r.usec_; }
 8019df8:	b490      	push	{r4, r7}
 8019dfa:	b082      	sub	sp, #8
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	6039      	str	r1, [r7, #0]
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8019e08:	683a      	ldr	r2, [r7, #0]
 8019e0a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8019e0e:	42a2      	cmp	r2, r4
 8019e10:	bf08      	it	eq
 8019e12:	4299      	cmpeq	r1, r3
 8019e14:	bf2c      	ite	cs
 8019e16:	2301      	movcs	r3, #1
 8019e18:	2300      	movcc	r3, #0
 8019e1a:	b2db      	uxtb	r3, r3
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3708      	adds	r7, #8
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bc90      	pop	{r4, r7}
 8019e24:	4770      	bx	lr
	...

08019e28 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_>:
Value* Map<Key, Value>::access(const Key& key)
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b086      	sub	sp, #24
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
 8019e30:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!(key == Key()));
 8019e32:	f107 030c 	add.w	r3, r7, #12
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7ec fb12 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 8019e3c:	f107 030c 	add.w	r3, r7, #12
 8019e40:	4619      	mov	r1, r3
 8019e42:	6838      	ldr	r0, [r7, #0]
 8019e44:	f7ec fb21 	bl	800648a <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	f083 0301 	eor.w	r3, r3, #1
 8019e4e:	b2db      	uxtb	r3, r3
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d105      	bne.n	8019e60 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_+0x38>
 8019e54:	4b0a      	ldr	r3, [pc, #40]	; (8019e80 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_+0x58>)
 8019e56:	4a0b      	ldr	r2, [pc, #44]	; (8019e84 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_+0x5c>)
 8019e58:	21e3      	movs	r1, #227	; 0xe3
 8019e5a:	480b      	ldr	r0, [pc, #44]	; (8019e88 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_+0x60>)
 8019e5c:	f006 fb96 	bl	802058c <__assert_func>
    KVPair* const kv = findKey(key);
 8019e60:	6839      	ldr	r1, [r7, #0]
 8019e62:	6878      	ldr	r0, [r7, #4]
 8019e64:	f000 f951 	bl	801a10a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_>
 8019e68:	6178      	str	r0, [r7, #20]
    return kv ? &kv->value : UAVCAN_NULLPTR;
 8019e6a:	697b      	ldr	r3, [r7, #20]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d001      	beq.n	8019e74 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_+0x4c>
 8019e70:	697b      	ldr	r3, [r7, #20]
 8019e72:	e000      	b.n	8019e76 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6accessERKS1_+0x4e>
 8019e74:	2300      	movs	r3, #0
}
 8019e76:	4618      	mov	r0, r3
 8019e78:	3718      	adds	r7, #24
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	bd80      	pop	{r7, pc}
 8019e7e:	bf00      	nop
 8019e80:	08023d90 	.word	0x08023d90
 8019e84:	0802b57c 	.word	0x0802b57c
 8019e88:	08023da0 	.word	0x08023da0

08019e8c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_>:
Value* Map<Key, Value>::insert(const Key& key, const Value& value)
 8019e8c:	b5b0      	push	{r4, r5, r7, lr}
 8019e8e:	b096      	sub	sp, #88	; 0x58
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	60f8      	str	r0, [r7, #12]
 8019e94:	60b9      	str	r1, [r7, #8]
 8019e96:	607a      	str	r2, [r7, #4]
    UAVCAN_ASSERT(!(key == Key()));
 8019e98:	f107 0310 	add.w	r3, r7, #16
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7ec fadf 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 8019ea2:	f107 0310 	add.w	r3, r7, #16
 8019ea6:	4619      	mov	r1, r3
 8019ea8:	68b8      	ldr	r0, [r7, #8]
 8019eaa:	f7ec faee 	bl	800648a <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	f083 0301 	eor.w	r3, r3, #1
 8019eb4:	b2db      	uxtb	r3, r3
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d105      	bne.n	8019ec6 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0x3a>
 8019eba:	4b2f      	ldr	r3, [pc, #188]	; (8019f78 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0xec>)
 8019ebc:	4a2f      	ldr	r2, [pc, #188]	; (8019f7c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0xf0>)
 8019ebe:	21eb      	movs	r1, #235	; 0xeb
 8019ec0:	482f      	ldr	r0, [pc, #188]	; (8019f80 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0xf4>)
 8019ec2:	f006 fb63 	bl	802058c <__assert_func>
    remove(key);
 8019ec6:	68b9      	ldr	r1, [r7, #8]
 8019ec8:	68f8      	ldr	r0, [r7, #12]
 8019eca:	f000 f941 	bl	801a150 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_>
    KVPair* const kv = findKey(Key());
 8019ece:	f107 0318 	add.w	r3, r7, #24
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f7ec fac4 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 8019ed8:	f107 0318 	add.w	r3, r7, #24
 8019edc:	4619      	mov	r1, r3
 8019ede:	68f8      	ldr	r0, [r7, #12]
 8019ee0:	f000 f913 	bl	801a10a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_>
 8019ee4:	6578      	str	r0, [r7, #84]	; 0x54
    if (kv)
 8019ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d017      	beq.n	8019f1c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0x90>
        *kv = KVPair(key, value);
 8019eec:	f107 0320 	add.w	r3, r7, #32
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	68b9      	ldr	r1, [r7, #8]
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f000 f971 	bl	801a1dc <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1ERKS1_RKS3_>
 8019efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019efc:	461d      	mov	r5, r3
 8019efe:	f107 0420 	add.w	r4, r7, #32
 8019f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019f06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019f0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8019f0e:	f107 0320 	add.w	r3, r7, #32
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7f1 fdfb 	bl	800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>
        return &kv->value;
 8019f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f1a:	e029      	b.n	8019f70 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0xe4>
    KVGroup* const kvg = KVGroup::instantiate(allocator_);
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	689b      	ldr	r3, [r3, #8]
 8019f20:	4618      	mov	r0, r3
 8019f22:	f000 f974 	bl	801a20e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup11instantiateERNS_14IPoolAllocatorE>
 8019f26:	6538      	str	r0, [r7, #80]	; 0x50
    if (kvg == UAVCAN_NULLPTR)
 8019f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d101      	bne.n	8019f32 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0xa6>
        return UAVCAN_NULLPTR;
 8019f2e:	2300      	movs	r3, #0
 8019f30:	e01e      	b.n	8019f70 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6insertERKS1_RKS3_+0xe4>
    list_.insert(kvg);
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	3304      	adds	r3, #4
 8019f36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f000 f98b 	bl	801a254 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6insertEPS6_>
    kvg->kvs[0] = KVPair(key, value);
 8019f3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019f42:	687a      	ldr	r2, [r7, #4]
 8019f44:	68b9      	ldr	r1, [r7, #8]
 8019f46:	4618      	mov	r0, r3
 8019f48:	f000 f948 	bl	801a1dc <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1ERKS1_RKS3_>
 8019f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f4e:	f103 0408 	add.w	r4, r3, #8
 8019f52:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8019f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019f5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8019f62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7f1 fdd1 	bl	800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>
    return &kvg->kvs[0].value;
 8019f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f6e:	3308      	adds	r3, #8
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	3758      	adds	r7, #88	; 0x58
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bdb0      	pop	{r4, r5, r7, pc}
 8019f78:	08023d90 	.word	0x08023d90
 8019f7c:	0802b614 	.word	0x0802b614
 8019f80:	08023da0 	.word	0x08023da0

08019f84 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_>:
const Key* Map<Key, Value>::find(Predicate predicate) const
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b08a      	sub	sp, #40	; 0x28
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	60f8      	str	r0, [r7, #12]
 8019f8c:	1d3b      	adds	r3, r7, #4
 8019f8e:	e883 0006 	stmia.w	r3, {r1, r2}
    KVGroup* p = list_.get();
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	3304      	adds	r3, #4
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7f2 fb38 	bl	800c60c <_ZNK6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE3getEv>
 8019f9c:	6278      	str	r0, [r7, #36]	; 0x24
    while (p != UAVCAN_NULLPTR)
 8019f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d03f      	beq.n	801a024 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0xa0>
        KVGroup* const next_group = p->getNextListNode();
 8019fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7f2 fb3c 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 8019fac:	61f8      	str	r0, [r7, #28]
        for (int i = 0; i < KVGroup::NumKV; i++)
 8019fae:	2300      	movs	r3, #0
 8019fb0:	623b      	str	r3, [r7, #32]
 8019fb2:	6a3b      	ldr	r3, [r7, #32]
 8019fb4:	2b01      	cmp	r3, #1
 8019fb6:	dc32      	bgt.n	801a01e <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0x9a>
            const KVPair* const kv = p->kvs + i;
 8019fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fba:	f103 0108 	add.w	r1, r3, #8
 8019fbe:	6a3a      	ldr	r2, [r7, #32]
 8019fc0:	4613      	mov	r3, r2
 8019fc2:	005b      	lsls	r3, r3, #1
 8019fc4:	4413      	add	r3, r2
 8019fc6:	00db      	lsls	r3, r3, #3
 8019fc8:	440b      	add	r3, r1
 8019fca:	61bb      	str	r3, [r7, #24]
            if (!kv->match(Key()))
 8019fcc:	f107 0310 	add.w	r3, r7, #16
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7ec fa45 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 8019fd6:	f107 0310 	add.w	r3, r7, #16
 8019fda:	4619      	mov	r1, r3
 8019fdc:	69b8      	ldr	r0, [r7, #24]
 8019fde:	f7f2 fb2d 	bl	800c63c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPair5matchERKS1_>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	f083 0301 	eor.w	r3, r3, #1
 8019fe8:	b2db      	uxtb	r3, r3
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d013      	beq.n	801a016 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0x92>
                if (predicate(kv->key, kv->value))
 8019fee:	69bb      	ldr	r3, [r7, #24]
 8019ff0:	f103 0110 	add.w	r1, r3, #16
 8019ff4:	69ba      	ldr	r2, [r7, #24]
 8019ff6:	1d3b      	adds	r3, r7, #4
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7ff fe2f 	bl	8019c5c <_ZNK6uavcan24OutgoingTransferRegistry26ExistenceCheckingPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE>
 8019ffe:	4603      	mov	r3, r0
 801a000:	2b00      	cmp	r3, #0
 801a002:	d008      	beq.n	801a016 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0x92>
                    return &p->kvs[i].key;
 801a004:	6a3b      	ldr	r3, [r7, #32]
 801a006:	1c5a      	adds	r2, r3, #1
 801a008:	4613      	mov	r3, r2
 801a00a:	005b      	lsls	r3, r3, #1
 801a00c:	4413      	add	r3, r2
 801a00e:	00db      	lsls	r3, r3, #3
 801a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a012:	4413      	add	r3, r2
 801a014:	e007      	b.n	801a026 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0xa2>
        for (int i = 0; i < KVGroup::NumKV; i++)
 801a016:	6a3b      	ldr	r3, [r7, #32]
 801a018:	3301      	adds	r3, #1
 801a01a:	623b      	str	r3, [r7, #32]
 801a01c:	e7c9      	b.n	8019fb2 <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0x2e>
        p = next_group;
 801a01e:	69fb      	ldr	r3, [r7, #28]
 801a020:	627b      	str	r3, [r7, #36]	; 0x24
    while (p != UAVCAN_NULLPTR)
 801a022:	e7bc      	b.n	8019f9e <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE4findINS2_26ExistenceCheckingPredicateEEEPKS1_T_+0x1a>
    return UAVCAN_NULLPTR;
 801a024:	2300      	movs	r3, #0
}
 801a026:	4618      	mov	r0, r3
 801a028:	3728      	adds	r7, #40	; 0x28
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}

0801a02e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_>:
void Map<Key, Value>::removeAllWhere(Predicate predicate)
 801a02e:	b5b0      	push	{r4, r5, r7, lr}
 801a030:	b090      	sub	sp, #64	; 0x40
 801a032:	af00      	add	r7, sp, #0
 801a034:	6078      	str	r0, [r7, #4]
 801a036:	6039      	str	r1, [r7, #0]
    unsigned num_removed = 0;
 801a038:	2300      	movs	r3, #0
 801a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
    KVGroup* p = list_.get();
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	3304      	adds	r3, #4
 801a040:	4618      	mov	r0, r3
 801a042:	f7f2 fae3 	bl	800c60c <_ZNK6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE3getEv>
 801a046:	63b8      	str	r0, [r7, #56]	; 0x38
    while (p != UAVCAN_NULLPTR)
 801a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d053      	beq.n	801a0f6 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0xc8>
        KVGroup* const next_group = p->getNextListNode();
 801a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a050:	4618      	mov	r0, r3
 801a052:	f7f2 fae7 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 801a056:	6338      	str	r0, [r7, #48]	; 0x30
        for (int i = 0; i < KVGroup::NumKV; i++)
 801a058:	2300      	movs	r3, #0
 801a05a:	637b      	str	r3, [r7, #52]	; 0x34
 801a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a05e:	2b01      	cmp	r3, #1
 801a060:	dc46      	bgt.n	801a0f0 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0xc2>
            const KVPair* const kv = p->kvs + i;
 801a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a064:	f103 0108 	add.w	r1, r3, #8
 801a068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a06a:	4613      	mov	r3, r2
 801a06c:	005b      	lsls	r3, r3, #1
 801a06e:	4413      	add	r3, r2
 801a070:	00db      	lsls	r3, r3, #3
 801a072:	440b      	add	r3, r1
 801a074:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (!kv->match(Key()))
 801a076:	f107 0308 	add.w	r3, r7, #8
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7ec f9f0 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 801a080:	f107 0308 	add.w	r3, r7, #8
 801a084:	4619      	mov	r1, r3
 801a086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a088:	f7f2 fad8 	bl	800c63c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPair5matchERKS1_>
 801a08c:	4603      	mov	r3, r0
 801a08e:	f083 0301 	eor.w	r3, r3, #1
 801a092:	b2db      	uxtb	r3, r3
 801a094:	2b00      	cmp	r3, #0
 801a096:	d027      	beq.n	801a0e8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0xba>
                if (predicate(kv->key, kv->value))
 801a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a09a:	3310      	adds	r3, #16
 801a09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a09e:	4619      	mov	r1, r3
 801a0a0:	6838      	ldr	r0, [r7, #0]
 801a0a2:	f7ff fd9d 	bl	8019be0 <_ZNK6uavcan24OutgoingTransferRegistry24DeadlineExpiredPredicateclERKNS_27OutgoingTransferRegistryKeyERKNS0_5ValueE>
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d01d      	beq.n	801a0e8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0xba>
                    num_removed++;
 801a0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0ae:	3301      	adds	r3, #1
 801a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    p->kvs[i] = KVPair();
 801a0b2:	f107 0310 	add.w	r3, r7, #16
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	f7f2 faef 	bl	800c69a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1Ev>
 801a0bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a0c0:	4613      	mov	r3, r2
 801a0c2:	005b      	lsls	r3, r3, #1
 801a0c4:	4413      	add	r3, r2
 801a0c6:	00db      	lsls	r3, r3, #3
 801a0c8:	440b      	add	r3, r1
 801a0ca:	3308      	adds	r3, #8
 801a0cc:	461d      	mov	r5, r3
 801a0ce:	f107 0410 	add.w	r4, r7, #16
 801a0d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a0d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a0da:	e885 0003 	stmia.w	r5, {r0, r1}
 801a0de:	f107 0310 	add.w	r3, r7, #16
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	f7f1 fd13 	bl	800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>
        for (int i = 0; i < KVGroup::NumKV; i++)
 801a0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	637b      	str	r3, [r7, #52]	; 0x34
 801a0ee:	e7b5      	b.n	801a05c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0x2e>
        p = next_group;
 801a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f2:	63bb      	str	r3, [r7, #56]	; 0x38
    while (p != UAVCAN_NULLPTR)
 801a0f4:	e7a8      	b.n	801a048 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0x1a>
    if (num_removed > 0)
 801a0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d002      	beq.n	801a102 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE14removeAllWhereINS2_24DeadlineExpiredPredicateEEEvT_+0xd4>
        compact();
 801a0fc:	6878      	ldr	r0, [r7, #4]
 801a0fe:	f7f2 fae8 	bl	800c6d2 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv>
}
 801a102:	bf00      	nop
 801a104:	3740      	adds	r7, #64	; 0x40
 801a106:	46bd      	mov	sp, r7
 801a108:	bdb0      	pop	{r4, r5, r7, pc}

0801a10a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_>:
typename Map<Key, Value>::KVPair* Map<Key, Value>::findKey(const Key& key)
 801a10a:	b580      	push	{r7, lr}
 801a10c:	b084      	sub	sp, #16
 801a10e:	af00      	add	r7, sp, #0
 801a110:	6078      	str	r0, [r7, #4]
 801a112:	6039      	str	r1, [r7, #0]
    KVGroup* p = list_.get();
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	3304      	adds	r3, #4
 801a118:	4618      	mov	r0, r3
 801a11a:	f7f2 fa77 	bl	800c60c <_ZNK6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE3getEv>
 801a11e:	60f8      	str	r0, [r7, #12]
    while (p)
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d00f      	beq.n	801a146 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_+0x3c>
        KVPair* const kv = p->find(key);
 801a126:	6839      	ldr	r1, [r7, #0]
 801a128:	68f8      	ldr	r0, [r7, #12]
 801a12a:	f000 f8b9 	bl	801a2a0 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup4findERKS1_>
 801a12e:	60b8      	str	r0, [r7, #8]
        if (kv)
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d001      	beq.n	801a13a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_+0x30>
            return kv;
 801a136:	68bb      	ldr	r3, [r7, #8]
 801a138:	e006      	b.n	801a148 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_+0x3e>
        p = p->getNextListNode();
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7f2 fa71 	bl	800c624 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15getNextListNodeEv>
 801a142:	60f8      	str	r0, [r7, #12]
    while (p)
 801a144:	e7ec      	b.n	801a120 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_+0x16>
    return UAVCAN_NULLPTR;
 801a146:	2300      	movs	r3, #0
}
 801a148:	4618      	mov	r0, r3
 801a14a:	3710      	adds	r7, #16
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_>:
void Map<Key, Value>::remove(const Key& key)
 801a150:	b5b0      	push	{r4, r5, r7, lr}
 801a152:	b08c      	sub	sp, #48	; 0x30
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!(key == Key()));
 801a15a:	f107 0308 	add.w	r3, r7, #8
 801a15e:	4618      	mov	r0, r3
 801a160:	f7ec f97e 	bl	8006460 <_ZN6uavcan27OutgoingTransferRegistryKeyC1Ev>
 801a164:	f107 0308 	add.w	r3, r7, #8
 801a168:	4619      	mov	r1, r3
 801a16a:	6838      	ldr	r0, [r7, #0]
 801a16c:	f7ec f98d 	bl	800648a <_ZNK6uavcan27OutgoingTransferRegistryKeyeqERKS0_>
 801a170:	4603      	mov	r3, r0
 801a172:	f083 0301 	eor.w	r3, r3, #1
 801a176:	b2db      	uxtb	r3, r3
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d106      	bne.n	801a18a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_+0x3a>
 801a17c:	4b14      	ldr	r3, [pc, #80]	; (801a1d0 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_+0x80>)
 801a17e:	4a15      	ldr	r2, [pc, #84]	; (801a1d4 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_+0x84>)
 801a180:	f44f 7181 	mov.w	r1, #258	; 0x102
 801a184:	4814      	ldr	r0, [pc, #80]	; (801a1d8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_+0x88>)
 801a186:	f006 fa01 	bl	802058c <__assert_func>
    KVPair* const kv = findKey(key);
 801a18a:	6839      	ldr	r1, [r7, #0]
 801a18c:	6878      	ldr	r0, [r7, #4]
 801a18e:	f7ff ffbc 	bl	801a10a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7findKeyERKS1_>
 801a192:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (kv)
 801a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a196:	2b00      	cmp	r3, #0
 801a198:	d016      	beq.n	801a1c8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6removeERKS1_+0x78>
        *kv = KVPair();
 801a19a:	f107 0310 	add.w	r3, r7, #16
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7f2 fa7b 	bl	800c69a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1Ev>
 801a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1a6:	461d      	mov	r5, r3
 801a1a8:	f107 0410 	add.w	r4, r7, #16
 801a1ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a1b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a1b4:	e885 0003 	stmia.w	r5, {r0, r1}
 801a1b8:	f107 0310 	add.w	r3, r7, #16
 801a1bc:	4618      	mov	r0, r3
 801a1be:	f7f1 fca6 	bl	800bb0e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairD1Ev>
        compact();
 801a1c2:	6878      	ldr	r0, [r7, #4]
 801a1c4:	f7f2 fa85 	bl	800c6d2 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7compactEv>
}
 801a1c8:	bf00      	nop
 801a1ca:	3730      	adds	r7, #48	; 0x30
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	bdb0      	pop	{r4, r5, r7, pc}
 801a1d0:	08023d90 	.word	0x08023d90
 801a1d4:	0802b6b8 	.word	0x0802b6b8
 801a1d8:	08023da0 	.word	0x08023da0

0801a1dc <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1ERKS1_RKS3_>:
        KVPair(const Key& arg_key, const Value& arg_value) :
 801a1dc:	b490      	push	{r4, r7}
 801a1de:	b084      	sub	sp, #16
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	60f8      	str	r0, [r7, #12]
 801a1e4:	60b9      	str	r1, [r7, #8]
 801a1e6:	607a      	str	r2, [r7, #4]
            key(arg_key)
 801a1e8:	68fa      	ldr	r2, [r7, #12]
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	4614      	mov	r4, r2
 801a1ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a1f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	68ba      	ldr	r2, [r7, #8]
 801a1f8:	3310      	adds	r3, #16
 801a1fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a1fe:	e883 0003 	stmia.w	r3, {r0, r1}
        { }
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	4618      	mov	r0, r3
 801a206:	3710      	adds	r7, #16
 801a208:	46bd      	mov	sp, r7
 801a20a:	bc90      	pop	{r4, r7}
 801a20c:	4770      	bx	lr

0801a20e <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup11instantiateERNS_14IPoolAllocatorE>:
        static KVGroup* instantiate(IPoolAllocator& allocator)
 801a20e:	b590      	push	{r4, r7, lr}
 801a210:	b085      	sub	sp, #20
 801a212:	af00      	add	r7, sp, #0
 801a214:	6078      	str	r0, [r7, #4]
            void* const praw = allocator.allocate(sizeof(KVGroup));
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	3308      	adds	r3, #8
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2138      	movs	r1, #56	; 0x38
 801a220:	6878      	ldr	r0, [r7, #4]
 801a222:	4798      	blx	r3
 801a224:	60f8      	str	r0, [r7, #12]
            if (praw == UAVCAN_NULLPTR)
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d101      	bne.n	801a230 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x22>
                return UAVCAN_NULLPTR;
 801a22c:	2300      	movs	r3, #0
 801a22e:	e00d      	b.n	801a24c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x3e>
            return new (praw) KVGroup();
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	4619      	mov	r1, r3
 801a234:	2038      	movs	r0, #56	; 0x38
 801a236:	f7eb fe5f 	bl	8005ef8 <_ZnwjPv>
 801a23a:	4604      	mov	r4, r0
 801a23c:	2c00      	cmp	r4, #0
 801a23e:	d004      	beq.n	801a24a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x3c>
 801a240:	4620      	mov	r0, r4
 801a242:	f000 f859 	bl	801a2f8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupC1Ev>
 801a246:	4623      	mov	r3, r4
 801a248:	e000      	b.n	801a24c <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x3e>
 801a24a:	4623      	mov	r3, r4
        }
 801a24c:	4618      	mov	r0, r3
 801a24e:	3714      	adds	r7, #20
 801a250:	46bd      	mov	sp, r7
 801a252:	bd90      	pop	{r4, r7, pc}

0801a254 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6insertEPS6_>:
void LinkedListRoot<T>::insert(T* node)
 801a254:	b580      	push	{r7, lr}
 801a256:	b082      	sub	sp, #8
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	6039      	str	r1, [r7, #0]
    if (node == UAVCAN_NULLPTR)
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d105      	bne.n	801a270 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6insertEPS6_+0x1c>
        UAVCAN_ASSERT(0);
 801a264:	4b0b      	ldr	r3, [pc, #44]	; (801a294 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6insertEPS6_+0x40>)
 801a266:	4a0c      	ldr	r2, [pc, #48]	; (801a298 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6insertEPS6_+0x44>)
 801a268:	216a      	movs	r1, #106	; 0x6a
 801a26a:	480c      	ldr	r0, [pc, #48]	; (801a29c <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6insertEPS6_+0x48>)
 801a26c:	f006 f98e 	bl	802058c <__assert_func>
    remove(node);  // Making sure there will be no loops
 801a270:	6839      	ldr	r1, [r7, #0]
 801a272:	6878      	ldr	r0, [r7, #4]
 801a274:	f7f3 f800 	bl	800d278 <_ZN6uavcan14LinkedListRootINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE6removeEPKS6_>
    node->setNextListNode(root_);
 801a278:	683a      	ldr	r2, [r7, #0]
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	4619      	mov	r1, r3
 801a280:	4610      	mov	r0, r2
 801a282:	f7f3 fb68 	bl	800d956 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE15setNextListNodeEPS6_>
    root_ = node;
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	683a      	ldr	r2, [r7, #0]
 801a28a:	601a      	str	r2, [r3, #0]
}
 801a28c:	bf00      	nop
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}
 801a294:	08023de0 	.word	0x08023de0
 801a298:	0802b74c 	.word	0x0802b74c
 801a29c:	08023de4 	.word	0x08023de4

0801a2a0 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup4findERKS1_>:
        KVPair* find(const Key& key)
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b084      	sub	sp, #16
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	6039      	str	r1, [r7, #0]
            for (unsigned i = 0; i < static_cast<unsigned>(NumKV); i++)
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	60fb      	str	r3, [r7, #12]
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	d81c      	bhi.n	801a2ee <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup4findERKS1_+0x4e>
                if (kvs[i].match(key))
 801a2b4:	68fa      	ldr	r2, [r7, #12]
 801a2b6:	4613      	mov	r3, r2
 801a2b8:	005b      	lsls	r3, r3, #1
 801a2ba:	4413      	add	r3, r2
 801a2bc:	00db      	lsls	r3, r3, #3
 801a2be:	3308      	adds	r3, #8
 801a2c0:	687a      	ldr	r2, [r7, #4]
 801a2c2:	4413      	add	r3, r2
 801a2c4:	6839      	ldr	r1, [r7, #0]
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	f7f2 f9b8 	bl	800c63c <_ZNK6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPair5matchERKS1_>
 801a2cc:	4603      	mov	r3, r0
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d009      	beq.n	801a2e6 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup4findERKS1_+0x46>
                    return kvs + i;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	f103 0108 	add.w	r1, r3, #8
 801a2d8:	68fa      	ldr	r2, [r7, #12]
 801a2da:	4613      	mov	r3, r2
 801a2dc:	005b      	lsls	r3, r3, #1
 801a2de:	4413      	add	r3, r2
 801a2e0:	00db      	lsls	r3, r3, #3
 801a2e2:	440b      	add	r3, r1
 801a2e4:	e004      	b.n	801a2f0 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup4findERKS1_+0x50>
            for (unsigned i = 0; i < static_cast<unsigned>(NumKV); i++)
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	60fb      	str	r3, [r7, #12]
 801a2ec:	e7df      	b.n	801a2ae <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroup4findERKS1_+0xe>
            return UAVCAN_NULLPTR;
 801a2ee:	2300      	movs	r3, #0
        }
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	3710      	adds	r7, #16
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupC1Ev>:
        KVGroup()
 801a2f8:	b5b0      	push	{r4, r5, r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
        {
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	4618      	mov	r0, r3
 801a304:	f000 f815 	bl	801a332 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEEC1Ev>
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	3308      	adds	r3, #8
 801a30c:	2401      	movs	r4, #1
 801a30e:	461d      	mov	r5, r3
 801a310:	2c00      	cmp	r4, #0
 801a312:	db05      	blt.n	801a320 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupC1Ev+0x28>
 801a314:	4628      	mov	r0, r5
 801a316:	f7f2 f9c0 	bl	800c69a <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE6KVPairC1Ev>
 801a31a:	3518      	adds	r5, #24
 801a31c:	3c01      	subs	r4, #1
 801a31e:	e7f7      	b.n	801a310 <_ZN6uavcan3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupC1Ev+0x18>
            StaticAssert<(static_cast<unsigned>(NumKV) > 0)>::check();
 801a320:	f7eb fb56 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
            IsDynamicallyAllocatable<KVGroup>::check();
 801a324:	f000 f814 	bl	801a350 <_ZN6uavcan24IsDynamicallyAllocatableINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE5checkEv>
        }
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	4618      	mov	r0, r3
 801a32c:	3708      	adds	r7, #8
 801a32e:	46bd      	mov	sp, r7
 801a330:	bdb0      	pop	{r4, r5, r7, pc}

0801a332 <_ZN6uavcan14LinkedListNodeINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEEC1Ev>:
    LinkedListNode()
 801a332:	b580      	push	{r7, lr}
 801a334:	b082      	sub	sp, #8
 801a336:	af00      	add	r7, sp, #0
 801a338:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 801a33a:	6878      	ldr	r0, [r7, #4]
 801a33c:	f7eb fb4f 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	2200      	movs	r2, #0
 801a344:	601a      	str	r2, [r3, #0]
    { }
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	4618      	mov	r0, r3
 801a34a:	3708      	adds	r7, #8
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}

0801a350 <_ZN6uavcan24IsDynamicallyAllocatableINS_3MapINS_27OutgoingTransferRegistryKeyENS_24OutgoingTransferRegistry5ValueEE7KVGroupEE5checkEv>:
    static void check()
 801a350:	b480      	push	{r7}
 801a352:	b083      	sub	sp, #12
 801a354:	af00      	add	r7, sp, #0
        char dummy[(sizeof(T) <= MemPoolBlockSize) ? 1 : -1] = { '0' };
 801a356:	2330      	movs	r3, #48	; 0x30
 801a358:	713b      	strb	r3, [r7, #4]
    }
 801a35a:	bf00      	nop
 801a35c:	370c      	adds	r7, #12
 801a35e:	46bd      	mov	sp, r7
 801a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a364:	4770      	bx	lr
	...

0801a368 <_Z41__static_initialization_and_destruction_0ii>:

}
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
 801a370:	6039      	str	r1, [r7, #0]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2b01      	cmp	r3, #1
 801a376:	d10c      	bne.n	801a392 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 801a378:	683b      	ldr	r3, [r7, #0]
 801a37a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a37e:	4293      	cmp	r3, r2
 801a380:	d107      	bne.n	801a392 <_Z41__static_initialization_and_destruction_0ii+0x2a>
const MonotonicDuration OutgoingTransferRegistry::MinEntryLifetime = MonotonicDuration::fromMSec(2000);
 801a382:	490b      	ldr	r1, [pc, #44]	; (801a3b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 801a384:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801a388:	f04f 0300 	mov.w	r3, #0
 801a38c:	4608      	mov	r0, r1
 801a38e:	f7ee f965 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d107      	bne.n	801a3a8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 801a398:	683b      	ldr	r3, [r7, #0]
 801a39a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	d102      	bne.n	801a3a8 <_Z41__static_initialization_and_destruction_0ii+0x40>
 801a3a2:	4803      	ldr	r0, [pc, #12]	; (801a3b0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 801a3a4:	f7eb ff89 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
}
 801a3a8:	bf00      	nop
 801a3aa:	3708      	adds	r7, #8
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	bd80      	pop	{r7, pc}
 801a3b0:	200085e8 	.word	0x200085e8

0801a3b4 <_GLOBAL__sub_I__ZN6uavcan24OutgoingTransferRegistry16MinEntryLifetimeE>:
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	af00      	add	r7, sp, #0
 801a3b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a3bc:	2001      	movs	r0, #1
 801a3be:	f7ff ffd3 	bl	801a368 <_Z41__static_initialization_and_destruction_0ii>
 801a3c2:	bd80      	pop	{r7, pc}

0801a3c4 <_GLOBAL__sub_D__ZN6uavcan24OutgoingTransferRegistry16MinEntryLifetimeE>:
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	af00      	add	r7, sp, #0
 801a3c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a3cc:	2000      	movs	r0, #0
 801a3ce:	f7ff ffcb 	bl	801a368 <_Z41__static_initialization_and_destruction_0ii>
 801a3d2:	bd80      	pop	{r7, pc}

0801a3d4 <_ZNK6uavcan10TransferID22computeForwardDistanceES0_>:

/**
 * TransferID
 */
int TransferID::computeForwardDistance(TransferID rhs) const
{
 801a3d4:	b590      	push	{r4, r7, lr}
 801a3d6:	b085      	sub	sp, #20
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
 801a3dc:	7039      	strb	r1, [r7, #0]
    int d = int(rhs.get()) - int(get());
 801a3de:	463b      	mov	r3, r7
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	f7eb fb99 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	461c      	mov	r4, r3
 801a3ea:	6878      	ldr	r0, [r7, #4]
 801a3ec:	f7eb fb94 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	1ae3      	subs	r3, r4, r3
 801a3f4:	60fb      	str	r3, [r7, #12]
    if (d < 0)
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	da02      	bge.n	801a402 <_ZNK6uavcan10TransferID22computeForwardDistanceES0_+0x2e>
    {
        d += 1 << BitLen;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	3320      	adds	r3, #32
 801a400:	60fb      	str	r3, [r7, #12]
    }

    UAVCAN_ASSERT(((get() + d) & Max) == rhs.get());
 801a402:	6878      	ldr	r0, [r7, #4]
 801a404:	f7eb fb88 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 801a408:	4603      	mov	r3, r0
 801a40a:	461a      	mov	r2, r3
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	4413      	add	r3, r2
 801a410:	f003 041f 	and.w	r4, r3, #31
 801a414:	463b      	mov	r3, r7
 801a416:	4618      	mov	r0, r3
 801a418:	f7eb fb7e 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 801a41c:	4603      	mov	r3, r0
 801a41e:	429c      	cmp	r4, r3
 801a420:	d005      	beq.n	801a42e <_ZNK6uavcan10TransferID22computeForwardDistanceES0_+0x5a>
 801a422:	4b05      	ldr	r3, [pc, #20]	; (801a438 <_ZNK6uavcan10TransferID22computeForwardDistanceES0_+0x64>)
 801a424:	4a05      	ldr	r2, [pc, #20]	; (801a43c <_ZNK6uavcan10TransferID22computeForwardDistanceES0_+0x68>)
 801a426:	2134      	movs	r1, #52	; 0x34
 801a428:	4805      	ldr	r0, [pc, #20]	; (801a440 <_ZNK6uavcan10TransferID22computeForwardDistanceES0_+0x6c>)
 801a42a:	f006 f8af 	bl	802058c <__assert_func>
    return d;
 801a42e:	68fb      	ldr	r3, [r7, #12]
}
 801a430:	4618      	mov	r0, r3
 801a432:	3714      	adds	r7, #20
 801a434:	46bd      	mov	sp, r7
 801a436:	bd90      	pop	{r4, r7, pc}
 801a438:	08023e90 	.word	0x08023e90
 801a43c:	0802b898 	.word	0x0802b898
 801a440:	08023eb4 	.word	0x08023eb4

0801a444 <_Z41__static_initialization_and_destruction_0ii>:

}
 801a444:	b580      	push	{r7, lr}
 801a446:	b082      	sub	sp, #8
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	6039      	str	r1, [r7, #0]
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2b01      	cmp	r3, #1
 801a452:	d11c      	bne.n	801a48e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 801a454:	683b      	ldr	r3, [r7, #0]
 801a456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a45a:	4293      	cmp	r3, r2
 801a45c:	d117      	bne.n	801a48e <_Z41__static_initialization_and_destruction_0ii+0x4a>
const TransferPriority TransferPriority::Default((1U << BitLen) / 2);
 801a45e:	2110      	movs	r1, #16
 801a460:	480d      	ldr	r0, [pc, #52]	; (801a498 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801a462:	f7fe fd83 	bl	8018f6c <_ZN6uavcan16TransferPriorityC1Eh>
const TransferPriority TransferPriority::MiddleLower((1U << BitLen) / 2 + (1U << BitLen) / 4);
 801a466:	2118      	movs	r1, #24
 801a468:	480c      	ldr	r0, [pc, #48]	; (801a49c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801a46a:	f7fe fd7f 	bl	8018f6c <_ZN6uavcan16TransferPriorityC1Eh>
const TransferPriority TransferPriority::OneHigherThanLowest(NumericallyMax - 1);
 801a46e:	211e      	movs	r1, #30
 801a470:	480b      	ldr	r0, [pc, #44]	; (801a4a0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801a472:	f7fe fd7b 	bl	8018f6c <_ZN6uavcan16TransferPriorityC1Eh>
const TransferPriority TransferPriority::OneLowerThanHighest(NumericallyMin + 1);
 801a476:	2101      	movs	r1, #1
 801a478:	480a      	ldr	r0, [pc, #40]	; (801a4a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 801a47a:	f7fe fd77 	bl	8018f6c <_ZN6uavcan16TransferPriorityC1Eh>
const TransferPriority TransferPriority::Lowest(NumericallyMax);
 801a47e:	211f      	movs	r1, #31
 801a480:	4809      	ldr	r0, [pc, #36]	; (801a4a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 801a482:	f7fe fd73 	bl	8018f6c <_ZN6uavcan16TransferPriorityC1Eh>
const NodeID NodeID::Broadcast(ValueBroadcast);
 801a486:	2100      	movs	r1, #0
 801a488:	4808      	ldr	r0, [pc, #32]	; (801a4ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801a48a:	f7eb fb6d 	bl	8005b68 <_ZN6uavcan6NodeIDC1Eh>
}
 801a48e:	bf00      	nop
 801a490:	3708      	adds	r7, #8
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
 801a496:	bf00      	nop
 801a498:	200085f0 	.word	0x200085f0
 801a49c:	200085f4 	.word	0x200085f4
 801a4a0:	200085f8 	.word	0x200085f8
 801a4a4:	200085fc 	.word	0x200085fc
 801a4a8:	20008600 	.word	0x20008600
 801a4ac:	20008604 	.word	0x20008604

0801a4b0 <_GLOBAL__sub_I__ZN6uavcan16TransferPriority6BitLenE>:
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	af00      	add	r7, sp, #0
 801a4b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a4b8:	2001      	movs	r0, #1
 801a4ba:	f7ff ffc3 	bl	801a444 <_Z41__static_initialization_and_destruction_0ii>
 801a4be:	bd80      	pop	{r7, pc}

0801a4c0 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEED1Ev>:
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b082      	sub	sp, #8
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f7eb fa93 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3708      	adds	r7, #8
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}

0801a4d8 <_ZN6uavcan26TransferBufferManagerEntryC1ERNS_14IPoolAllocatorEt>:
    TransferBufferManagerEntry(IPoolAllocator& allocator, uint16_t max_size) :
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b084      	sub	sp, #16
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	60f8      	str	r0, [r7, #12]
 801a4e0:	60b9      	str	r1, [r7, #8]
 801a4e2:	4613      	mov	r3, r2
 801a4e4:	80fb      	strh	r3, [r7, #6]
        max_size_(max_size)
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	f7eb fe51 	bl	8006190 <_ZN6uavcan15ITransferBufferC1Ev>
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	3304      	adds	r3, #4
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	f000 fd0d 	bl	801af12 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEEC1Ev>
 801a4f8:	4a10      	ldr	r2, [pc, #64]	; (801a53c <_ZN6uavcan26TransferBufferManagerEntryC1ERNS_14IPoolAllocatorEt+0x64>)
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	601a      	str	r2, [r3, #0]
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	68ba      	ldr	r2, [r7, #8]
 801a502:	609a      	str	r2, [r3, #8]
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	330c      	adds	r3, #12
 801a508:	4618      	mov	r0, r3
 801a50a:	f000 fd1d 	bl	801af48 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEEC1Ev>
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	2200      	movs	r2, #0
 801a512:	821a      	strh	r2, [r3, #16]
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	88fa      	ldrh	r2, [r7, #6]
 801a518:	825a      	strh	r2, [r3, #18]
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	3314      	adds	r3, #20
 801a51e:	4618      	mov	r0, r3
 801a520:	f7eb fe64 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
        StaticAssert<(Block::Size > 8)>::check();
 801a524:	f7eb fa54 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
        IsDynamicallyAllocatable<Block>::check();
 801a528:	f000 fd1d 	bl	801af66 <_ZN6uavcan24IsDynamicallyAllocatableINS_26TransferBufferManagerEntry5BlockEE5checkEv>
        IsDynamicallyAllocatable<TransferBufferManagerEntry>::check();
 801a52c:	f000 fd26 	bl	801af7c <_ZN6uavcan24IsDynamicallyAllocatableINS_26TransferBufferManagerEntryEE5checkEv>
    }
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	4618      	mov	r0, r3
 801a534:	3710      	adds	r7, #16
 801a536:	46bd      	mov	sp, r7
 801a538:	bd80      	pop	{r7, pc}
 801a53a:	bf00      	nop
 801a53c:	0802b8ec 	.word	0x0802b8ec

0801a540 <_ZN6uavcan26TransferBufferManagerEntryD1Ev>:
    virtual ~TransferBufferManagerEntry() { reset(); }
 801a540:	b580      	push	{r7, lr}
 801a542:	b084      	sub	sp, #16
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
 801a548:	4a10      	ldr	r2, [pc, #64]	; (801a58c <_ZN6uavcan26TransferBufferManagerEntryD1Ev+0x4c>)
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	601a      	str	r2, [r3, #0]
 801a54e:	f107 030c 	add.w	r3, r7, #12
 801a552:	4618      	mov	r0, r3
 801a554:	f7eb fe4a 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801a558:	f107 030c 	add.w	r3, r7, #12
 801a55c:	4619      	mov	r1, r3
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	f000 fb6e 	bl	801ac40 <_ZN6uavcan26TransferBufferManagerEntry5resetERKNS_24TransferBufferManagerKeyE>
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	330c      	adds	r3, #12
 801a568:	4618      	mov	r0, r3
 801a56a:	f7ff ffa9 	bl	801a4c0 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEED1Ev>
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	3304      	adds	r3, #4
 801a572:	4618      	mov	r0, r3
 801a574:	f000 fcdc 	bl	801af30 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEED1Ev>
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	4618      	mov	r0, r3
 801a57c:	f7eb fc78 	bl	8005e70 <_ZN6uavcan15ITransferBufferD1Ev>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	4618      	mov	r0, r3
 801a584:	3710      	adds	r7, #16
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	0802b8ec 	.word	0x0802b8ec

0801a590 <_ZN6uavcan26TransferBufferManagerEntryD0Ev>:
 801a590:	b580      	push	{r7, lr}
 801a592:	b082      	sub	sp, #8
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
 801a598:	6878      	ldr	r0, [r7, #4]
 801a59a:	f7ff ffd1 	bl	801a540 <_ZN6uavcan26TransferBufferManagerEntryD1Ev>
 801a59e:	2118      	movs	r1, #24
 801a5a0:	6878      	ldr	r0, [r7, #4]
 801a5a2:	f005 ffd2 	bl	802054a <_ZdlPvj>
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	3708      	adds	r7, #8
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}

0801a5b0 <_ZNK6uavcan26TransferBufferManagerEntry6getKeyEv>:
    const TransferBufferManagerKey& getKey() const { return key_; }
 801a5b0:	b480      	push	{r7}
 801a5b2:	b083      	sub	sp, #12
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	3314      	adds	r3, #20
 801a5bc:	4618      	mov	r0, r3
 801a5be:	370c      	adds	r7, #12
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c6:	4770      	bx	lr

0801a5c8 <_ZNK6uavcan26TransferBufferManagerEntry7isEmptyEv>:
    bool isEmpty() const { return key_.isEmpty(); }
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b082      	sub	sp, #8
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	3314      	adds	r3, #20
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	f7eb fe46 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	4618      	mov	r0, r3
 801a5de:	3708      	adds	r7, #8
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}

0801a5e4 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEED1Ev>:
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b082      	sub	sp, #8
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
 801a5ec:	6878      	ldr	r0, [r7, #4]
 801a5ee:	f7eb fa01 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	3708      	adds	r7, #8
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}

0801a5fc <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj>:
{
/*
 * StaticTransferBufferImpl
 */
int StaticTransferBufferImpl::read(unsigned offset, uint8_t* data, unsigned len) const
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b084      	sub	sp, #16
 801a600:	af00      	add	r7, sp, #0
 801a602:	60f8      	str	r0, [r7, #12]
 801a604:	60b9      	str	r1, [r7, #8]
 801a606:	607a      	str	r2, [r7, #4]
 801a608:	603b      	str	r3, [r7, #0]
    if (!data)
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d105      	bne.n	801a61c <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x20>
    {
        UAVCAN_ASSERT(0);
 801a610:	4b1d      	ldr	r3, [pc, #116]	; (801a688 <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x8c>)
 801a612:	4a1e      	ldr	r2, [pc, #120]	; (801a68c <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x90>)
 801a614:	2112      	movs	r1, #18
 801a616:	481e      	ldr	r0, [pc, #120]	; (801a690 <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x94>)
 801a618:	f005 ffb8 	bl	802058c <__assert_func>
        return -ErrInvalidParam;
    }
    if (offset >= max_write_pos_)
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	895b      	ldrh	r3, [r3, #10]
 801a620:	461a      	mov	r2, r3
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	4293      	cmp	r3, r2
 801a626:	d301      	bcc.n	801a62c <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x30>
    {
        return 0;
 801a628:	2300      	movs	r3, #0
 801a62a:	e028      	b.n	801a67e <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x82>
    }
    if ((offset + len) > max_write_pos_)
 801a62c:	68ba      	ldr	r2, [r7, #8]
 801a62e:	683b      	ldr	r3, [r7, #0]
 801a630:	4413      	add	r3, r2
 801a632:	68fa      	ldr	r2, [r7, #12]
 801a634:	8952      	ldrh	r2, [r2, #10]
 801a636:	4293      	cmp	r3, r2
 801a638:	d905      	bls.n	801a646 <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x4a>
    {
        len = max_write_pos_ - offset;
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	895b      	ldrh	r3, [r3, #10]
 801a63e:	461a      	mov	r2, r3
 801a640:	68bb      	ldr	r3, [r7, #8]
 801a642:	1ad3      	subs	r3, r2, r3
 801a644:	603b      	str	r3, [r7, #0]
    }
    UAVCAN_ASSERT((offset + len) <= max_write_pos_);
 801a646:	68ba      	ldr	r2, [r7, #8]
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	4413      	add	r3, r2
 801a64c:	68fa      	ldr	r2, [r7, #12]
 801a64e:	8952      	ldrh	r2, [r2, #10]
 801a650:	4293      	cmp	r3, r2
 801a652:	d905      	bls.n	801a660 <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x64>
 801a654:	4b0f      	ldr	r3, [pc, #60]	; (801a694 <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x98>)
 801a656:	4a0d      	ldr	r2, [pc, #52]	; (801a68c <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x90>)
 801a658:	211d      	movs	r1, #29
 801a65a:	480d      	ldr	r0, [pc, #52]	; (801a690 <_ZNK6uavcan24StaticTransferBufferImpl4readEjPhj+0x94>)
 801a65c:	f005 ff96 	bl	802058c <__assert_func>
    (void)copy(data_ + offset, data_ + offset + len, data);
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	685a      	ldr	r2, [r3, #4]
 801a664:	68bb      	ldr	r3, [r7, #8]
 801a666:	18d0      	adds	r0, r2, r3
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	685a      	ldr	r2, [r3, #4]
 801a66c:	68b9      	ldr	r1, [r7, #8]
 801a66e:	683b      	ldr	r3, [r7, #0]
 801a670:	440b      	add	r3, r1
 801a672:	4413      	add	r3, r2
 801a674:	687a      	ldr	r2, [r7, #4]
 801a676:	4619      	mov	r1, r3
 801a678:	f7fb fcda 	bl	8016030 <_ZN6uavcan4copyIPhS1_EET0_T_S3_S2_>
    return int(len);
 801a67c:	683b      	ldr	r3, [r7, #0]
}
 801a67e:	4618      	mov	r0, r3
 801a680:	3710      	adds	r7, #16
 801a682:	46bd      	mov	sp, r7
 801a684:	bd80      	pop	{r7, pc}
 801a686:	bf00      	nop
 801a688:	08023f8c 	.word	0x08023f8c
 801a68c:	0802b914 	.word	0x0802b914
 801a690:	08023f90 	.word	0x08023f90
 801a694:	08024014 	.word	0x08024014

0801a698 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj>:

int StaticTransferBufferImpl::write(unsigned offset, const uint8_t* data, unsigned len)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b086      	sub	sp, #24
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	60f8      	str	r0, [r7, #12]
 801a6a0:	60b9      	str	r1, [r7, #8]
 801a6a2:	607a      	str	r2, [r7, #4]
 801a6a4:	603b      	str	r3, [r7, #0]
    if (!data)
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d105      	bne.n	801a6b8 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0x20>
    {
        UAVCAN_ASSERT(0);
 801a6ac:	4b26      	ldr	r3, [pc, #152]	; (801a748 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xb0>)
 801a6ae:	4a27      	ldr	r2, [pc, #156]	; (801a74c <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xb4>)
 801a6b0:	2126      	movs	r1, #38	; 0x26
 801a6b2:	4827      	ldr	r0, [pc, #156]	; (801a750 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xb8>)
 801a6b4:	f005 ff6a 	bl	802058c <__assert_func>
        return -ErrInvalidParam;
    }
    if (offset >= size_)
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	891b      	ldrh	r3, [r3, #8]
 801a6bc:	461a      	mov	r2, r3
 801a6be:	68bb      	ldr	r3, [r7, #8]
 801a6c0:	4293      	cmp	r3, r2
 801a6c2:	d301      	bcc.n	801a6c8 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0x30>
    {
        return 0;
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	e03b      	b.n	801a740 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xa8>
    }
    if ((offset + len) > size_)
 801a6c8:	68ba      	ldr	r2, [r7, #8]
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	4413      	add	r3, r2
 801a6ce:	68fa      	ldr	r2, [r7, #12]
 801a6d0:	8912      	ldrh	r2, [r2, #8]
 801a6d2:	4293      	cmp	r3, r2
 801a6d4:	d905      	bls.n	801a6e2 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0x4a>
    {
        len = size_ - offset;
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	891b      	ldrh	r3, [r3, #8]
 801a6da:	461a      	mov	r2, r3
 801a6dc:	68bb      	ldr	r3, [r7, #8]
 801a6de:	1ad3      	subs	r3, r2, r3
 801a6e0:	603b      	str	r3, [r7, #0]
    }
    UAVCAN_ASSERT((offset + len) <= size_);
 801a6e2:	68ba      	ldr	r2, [r7, #8]
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	4413      	add	r3, r2
 801a6e8:	68fa      	ldr	r2, [r7, #12]
 801a6ea:	8912      	ldrh	r2, [r2, #8]
 801a6ec:	4293      	cmp	r3, r2
 801a6ee:	d905      	bls.n	801a6fc <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0x64>
 801a6f0:	4b18      	ldr	r3, [pc, #96]	; (801a754 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xbc>)
 801a6f2:	4a16      	ldr	r2, [pc, #88]	; (801a74c <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xb4>)
 801a6f4:	2131      	movs	r1, #49	; 0x31
 801a6f6:	4816      	ldr	r0, [pc, #88]	; (801a750 <_ZN6uavcan24StaticTransferBufferImpl5writeEjPKhj+0xb8>)
 801a6f8:	f005 ff48 	bl	802058c <__assert_func>
    (void)copy(data, data + len, data_ + offset);
 801a6fc:	687a      	ldr	r2, [r7, #4]
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	18d1      	adds	r1, r2, r3
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	685a      	ldr	r2, [r3, #4]
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	4413      	add	r3, r2
 801a70a:	461a      	mov	r2, r3
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f7fb fc53 	bl	8015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>
    max_write_pos_ = max(uint16_t(offset + len), uint16_t(max_write_pos_));
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	b29a      	uxth	r2, r3
 801a716:	683b      	ldr	r3, [r7, #0]
 801a718:	b29b      	uxth	r3, r3
 801a71a:	4413      	add	r3, r2
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	82bb      	strh	r3, [r7, #20]
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	895b      	ldrh	r3, [r3, #10]
 801a724:	82fb      	strh	r3, [r7, #22]
 801a726:	f107 0216 	add.w	r2, r7, #22
 801a72a:	f107 0314 	add.w	r3, r7, #20
 801a72e:	4611      	mov	r1, r2
 801a730:	4618      	mov	r0, r3
 801a732:	f000 fc2e 	bl	801af92 <_ZN6uavcan3maxItEERKT_S3_S3_>
 801a736:	4603      	mov	r3, r0
 801a738:	881a      	ldrh	r2, [r3, #0]
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	815a      	strh	r2, [r3, #10]
    return int(len);
 801a73e:	683b      	ldr	r3, [r7, #0]
}
 801a740:	4618      	mov	r0, r3
 801a742:	3718      	adds	r7, #24
 801a744:	46bd      	mov	sp, r7
 801a746:	bd80      	pop	{r7, pc}
 801a748:	08023f8c 	.word	0x08023f8c
 801a74c:	0802b97c 	.word	0x0802b97c
 801a750:	08023f90 	.word	0x08023f90
 801a754:	08024038 	.word	0x08024038

0801a758 <_ZN6uavcan26TransferBufferManagerEntry5BlockC1Ev>:
    struct Block : LinkedListNode<Block>
 801a758:	b580      	push	{r7, lr}
 801a75a:	b082      	sub	sp, #8
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	4618      	mov	r0, r3
 801a764:	f000 fc29 	bl	801afba <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEEC1Ev>
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	4618      	mov	r0, r3
 801a76c:	3708      	adds	r7, #8
 801a76e:	46bd      	mov	sp, r7
 801a770:	bd80      	pop	{r7, pc}

0801a772 <_ZN6uavcan26TransferBufferManagerEntry5Block11instantiateERNS_14IPoolAllocatorE>:
/*
 * DynamicTransferBuffer::Block
 */
TransferBufferManagerEntry::Block*
TransferBufferManagerEntry::Block::instantiate(IPoolAllocator& allocator)
{
 801a772:	b590      	push	{r4, r7, lr}
 801a774:	b085      	sub	sp, #20
 801a776:	af00      	add	r7, sp, #0
 801a778:	6078      	str	r0, [r7, #4]
    void* const praw = allocator.allocate(sizeof(Block));
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	3308      	adds	r3, #8
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	2138      	movs	r1, #56	; 0x38
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	4798      	blx	r3
 801a788:	60f8      	str	r0, [r7, #12]
    if (praw == UAVCAN_NULLPTR)
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d101      	bne.n	801a794 <_ZN6uavcan26TransferBufferManagerEntry5Block11instantiateERNS_14IPoolAllocatorE+0x22>
    {
        return UAVCAN_NULLPTR;
 801a790:	2300      	movs	r3, #0
 801a792:	e00d      	b.n	801a7b0 <_ZN6uavcan26TransferBufferManagerEntry5Block11instantiateERNS_14IPoolAllocatorE+0x3e>
    }
    return new (praw) Block;
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	4619      	mov	r1, r3
 801a798:	2038      	movs	r0, #56	; 0x38
 801a79a:	f7eb fbad 	bl	8005ef8 <_ZnwjPv>
 801a79e:	4604      	mov	r4, r0
 801a7a0:	2c00      	cmp	r4, #0
 801a7a2:	d004      	beq.n	801a7ae <_ZN6uavcan26TransferBufferManagerEntry5Block11instantiateERNS_14IPoolAllocatorE+0x3c>
 801a7a4:	4620      	mov	r0, r4
 801a7a6:	f7ff ffd7 	bl	801a758 <_ZN6uavcan26TransferBufferManagerEntry5BlockC1Ev>
 801a7aa:	4623      	mov	r3, r4
 801a7ac:	e000      	b.n	801a7b0 <_ZN6uavcan26TransferBufferManagerEntry5Block11instantiateERNS_14IPoolAllocatorE+0x3e>
 801a7ae:	4623      	mov	r3, r4
}
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	3714      	adds	r7, #20
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bd90      	pop	{r4, r7, pc}

0801a7b8 <_ZN6uavcan26TransferBufferManagerEntry5BlockD1Ev>:
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b082      	sub	sp, #8
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	f000 fc08 	bl	801afd8 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEED1Ev>
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	3708      	adds	r7, #8
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}

0801a7d2 <_ZN6uavcan26TransferBufferManagerEntry5Block7destroyERPS1_RNS_14IPoolAllocatorE>:

void TransferBufferManagerEntry::Block::destroy(Block*& obj, IPoolAllocator& allocator)
{
 801a7d2:	b580      	push	{r7, lr}
 801a7d4:	b082      	sub	sp, #8
 801a7d6:	af00      	add	r7, sp, #0
 801a7d8:	6078      	str	r0, [r7, #4]
 801a7da:	6039      	str	r1, [r7, #0]
    if (obj != UAVCAN_NULLPTR)
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d010      	beq.n	801a806 <_ZN6uavcan26TransferBufferManagerEntry5Block7destroyERPS1_RNS_14IPoolAllocatorE+0x34>
    {
        obj->~Block();
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f7ff ffe5 	bl	801a7b8 <_ZN6uavcan26TransferBufferManagerEntry5BlockD1Ev>
        allocator.deallocate(obj);
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	330c      	adds	r3, #12
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	687a      	ldr	r2, [r7, #4]
 801a7f8:	6812      	ldr	r2, [r2, #0]
 801a7fa:	4611      	mov	r1, r2
 801a7fc:	6838      	ldr	r0, [r7, #0]
 801a7fe:	4798      	blx	r3
        obj = UAVCAN_NULLPTR;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2200      	movs	r2, #0
 801a804:	601a      	str	r2, [r3, #0]
    }
}
 801a806:	bf00      	nop
 801a808:	3708      	adds	r7, #8
 801a80a:	46bd      	mov	sp, r7
 801a80c:	bd80      	pop	{r7, pc}
	...

0801a810 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_>:

void TransferBufferManagerEntry::Block::read(uint8_t*& outptr, unsigned target_offset,
                                             unsigned& total_offset, unsigned& left_to_read)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b086      	sub	sp, #24
 801a814:	af00      	add	r7, sp, #0
 801a816:	60f8      	str	r0, [r7, #12]
 801a818:	60b9      	str	r1, [r7, #8]
 801a81a:	607a      	str	r2, [r7, #4]
 801a81c:	603b      	str	r3, [r7, #0]
    UAVCAN_ASSERT(outptr);
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d105      	bne.n	801a832 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x22>
 801a826:	4b18      	ldr	r3, [pc, #96]	; (801a888 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x78>)
 801a828:	4a18      	ldr	r2, [pc, #96]	; (801a88c <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x7c>)
 801a82a:	2166      	movs	r1, #102	; 0x66
 801a82c:	4818      	ldr	r0, [pc, #96]	; (801a890 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x80>)
 801a82e:	f005 fead 	bl	802058c <__assert_func>
    for (unsigned i = 0; (i < Block::Size) && (left_to_read > 0); i++, total_offset++)
 801a832:	2300      	movs	r3, #0
 801a834:	617b      	str	r3, [r7, #20]
 801a836:	697b      	ldr	r3, [r7, #20]
 801a838:	2b33      	cmp	r3, #51	; 0x33
 801a83a:	d821      	bhi.n	801a880 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x70>
 801a83c:	6a3b      	ldr	r3, [r7, #32]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d01d      	beq.n	801a880 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x70>
    {
        if (total_offset >= target_offset)
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	687a      	ldr	r2, [r7, #4]
 801a84a:	429a      	cmp	r2, r3
 801a84c:	d80f      	bhi.n	801a86e <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x5e>
        {
            *outptr++ = data[i];
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	1c59      	adds	r1, r3, #1
 801a854:	68ba      	ldr	r2, [r7, #8]
 801a856:	6011      	str	r1, [r2, #0]
 801a858:	68f9      	ldr	r1, [r7, #12]
 801a85a:	697a      	ldr	r2, [r7, #20]
 801a85c:	440a      	add	r2, r1
 801a85e:	3204      	adds	r2, #4
 801a860:	7812      	ldrb	r2, [r2, #0]
 801a862:	701a      	strb	r2, [r3, #0]
            left_to_read--;
 801a864:	6a3b      	ldr	r3, [r7, #32]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	1e5a      	subs	r2, r3, #1
 801a86a:	6a3b      	ldr	r3, [r7, #32]
 801a86c:	601a      	str	r2, [r3, #0]
    for (unsigned i = 0; (i < Block::Size) && (left_to_read > 0); i++, total_offset++)
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	3301      	adds	r3, #1
 801a872:	617b      	str	r3, [r7, #20]
 801a874:	683b      	ldr	r3, [r7, #0]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	1c5a      	adds	r2, r3, #1
 801a87a:	683b      	ldr	r3, [r7, #0]
 801a87c:	601a      	str	r2, [r3, #0]
 801a87e:	e7da      	b.n	801a836 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_+0x26>
        }
    }
}
 801a880:	bf00      	nop
 801a882:	3718      	adds	r7, #24
 801a884:	46bd      	mov	sp, r7
 801a886:	bd80      	pop	{r7, pc}
 801a888:	08024050 	.word	0x08024050
 801a88c:	0802b9dc 	.word	0x0802b9dc
 801a890:	08023f90 	.word	0x08023f90

0801a894 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_>:

void TransferBufferManagerEntry::Block::write(const uint8_t*& inptr, unsigned target_offset,
                                                     unsigned& total_offset, unsigned& left_to_write)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b086      	sub	sp, #24
 801a898:	af00      	add	r7, sp, #0
 801a89a:	60f8      	str	r0, [r7, #12]
 801a89c:	60b9      	str	r1, [r7, #8]
 801a89e:	607a      	str	r2, [r7, #4]
 801a8a0:	603b      	str	r3, [r7, #0]
    UAVCAN_ASSERT(inptr);
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d105      	bne.n	801a8b6 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x22>
 801a8aa:	4b19      	ldr	r3, [pc, #100]	; (801a910 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x7c>)
 801a8ac:	4a19      	ldr	r2, [pc, #100]	; (801a914 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x80>)
 801a8ae:	2174      	movs	r1, #116	; 0x74
 801a8b0:	4819      	ldr	r0, [pc, #100]	; (801a918 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x84>)
 801a8b2:	f005 fe6b 	bl	802058c <__assert_func>
    for (unsigned i = 0; (i < Block::Size) && (left_to_write > 0); i++, total_offset++)
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	617b      	str	r3, [r7, #20]
 801a8ba:	697b      	ldr	r3, [r7, #20]
 801a8bc:	2b33      	cmp	r3, #51	; 0x33
 801a8be:	d822      	bhi.n	801a906 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x72>
 801a8c0:	6a3b      	ldr	r3, [r7, #32]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d01e      	beq.n	801a906 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x72>
    {
        if (total_offset >= target_offset)
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d810      	bhi.n	801a8f4 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x60>
        {
            data[i] = *inptr++;
 801a8d2:	68bb      	ldr	r3, [r7, #8]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	1c59      	adds	r1, r3, #1
 801a8d8:	68ba      	ldr	r2, [r7, #8]
 801a8da:	6011      	str	r1, [r2, #0]
 801a8dc:	7819      	ldrb	r1, [r3, #0]
 801a8de:	68fa      	ldr	r2, [r7, #12]
 801a8e0:	697b      	ldr	r3, [r7, #20]
 801a8e2:	4413      	add	r3, r2
 801a8e4:	3304      	adds	r3, #4
 801a8e6:	460a      	mov	r2, r1
 801a8e8:	701a      	strb	r2, [r3, #0]
            left_to_write--;
 801a8ea:	6a3b      	ldr	r3, [r7, #32]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	1e5a      	subs	r2, r3, #1
 801a8f0:	6a3b      	ldr	r3, [r7, #32]
 801a8f2:	601a      	str	r2, [r3, #0]
    for (unsigned i = 0; (i < Block::Size) && (left_to_write > 0); i++, total_offset++)
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	3301      	adds	r3, #1
 801a8f8:	617b      	str	r3, [r7, #20]
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	1c5a      	adds	r2, r3, #1
 801a900:	683b      	ldr	r3, [r7, #0]
 801a902:	601a      	str	r2, [r3, #0]
 801a904:	e7d9      	b.n	801a8ba <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_+0x26>
        }
    }
}
 801a906:	bf00      	nop
 801a908:	3718      	adds	r7, #24
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
 801a90e:	bf00      	nop
 801a910:	08024058 	.word	0x08024058
 801a914:	0802ba50 	.word	0x0802ba50
 801a918:	08023f90 	.word	0x08023f90

0801a91c <_ZN6uavcan26TransferBufferManagerEntry11instantiateERNS_14IPoolAllocatorEt>:
/*
 * DynamicTransferBuffer
 */
TransferBufferManagerEntry* TransferBufferManagerEntry::instantiate(IPoolAllocator& allocator,
                                                                                  uint16_t max_size)
{
 801a91c:	b590      	push	{r4, r7, lr}
 801a91e:	b085      	sub	sp, #20
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	460b      	mov	r3, r1
 801a926:	807b      	strh	r3, [r7, #2]
    void* const praw = allocator.allocate(sizeof(TransferBufferManagerEntry));
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	3308      	adds	r3, #8
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	2118      	movs	r1, #24
 801a932:	6878      	ldr	r0, [r7, #4]
 801a934:	4798      	blx	r3
 801a936:	60f8      	str	r0, [r7, #12]
    if (praw == UAVCAN_NULLPTR)
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d101      	bne.n	801a942 <_ZN6uavcan26TransferBufferManagerEntry11instantiateERNS_14IPoolAllocatorEt+0x26>
    {
        return UAVCAN_NULLPTR;
 801a93e:	2300      	movs	r3, #0
 801a940:	e010      	b.n	801a964 <_ZN6uavcan26TransferBufferManagerEntry11instantiateERNS_14IPoolAllocatorEt+0x48>
    }
    return new (praw) TransferBufferManagerEntry(allocator, max_size);
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	4619      	mov	r1, r3
 801a946:	2018      	movs	r0, #24
 801a948:	f7eb fad6 	bl	8005ef8 <_ZnwjPv>
 801a94c:	4604      	mov	r4, r0
 801a94e:	2c00      	cmp	r4, #0
 801a950:	d007      	beq.n	801a962 <_ZN6uavcan26TransferBufferManagerEntry11instantiateERNS_14IPoolAllocatorEt+0x46>
 801a952:	887b      	ldrh	r3, [r7, #2]
 801a954:	461a      	mov	r2, r3
 801a956:	6879      	ldr	r1, [r7, #4]
 801a958:	4620      	mov	r0, r4
 801a95a:	f7ff fdbd 	bl	801a4d8 <_ZN6uavcan26TransferBufferManagerEntryC1ERNS_14IPoolAllocatorEt>
 801a95e:	4623      	mov	r3, r4
 801a960:	e000      	b.n	801a964 <_ZN6uavcan26TransferBufferManagerEntry11instantiateERNS_14IPoolAllocatorEt+0x48>
 801a962:	4623      	mov	r3, r4
}
 801a964:	4618      	mov	r0, r3
 801a966:	3714      	adds	r7, #20
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd90      	pop	{r4, r7, pc}

0801a96c <_ZN6uavcan26TransferBufferManagerEntry7destroyERPS0_RNS_14IPoolAllocatorE>:

void TransferBufferManagerEntry::destroy(TransferBufferManagerEntry*& obj, IPoolAllocator& allocator)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b082      	sub	sp, #8
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	6039      	str	r1, [r7, #0]
    if (obj != UAVCAN_NULLPTR)
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d013      	beq.n	801a9a6 <_ZN6uavcan26TransferBufferManagerEntry7destroyERPS0_RNS_14IPoolAllocatorE+0x3a>
    {
        obj->~TransferBufferManagerEntry();
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4610      	mov	r0, r2
 801a98c:	4798      	blx	r3
        allocator.deallocate(obj);
 801a98e:	683b      	ldr	r3, [r7, #0]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	330c      	adds	r3, #12
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	687a      	ldr	r2, [r7, #4]
 801a998:	6812      	ldr	r2, [r2, #0]
 801a99a:	4611      	mov	r1, r2
 801a99c:	6838      	ldr	r0, [r7, #0]
 801a99e:	4798      	blx	r3
        obj = UAVCAN_NULLPTR;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	601a      	str	r2, [r3, #0]
    }
}
 801a9a6:	bf00      	nop
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}
	...

0801a9b0 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj>:

int TransferBufferManagerEntry::read(unsigned offset, uint8_t* data, unsigned len) const
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b08a      	sub	sp, #40	; 0x28
 801a9b4:	af02      	add	r7, sp, #8
 801a9b6:	60f8      	str	r0, [r7, #12]
 801a9b8:	60b9      	str	r1, [r7, #8]
 801a9ba:	607a      	str	r2, [r7, #4]
 801a9bc:	603b      	str	r3, [r7, #0]
    if (!data)
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d105      	bne.n	801a9d0 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0x20>
    {
        UAVCAN_ASSERT(0);
 801a9c4:	4b2d      	ldr	r3, [pc, #180]	; (801aa7c <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xcc>)
 801a9c6:	4a2e      	ldr	r2, [pc, #184]	; (801aa80 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd0>)
 801a9c8:	219b      	movs	r1, #155	; 0x9b
 801a9ca:	482e      	ldr	r0, [pc, #184]	; (801aa84 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd4>)
 801a9cc:	f005 fdde 	bl	802058c <__assert_func>
        return -ErrInvalidParam;
    }
    if (offset >= max_write_pos_)
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	8a1b      	ldrh	r3, [r3, #16]
 801a9d4:	461a      	mov	r2, r3
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	4293      	cmp	r3, r2
 801a9da:	d301      	bcc.n	801a9e0 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0x30>
    {
        return 0;
 801a9dc:	2300      	movs	r3, #0
 801a9de:	e048      	b.n	801aa72 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xc2>
    }
    if ((offset + len) > max_write_pos_)
 801a9e0:	68ba      	ldr	r2, [r7, #8]
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	4413      	add	r3, r2
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	8a12      	ldrh	r2, [r2, #16]
 801a9ea:	4293      	cmp	r3, r2
 801a9ec:	d905      	bls.n	801a9fa <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0x4a>
    {
        len = max_write_pos_ - offset;
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	8a1b      	ldrh	r3, [r3, #16]
 801a9f2:	461a      	mov	r2, r3
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	1ad3      	subs	r3, r2, r3
 801a9f8:	603b      	str	r3, [r7, #0]
    }
    UAVCAN_ASSERT((offset + len) <= max_write_pos_);
 801a9fa:	68ba      	ldr	r2, [r7, #8]
 801a9fc:	683b      	ldr	r3, [r7, #0]
 801a9fe:	4413      	add	r3, r2
 801aa00:	68fa      	ldr	r2, [r7, #12]
 801aa02:	8a12      	ldrh	r2, [r2, #16]
 801aa04:	4293      	cmp	r3, r2
 801aa06:	d905      	bls.n	801aa14 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0x64>
 801aa08:	4b1f      	ldr	r3, [pc, #124]	; (801aa88 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd8>)
 801aa0a:	4a1d      	ldr	r2, [pc, #116]	; (801aa80 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd0>)
 801aa0c:	21a6      	movs	r1, #166	; 0xa6
 801aa0e:	481d      	ldr	r0, [pc, #116]	; (801aa84 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd4>)
 801aa10:	f005 fdbc 	bl	802058c <__assert_func>

    // This shall be optimized.
    unsigned total_offset = 0;
 801aa14:	2300      	movs	r3, #0
 801aa16:	61bb      	str	r3, [r7, #24]
    unsigned left_to_read = len;
 801aa18:	683b      	ldr	r3, [r7, #0]
 801aa1a:	617b      	str	r3, [r7, #20]
    uint8_t* outptr = data;
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	613b      	str	r3, [r7, #16]
    Block* p = blocks_.get();
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	330c      	adds	r3, #12
 801aa24:	4618      	mov	r0, r3
 801aa26:	f000 fae3 	bl	801aff0 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE3getEv>
 801aa2a:	61f8      	str	r0, [r7, #28]
    while (p)
 801aa2c:	69fb      	ldr	r3, [r7, #28]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d015      	beq.n	801aa5e <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xae>
    {
        p->read(outptr, offset, total_offset, left_to_read);
 801aa32:	f107 0218 	add.w	r2, r7, #24
 801aa36:	f107 0110 	add.w	r1, r7, #16
 801aa3a:	f107 0314 	add.w	r3, r7, #20
 801aa3e:	9300      	str	r3, [sp, #0]
 801aa40:	4613      	mov	r3, r2
 801aa42:	68ba      	ldr	r2, [r7, #8]
 801aa44:	69f8      	ldr	r0, [r7, #28]
 801aa46:	f7ff fee3 	bl	801a810 <_ZN6uavcan26TransferBufferManagerEntry5Block4readERPhjRjS4_>
        if (left_to_read == 0)
 801aa4a:	697b      	ldr	r3, [r7, #20]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d005      	beq.n	801aa5c <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xac>
        {
            break;
        }
        p = p->getNextListNode();
 801aa50:	69fb      	ldr	r3, [r7, #28]
 801aa52:	4618      	mov	r0, r3
 801aa54:	f000 fad8 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801aa58:	61f8      	str	r0, [r7, #28]
    while (p)
 801aa5a:	e7e7      	b.n	801aa2c <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0x7c>
            break;
 801aa5c:	bf00      	nop
    }

    UAVCAN_ASSERT(left_to_read == 0);
 801aa5e:	697b      	ldr	r3, [r7, #20]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d005      	beq.n	801aa70 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xc0>
 801aa64:	4b09      	ldr	r3, [pc, #36]	; (801aa8c <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xdc>)
 801aa66:	4a06      	ldr	r2, [pc, #24]	; (801aa80 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd0>)
 801aa68:	21b7      	movs	r1, #183	; 0xb7
 801aa6a:	4806      	ldr	r0, [pc, #24]	; (801aa84 <_ZNK6uavcan26TransferBufferManagerEntry4readEjPhj+0xd4>)
 801aa6c:	f005 fd8e 	bl	802058c <__assert_func>
    return int(len);
 801aa70:	683b      	ldr	r3, [r7, #0]
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	3720      	adds	r7, #32
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	08023f8c 	.word	0x08023f8c
 801aa80:	0802bac4 	.word	0x0802bac4
 801aa84:	08023f90 	.word	0x08023f90
 801aa88:	08024014 	.word	0x08024014
 801aa8c:	08024060 	.word	0x08024060

0801aa90 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj>:

int TransferBufferManagerEntry::write(unsigned offset, const uint8_t* data, unsigned len)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b08e      	sub	sp, #56	; 0x38
 801aa94:	af02      	add	r7, sp, #8
 801aa96:	60f8      	str	r0, [r7, #12]
 801aa98:	60b9      	str	r1, [r7, #8]
 801aa9a:	607a      	str	r2, [r7, #4]
 801aa9c:	603b      	str	r3, [r7, #0]
    if (!data)
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d105      	bne.n	801aab0 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x20>
    {
        UAVCAN_ASSERT(0);
 801aaa4:	4b5f      	ldr	r3, [pc, #380]	; (801ac24 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x194>)
 801aaa6:	4a60      	ldr	r2, [pc, #384]	; (801ac28 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x198>)
 801aaa8:	21bf      	movs	r1, #191	; 0xbf
 801aaaa:	4860      	ldr	r0, [pc, #384]	; (801ac2c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x19c>)
 801aaac:	f005 fd6e 	bl	802058c <__assert_func>
        return -ErrInvalidParam;
    }

    if (offset >= max_size_)
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	8a5b      	ldrh	r3, [r3, #18]
 801aab4:	461a      	mov	r2, r3
 801aab6:	68bb      	ldr	r3, [r7, #8]
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d301      	bcc.n	801aac0 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x30>
    {
        return 0;
 801aabc:	2300      	movs	r3, #0
 801aabe:	e0ad      	b.n	801ac1c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x18c>
    }
    if ((offset + len) > max_size_)
 801aac0:	68ba      	ldr	r2, [r7, #8]
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	4413      	add	r3, r2
 801aac6:	68fa      	ldr	r2, [r7, #12]
 801aac8:	8a52      	ldrh	r2, [r2, #18]
 801aaca:	4293      	cmp	r3, r2
 801aacc:	d905      	bls.n	801aada <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x4a>
    {
        len = max_size_ - offset;
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	8a5b      	ldrh	r3, [r3, #18]
 801aad2:	461a      	mov	r2, r3
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	1ad3      	subs	r3, r2, r3
 801aad8:	603b      	str	r3, [r7, #0]
    }
    UAVCAN_ASSERT((offset + len) <= max_size_);
 801aada:	68ba      	ldr	r2, [r7, #8]
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	4413      	add	r3, r2
 801aae0:	68fa      	ldr	r2, [r7, #12]
 801aae2:	8a52      	ldrh	r2, [r2, #18]
 801aae4:	4293      	cmp	r3, r2
 801aae6:	d905      	bls.n	801aaf4 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x64>
 801aae8:	4b51      	ldr	r3, [pc, #324]	; (801ac30 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x1a0>)
 801aaea:	4a4f      	ldr	r2, [pc, #316]	; (801ac28 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x198>)
 801aaec:	21cb      	movs	r1, #203	; 0xcb
 801aaee:	484f      	ldr	r0, [pc, #316]	; (801ac2c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x19c>)
 801aaf0:	f005 fd4c 	bl	802058c <__assert_func>

    unsigned total_offset = 0;
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	61bb      	str	r3, [r7, #24]
    unsigned left_to_write = len;
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	617b      	str	r3, [r7, #20]
    const uint8_t* inptr = data;
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	613b      	str	r3, [r7, #16]
    Block* p = blocks_.get();
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	330c      	adds	r3, #12
 801ab04:	4618      	mov	r0, r3
 801ab06:	f000 fa73 	bl	801aff0 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE3getEv>
 801ab0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    Block* last_written_block = UAVCAN_NULLPTR;
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	62bb      	str	r3, [r7, #40]	; 0x28

    // First we need to write the part that is already allocated
    while (p)
 801ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d017      	beq.n	801ab46 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0xb6>
    {
        last_written_block = p;
 801ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab18:	62bb      	str	r3, [r7, #40]	; 0x28
        p->write(inptr, offset, total_offset, left_to_write);
 801ab1a:	f107 0218 	add.w	r2, r7, #24
 801ab1e:	f107 0110 	add.w	r1, r7, #16
 801ab22:	f107 0314 	add.w	r3, r7, #20
 801ab26:	9300      	str	r3, [sp, #0]
 801ab28:	4613      	mov	r3, r2
 801ab2a:	68ba      	ldr	r2, [r7, #8]
 801ab2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ab2e:	f7ff feb1 	bl	801a894 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_>
        if (left_to_write == 0)
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d005      	beq.n	801ab44 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0xb4>
        {
            break;
        }
        p = p->getNextListNode();
 801ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	f000 fa64 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801ab40:	62f8      	str	r0, [r7, #44]	; 0x2c
    while (p)
 801ab42:	e7e5      	b.n	801ab10 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x80>
            break;
 801ab44:	bf00      	nop
    }

    // Then we need to append new chunks until all data is written
    while (left_to_write > 0)
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d042      	beq.n	801abd2 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x142>
    {
        // cppcheck-suppress nullPointer
        UAVCAN_ASSERT(p == UAVCAN_NULLPTR);
 801ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d005      	beq.n	801ab5e <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0xce>
 801ab52:	4b38      	ldr	r3, [pc, #224]	; (801ac34 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x1a4>)
 801ab54:	4a34      	ldr	r2, [pc, #208]	; (801ac28 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x198>)
 801ab56:	21e3      	movs	r1, #227	; 0xe3
 801ab58:	4834      	ldr	r0, [pc, #208]	; (801ac2c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x19c>)
 801ab5a:	f005 fd17 	bl	802058c <__assert_func>

        // Allocating the chunk
        Block* new_block = Block::instantiate(allocator_);
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	689b      	ldr	r3, [r3, #8]
 801ab62:	4618      	mov	r0, r3
 801ab64:	f7ff fe05 	bl	801a772 <_ZN6uavcan26TransferBufferManagerEntry5Block11instantiateERNS_14IPoolAllocatorE>
 801ab68:	6278      	str	r0, [r7, #36]	; 0x24
        if (new_block == UAVCAN_NULLPTR)
 801ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d02f      	beq.n	801abd0 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x140>
        {
            break;                        // We're in deep shit.
        }
        // Appending the chain with the new block
        if (last_written_block != UAVCAN_NULLPTR)
 801ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d017      	beq.n	801aba6 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x116>
        {
            UAVCAN_ASSERT(last_written_block->getNextListNode() == UAVCAN_NULLPTR);  // Because it is last in the chain
 801ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab78:	4618      	mov	r0, r3
 801ab7a:	f000 fa45 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801ab7e:	4603      	mov	r3, r0
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d005      	beq.n	801ab90 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x100>
 801ab84:	4b2c      	ldr	r3, [pc, #176]	; (801ac38 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x1a8>)
 801ab86:	4a28      	ldr	r2, [pc, #160]	; (801ac28 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x198>)
 801ab88:	21ee      	movs	r1, #238	; 0xee
 801ab8a:	4828      	ldr	r0, [pc, #160]	; (801ac2c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x19c>)
 801ab8c:	f005 fcfe 	bl	802058c <__assert_func>
            last_written_block->setNextListNode(new_block);
 801ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ab94:	4618      	mov	r0, r3
 801ab96:	f000 fa43 	bl	801b020 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15setNextListNodeEPS2_>
            new_block->setNextListNode(UAVCAN_NULLPTR);
 801ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab9c:	2100      	movs	r1, #0
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f000 fa3e 	bl	801b020 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15setNextListNodeEPS2_>
 801aba4:	e005      	b.n	801abb2 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x122>
        }
        else
        {
            blocks_.insert(new_block);
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	330c      	adds	r3, #12
 801abaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801abac:	4618      	mov	r0, r3
 801abae:	f000 fa45 	bl	801b03c <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6insertEPS2_>
        }
        last_written_block = new_block;
 801abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abb4:	62bb      	str	r3, [r7, #40]	; 0x28

        // Writing the data
        new_block->write(inptr, offset, total_offset, left_to_write);
 801abb6:	f107 0218 	add.w	r2, r7, #24
 801abba:	f107 0110 	add.w	r1, r7, #16
 801abbe:	f107 0314 	add.w	r3, r7, #20
 801abc2:	9300      	str	r3, [sp, #0]
 801abc4:	4613      	mov	r3, r2
 801abc6:	68ba      	ldr	r2, [r7, #8]
 801abc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abca:	f7ff fe63 	bl	801a894 <_ZN6uavcan26TransferBufferManagerEntry5Block5writeERPKhjRjS5_>
    while (left_to_write > 0)
 801abce:	e7ba      	b.n	801ab46 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0xb6>
            break;                        // We're in deep shit.
 801abd0:	bf00      	nop
    }

    UAVCAN_ASSERT(len >= left_to_write);
 801abd2:	697b      	ldr	r3, [r7, #20]
 801abd4:	683a      	ldr	r2, [r7, #0]
 801abd6:	429a      	cmp	r2, r3
 801abd8:	d205      	bcs.n	801abe6 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x156>
 801abda:	4b18      	ldr	r3, [pc, #96]	; (801ac3c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x1ac>)
 801abdc:	4a12      	ldr	r2, [pc, #72]	; (801ac28 <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x198>)
 801abde:	21fc      	movs	r1, #252	; 0xfc
 801abe0:	4812      	ldr	r0, [pc, #72]	; (801ac2c <_ZN6uavcan26TransferBufferManagerEntry5writeEjPKhj+0x19c>)
 801abe2:	f005 fcd3 	bl	802058c <__assert_func>
    const unsigned actually_written = len - left_to_write;
 801abe6:	697b      	ldr	r3, [r7, #20]
 801abe8:	683a      	ldr	r2, [r7, #0]
 801abea:	1ad3      	subs	r3, r2, r3
 801abec:	623b      	str	r3, [r7, #32]
    max_write_pos_ = max(uint16_t(offset + actually_written), uint16_t(max_write_pos_));
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	b29a      	uxth	r2, r3
 801abf2:	6a3b      	ldr	r3, [r7, #32]
 801abf4:	b29b      	uxth	r3, r3
 801abf6:	4413      	add	r3, r2
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	83bb      	strh	r3, [r7, #28]
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	8a1b      	ldrh	r3, [r3, #16]
 801ac00:	83fb      	strh	r3, [r7, #30]
 801ac02:	f107 021e 	add.w	r2, r7, #30
 801ac06:	f107 031c 	add.w	r3, r7, #28
 801ac0a:	4611      	mov	r1, r2
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f000 f9c0 	bl	801af92 <_ZN6uavcan3maxItEERKT_S3_S3_>
 801ac12:	4603      	mov	r3, r0
 801ac14:	881a      	ldrh	r2, [r3, #0]
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	821a      	strh	r2, [r3, #16]
    return int(actually_written);
 801ac1a:	6a3b      	ldr	r3, [r7, #32]
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3730      	adds	r7, #48	; 0x30
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	08023f8c 	.word	0x08023f8c
 801ac28:	0802bb30 	.word	0x0802bb30
 801ac2c:	08023f90 	.word	0x08023f90
 801ac30:	08024074 	.word	0x08024074
 801ac34:	08024090 	.word	0x08024090
 801ac38:	080240a0 	.word	0x080240a0
 801ac3c:	080240d4 	.word	0x080240d4

0801ac40 <_ZN6uavcan26TransferBufferManagerEntry5resetERKNS_24TransferBufferManagerKeyE>:

void TransferBufferManagerEntry::reset(const TransferBufferManagerKey& key)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b084      	sub	sp, #16
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
 801ac48:	6039      	str	r1, [r7, #0]
    key_ = key;
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	683a      	ldr	r2, [r7, #0]
 801ac4e:	3314      	adds	r3, #20
 801ac50:	8812      	ldrh	r2, [r2, #0]
 801ac52:	801a      	strh	r2, [r3, #0]
    max_write_pos_ = 0;
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	2200      	movs	r2, #0
 801ac58:	821a      	strh	r2, [r3, #16]
    Block* p = blocks_.get();
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	330c      	adds	r3, #12
 801ac5e:	4618      	mov	r0, r3
 801ac60:	f000 f9c6 	bl	801aff0 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE3getEv>
 801ac64:	4603      	mov	r3, r0
 801ac66:	60bb      	str	r3, [r7, #8]
    while (p)
 801ac68:	68bb      	ldr	r3, [r7, #8]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d016      	beq.n	801ac9c <_ZN6uavcan26TransferBufferManagerEntry5resetERKNS_24TransferBufferManagerKeyE+0x5c>
    {
        Block* const next = p->getNextListNode();
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	4618      	mov	r0, r3
 801ac72:	f000 f9c9 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801ac76:	60f8      	str	r0, [r7, #12]
        blocks_.remove(p);
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	330c      	adds	r3, #12
 801ac7c:	68ba      	ldr	r2, [r7, #8]
 801ac7e:	4611      	mov	r1, r2
 801ac80:	4618      	mov	r0, r3
 801ac82:	f000 fa01 	bl	801b088 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_>
        Block::destroy(p, allocator_);
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	689a      	ldr	r2, [r3, #8]
 801ac8a:	f107 0308 	add.w	r3, r7, #8
 801ac8e:	4611      	mov	r1, r2
 801ac90:	4618      	mov	r0, r3
 801ac92:	f7ff fd9e 	bl	801a7d2 <_ZN6uavcan26TransferBufferManagerEntry5Block7destroyERPS1_RNS_14IPoolAllocatorE>
        p = next;
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	60bb      	str	r3, [r7, #8]
    while (p)
 801ac9a:	e7e5      	b.n	801ac68 <_ZN6uavcan26TransferBufferManagerEntry5resetERKNS_24TransferBufferManagerKeyE+0x28>
    }
}
 801ac9c:	bf00      	nop
 801ac9e:	3710      	adds	r7, #16
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bd80      	pop	{r7, pc}

0801aca4 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE>:

/*
 * TransferBufferManager
 */
TransferBufferManagerEntry* TransferBufferManager::findFirst(const TransferBufferManagerKey& key)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b084      	sub	sp, #16
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	6039      	str	r1, [r7, #0]
    TransferBufferManagerEntry* dyn = buffers_.get();
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	3304      	adds	r3, #4
 801acb2:	4618      	mov	r0, r3
 801acb4:	f000 fa37 	bl	801b126 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE3getEv>
 801acb8:	60f8      	str	r0, [r7, #12]
    while (dyn)
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d023      	beq.n	801ad08 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x64>
    {
        UAVCAN_ASSERT(!dyn->isEmpty());
 801acc0:	68f8      	ldr	r0, [r7, #12]
 801acc2:	f7ff fc81 	bl	801a5c8 <_ZNK6uavcan26TransferBufferManagerEntry7isEmptyEv>
 801acc6:	4603      	mov	r3, r0
 801acc8:	f083 0301 	eor.w	r3, r3, #1
 801accc:	b2db      	uxtb	r3, r3
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d106      	bne.n	801ace0 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x3c>
 801acd2:	4b10      	ldr	r3, [pc, #64]	; (801ad14 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x70>)
 801acd4:	4a10      	ldr	r2, [pc, #64]	; (801ad18 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x74>)
 801acd6:	f44f 718c 	mov.w	r1, #280	; 0x118
 801acda:	4810      	ldr	r0, [pc, #64]	; (801ad1c <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x78>)
 801acdc:	f005 fc56 	bl	802058c <__assert_func>
        if (dyn->getKey() == key)
 801ace0:	68f8      	ldr	r0, [r7, #12]
 801ace2:	f7ff fc65 	bl	801a5b0 <_ZNK6uavcan26TransferBufferManagerEntry6getKeyEv>
 801ace6:	4603      	mov	r3, r0
 801ace8:	6839      	ldr	r1, [r7, #0]
 801acea:	4618      	mov	r0, r3
 801acec:	f7eb faa0 	bl	8006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>
 801acf0:	4603      	mov	r3, r0
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d001      	beq.n	801acfa <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x56>
        {
            return dyn;
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	e007      	b.n	801ad0a <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x66>
        }
        dyn = dyn->getNextListNode();
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	3304      	adds	r3, #4
 801acfe:	4618      	mov	r0, r3
 801ad00:	f000 fa1d 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801ad04:	60f8      	str	r0, [r7, #12]
    while (dyn)
 801ad06:	e7d8      	b.n	801acba <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE+0x16>
    }
    return UAVCAN_NULLPTR;
 801ad08:	2300      	movs	r3, #0
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	3710      	adds	r7, #16
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}
 801ad12:	bf00      	nop
 801ad14:	080240ec 	.word	0x080240ec
 801ad18:	0802bbf4 	.word	0x0802bbf4
 801ad1c:	08023f90 	.word	0x08023f90

0801ad20 <_ZN6uavcan21TransferBufferManagerD1Ev>:

TransferBufferManager::~TransferBufferManager()
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
{
    TransferBufferManagerEntry* dyn = buffers_.get();
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	3304      	adds	r3, #4
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	f000 f9fa 	bl	801b126 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE3getEv>
 801ad32:	4603      	mov	r3, r0
 801ad34:	60bb      	str	r3, [r7, #8]
    while (dyn)
 801ad36:	68bb      	ldr	r3, [r7, #8]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d017      	beq.n	801ad6c <_ZN6uavcan21TransferBufferManagerD1Ev+0x4c>
    {
        TransferBufferManagerEntry* const next = dyn->getNextListNode();
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	3304      	adds	r3, #4
 801ad40:	4618      	mov	r0, r3
 801ad42:	f000 f9fc 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801ad46:	60f8      	str	r0, [r7, #12]
        buffers_.remove(dyn);
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	3304      	adds	r3, #4
 801ad4c:	68ba      	ldr	r2, [r7, #8]
 801ad4e:	4611      	mov	r1, r2
 801ad50:	4618      	mov	r0, r3
 801ad52:	f000 fa00 	bl	801b156 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_>
        TransferBufferManagerEntry::destroy(dyn, allocator_);
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	689a      	ldr	r2, [r3, #8]
 801ad5a:	f107 0308 	add.w	r3, r7, #8
 801ad5e:	4611      	mov	r1, r2
 801ad60:	4618      	mov	r0, r3
 801ad62:	f7ff fe03 	bl	801a96c <_ZN6uavcan26TransferBufferManagerEntry7destroyERPS0_RNS_14IPoolAllocatorE>
        dyn = next;
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	60bb      	str	r3, [r7, #8]
    while (dyn)
 801ad6a:	e7e4      	b.n	801ad36 <_ZN6uavcan21TransferBufferManagerD1Ev+0x16>
TransferBufferManager::~TransferBufferManager()
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	3304      	adds	r3, #4
 801ad70:	4618      	mov	r0, r3
 801ad72:	f7ff fc37 	bl	801a5e4 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEED1Ev>
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	f7ea fe3c 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
    }
}
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	4618      	mov	r0, r3
 801ad80:	3710      	adds	r7, #16
 801ad82:	46bd      	mov	sp, r7
 801ad84:	bd80      	pop	{r7, pc}
	...

0801ad88 <_ZN6uavcan21TransferBufferManager6accessERKNS_24TransferBufferManagerKeyE>:

ITransferBuffer* TransferBufferManager::access(const TransferBufferManagerKey& key)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b082      	sub	sp, #8
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
 801ad90:	6039      	str	r1, [r7, #0]
    if (key.isEmpty())
 801ad92:	6838      	ldr	r0, [r7, #0]
 801ad94:	f7eb fa67 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 801ad98:	4603      	mov	r3, r0
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d006      	beq.n	801adac <_ZN6uavcan21TransferBufferManager6accessERKNS_24TransferBufferManagerKeyE+0x24>
    {
        UAVCAN_ASSERT(0);
 801ad9e:	4b08      	ldr	r3, [pc, #32]	; (801adc0 <_ZN6uavcan21TransferBufferManager6accessERKNS_24TransferBufferManagerKeyE+0x38>)
 801ada0:	4a08      	ldr	r2, [pc, #32]	; (801adc4 <_ZN6uavcan21TransferBufferManager6accessERKNS_24TransferBufferManagerKeyE+0x3c>)
 801ada2:	f44f 7199 	mov.w	r1, #306	; 0x132
 801ada6:	4808      	ldr	r0, [pc, #32]	; (801adc8 <_ZN6uavcan21TransferBufferManager6accessERKNS_24TransferBufferManagerKeyE+0x40>)
 801ada8:	f005 fbf0 	bl	802058c <__assert_func>
        return UAVCAN_NULLPTR;
    }
    return findFirst(key);
 801adac:	6839      	ldr	r1, [r7, #0]
 801adae:	6878      	ldr	r0, [r7, #4]
 801adb0:	f7ff ff78 	bl	801aca4 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE>
 801adb4:	4603      	mov	r3, r0
}
 801adb6:	4618      	mov	r0, r3
 801adb8:	3708      	adds	r7, #8
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}
 801adbe:	bf00      	nop
 801adc0:	08023f8c 	.word	0x08023f8c
 801adc4:	0802bc6c 	.word	0x0802bc6c
 801adc8:	08023f90 	.word	0x08023f90

0801adcc <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE>:

ITransferBuffer* TransferBufferManager::create(const TransferBufferManagerKey& key)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b084      	sub	sp, #16
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
 801add4:	6039      	str	r1, [r7, #0]
    if (key.isEmpty())
 801add6:	6838      	ldr	r0, [r7, #0]
 801add8:	f7eb fa45 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 801addc:	4603      	mov	r3, r0
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d006      	beq.n	801adf0 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x24>
    {
        UAVCAN_ASSERT(0);
 801ade2:	4b1c      	ldr	r3, [pc, #112]	; (801ae54 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x88>)
 801ade4:	4a1c      	ldr	r2, [pc, #112]	; (801ae58 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x8c>)
 801ade6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801adea:	481c      	ldr	r0, [pc, #112]	; (801ae5c <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x90>)
 801adec:	f005 fbce 	bl	802058c <__assert_func>
        return UAVCAN_NULLPTR;
    }
    remove(key);
 801adf0:	6839      	ldr	r1, [r7, #0]
 801adf2:	6878      	ldr	r0, [r7, #4]
 801adf4:	f000 f836 	bl	801ae64 <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE>

    TransferBufferManagerEntry* tbme = TransferBufferManagerEntry::instantiate(allocator_, max_buf_size_);
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	689a      	ldr	r2, [r3, #8]
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	899b      	ldrh	r3, [r3, #12]
 801ae00:	4619      	mov	r1, r3
 801ae02:	4610      	mov	r0, r2
 801ae04:	f7ff fd8a 	bl	801a91c <_ZN6uavcan26TransferBufferManagerEntry11instantiateERNS_14IPoolAllocatorEt>
 801ae08:	60f8      	str	r0, [r7, #12]
    if (tbme == UAVCAN_NULLPTR)
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d101      	bne.n	801ae14 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x48>
    {
        return UAVCAN_NULLPTR;     // Epic fail.
 801ae10:	2300      	movs	r3, #0
 801ae12:	e01a      	b.n	801ae4a <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x7e>
    }

    buffers_.insert(tbme);
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	3304      	adds	r3, #4
 801ae18:	68f9      	ldr	r1, [r7, #12]
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	f000 f9f2 	bl	801b204 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6insertEPS1_>

    UAVCAN_TRACE("TransferBufferManager", "Buffer created [num=%u], %s", getNumBuffers(), key.toString().c_str());

    if (tbme != UAVCAN_NULLPTR)
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d010      	beq.n	801ae48 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x7c>
    {
        UAVCAN_ASSERT(tbme->isEmpty());
 801ae26:	68f8      	ldr	r0, [r7, #12]
 801ae28:	f7ff fbce 	bl	801a5c8 <_ZNK6uavcan26TransferBufferManagerEntry7isEmptyEv>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d106      	bne.n	801ae40 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x74>
 801ae32:	4b0b      	ldr	r3, [pc, #44]	; (801ae60 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x94>)
 801ae34:	4a08      	ldr	r2, [pc, #32]	; (801ae58 <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x8c>)
 801ae36:	f240 114d 	movw	r1, #333	; 0x14d
 801ae3a:	4808      	ldr	r0, [pc, #32]	; (801ae5c <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE+0x90>)
 801ae3c:	f005 fba6 	bl	802058c <__assert_func>
        tbme->reset(key);
 801ae40:	6839      	ldr	r1, [r7, #0]
 801ae42:	68f8      	ldr	r0, [r7, #12]
 801ae44:	f7ff fefc 	bl	801ac40 <_ZN6uavcan26TransferBufferManagerEntry5resetERKNS_24TransferBufferManagerKeyE>
    }
    return tbme;
 801ae48:	68fb      	ldr	r3, [r7, #12]
}
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	3710      	adds	r7, #16
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	bd80      	pop	{r7, pc}
 801ae52:	bf00      	nop
 801ae54:	08023f8c 	.word	0x08023f8c
 801ae58:	0802bcd4 	.word	0x0802bcd4
 801ae5c:	08023f90 	.word	0x08023f90
 801ae60:	080240fc 	.word	0x080240fc

0801ae64 <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE>:

void TransferBufferManager::remove(const TransferBufferManagerKey& key)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b084      	sub	sp, #16
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	6078      	str	r0, [r7, #4]
 801ae6c:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!key.isEmpty());
 801ae6e:	6838      	ldr	r0, [r7, #0]
 801ae70:	f7eb f9f9 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 801ae74:	4603      	mov	r3, r0
 801ae76:	f083 0301 	eor.w	r3, r3, #1
 801ae7a:	b2db      	uxtb	r3, r3
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d106      	bne.n	801ae8e <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE+0x2a>
 801ae80:	4b11      	ldr	r3, [pc, #68]	; (801aec8 <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE+0x64>)
 801ae82:	4a12      	ldr	r2, [pc, #72]	; (801aecc <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE+0x68>)
 801ae84:	f240 1155 	movw	r1, #341	; 0x155
 801ae88:	4811      	ldr	r0, [pc, #68]	; (801aed0 <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE+0x6c>)
 801ae8a:	f005 fb7f 	bl	802058c <__assert_func>

    TransferBufferManagerEntry* dyn = findFirst(key);
 801ae8e:	6839      	ldr	r1, [r7, #0]
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7ff ff07 	bl	801aca4 <_ZN6uavcan21TransferBufferManager9findFirstERKNS_24TransferBufferManagerKeyE>
 801ae96:	4603      	mov	r3, r0
 801ae98:	60fb      	str	r3, [r7, #12]
    if (dyn != UAVCAN_NULLPTR)
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d00e      	beq.n	801aebe <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE+0x5a>
    {
        UAVCAN_TRACE("TransferBufferManager", "Buffer deleted, %s", key.toString().c_str());
        buffers_.remove(dyn);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	3304      	adds	r3, #4
 801aea4:	68fa      	ldr	r2, [r7, #12]
 801aea6:	4611      	mov	r1, r2
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f000 f954 	bl	801b156 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_>
        TransferBufferManagerEntry::destroy(dyn, allocator_);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	689a      	ldr	r2, [r3, #8]
 801aeb2:	f107 030c 	add.w	r3, r7, #12
 801aeb6:	4611      	mov	r1, r2
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f7ff fd57 	bl	801a96c <_ZN6uavcan26TransferBufferManagerEntry7destroyERPS0_RNS_14IPoolAllocatorE>
    }
}
 801aebe:	bf00      	nop
 801aec0:	3710      	adds	r7, #16
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	0802410c 	.word	0x0802410c
 801aecc:	0802bd98 	.word	0x0802bd98
 801aed0:	08023f90 	.word	0x08023f90

0801aed4 <_ZNK6uavcan21TransferBufferManager7isEmptyEv>:

bool TransferBufferManager::isEmpty() const
{
 801aed4:	b580      	push	{r7, lr}
 801aed6:	b082      	sub	sp, #8
 801aed8:	af00      	add	r7, sp, #0
 801aeda:	6078      	str	r0, [r7, #4]
    return getNumBuffers() == 0;
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	f000 f80a 	bl	801aef6 <_ZNK6uavcan21TransferBufferManager13getNumBuffersEv>
 801aee2:	4603      	mov	r3, r0
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	bf0c      	ite	eq
 801aee8:	2301      	moveq	r3, #1
 801aeea:	2300      	movne	r3, #0
 801aeec:	b2db      	uxtb	r3, r3
}
 801aeee:	4618      	mov	r0, r3
 801aef0:	3708      	adds	r7, #8
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}

0801aef6 <_ZNK6uavcan21TransferBufferManager13getNumBuffersEv>:

unsigned TransferBufferManager::getNumBuffers() const
{
 801aef6:	b580      	push	{r7, lr}
 801aef8:	b082      	sub	sp, #8
 801aefa:	af00      	add	r7, sp, #0
 801aefc:	6078      	str	r0, [r7, #4]
    return buffers_.getLength();
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	3304      	adds	r3, #4
 801af02:	4618      	mov	r0, r3
 801af04:	f000 f9a6 	bl	801b254 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE9getLengthEv>
 801af08:	4603      	mov	r3, r0
}
 801af0a:	4618      	mov	r0, r3
 801af0c:	3708      	adds	r7, #8
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}

0801af12 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEEC1Ev>:
    LinkedListNode()
 801af12:	b580      	push	{r7, lr}
 801af14:	b082      	sub	sp, #8
 801af16:	af00      	add	r7, sp, #0
 801af18:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 801af1a:	6878      	ldr	r0, [r7, #4]
 801af1c:	f7ea fd5f 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	2200      	movs	r2, #0
 801af24:	601a      	str	r2, [r3, #0]
    { }
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	4618      	mov	r0, r3
 801af2a:	3708      	adds	r7, #8
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}

0801af30 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEED1Ev>:
    ~LinkedListNode() { }
 801af30:	b580      	push	{r7, lr}
 801af32:	b082      	sub	sp, #8
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6878      	ldr	r0, [r7, #4]
 801af3a:	f7ea fd5b 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	4618      	mov	r0, r3
 801af42:	3708      	adds	r7, #8
 801af44:	46bd      	mov	sp, r7
 801af46:	bd80      	pop	{r7, pc}

0801af48 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEEC1Ev>:
    LinkedListRoot()
 801af48:	b580      	push	{r7, lr}
 801af4a:	b082      	sub	sp, #8
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
        : root_(UAVCAN_NULLPTR)
 801af50:	6878      	ldr	r0, [r7, #4]
 801af52:	f7ea fd44 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	2200      	movs	r2, #0
 801af5a:	601a      	str	r2, [r3, #0]
    { }
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	4618      	mov	r0, r3
 801af60:	3708      	adds	r7, #8
 801af62:	46bd      	mov	sp, r7
 801af64:	bd80      	pop	{r7, pc}

0801af66 <_ZN6uavcan24IsDynamicallyAllocatableINS_26TransferBufferManagerEntry5BlockEE5checkEv>:
    static void check()
 801af66:	b480      	push	{r7}
 801af68:	b083      	sub	sp, #12
 801af6a:	af00      	add	r7, sp, #0
        char dummy[(sizeof(T) <= MemPoolBlockSize) ? 1 : -1] = { '0' };
 801af6c:	2330      	movs	r3, #48	; 0x30
 801af6e:	713b      	strb	r3, [r7, #4]
    }
 801af70:	bf00      	nop
 801af72:	370c      	adds	r7, #12
 801af74:	46bd      	mov	sp, r7
 801af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af7a:	4770      	bx	lr

0801af7c <_ZN6uavcan24IsDynamicallyAllocatableINS_26TransferBufferManagerEntryEE5checkEv>:
    static void check()
 801af7c:	b480      	push	{r7}
 801af7e:	b083      	sub	sp, #12
 801af80:	af00      	add	r7, sp, #0
        char dummy[(sizeof(T) <= MemPoolBlockSize) ? 1 : -1] = { '0' };
 801af82:	2330      	movs	r3, #48	; 0x30
 801af84:	713b      	strb	r3, [r7, #4]
    }
 801af86:	bf00      	nop
 801af88:	370c      	adds	r7, #12
 801af8a:	46bd      	mov	sp, r7
 801af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af90:	4770      	bx	lr

0801af92 <_ZN6uavcan3maxItEERKT_S3_S3_>:
const T& max(const T& a, const T& b)
 801af92:	b480      	push	{r7}
 801af94:	b083      	sub	sp, #12
 801af96:	af00      	add	r7, sp, #0
 801af98:	6078      	str	r0, [r7, #4]
 801af9a:	6039      	str	r1, [r7, #0]
    return (a < b) ? b : a;
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	881a      	ldrh	r2, [r3, #0]
 801afa0:	683b      	ldr	r3, [r7, #0]
 801afa2:	881b      	ldrh	r3, [r3, #0]
 801afa4:	429a      	cmp	r2, r3
 801afa6:	d201      	bcs.n	801afac <_ZN6uavcan3maxItEERKT_S3_S3_+0x1a>
 801afa8:	683b      	ldr	r3, [r7, #0]
 801afaa:	e000      	b.n	801afae <_ZN6uavcan3maxItEERKT_S3_S3_+0x1c>
 801afac:	687b      	ldr	r3, [r7, #4]
}
 801afae:	4618      	mov	r0, r3
 801afb0:	370c      	adds	r7, #12
 801afb2:	46bd      	mov	sp, r7
 801afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb8:	4770      	bx	lr

0801afba <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEEC1Ev>:
    LinkedListNode()
 801afba:	b580      	push	{r7, lr}
 801afbc:	b082      	sub	sp, #8
 801afbe:	af00      	add	r7, sp, #0
 801afc0:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 801afc2:	6878      	ldr	r0, [r7, #4]
 801afc4:	f7ea fd0b 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	2200      	movs	r2, #0
 801afcc:	601a      	str	r2, [r3, #0]
    { }
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	4618      	mov	r0, r3
 801afd2:	3708      	adds	r7, #8
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bd80      	pop	{r7, pc}

0801afd8 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEED1Ev>:
    ~LinkedListNode() { }
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
 801afe0:	6878      	ldr	r0, [r7, #4]
 801afe2:	f7ea fd07 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	4618      	mov	r0, r3
 801afea:	3708      	adds	r7, #8
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}

0801aff0 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE3getEv>:
    T* get() const { return root_; }
 801aff0:	b480      	push	{r7}
 801aff2:	b083      	sub	sp, #12
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	4618      	mov	r0, r3
 801affe:	370c      	adds	r7, #12
 801b000:	46bd      	mov	sp, r7
 801b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b006:	4770      	bx	lr

0801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 801b008:	b480      	push	{r7}
 801b00a:	b083      	sub	sp, #12
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	4618      	mov	r0, r3
 801b016:	370c      	adds	r7, #12
 801b018:	46bd      	mov	sp, r7
 801b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01e:	4770      	bx	lr

0801b020 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15setNextListNodeEPS2_>:
    void setNextListNode(T* node)
 801b020:	b480      	push	{r7}
 801b022:	b083      	sub	sp, #12
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
 801b028:	6039      	str	r1, [r7, #0]
        next_ = node;
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	683a      	ldr	r2, [r7, #0]
 801b02e:	601a      	str	r2, [r3, #0]
    }
 801b030:	bf00      	nop
 801b032:	370c      	adds	r7, #12
 801b034:	46bd      	mov	sp, r7
 801b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b03a:	4770      	bx	lr

0801b03c <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6insertEPS2_>:
void LinkedListRoot<T>::insert(T* node)
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b082      	sub	sp, #8
 801b040:	af00      	add	r7, sp, #0
 801b042:	6078      	str	r0, [r7, #4]
 801b044:	6039      	str	r1, [r7, #0]
    if (node == UAVCAN_NULLPTR)
 801b046:	683b      	ldr	r3, [r7, #0]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d105      	bne.n	801b058 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6insertEPS2_+0x1c>
        UAVCAN_ASSERT(0);
 801b04c:	4b0b      	ldr	r3, [pc, #44]	; (801b07c <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6insertEPS2_+0x40>)
 801b04e:	4a0c      	ldr	r2, [pc, #48]	; (801b080 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6insertEPS2_+0x44>)
 801b050:	216a      	movs	r1, #106	; 0x6a
 801b052:	480c      	ldr	r0, [pc, #48]	; (801b084 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6insertEPS2_+0x48>)
 801b054:	f005 fa9a 	bl	802058c <__assert_func>
    remove(node);  // Making sure there will be no loops
 801b058:	6839      	ldr	r1, [r7, #0]
 801b05a:	6878      	ldr	r0, [r7, #4]
 801b05c:	f000 f814 	bl	801b088 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_>
    node->setNextListNode(root_);
 801b060:	683a      	ldr	r2, [r7, #0]
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	4619      	mov	r1, r3
 801b068:	4610      	mov	r0, r2
 801b06a:	f7ff ffd9 	bl	801b020 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15setNextListNodeEPS2_>
    root_ = node;
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	683a      	ldr	r2, [r7, #0]
 801b072:	601a      	str	r2, [r3, #0]
}
 801b074:	bf00      	nop
 801b076:	3708      	adds	r7, #8
 801b078:	46bd      	mov	sp, r7
 801b07a:	bd80      	pop	{r7, pc}
 801b07c:	08023f8c 	.word	0x08023f8c
 801b080:	0802bb94 	.word	0x0802bb94
 801b084:	0802411c 	.word	0x0802411c

0801b088 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_>:
void LinkedListRoot<T>::remove(const T* node)
 801b088:	b590      	push	{r4, r7, lr}
 801b08a:	b085      	sub	sp, #20
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
 801b090:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d041      	beq.n	801b11e <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x96>
 801b09a:	683b      	ldr	r3, [r7, #0]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d03e      	beq.n	801b11e <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x96>
    if (root_ == node)
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	683a      	ldr	r2, [r7, #0]
 801b0a6:	429a      	cmp	r2, r3
 801b0a8:	d108      	bne.n	801b0bc <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x34>
        root_ = root_->getNextListNode();
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	f7ff ffaa 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801b0b4:	4602      	mov	r2, r0
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	601a      	str	r2, [r3, #0]
 801b0ba:	e031      	b.n	801b120 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x98>
        T* p = root_;
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	f7ff ff9f 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	bf14      	ite	ne
 801b0d0:	2301      	movne	r3, #1
 801b0d2:	2300      	moveq	r3, #0
 801b0d4:	b2db      	uxtb	r3, r3
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d022      	beq.n	801b120 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x98>
            if (p->getNextListNode() == node)
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7ff ff93 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801b0e2:	4602      	mov	r2, r0
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	4293      	cmp	r3, r2
 801b0e8:	bf0c      	ite	eq
 801b0ea:	2301      	moveq	r3, #1
 801b0ec:	2300      	movne	r3, #0
 801b0ee:	b2db      	uxtb	r3, r3
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d00e      	beq.n	801b112 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x8a>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 801b0f4:	68fc      	ldr	r4, [r7, #12]
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f7ff ff85 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801b0fe:	4603      	mov	r3, r0
 801b100:	4618      	mov	r0, r3
 801b102:	f7ff ff81 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801b106:	4603      	mov	r3, r0
 801b108:	4619      	mov	r1, r3
 801b10a:	4620      	mov	r0, r4
 801b10c:	f7ff ff88 	bl	801b020 <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15setNextListNodeEPS2_>
                break;
 801b110:	e006      	b.n	801b120 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x98>
            p = p->getNextListNode();
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	4618      	mov	r0, r3
 801b116:	f7ff ff77 	bl	801b008 <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntry5BlockEE15getNextListNodeEv>
 801b11a:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 801b11c:	e7d1      	b.n	801b0c2 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntry5BlockEE6removeEPKS2_+0x3a>
        return;
 801b11e:	bf00      	nop
}
 801b120:	3714      	adds	r7, #20
 801b122:	46bd      	mov	sp, r7
 801b124:	bd90      	pop	{r4, r7, pc}

0801b126 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE3getEv>:
    T* get() const { return root_; }
 801b126:	b480      	push	{r7}
 801b128:	b083      	sub	sp, #12
 801b12a:	af00      	add	r7, sp, #0
 801b12c:	6078      	str	r0, [r7, #4]
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	4618      	mov	r0, r3
 801b134:	370c      	adds	r7, #12
 801b136:	46bd      	mov	sp, r7
 801b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b13c:	4770      	bx	lr

0801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 801b13e:	b480      	push	{r7}
 801b140:	b083      	sub	sp, #12
 801b142:	af00      	add	r7, sp, #0
 801b144:	6078      	str	r0, [r7, #4]
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	4618      	mov	r0, r3
 801b14c:	370c      	adds	r7, #12
 801b14e:	46bd      	mov	sp, r7
 801b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b154:	4770      	bx	lr

0801b156 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_>:
void LinkedListRoot<T>::remove(const T* node)
 801b156:	b590      	push	{r4, r7, lr}
 801b158:	b085      	sub	sp, #20
 801b15a:	af00      	add	r7, sp, #0
 801b15c:	6078      	str	r0, [r7, #4]
 801b15e:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d048      	beq.n	801b1fa <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0xa4>
 801b168:	683b      	ldr	r3, [r7, #0]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d045      	beq.n	801b1fa <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0xa4>
    if (root_ == node)
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	683a      	ldr	r2, [r7, #0]
 801b174:	429a      	cmp	r2, r3
 801b176:	d109      	bne.n	801b18c <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0x36>
        root_ = root_->getNextListNode();
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	3304      	adds	r3, #4
 801b17e:	4618      	mov	r0, r3
 801b180:	f7ff ffdd 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b184:	4602      	mov	r2, r0
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	601a      	str	r2, [r3, #0]
 801b18a:	e037      	b.n	801b1fc <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0xa6>
        T* p = root_;
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	3304      	adds	r3, #4
 801b196:	4618      	mov	r0, r3
 801b198:	f7ff ffd1 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b19c:	4603      	mov	r3, r0
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	bf14      	ite	ne
 801b1a2:	2301      	movne	r3, #1
 801b1a4:	2300      	moveq	r3, #0
 801b1a6:	b2db      	uxtb	r3, r3
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d027      	beq.n	801b1fc <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0xa6>
            if (p->getNextListNode() == node)
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	3304      	adds	r3, #4
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f7ff ffc4 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b1b6:	4602      	mov	r2, r0
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	4293      	cmp	r3, r2
 801b1bc:	bf0c      	ite	eq
 801b1be:	2301      	moveq	r3, #1
 801b1c0:	2300      	movne	r3, #0
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d011      	beq.n	801b1ec <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0x96>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	1d1c      	adds	r4, r3, #4
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	3304      	adds	r3, #4
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7ff ffb4 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	3304      	adds	r3, #4
 801b1da:	4618      	mov	r0, r3
 801b1dc:	f7ff ffaf 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	4619      	mov	r1, r3
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	f000 f850 	bl	801b28a <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15setNextListNodeEPS1_>
                break;
 801b1ea:	e007      	b.n	801b1fc <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0xa6>
            p = p->getNextListNode();
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	3304      	adds	r3, #4
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f7ff ffa4 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b1f6:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 801b1f8:	e7cb      	b.n	801b192 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_+0x3c>
        return;
 801b1fa:	bf00      	nop
}
 801b1fc:	3714      	adds	r7, #20
 801b1fe:	46bd      	mov	sp, r7
 801b200:	bd90      	pop	{r4, r7, pc}
	...

0801b204 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6insertEPS1_>:
void LinkedListRoot<T>::insert(T* node)
 801b204:	b580      	push	{r7, lr}
 801b206:	b082      	sub	sp, #8
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
 801b20c:	6039      	str	r1, [r7, #0]
    if (node == UAVCAN_NULLPTR)
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d105      	bne.n	801b220 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6insertEPS1_+0x1c>
        UAVCAN_ASSERT(0);
 801b214:	4b0c      	ldr	r3, [pc, #48]	; (801b248 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6insertEPS1_+0x44>)
 801b216:	4a0d      	ldr	r2, [pc, #52]	; (801b24c <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6insertEPS1_+0x48>)
 801b218:	216a      	movs	r1, #106	; 0x6a
 801b21a:	480d      	ldr	r0, [pc, #52]	; (801b250 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6insertEPS1_+0x4c>)
 801b21c:	f005 f9b6 	bl	802058c <__assert_func>
    remove(node);  // Making sure there will be no loops
 801b220:	6839      	ldr	r1, [r7, #0]
 801b222:	6878      	ldr	r0, [r7, #4]
 801b224:	f7ff ff97 	bl	801b156 <_ZN6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE6removeEPKS1_>
    node->setNextListNode(root_);
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	1d1a      	adds	r2, r3, #4
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	4619      	mov	r1, r3
 801b232:	4610      	mov	r0, r2
 801b234:	f000 f829 	bl	801b28a <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15setNextListNodeEPS1_>
    root_ = node;
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	683a      	ldr	r2, [r7, #0]
 801b23c:	601a      	str	r2, [r3, #0]
}
 801b23e:	bf00      	nop
 801b240:	3708      	adds	r7, #8
 801b242:	46bd      	mov	sp, r7
 801b244:	bd80      	pop	{r7, pc}
 801b246:	bf00      	nop
 801b248:	08023f8c 	.word	0x08023f8c
 801b24c:	0802bd3c 	.word	0x0802bd3c
 801b250:	0802411c 	.word	0x0802411c

0801b254 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE9getLengthEv>:
unsigned LinkedListRoot<T>::getLength() const
 801b254:	b580      	push	{r7, lr}
 801b256:	b084      	sub	sp, #16
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
    T* node = root_;
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	60fb      	str	r3, [r7, #12]
    unsigned cnt = 0;
 801b262:	2300      	movs	r3, #0
 801b264:	60bb      	str	r3, [r7, #8]
    while (node)
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d009      	beq.n	801b280 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE9getLengthEv+0x2c>
        cnt++;
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	3301      	adds	r3, #1
 801b270:	60bb      	str	r3, [r7, #8]
        node = node->getNextListNode();
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	3304      	adds	r3, #4
 801b276:	4618      	mov	r0, r3
 801b278:	f7ff ff61 	bl	801b13e <_ZNK6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15getNextListNodeEv>
 801b27c:	60f8      	str	r0, [r7, #12]
    while (node)
 801b27e:	e7f2      	b.n	801b266 <_ZNK6uavcan14LinkedListRootINS_26TransferBufferManagerEntryEE9getLengthEv+0x12>
    return cnt;
 801b280:	68bb      	ldr	r3, [r7, #8]
}
 801b282:	4618      	mov	r0, r3
 801b284:	3710      	adds	r7, #16
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}

0801b28a <_ZN6uavcan14LinkedListNodeINS_26TransferBufferManagerEntryEE15setNextListNodeEPS1_>:
    void setNextListNode(T* node)
 801b28a:	b480      	push	{r7}
 801b28c:	b083      	sub	sp, #12
 801b28e:	af00      	add	r7, sp, #0
 801b290:	6078      	str	r0, [r7, #4]
 801b292:	6039      	str	r1, [r7, #0]
        next_ = node;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	683a      	ldr	r2, [r7, #0]
 801b298:	601a      	str	r2, [r3, #0]
    }
 801b29a:	bf00      	nop
 801b29c:	370c      	adds	r7, #12
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a4:	4770      	bx	lr

0801b2a6 <_ZNK6uavcan5Frame11getPriorityEv>:
    TransferPriority getPriority() const { return transfer_priority_; }
 801b2a6:	b480      	push	{r7}
 801b2a8:	b083      	sub	sp, #12
 801b2aa:	af00      	add	r7, sp, #0
 801b2ac:	6078      	str	r0, [r7, #4]
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	79db      	ldrb	r3, [r3, #7]
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	370c      	adds	r7, #12
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2bc:	4770      	bx	lr

0801b2be <_ZNK6uavcan5Frame13getPayloadLenEv>:
    unsigned getPayloadLen() const { return payload_len_; }
 801b2be:	b480      	push	{r7}
 801b2c0:	b083      	sub	sp, #12
 801b2c2:	af00      	add	r7, sp, #0
 801b2c4:	6078      	str	r0, [r7, #4]
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	691b      	ldr	r3, [r3, #16]
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	370c      	adds	r7, #12
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d4:	4770      	bx	lr

0801b2d6 <_ZNK6uavcan5Frame13getPayloadPtrEv>:
    const uint8_t* getPayloadPtr() const { return payload_; }
 801b2d6:	b480      	push	{r7}
 801b2d8:	b083      	sub	sp, #12
 801b2da:	af00      	add	r7, sp, #0
 801b2dc:	6078      	str	r0, [r7, #4]
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	370c      	adds	r7, #12
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ea:	4770      	bx	lr

0801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>:
    bool isStartOfTransfer() const { return start_of_transfer_; }
 801b2ec:	b480      	push	{r7}
 801b2ee:	b083      	sub	sp, #12
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	6078      	str	r0, [r7, #4]
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	7ddb      	ldrb	r3, [r3, #23]
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	370c      	adds	r7, #12
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b302:	4770      	bx	lr

0801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>:
    bool isEndOfTransfer()   const { return end_of_transfer_; }
 801b304:	b480      	push	{r7}
 801b306:	b083      	sub	sp, #12
 801b308:	af00      	add	r7, sp, #0
 801b30a:	6078      	str	r0, [r7, #4]
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	7e1b      	ldrb	r3, [r3, #24]
 801b310:	4618      	mov	r0, r3
 801b312:	370c      	adds	r7, #12
 801b314:	46bd      	mov	sp, r7
 801b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b31a:	4770      	bx	lr

0801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>:
    bool parse(const CanRxFrame& can_frame);

    /**
     * Can't be zero.
     */
    MonotonicTime getMonotonicTimestamp() const { return ts_mono_; }
 801b31c:	b480      	push	{r7}
 801b31e:	b083      	sub	sp, #12
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
 801b324:	6039      	str	r1, [r7, #0]
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	3320      	adds	r3, #32
 801b32c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b330:	e882 0003 	stmia.w	r2, {r0, r1}
 801b334:	6878      	ldr	r0, [r7, #4]
 801b336:	370c      	adds	r7, #12
 801b338:	46bd      	mov	sp, r7
 801b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33e:	4770      	bx	lr

0801b340 <_ZNK6uavcan7RxFrame15getUtcTimestampEv>:

    /**
     * Can be zero if not supported by the platform driver.
     */
    UtcTime getUtcTimestamp() const { return ts_utc_; }
 801b340:	b480      	push	{r7}
 801b342:	b083      	sub	sp, #12
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
 801b348:	6039      	str	r1, [r7, #0]
 801b34a:	687a      	ldr	r2, [r7, #4]
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	3328      	adds	r3, #40	; 0x28
 801b350:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b354:	e882 0003 	stmia.w	r2, {r0, r1}
 801b358:	6878      	ldr	r0, [r7, #4]
 801b35a:	370c      	adds	r7, #12
 801b35c:	46bd      	mov	sp, r7
 801b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b362:	4770      	bx	lr

0801b364 <_ZNK6uavcan7RxFrame13getIfaceIndexEv>:

    uint8_t getIfaceIndex() const { return iface_index_; }
 801b364:	b480      	push	{r7}
 801b366:	b083      	sub	sp, #12
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b372:	4618      	mov	r0, r3
 801b374:	370c      	adds	r7, #12
 801b376:	46bd      	mov	sp, r7
 801b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b37c:	4770      	bx	lr
	...

0801b380 <_ZN6uavcan24TransferBufferManagerKeyC1ENS_6NodeIDENS_12TransferTypeE>:
    TransferBufferManagerKey(NodeID node_id, TransferType ttype)
 801b380:	b580      	push	{r7, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
 801b388:	7039      	strb	r1, [r7, #0]
 801b38a:	4613      	mov	r3, r2
 801b38c:	70fb      	strb	r3, [r7, #3]
        , transfer_type_(ttype)
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	783a      	ldrb	r2, [r7, #0]
 801b392:	701a      	strb	r2, [r3, #0]
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	78fa      	ldrb	r2, [r7, #3]
 801b398:	705a      	strb	r2, [r3, #1]
        UAVCAN_ASSERT(!isEmpty());
 801b39a:	6878      	ldr	r0, [r7, #4]
 801b39c:	f7ea ff63 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 801b3a0:	4603      	mov	r3, r0
 801b3a2:	f083 0301 	eor.w	r3, r3, #1
 801b3a6:	b2db      	uxtb	r3, r3
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d105      	bne.n	801b3b8 <_ZN6uavcan24TransferBufferManagerKeyC1ENS_6NodeIDENS_12TransferTypeE+0x38>
 801b3ac:	4b05      	ldr	r3, [pc, #20]	; (801b3c4 <_ZN6uavcan24TransferBufferManagerKeyC1ENS_6NodeIDENS_12TransferTypeE+0x44>)
 801b3ae:	4a06      	ldr	r2, [pc, #24]	; (801b3c8 <_ZN6uavcan24TransferBufferManagerKeyC1ENS_6NodeIDENS_12TransferTypeE+0x48>)
 801b3b0:	214f      	movs	r1, #79	; 0x4f
 801b3b2:	4806      	ldr	r0, [pc, #24]	; (801b3cc <_ZN6uavcan24TransferBufferManagerKeyC1ENS_6NodeIDENS_12TransferTypeE+0x4c>)
 801b3b4:	f005 f8ea 	bl	802058c <__assert_func>
    }
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3708      	adds	r7, #8
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}
 801b3c2:	bf00      	nop
 801b3c4:	080241c0 	.word	0x080241c0
 801b3c8:	0802c100 	.word	0x0802c100
 801b3cc:	08024170 	.word	0x08024170

0801b3d0 <_ZN6uavcan22TransferBufferAccessorC1ERNS_21TransferBufferManagerENS_24TransferBufferManagerKeyE>:
{
    TransferBufferManager& bufmgr_;
    const TransferBufferManagerKey key_;

public:
    TransferBufferAccessor(TransferBufferManager& bufmgr, TransferBufferManagerKey key) :
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b084      	sub	sp, #16
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	60f8      	str	r0, [r7, #12]
 801b3d8:	60b9      	str	r1, [r7, #8]
 801b3da:	80ba      	strh	r2, [r7, #4]
        bufmgr_(bufmgr),
        key_(key)
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	68ba      	ldr	r2, [r7, #8]
 801b3e0:	601a      	str	r2, [r3, #0]
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	3304      	adds	r3, #4
 801b3e6:	461a      	mov	r2, r3
 801b3e8:	1d3b      	adds	r3, r7, #4
 801b3ea:	881b      	ldrh	r3, [r3, #0]
 801b3ec:	8013      	strh	r3, [r2, #0]
    {
        UAVCAN_ASSERT(!key.isEmpty());
 801b3ee:	1d3b      	adds	r3, r7, #4
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	f7ea ff38 	bl	8006266 <_ZNK6uavcan24TransferBufferManagerKey7isEmptyEv>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	f083 0301 	eor.w	r3, r3, #1
 801b3fc:	b2db      	uxtb	r3, r3
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d105      	bne.n	801b40e <_ZN6uavcan22TransferBufferAccessorC1ERNS_21TransferBufferManagerENS_24TransferBufferManagerKeyE+0x3e>
 801b402:	4b05      	ldr	r3, [pc, #20]	; (801b418 <_ZN6uavcan22TransferBufferAccessorC1ERNS_21TransferBufferManagerENS_24TransferBufferManagerKeyE+0x48>)
 801b404:	4a05      	ldr	r2, [pc, #20]	; (801b41c <_ZN6uavcan22TransferBufferAccessorC1ERNS_21TransferBufferManagerENS_24TransferBufferManagerKeyE+0x4c>)
 801b406:	21be      	movs	r1, #190	; 0xbe
 801b408:	4805      	ldr	r0, [pc, #20]	; (801b420 <_ZN6uavcan22TransferBufferAccessorC1ERNS_21TransferBufferManagerENS_24TransferBufferManagerKeyE+0x50>)
 801b40a:	f005 f8bf 	bl	802058c <__assert_func>
    }
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	4618      	mov	r0, r3
 801b412:	3710      	adds	r7, #16
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}
 801b418:	080241cc 	.word	0x080241cc
 801b41c:	0802c388 	.word	0x0802c388
 801b420:	08024170 	.word	0x08024170

0801b424 <_ZN6uavcan22TransferBufferAccessor6accessEv>:
    ITransferBuffer* access() { return bufmgr_.access(key_); }
 801b424:	b580      	push	{r7, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681a      	ldr	r2, [r3, #0]
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	3304      	adds	r3, #4
 801b434:	4619      	mov	r1, r3
 801b436:	4610      	mov	r0, r2
 801b438:	f7ff fca6 	bl	801ad88 <_ZN6uavcan21TransferBufferManager6accessERKNS_24TransferBufferManagerKeyE>
 801b43c:	4603      	mov	r3, r0
 801b43e:	4618      	mov	r0, r3
 801b440:	3708      	adds	r7, #8
 801b442:	46bd      	mov	sp, r7
 801b444:	bd80      	pop	{r7, pc}

0801b446 <_ZN6uavcan22TransferBufferAccessor6removeEv>:
    ITransferBuffer* create() { return bufmgr_.create(key_); }
    void remove() { bufmgr_.remove(key_); }
 801b446:	b580      	push	{r7, lr}
 801b448:	b082      	sub	sp, #8
 801b44a:	af00      	add	r7, sp, #0
 801b44c:	6078      	str	r0, [r7, #4]
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	681a      	ldr	r2, [r3, #0]
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	3304      	adds	r3, #4
 801b456:	4619      	mov	r1, r3
 801b458:	4610      	mov	r0, r2
 801b45a:	f7ff fd03 	bl	801ae64 <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE>
 801b45e:	bf00      	nop
 801b460:	3708      	adds	r7, #8
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}

0801b466 <_ZN6uavcan16TransferReceiverC1Ev>:
    bool validate(const RxFrame& frame) const;
    bool writePayload(const RxFrame& frame, ITransferBuffer& buf);
    ResultCode receive(const RxFrame& frame, TransferBufferAccessor& tba);

public:
    TransferReceiver() :
 801b466:	b580      	push	{r7, lr}
 801b468:	b082      	sub	sp, #8
 801b46a:	af00      	add	r7, sp, #0
 801b46c:	6078      	str	r0, [r7, #4]
        transfer_interval_msec_(DefaultTransferIntervalMSec),
        this_transfer_crc_(0),
        buffer_write_pos_(0),
        next_toggle_(false),
        iface_index_(IfaceIndexNotSet),
        error_cnt_(0)
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	4618      	mov	r0, r3
 801b472:	f7ea fe42 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	3308      	adds	r3, #8
 801b47a:	4618      	mov	r0, r3
 801b47c:	f7ea fe3d 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	3310      	adds	r3, #16
 801b484:	4618      	mov	r0, r3
 801b486:	f7fc ff2f 	bl	80182e8 <_ZN6uavcan7UtcTimeC1Ev>
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b490:	831a      	strh	r2, [r3, #24]
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	2200      	movs	r2, #0
 801b496:	835a      	strh	r2, [r3, #26]
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	2200      	movs	r2, #0
 801b49c:	839a      	strh	r2, [r3, #28]
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	331e      	adds	r3, #30
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	f7ea fb12 	bl	8005acc <_ZN6uavcan10TransferIDC1Ev>
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	7fd3      	ldrb	r3, [r2, #31]
 801b4ac:	f36f 0300 	bfc	r3, #0, #1
 801b4b0:	77d3      	strb	r3, [r2, #31]
 801b4b2:	687a      	ldr	r2, [r7, #4]
 801b4b4:	7fd3      	ldrb	r3, [r2, #31]
 801b4b6:	f043 0306 	orr.w	r3, r3, #6
 801b4ba:	77d3      	strb	r3, [r2, #31]
 801b4bc:	687a      	ldr	r2, [r7, #4]
 801b4be:	7fd3      	ldrb	r3, [r2, #31]
 801b4c0:	f36f 03c7 	bfc	r3, #3, #5
 801b4c4:	77d3      	strb	r3, [r2, #31]
    { }
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	4618      	mov	r0, r3
 801b4ca:	3708      	adds	r7, #8
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	bd80      	pop	{r7, pc}

0801b4d0 <_ZNK6uavcan16TransferReceiver33getLastTransferTimestampMonotonicEv>:

    ResultCode addFrame(const RxFrame& frame, TransferBufferAccessor& tba);

    uint8_t yieldErrorCount();

    MonotonicTime getLastTransferTimestampMonotonic() const { return prev_transfer_ts_; }
 801b4d0:	b480      	push	{r7}
 801b4d2:	b083      	sub	sp, #12
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
 801b4d8:	6039      	str	r1, [r7, #0]
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	683a      	ldr	r2, [r7, #0]
 801b4de:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b4e2:	e883 0003 	stmia.w	r3, {r0, r1}
 801b4e6:	6878      	ldr	r0, [r7, #4]
 801b4e8:	370c      	adds	r7, #12
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f0:	4770      	bx	lr

0801b4f2 <_ZNK6uavcan16TransferReceiver27getLastTransferTimestampUtcEv>:
    UtcTime getLastTransferTimestampUtc() const { return first_frame_ts_; }
 801b4f2:	b480      	push	{r7}
 801b4f4:	b083      	sub	sp, #12
 801b4f6:	af00      	add	r7, sp, #0
 801b4f8:	6078      	str	r0, [r7, #4]
 801b4fa:	6039      	str	r1, [r7, #0]
 801b4fc:	687a      	ldr	r2, [r7, #4]
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	3310      	adds	r3, #16
 801b502:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b506:	e882 0003 	stmia.w	r2, {r0, r1}
 801b50a:	6878      	ldr	r0, [r7, #4]
 801b50c:	370c      	adds	r7, #12
 801b50e:	46bd      	mov	sp, r7
 801b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b514:	4770      	bx	lr

0801b516 <_ZNK6uavcan16TransferReceiver18getLastTransferCrcEv>:

    uint16_t getLastTransferCrc() const { return this_transfer_crc_; }
 801b516:	b480      	push	{r7}
 801b518:	b083      	sub	sp, #12
 801b51a:	af00      	add	r7, sp, #0
 801b51c:	6078      	str	r0, [r7, #4]
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	8b5b      	ldrh	r3, [r3, #26]
 801b522:	4618      	mov	r0, r3
 801b524:	370c      	adds	r7, #12
 801b526:	46bd      	mov	sp, r7
 801b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52c:	4770      	bx	lr

0801b52e <_ZN6uavcan19TransferPerfCounter13addRxTransferEv>:
    void addRxTransfer() { transfers_rx_++; }
 801b52e:	b490      	push	{r4, r7}
 801b530:	b082      	sub	sp, #8
 801b532:	af00      	add	r7, sp, #0
 801b534:	6078      	str	r0, [r7, #4]
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801b53c:	1c4b      	adds	r3, r1, #1
 801b53e:	f142 0400 	adc.w	r4, r2, #0
 801b542:	687a      	ldr	r2, [r7, #4]
 801b544:	e9c2 3402 	strd	r3, r4, [r2, #8]
 801b548:	bf00      	nop
 801b54a:	3708      	adds	r7, #8
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bc90      	pop	{r4, r7}
 801b550:	4770      	bx	lr

0801b552 <_ZN6uavcan19TransferPerfCounter9addErrorsEj>:
    void addErrors(unsigned errors)
 801b552:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 801b556:	b083      	sub	sp, #12
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
 801b55c:	6039      	str	r1, [r7, #0]
        errors_ += errors;
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	469b      	mov	fp, r3
 801b568:	f04f 0c00 	mov.w	ip, #0
 801b56c:	eb1b 0301 	adds.w	r3, fp, r1
 801b570:	eb4c 0402 	adc.w	r4, ip, r2
 801b574:	687a      	ldr	r2, [r7, #4]
 801b576:	e9c2 3404 	strd	r3, r4, [r2, #16]
    }
 801b57a:	bf00      	nop
 801b57c:	370c      	adds	r7, #12
 801b57e:	46bd      	mov	sp, r7
 801b580:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 801b584:	4770      	bx	lr
	...

0801b588 <_ZN6uavcan16IncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeENS_16TransferPriorityENS_12TransferTypeENS_10TransferIDENS_6NodeIDEh>:
    IncomingTransfer(MonotonicTime ts_mono, UtcTime ts_utc, TransferPriority transfer_priority,
 801b588:	b580      	push	{r7, lr}
 801b58a:	b084      	sub	sp, #16
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	607a      	str	r2, [r7, #4]
 801b594:	703b      	strb	r3, [r7, #0]
        , iface_index_(iface_index)
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	4618      	mov	r0, r3
 801b59a:	f7ea fdf9 	bl	8006190 <_ZN6uavcan15ITransferBufferC1Ev>
 801b59e:	4a13      	ldr	r2, [pc, #76]	; (801b5ec <_ZN6uavcan16IncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeENS_16TransferPriorityENS_12TransferTypeENS_10TransferIDENS_6NodeIDEh+0x64>)
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	601a      	str	r2, [r3, #0]
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	68ba      	ldr	r2, [r7, #8]
 801b5a8:	3308      	adds	r3, #8
 801b5aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5ae:	e883 0003 	stmia.w	r3, {r0, r1}
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	687a      	ldr	r2, [r7, #4]
 801b5b6:	3310      	adds	r3, #16
 801b5b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5bc:	e883 0003 	stmia.w	r3, {r0, r1}
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	783a      	ldrb	r2, [r7, #0]
 801b5c4:	761a      	strb	r2, [r3, #24]
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	7e3a      	ldrb	r2, [r7, #24]
 801b5ca:	765a      	strb	r2, [r3, #25]
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	7f3a      	ldrb	r2, [r7, #28]
 801b5d0:	769a      	strb	r2, [r3, #26]
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 801b5d8:	76da      	strb	r2, [r3, #27]
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801b5e0:	771a      	strb	r2, [r3, #28]
    { }
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	3710      	adds	r7, #16
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd80      	pop	{r7, pc}
 801b5ec:	0802be64 	.word	0x0802be64

0801b5f0 <_ZN6uavcan16IncomingTransfer7releaseEv>:
    virtual void release() { }
 801b5f0:	b480      	push	{r7}
 801b5f2:	b083      	sub	sp, #12
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
 801b5f8:	bf00      	nop
 801b5fa:	370c      	adds	r7, #12
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b602:	4770      	bx	lr

0801b604 <_ZNK6uavcan16IncomingTransfer19isAnonymousTransferEv>:
    virtual bool isAnonymousTransfer() const { return false; }
 801b604:	b480      	push	{r7}
 801b606:	b083      	sub	sp, #12
 801b608:	af00      	add	r7, sp, #0
 801b60a:	6078      	str	r0, [r7, #4]
 801b60c:	2300      	movs	r3, #0
 801b60e:	4618      	mov	r0, r3
 801b610:	370c      	adds	r7, #12
 801b612:	46bd      	mov	sp, r7
 801b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b618:	4770      	bx	lr

0801b61a <_ZN6uavcan26MultiFrameIncomingTransfer7releaseEv>:
    virtual void release() { buf_acc_.remove(); }
 801b61a:	b580      	push	{r7, lr}
 801b61c:	b082      	sub	sp, #8
 801b61e:	af00      	add	r7, sp, #0
 801b620:	6078      	str	r0, [r7, #4]
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	6a1b      	ldr	r3, [r3, #32]
 801b626:	4618      	mov	r0, r3
 801b628:	f7ff ff0d 	bl	801b446 <_ZN6uavcan22TransferBufferAccessor6removeEv>
 801b62c:	bf00      	nop
 801b62e:	3708      	adds	r7, #8
 801b630:	46bd      	mov	sp, r7
 801b632:	bd80      	pop	{r7, pc}

0801b634 <_ZN6uavcan16TransferListener25TimedOutReceiverPredicateC1ENS_13MonotonicTimeERNS_21TransferBufferManagerE>:
        TimedOutReceiverPredicate(MonotonicTime arg_ts, TransferBufferManager& arg_bufmgr)
 801b634:	b480      	push	{r7}
 801b636:	b085      	sub	sp, #20
 801b638:	af00      	add	r7, sp, #0
 801b63a:	60f8      	str	r0, [r7, #12]
 801b63c:	60b9      	str	r1, [r7, #8]
 801b63e:	607a      	str	r2, [r7, #4]
            , parent_bufmgr_(arg_bufmgr)
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	68ba      	ldr	r2, [r7, #8]
 801b644:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b648:	e883 0003 	stmia.w	r3, {r0, r1}
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	687a      	ldr	r2, [r7, #4]
 801b650:	609a      	str	r2, [r3, #8]
        { }
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	4618      	mov	r0, r3
 801b656:	3714      	adds	r7, #20
 801b658:	46bd      	mov	sp, r7
 801b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65e:	4770      	bx	lr

0801b660 <_ZN6uavcan16IncomingTransfer5writeEjPKhj>:
{
/*
 * IncomingTransfer
 */
int IncomingTransfer::write(unsigned, const uint8_t*, unsigned)
{
 801b660:	b580      	push	{r7, lr}
 801b662:	b084      	sub	sp, #16
 801b664:	af00      	add	r7, sp, #0
 801b666:	60f8      	str	r0, [r7, #12]
 801b668:	60b9      	str	r1, [r7, #8]
 801b66a:	607a      	str	r2, [r7, #4]
 801b66c:	603b      	str	r3, [r7, #0]
    UAVCAN_ASSERT(0);  // Incoming transfer container is read-only
 801b66e:	4b03      	ldr	r3, [pc, #12]	; (801b67c <_ZN6uavcan16IncomingTransfer5writeEjPKhj+0x1c>)
 801b670:	4a03      	ldr	r2, [pc, #12]	; (801b680 <_ZN6uavcan16IncomingTransfer5writeEjPKhj+0x20>)
 801b672:	2111      	movs	r1, #17
 801b674:	4803      	ldr	r0, [pc, #12]	; (801b684 <_ZN6uavcan16IncomingTransfer5writeEjPKhj+0x24>)
 801b676:	f004 ff89 	bl	802058c <__assert_func>
 801b67a:	bf00      	nop
 801b67c:	08024228 	.word	0x08024228
 801b680:	0802be7c 	.word	0x0802be7c
 801b684:	0802422c 	.word	0x0802422c

0801b688 <_ZN6uavcan16IncomingTransferD1Ev>:
class UAVCAN_EXPORT IncomingTransfer : public ITransferBuffer
 801b688:	b580      	push	{r7, lr}
 801b68a:	b082      	sub	sp, #8
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
 801b690:	4a0a      	ldr	r2, [pc, #40]	; (801b6bc <_ZN6uavcan16IncomingTransferD1Ev+0x34>)
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	601a      	str	r2, [r3, #0]
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	3310      	adds	r3, #16
 801b69a:	4618      	mov	r0, r3
 801b69c:	f7fc fe31 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	3308      	adds	r3, #8
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	f7ea fd35 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7ea fbdf 	bl	8005e70 <_ZN6uavcan15ITransferBufferD1Ev>
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	3708      	adds	r7, #8
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	bd80      	pop	{r7, pc}
 801b6bc:	0802be64 	.word	0x0802be64

0801b6c0 <_ZN6uavcan16IncomingTransferD0Ev>:
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b082      	sub	sp, #8
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
 801b6c8:	6878      	ldr	r0, [r7, #4]
 801b6ca:	f7ff ffdd 	bl	801b688 <_ZN6uavcan16IncomingTransferD1Ev>
 801b6ce:	2120      	movs	r1, #32
 801b6d0:	6878      	ldr	r0, [r7, #4]
 801b6d2:	f004 ff3a 	bl	802054a <_ZdlPvj>
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	4618      	mov	r0, r3
 801b6da:	3708      	adds	r7, #8
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	bd80      	pop	{r7, pc}

0801b6e0 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE>:
}

/*
 * SingleFrameIncomingTransfer
 */
SingleFrameIncomingTransfer::SingleFrameIncomingTransfer(const RxFrame& frm)
 801b6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6e4:	b08b      	sub	sp, #44	; 0x2c
 801b6e6:	af04      	add	r7, sp, #16
 801b6e8:	6078      	str	r0, [r7, #4]
 801b6ea:	6039      	str	r1, [r7, #0]
    : IncomingTransfer(frm.getMonotonicTimestamp(), frm.getUtcTimestamp(), frm.getPriority(),
                       frm.getTransferType(), frm.getTransferID(), frm.getSrcNodeID(), frm.getIfaceIndex())
    , payload_(frm.getPayloadPtr())
    , payload_len_(uint8_t(frm.getPayloadLen()))
 801b6ec:	687c      	ldr	r4, [r7, #4]
    : IncomingTransfer(frm.getMonotonicTimestamp(), frm.getUtcTimestamp(), frm.getPriority(),
 801b6ee:	f107 0308 	add.w	r3, r7, #8
 801b6f2:	6839      	ldr	r1, [r7, #0]
 801b6f4:	4618      	mov	r0, r3
 801b6f6:	f7ff fe11 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
 801b6fa:	f107 0310 	add.w	r3, r7, #16
 801b6fe:	6839      	ldr	r1, [r7, #0]
 801b700:	4618      	mov	r0, r3
 801b702:	f7ff fe1d 	bl	801b340 <_ZNK6uavcan7RxFrame15getUtcTimestampEv>
    , payload_len_(uint8_t(frm.getPayloadLen()))
 801b706:	683b      	ldr	r3, [r7, #0]
 801b708:	4618      	mov	r0, r3
 801b70a:	f7ff fdcc 	bl	801b2a6 <_ZNK6uavcan5Frame11getPriorityEv>
 801b70e:	4681      	mov	r9, r0
 801b710:	683b      	ldr	r3, [r7, #0]
 801b712:	4618      	mov	r0, r3
 801b714:	f7ea fd18 	bl	8006148 <_ZNK6uavcan5Frame15getTransferTypeEv>
 801b718:	4603      	mov	r3, r0
 801b71a:	461d      	mov	r5, r3
 801b71c:	683b      	ldr	r3, [r7, #0]
 801b71e:	4618      	mov	r0, r3
 801b720:	f7ea fd2a 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801b724:	4606      	mov	r6, r0
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	4618      	mov	r0, r3
 801b72a:	f7ea fd19 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801b72e:	4680      	mov	r8, r0
 801b730:	6838      	ldr	r0, [r7, #0]
 801b732:	f7ff fe17 	bl	801b364 <_ZNK6uavcan7RxFrame13getIfaceIndexEv>
 801b736:	4603      	mov	r3, r0
 801b738:	f107 0210 	add.w	r2, r7, #16
 801b73c:	f107 0108 	add.w	r1, r7, #8
 801b740:	9303      	str	r3, [sp, #12]
 801b742:	f88d 8008 	strb.w	r8, [sp, #8]
 801b746:	f88d 6004 	strb.w	r6, [sp, #4]
 801b74a:	9500      	str	r5, [sp, #0]
 801b74c:	464b      	mov	r3, r9
 801b74e:	4620      	mov	r0, r4
 801b750:	f7ff ff1a 	bl	801b588 <_ZN6uavcan16IncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeENS_16TransferPriorityENS_12TransferTypeENS_10TransferIDENS_6NodeIDEh>
    : IncomingTransfer(frm.getMonotonicTimestamp(), frm.getUtcTimestamp(), frm.getPriority(),
 801b754:	f107 0310 	add.w	r3, r7, #16
 801b758:	4618      	mov	r0, r3
 801b75a:	f7fc fdd2 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 801b75e:	f107 0308 	add.w	r3, r7, #8
 801b762:	4618      	mov	r0, r3
 801b764:	f7ea fcd6 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    , payload_len_(uint8_t(frm.getPayloadLen()))
 801b768:	4a12      	ldr	r2, [pc, #72]	; (801b7b4 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE+0xd4>)
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	601a      	str	r2, [r3, #0]
    , payload_(frm.getPayloadPtr())
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	4618      	mov	r0, r3
 801b772:	f7ff fdb0 	bl	801b2d6 <_ZNK6uavcan5Frame13getPayloadPtrEv>
 801b776:	4602      	mov	r2, r0
    , payload_len_(uint8_t(frm.getPayloadLen()))
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	621a      	str	r2, [r3, #32]
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	4618      	mov	r0, r3
 801b780:	f7ff fd9d 	bl	801b2be <_ZNK6uavcan5Frame13getPayloadLenEv>
 801b784:	4603      	mov	r3, r0
 801b786:	b2da      	uxtb	r2, r3
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
    UAVCAN_ASSERT(frm.isValid());
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	4618      	mov	r0, r3
 801b792:	f7fd ff5d 	bl	8019650 <_ZNK6uavcan5Frame7isValidEv>
 801b796:	4603      	mov	r3, r0
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d105      	bne.n	801b7a8 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE+0xc8>
 801b79c:	4b06      	ldr	r3, [pc, #24]	; (801b7b8 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE+0xd8>)
 801b79e:	4a07      	ldr	r2, [pc, #28]	; (801b7bc <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE+0xdc>)
 801b7a0:	211e      	movs	r1, #30
 801b7a2:	4807      	ldr	r0, [pc, #28]	; (801b7c0 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE+0xe0>)
 801b7a4:	f004 fef2 	bl	802058c <__assert_func>
}
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	371c      	adds	r7, #28
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7b4:	0802be44 	.word	0x0802be44
 801b7b8:	080242b0 	.word	0x080242b0
 801b7bc:	0802bed4 	.word	0x0802bed4
 801b7c0:	0802422c 	.word	0x0802422c

0801b7c4 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj>:

int SingleFrameIncomingTransfer::read(unsigned offset, uint8_t* data, unsigned len) const
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b084      	sub	sp, #16
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	60f8      	str	r0, [r7, #12]
 801b7cc:	60b9      	str	r1, [r7, #8]
 801b7ce:	607a      	str	r2, [r7, #4]
 801b7d0:	603b      	str	r3, [r7, #0]
    if (data == UAVCAN_NULLPTR)
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d105      	bne.n	801b7e4 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x20>
    {
        UAVCAN_ASSERT(0);
 801b7d8:	4b1f      	ldr	r3, [pc, #124]	; (801b858 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x94>)
 801b7da:	4a20      	ldr	r2, [pc, #128]	; (801b85c <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x98>)
 801b7dc:	2125      	movs	r1, #37	; 0x25
 801b7de:	4820      	ldr	r0, [pc, #128]	; (801b860 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x9c>)
 801b7e0:	f004 fed4 	bl	802058c <__assert_func>
        return -ErrInvalidParam;
    }
    if (offset >= payload_len_)
 801b7e4:	68fb      	ldr	r3, [r7, #12]
 801b7e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	68bb      	ldr	r3, [r7, #8]
 801b7ee:	4293      	cmp	r3, r2
 801b7f0:	d301      	bcc.n	801b7f6 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x32>
    {
        return 0;
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	e02b      	b.n	801b84e <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x8a>
    }
    if ((offset + len) > payload_len_)
 801b7f6:	68ba      	ldr	r2, [r7, #8]
 801b7f8:	683b      	ldr	r3, [r7, #0]
 801b7fa:	4413      	add	r3, r2
 801b7fc:	68fa      	ldr	r2, [r7, #12]
 801b7fe:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801b802:	4293      	cmp	r3, r2
 801b804:	d906      	bls.n	801b814 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x50>
    {
        len = payload_len_ - offset;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b80c:	461a      	mov	r2, r3
 801b80e:	68bb      	ldr	r3, [r7, #8]
 801b810:	1ad3      	subs	r3, r2, r3
 801b812:	603b      	str	r3, [r7, #0]
    }
    UAVCAN_ASSERT((offset + len) <= payload_len_);
 801b814:	68ba      	ldr	r2, [r7, #8]
 801b816:	683b      	ldr	r3, [r7, #0]
 801b818:	4413      	add	r3, r2
 801b81a:	68fa      	ldr	r2, [r7, #12]
 801b81c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801b820:	4293      	cmp	r3, r2
 801b822:	d905      	bls.n	801b830 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x6c>
 801b824:	4b0f      	ldr	r3, [pc, #60]	; (801b864 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0xa0>)
 801b826:	4a0d      	ldr	r2, [pc, #52]	; (801b85c <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x98>)
 801b828:	2130      	movs	r1, #48	; 0x30
 801b82a:	480d      	ldr	r0, [pc, #52]	; (801b860 <_ZNK6uavcan27SingleFrameIncomingTransfer4readEjPhj+0x9c>)
 801b82c:	f004 feae 	bl	802058c <__assert_func>
    (void)copy(payload_ + offset, payload_ + offset + len, data);
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	6a1a      	ldr	r2, [r3, #32]
 801b834:	68bb      	ldr	r3, [r7, #8]
 801b836:	18d0      	adds	r0, r2, r3
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	6a1a      	ldr	r2, [r3, #32]
 801b83c:	68b9      	ldr	r1, [r7, #8]
 801b83e:	683b      	ldr	r3, [r7, #0]
 801b840:	440b      	add	r3, r1
 801b842:	4413      	add	r3, r2
 801b844:	687a      	ldr	r2, [r7, #4]
 801b846:	4619      	mov	r1, r3
 801b848:	f7fa fbb6 	bl	8015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>
    return int(len);
 801b84c:	683b      	ldr	r3, [r7, #0]
}
 801b84e:	4618      	mov	r0, r3
 801b850:	3710      	adds	r7, #16
 801b852:	46bd      	mov	sp, r7
 801b854:	bd80      	pop	{r7, pc}
 801b856:	bf00      	nop
 801b858:	08024228 	.word	0x08024228
 801b85c:	0802bf30 	.word	0x0802bf30
 801b860:	0802422c 	.word	0x0802422c
 801b864:	080242c0 	.word	0x080242c0

0801b868 <_ZNK6uavcan27SingleFrameIncomingTransfer19isAnonymousTransferEv>:

bool SingleFrameIncomingTransfer::isAnonymousTransfer() const
{
 801b868:	b580      	push	{r7, lr}
 801b86a:	b084      	sub	sp, #16
 801b86c:	af00      	add	r7, sp, #0
 801b86e:	6078      	str	r0, [r7, #4]
    return (getTransferType() == TransferTypeMessageBroadcast) && getSrcNodeID().isBroadcast();
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	4618      	mov	r0, r3
 801b874:	f7ea fd49 	bl	800630a <_ZNK6uavcan16IncomingTransfer15getTransferTypeEv>
 801b878:	4603      	mov	r3, r0
 801b87a:	2b02      	cmp	r3, #2
 801b87c:	d10f      	bne.n	801b89e <_ZNK6uavcan27SingleFrameIncomingTransfer19isAnonymousTransferEv+0x36>
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	4618      	mov	r0, r3
 801b882:	f7ea fd5a 	bl	800633a <_ZNK6uavcan16IncomingTransfer12getSrcNodeIDEv>
 801b886:	4603      	mov	r3, r0
 801b888:	733b      	strb	r3, [r7, #12]
 801b88a:	f107 030c 	add.w	r3, r7, #12
 801b88e:	4618      	mov	r0, r3
 801b890:	f7fa f8fb 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 801b894:	4603      	mov	r3, r0
 801b896:	2b00      	cmp	r3, #0
 801b898:	d001      	beq.n	801b89e <_ZNK6uavcan27SingleFrameIncomingTransfer19isAnonymousTransferEv+0x36>
 801b89a:	2301      	movs	r3, #1
 801b89c:	e000      	b.n	801b8a0 <_ZNK6uavcan27SingleFrameIncomingTransfer19isAnonymousTransferEv+0x38>
 801b89e:	2300      	movs	r3, #0
}
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	3710      	adds	r7, #16
 801b8a4:	46bd      	mov	sp, r7
 801b8a6:	bd80      	pop	{r7, pc}

0801b8a8 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE>:

/*
 * MultiFrameIncomingTransfer
 */
MultiFrameIncomingTransfer::MultiFrameIncomingTransfer(MonotonicTime ts_mono, UtcTime ts_utc,
 801b8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8ac:	b08d      	sub	sp, #52	; 0x34
 801b8ae:	af04      	add	r7, sp, #16
 801b8b0:	60f8      	str	r0, [r7, #12]
 801b8b2:	60b9      	str	r1, [r7, #8]
 801b8b4:	607a      	str	r2, [r7, #4]
 801b8b6:	603b      	str	r3, [r7, #0]
                                                       const RxFrame& last_frame, TransferBufferAccessor& tba)
    : IncomingTransfer(ts_mono, ts_utc, last_frame.getPriority(), last_frame.getTransferType(),
                       last_frame.getTransferID(), last_frame.getSrcNodeID(), last_frame.getIfaceIndex())
    , buf_acc_(tba)
 801b8b8:	68fc      	ldr	r4, [r7, #12]
 801b8ba:	68ba      	ldr	r2, [r7, #8]
 801b8bc:	f107 0310 	add.w	r3, r7, #16
 801b8c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b8c4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8c8:	687a      	ldr	r2, [r7, #4]
 801b8ca:	f107 0318 	add.w	r3, r7, #24
 801b8ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b8d2:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7ff fce4 	bl	801b2a6 <_ZNK6uavcan5Frame11getPriorityEv>
 801b8de:	4681      	mov	r9, r0
 801b8e0:	683b      	ldr	r3, [r7, #0]
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f7ea fc30 	bl	8006148 <_ZNK6uavcan5Frame15getTransferTypeEv>
 801b8e8:	4603      	mov	r3, r0
 801b8ea:	461d      	mov	r5, r3
 801b8ec:	683b      	ldr	r3, [r7, #0]
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f7ea fc42 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801b8f4:	4606      	mov	r6, r0
 801b8f6:	683b      	ldr	r3, [r7, #0]
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	f7ea fc31 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801b8fe:	4680      	mov	r8, r0
 801b900:	6838      	ldr	r0, [r7, #0]
 801b902:	f7ff fd2f 	bl	801b364 <_ZNK6uavcan7RxFrame13getIfaceIndexEv>
 801b906:	4603      	mov	r3, r0
 801b908:	f107 0218 	add.w	r2, r7, #24
 801b90c:	f107 0110 	add.w	r1, r7, #16
 801b910:	9303      	str	r3, [sp, #12]
 801b912:	f88d 8008 	strb.w	r8, [sp, #8]
 801b916:	f88d 6004 	strb.w	r6, [sp, #4]
 801b91a:	9500      	str	r5, [sp, #0]
 801b91c:	464b      	mov	r3, r9
 801b91e:	4620      	mov	r0, r4
 801b920:	f7ff fe32 	bl	801b588 <_ZN6uavcan16IncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeENS_16TransferPriorityENS_12TransferTypeENS_10TransferIDENS_6NodeIDEh>
 801b924:	f107 0318 	add.w	r3, r7, #24
 801b928:	4618      	mov	r0, r3
 801b92a:	f7fc fcea 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 801b92e:	f107 0310 	add.w	r3, r7, #16
 801b932:	4618      	mov	r0, r3
 801b934:	f7ea fbee 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801b938:	68f8      	ldr	r0, [r7, #12]
 801b93a:	f7ea f850 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801b93e:	4a13      	ldr	r2, [pc, #76]	; (801b98c <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xe4>)
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	601a      	str	r2, [r3, #0]
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b948:	621a      	str	r2, [r3, #32]
{
    UAVCAN_ASSERT(last_frame.isValid());
 801b94a:	683b      	ldr	r3, [r7, #0]
 801b94c:	4618      	mov	r0, r3
 801b94e:	f7fd fe7f 	bl	8019650 <_ZNK6uavcan5Frame7isValidEv>
 801b952:	4603      	mov	r3, r0
 801b954:	2b00      	cmp	r3, #0
 801b956:	d105      	bne.n	801b964 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xbc>
 801b958:	4b0d      	ldr	r3, [pc, #52]	; (801b990 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xe8>)
 801b95a:	4a0e      	ldr	r2, [pc, #56]	; (801b994 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xec>)
 801b95c:	2143      	movs	r1, #67	; 0x43
 801b95e:	480e      	ldr	r0, [pc, #56]	; (801b998 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xf0>)
 801b960:	f004 fe14 	bl	802058c <__assert_func>
    UAVCAN_ASSERT(last_frame.isEndOfTransfer());
 801b964:	683b      	ldr	r3, [r7, #0]
 801b966:	4618      	mov	r0, r3
 801b968:	f7ff fccc 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801b96c:	4603      	mov	r3, r0
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d105      	bne.n	801b97e <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xd6>
 801b972:	4b0a      	ldr	r3, [pc, #40]	; (801b99c <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xf4>)
 801b974:	4a07      	ldr	r2, [pc, #28]	; (801b994 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xec>)
 801b976:	2144      	movs	r1, #68	; 0x44
 801b978:	4807      	ldr	r0, [pc, #28]	; (801b998 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xf0>)
 801b97a:	f004 fe07 	bl	802058c <__assert_func>
}
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	4618      	mov	r0, r3
 801b982:	3724      	adds	r7, #36	; 0x24
 801b984:	46bd      	mov	sp, r7
 801b986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b98a:	bf00      	nop
 801b98c:	0802be24 	.word	0x0802be24
 801b990:	080242e0 	.word	0x080242e0
 801b994:	0802bf9c 	.word	0x0802bf9c
 801b998:	0802422c 	.word	0x0802422c
 801b99c:	080242f8 	.word	0x080242f8

0801b9a0 <_ZNK6uavcan26MultiFrameIncomingTransfer4readEjPhj>:

int MultiFrameIncomingTransfer::read(unsigned offset, uint8_t* data, unsigned len) const
{
 801b9a0:	b590      	push	{r4, r7, lr}
 801b9a2:	b087      	sub	sp, #28
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	60f8      	str	r0, [r7, #12]
 801b9a8:	60b9      	str	r1, [r7, #8]
 801b9aa:	607a      	str	r2, [r7, #4]
 801b9ac:	603b      	str	r3, [r7, #0]
    const ITransferBuffer* const tbb = const_cast<TransferBufferAccessor&>(buf_acc_).access();
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	6a1b      	ldr	r3, [r3, #32]
 801b9b2:	4618      	mov	r0, r3
 801b9b4:	f7ff fd36 	bl	801b424 <_ZN6uavcan22TransferBufferAccessor6accessEv>
 801b9b8:	6178      	str	r0, [r7, #20]
    if (tbb == UAVCAN_NULLPTR)
 801b9ba:	697b      	ldr	r3, [r7, #20]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d102      	bne.n	801b9c6 <_ZNK6uavcan26MultiFrameIncomingTransfer4readEjPhj+0x26>
    {
        UAVCAN_TRACE("MultiFrameIncomingTransfer", "Read failed: no such buffer");
        return -ErrLogic;
 801b9c0:	f06f 0309 	mvn.w	r3, #9
 801b9c4:	e009      	b.n	801b9da <_ZNK6uavcan26MultiFrameIncomingTransfer4readEjPhj+0x3a>
    }
    return tbb->read(offset, data, len);
 801b9c6:	697b      	ldr	r3, [r7, #20]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	3308      	adds	r3, #8
 801b9cc:	681c      	ldr	r4, [r3, #0]
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	687a      	ldr	r2, [r7, #4]
 801b9d2:	68b9      	ldr	r1, [r7, #8]
 801b9d4:	6978      	ldr	r0, [r7, #20]
 801b9d6:	47a0      	blx	r4
 801b9d8:	4603      	mov	r3, r0
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	371c      	adds	r7, #28
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	bd90      	pop	{r4, r7, pc}

0801b9e2 <_ZNK6uavcan16TransferListener25TimedOutReceiverPredicateclERKNS_24TransferBufferManagerKeyERKNS_16TransferReceiverE>:
/*
 * TransferListener::TimedOutReceiverPredicate
 */
bool TransferListener::TimedOutReceiverPredicate::operator()(const TransferBufferManagerKey& key,
                                                             const TransferReceiver& value) const
{
 801b9e2:	b590      	push	{r4, r7, lr}
 801b9e4:	b087      	sub	sp, #28
 801b9e6:	af00      	add	r7, sp, #0
 801b9e8:	60f8      	str	r0, [r7, #12]
 801b9ea:	60b9      	str	r1, [r7, #8]
 801b9ec:	607a      	str	r2, [r7, #4]
    if (value.isTimedOut(ts_))
 801b9ee:	68fa      	ldr	r2, [r7, #12]
 801b9f0:	f107 0310 	add.w	r3, r7, #16
 801b9f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b9f8:	e883 0003 	stmia.w	r3, {r0, r1}
 801b9fc:	f107 0310 	add.w	r3, r7, #16
 801ba00:	4619      	mov	r1, r3
 801ba02:	6878      	ldr	r0, [r7, #4]
 801ba04:	f001 fac6 	bl	801cf94 <_ZNK6uavcan16TransferReceiver10isTimedOutENS_13MonotonicTimeE>
 801ba08:	4603      	mov	r3, r0
 801ba0a:	461c      	mov	r4, r3
 801ba0c:	f107 0310 	add.w	r3, r7, #16
 801ba10:	4618      	mov	r0, r3
 801ba12:	f7ea fb7f 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801ba16:	2c00      	cmp	r4, #0
 801ba18:	d007      	beq.n	801ba2a <_ZNK6uavcan16TransferListener25TimedOutReceiverPredicateclERKNS_24TransferBufferManagerKeyERKNS_16TransferReceiverE+0x48>
         * TransferReceivers do not own their buffers - this helps the Map<> container to copy them
         * around quickly and safely (using default assignment operator). Downside is that we need to
         * destroy the buffers manually.
         * Maybe it is not good that the predicate has side effects, but I ran out of better ideas.
         */
        parent_bufmgr_.remove(key);
 801ba1a:	68fb      	ldr	r3, [r7, #12]
 801ba1c:	689b      	ldr	r3, [r3, #8]
 801ba1e:	68b9      	ldr	r1, [r7, #8]
 801ba20:	4618      	mov	r0, r3
 801ba22:	f7ff fa1f 	bl	801ae64 <_ZN6uavcan21TransferBufferManager6removeERKNS_24TransferBufferManagerKeyE>
        return true;
 801ba26:	2301      	movs	r3, #1
 801ba28:	e000      	b.n	801ba2c <_ZNK6uavcan16TransferListener25TimedOutReceiverPredicateclERKNS_24TransferBufferManagerKeyERKNS_16TransferReceiverE+0x4a>
    }
    return false;
 801ba2a:	2300      	movs	r3, #0
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	371c      	adds	r7, #28
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd90      	pop	{r4, r7, pc}

0801ba34 <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE>:

/*
 * TransferListener
 */
bool TransferListener::checkPayloadCrc(const uint16_t compare_with, const ITransferBuffer& tbb) const
{
 801ba34:	b590      	push	{r4, r7, lr}
 801ba36:	b08d      	sub	sp, #52	; 0x34
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	60f8      	str	r0, [r7, #12]
 801ba3c:	460b      	mov	r3, r1
 801ba3e:	607a      	str	r2, [r7, #4]
 801ba40:	817b      	strh	r3, [r7, #10]
    TransferCRC crc = crc_base_;
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801ba46:	84bb      	strh	r3, [r7, #36]	; 0x24
    unsigned offset = 0;
 801ba48:	2300      	movs	r3, #0
 801ba4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true)
    {
        uint8_t buf[16];
        const int res = tbb.read(offset, buf, sizeof(buf));
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	3308      	adds	r3, #8
 801ba52:	681c      	ldr	r4, [r3, #0]
 801ba54:	f107 0214 	add.w	r2, r7, #20
 801ba58:	2310      	movs	r3, #16
 801ba5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ba5c:	6878      	ldr	r0, [r7, #4]
 801ba5e:	47a0      	blx	r4
 801ba60:	62b8      	str	r0, [r7, #40]	; 0x28
        if (res < 0)
 801ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	da01      	bge.n	801ba6c <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x38>
        {
            UAVCAN_TRACE("TransferListener", "Failed to check CRC: Buffer read failure %i", res);
            return false;
 801ba68:	2300      	movs	r3, #0
 801ba6a:	e022      	b.n	801bab2 <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x7e>
        }
        if (res == 0)
 801ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d10f      	bne.n	801ba92 <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x5e>
            break;
        }
        offset += unsigned(res);
        crc.add(buf, unsigned(res));
    }
    if (crc.get() != compare_with)
 801ba72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ba76:	4618      	mov	r0, r3
 801ba78:	f7fd fbac 	bl	80191d4 <_ZNK6uavcan11TransferCRC3getEv>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	461a      	mov	r2, r3
 801ba80:	897b      	ldrh	r3, [r7, #10]
 801ba82:	4293      	cmp	r3, r2
 801ba84:	bf14      	ite	ne
 801ba86:	2301      	movne	r3, #1
 801ba88:	2300      	moveq	r3, #0
 801ba8a:	b2db      	uxtb	r3, r3
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d10d      	bne.n	801baac <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x78>
 801ba90:	e00e      	b.n	801bab0 <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x7c>
        offset += unsigned(res);
 801ba92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ba96:	4413      	add	r3, r2
 801ba98:	62fb      	str	r3, [r7, #44]	; 0x2c
        crc.add(buf, unsigned(res));
 801ba9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba9c:	f107 0114 	add.w	r1, r7, #20
 801baa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801baa4:	4618      	mov	r0, r3
 801baa6:	f7fd fb69 	bl	801917c <_ZN6uavcan11TransferCRC3addEPKhj>
    }
 801baaa:	e7cf      	b.n	801ba4c <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x18>
    {
        UAVCAN_TRACE("TransferListener", "CRC mismatch, expected=0x%04x, got=0x%04x",
                     int(compare_with), int(crc.get()));
        return false;
 801baac:	2300      	movs	r3, #0
 801baae:	e000      	b.n	801bab2 <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE+0x7e>
    }
    return true;
 801bab0:	2301      	movs	r3, #1
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	3734      	adds	r7, #52	; 0x34
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd90      	pop	{r4, r7, pc}
	...

0801babc <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE>:

void TransferListener::handleReception(TransferReceiver& receiver, const RxFrame& frame,
                                           TransferBufferAccessor& tba)
{
 801babc:	b590      	push	{r4, r7, lr}
 801babe:	b097      	sub	sp, #92	; 0x5c
 801bac0:	af02      	add	r7, sp, #8
 801bac2:	60f8      	str	r0, [r7, #12]
 801bac4:	60b9      	str	r1, [r7, #8]
 801bac6:	607a      	str	r2, [r7, #4]
 801bac8:	603b      	str	r3, [r7, #0]
    switch (receiver.addFrame(frame, tba))
 801baca:	683a      	ldr	r2, [r7, #0]
 801bacc:	6879      	ldr	r1, [r7, #4]
 801bace:	68b8      	ldr	r0, [r7, #8]
 801bad0:	f001 fa8d 	bl	801cfee <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE>
 801bad4:	4603      	mov	r3, r0
 801bad6:	2b01      	cmp	r3, #1
 801bad8:	d028      	beq.n	801bb2c <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x70>
 801bada:	2b02      	cmp	r3, #2
 801badc:	d00c      	beq.n	801baf8 <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x3c>
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d174      	bne.n	801bbcc <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x110>
    {
    case TransferReceiver::ResultNotComplete:
    {
        perf_.addErrors(receiver.yieldErrorCount());
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801bae6:	68b8      	ldr	r0, [r7, #8]
 801bae8:	f001 fbee 	bl	801d2c8 <_ZN6uavcan16TransferReceiver15yieldErrorCountEv>
 801baec:	4603      	mov	r3, r0
 801baee:	4619      	mov	r1, r3
 801baf0:	4620      	mov	r0, r4
 801baf2:	f7ff fd2e 	bl	801b552 <_ZN6uavcan19TransferPerfCounter9addErrorsEj>
        break;
 801baf6:	e072      	b.n	801bbde <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x122>
    }
    case TransferReceiver::ResultSingleFrame:
    {
        perf_.addRxTransfer();
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bafc:	4618      	mov	r0, r3
 801bafe:	f7ff fd16 	bl	801b52e <_ZN6uavcan19TransferPerfCounter13addRxTransferEv>
        SingleFrameIncomingTransfer it(frame);
 801bb02:	f107 0310 	add.w	r3, r7, #16
 801bb06:	6879      	ldr	r1, [r7, #4]
 801bb08:	4618      	mov	r0, r3
 801bb0a:	f7ff fde9 	bl	801b6e0 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE>
        handleIncomingTransfer(it);
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	f107 0210 	add.w	r2, r7, #16
 801bb18:	4611      	mov	r1, r2
 801bb1a:	68f8      	ldr	r0, [r7, #12]
 801bb1c:	4798      	blx	r3
        break;
 801bb1e:	bf00      	nop
        SingleFrameIncomingTransfer it(frame);
 801bb20:	f107 0310 	add.w	r3, r7, #16
 801bb24:	4618      	mov	r0, r3
 801bb26:	f000 fef5 	bl	801c914 <_ZN6uavcan27SingleFrameIncomingTransferD1Ev>
    {
        UAVCAN_ASSERT(0);
        break;
    }
    }
}
 801bb2a:	e058      	b.n	801bbde <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x122>
        perf_.addRxTransfer();
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb30:	4618      	mov	r0, r3
 801bb32:	f7ff fcfc 	bl	801b52e <_ZN6uavcan19TransferPerfCounter13addRxTransferEv>
        const ITransferBuffer* tbb = tba.access();
 801bb36:	6838      	ldr	r0, [r7, #0]
 801bb38:	f7ff fc74 	bl	801b424 <_ZN6uavcan22TransferBufferAccessor6accessEv>
 801bb3c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (tbb == UAVCAN_NULLPTR)
 801bb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d049      	beq.n	801bbd8 <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x11c>
        if (!checkPayloadCrc(receiver.getLastTransferCrc(), *tbb))
 801bb44:	68b8      	ldr	r0, [r7, #8]
 801bb46:	f7ff fce6 	bl	801b516 <_ZNK6uavcan16TransferReceiver18getLastTransferCrcEv>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bb4e:	4619      	mov	r1, r3
 801bb50:	68f8      	ldr	r0, [r7, #12]
 801bb52:	f7ff ff6f 	bl	801ba34 <_ZNK6uavcan16TransferListener15checkPayloadCrcEtRKNS_15ITransferBufferE>
 801bb56:	4603      	mov	r3, r0
 801bb58:	f083 0301 	eor.w	r3, r3, #1
 801bb5c:	b2db      	uxtb	r3, r3
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d13c      	bne.n	801bbdc <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x120>
        MultiFrameIncomingTransfer it(receiver.getLastTransferTimestampMonotonic(),
 801bb62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb66:	68b9      	ldr	r1, [r7, #8]
 801bb68:	4618      	mov	r0, r3
 801bb6a:	f7ff fcb1 	bl	801b4d0 <_ZNK6uavcan16TransferReceiver33getLastTransferTimestampMonotonicEv>
                                      receiver.getLastTransferTimestampUtc(), frame, tba);
 801bb6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bb72:	68b9      	ldr	r1, [r7, #8]
 801bb74:	4618      	mov	r0, r3
 801bb76:	f7ff fcbc 	bl	801b4f2 <_ZNK6uavcan16TransferReceiver27getLastTransferTimestampUtcEv>
 801bb7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801bb7e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801bb82:	f107 0010 	add.w	r0, r7, #16
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	9300      	str	r3, [sp, #0]
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	f7ff fe8c 	bl	801b8a8 <_ZN6uavcan26MultiFrameIncomingTransferC1ENS_13MonotonicTimeENS_7UtcTimeERKNS_7RxFrameERNS_22TransferBufferAccessorE>
 801bb90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7fc fbb4 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 801bb9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb9e:	4618      	mov	r0, r3
 801bba0:	f7ea fab8 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        handleIncomingTransfer(it);
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	f107 0210 	add.w	r2, r7, #16
 801bbae:	4611      	mov	r1, r2
 801bbb0:	68f8      	ldr	r0, [r7, #12]
 801bbb2:	4798      	blx	r3
        it.release();
 801bbb4:	f107 0310 	add.w	r3, r7, #16
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7ff fd2e 	bl	801b61a <_ZN6uavcan26MultiFrameIncomingTransfer7releaseEv>
        break;
 801bbbe:	bf00      	nop
                                      receiver.getLastTransferTimestampUtc(), frame, tba);
 801bbc0:	f107 0310 	add.w	r3, r7, #16
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f000 fe7f 	bl	801c8c8 <_ZN6uavcan26MultiFrameIncomingTransferD1Ev>
}
 801bbca:	e008      	b.n	801bbde <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x122>
        UAVCAN_ASSERT(0);
 801bbcc:	4b06      	ldr	r3, [pc, #24]	; (801bbe8 <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x12c>)
 801bbce:	4a07      	ldr	r2, [pc, #28]	; (801bbec <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x130>)
 801bbd0:	21ae      	movs	r1, #174	; 0xae
 801bbd2:	4807      	ldr	r0, [pc, #28]	; (801bbf0 <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x134>)
 801bbd4:	f004 fcda 	bl	802058c <__assert_func>
            break;
 801bbd8:	bf00      	nop
 801bbda:	e000      	b.n	801bbde <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x122>
            break;
 801bbdc:	bf00      	nop
}
 801bbde:	bf00      	nop
 801bbe0:	3754      	adds	r7, #84	; 0x54
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd90      	pop	{r4, r7, pc}
 801bbe6:	bf00      	nop
 801bbe8:	08024228 	.word	0x08024228
 801bbec:	0802c03c 	.word	0x0802c03c
 801bbf0:	0802422c 	.word	0x0802422c

0801bbf4 <_ZN6uavcan16TransferListener32handleAnonymousTransferReceptionERKNS_7RxFrameE>:

void TransferListener::handleAnonymousTransferReception(const RxFrame& frame)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b08c      	sub	sp, #48	; 0x30
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
 801bbfc:	6039      	str	r1, [r7, #0]
    if (allow_anonymous_transfers_)
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d017      	beq.n	801bc38 <_ZN6uavcan16TransferListener32handleAnonymousTransferReceptionERKNS_7RxFrameE+0x44>
    {
        perf_.addRxTransfer();
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc0c:	4618      	mov	r0, r3
 801bc0e:	f7ff fc8e 	bl	801b52e <_ZN6uavcan19TransferPerfCounter13addRxTransferEv>
        SingleFrameIncomingTransfer it(frame);
 801bc12:	f107 0308 	add.w	r3, r7, #8
 801bc16:	6839      	ldr	r1, [r7, #0]
 801bc18:	4618      	mov	r0, r3
 801bc1a:	f7ff fd61 	bl	801b6e0 <_ZN6uavcan27SingleFrameIncomingTransferC1ERKNS_7RxFrameE>
        handleIncomingTransfer(it);
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	f107 0208 	add.w	r2, r7, #8
 801bc28:	4611      	mov	r1, r2
 801bc2a:	6878      	ldr	r0, [r7, #4]
 801bc2c:	4798      	blx	r3
        SingleFrameIncomingTransfer it(frame);
 801bc2e:	f107 0308 	add.w	r3, r7, #8
 801bc32:	4618      	mov	r0, r3
 801bc34:	f000 fe6e 	bl	801c914 <_ZN6uavcan27SingleFrameIncomingTransferD1Ev>
    }
}
 801bc38:	bf00      	nop
 801bc3a:	3730      	adds	r7, #48	; 0x30
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd80      	pop	{r7, pc}

0801bc40 <_ZN6uavcan16TransferListenerD1Ev>:

TransferListener::~TransferListener()
 801bc40:	b580      	push	{r7, lr}
 801bc42:	b082      	sub	sp, #8
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	6078      	str	r0, [r7, #4]
 801bc48:	4a0d      	ldr	r2, [pc, #52]	; (801bc80 <_ZN6uavcan16TransferListenerD1Ev+0x40>)
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	601a      	str	r2, [r3, #0]
{
    // Map must be cleared before bufmgr is destroyed
    receivers_.clear();
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	331c      	adds	r3, #28
 801bc52:	4618      	mov	r0, r3
 801bc54:	f000 f982 	bl	801bf5c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE5clearEv>
TransferListener::~TransferListener()
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	331c      	adds	r3, #28
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	f000 f969 	bl	801bf34 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEED1Ev>
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	330c      	adds	r3, #12
 801bc66:	4618      	mov	r0, r3
 801bc68:	f7ff f85a 	bl	801ad20 <_ZN6uavcan21TransferBufferManagerD1Ev>
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	3304      	adds	r3, #4
 801bc70:	4618      	mov	r0, r3
 801bc72:	f000 f947 	bl	801bf04 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEED1Ev>
}
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	4618      	mov	r0, r3
 801bc7a:	3708      	adds	r7, #8
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}
 801bc80:	0802be0c 	.word	0x0802be0c

0801bc84 <_ZN6uavcan16TransferListener25TimedOutReceiverPredicateD1Ev>:
    class TimedOutReceiverPredicate
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b082      	sub	sp, #8
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7ea fa40 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	4618      	mov	r0, r3
 801bc98:	3708      	adds	r7, #8
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	bd80      	pop	{r7, pc}
	...

0801bca0 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE>:

void TransferListener::cleanup(MonotonicTime ts)
{
 801bca0:	b590      	push	{r4, r7, lr}
 801bca2:	b089      	sub	sp, #36	; 0x24
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
 801bca8:	6039      	str	r1, [r7, #0]
    receivers_.removeAllWhere(TimedOutReceiverPredicate(ts, bufmgr_));
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	f103 041c 	add.w	r4, r3, #28
 801bcb0:	683a      	ldr	r2, [r7, #0]
 801bcb2:	f107 0318 	add.w	r3, r7, #24
 801bcb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bcba:	e883 0003 	stmia.w	r3, {r0, r1}
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	f103 020c 	add.w	r2, r3, #12
 801bcc4:	f107 0118 	add.w	r1, r7, #24
 801bcc8:	f107 0308 	add.w	r3, r7, #8
 801bccc:	4618      	mov	r0, r3
 801bcce:	f7ff fcb1 	bl	801b634 <_ZN6uavcan16TransferListener25TimedOutReceiverPredicateC1ENS_13MonotonicTimeERNS_21TransferBufferManagerE>
 801bcd2:	f107 0308 	add.w	r3, r7, #8
 801bcd6:	4619      	mov	r1, r3
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f000 f958 	bl	801bf8e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_>
 801bcde:	f107 0308 	add.w	r3, r7, #8
 801bce2:	4618      	mov	r0, r3
 801bce4:	f7ff ffce 	bl	801bc84 <_ZN6uavcan16TransferListener25TimedOutReceiverPredicateD1Ev>
 801bce8:	f107 0318 	add.w	r3, r7, #24
 801bcec:	4618      	mov	r0, r3
 801bcee:	f7ea fa11 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    UAVCAN_ASSERT(receivers_.isEmpty() ? bufmgr_.isEmpty() : 1);
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	331c      	adds	r3, #28
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	f000 f9c3 	bl	801c082 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7isEmptyEv>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d006      	beq.n	801bd10 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE+0x70>
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	330c      	adds	r3, #12
 801bd06:	4618      	mov	r0, r3
 801bd08:	f7ff f8e4 	bl	801aed4 <_ZNK6uavcan21TransferBufferManager7isEmptyEv>
 801bd0c:	4603      	mov	r3, r0
 801bd0e:	e000      	b.n	801bd12 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE+0x72>
 801bd10:	2301      	movs	r3, #1
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d105      	bne.n	801bd22 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE+0x82>
 801bd16:	4b05      	ldr	r3, [pc, #20]	; (801bd2c <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE+0x8c>)
 801bd18:	4a05      	ldr	r2, [pc, #20]	; (801bd30 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE+0x90>)
 801bd1a:	21c7      	movs	r1, #199	; 0xc7
 801bd1c:	4805      	ldr	r0, [pc, #20]	; (801bd34 <_ZN6uavcan16TransferListener7cleanupENS_13MonotonicTimeE+0x94>)
 801bd1e:	f004 fc35 	bl	802058c <__assert_func>
}
 801bd22:	bf00      	nop
 801bd24:	3724      	adds	r7, #36	; 0x24
 801bd26:	46bd      	mov	sp, r7
 801bd28:	bd90      	pop	{r4, r7, pc}
 801bd2a:	bf00      	nop
 801bd2c:	08024318 	.word	0x08024318
 801bd30:	0802c0c0 	.word	0x0802c0c0
 801bd34:	0802422c 	.word	0x0802422c

0801bd38 <_ZN6uavcan16TransferReceiverD1Ev>:
class UAVCAN_EXPORT TransferReceiver
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	3310      	adds	r3, #16
 801bd44:	4618      	mov	r0, r3
 801bd46:	f7fc fadc 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	3308      	adds	r3, #8
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7ea f9e0 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	4618      	mov	r0, r3
 801bd58:	f7ea f9dc 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3708      	adds	r7, #8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}

0801bd66 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE>:

void TransferListener::handleFrame(const RxFrame& frame)
{
 801bd66:	b590      	push	{r4, r7, lr}
 801bd68:	b093      	sub	sp, #76	; 0x4c
 801bd6a:	af00      	add	r7, sp, #0
 801bd6c:	6078      	str	r0, [r7, #4]
 801bd6e:	6039      	str	r1, [r7, #0]
    if (frame.getSrcNodeID().isUnicast())       // Normal transfer
 801bd70:	683b      	ldr	r3, [r7, #0]
 801bd72:	4618      	mov	r0, r3
 801bd74:	f7ea f9f4 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801bd78:	4603      	mov	r3, r0
 801bd7a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 801bd7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bd82:	4618      	mov	r0, r3
 801bd84:	f7e9 ff2d 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 801bd88:	4603      	mov	r3, r0
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d054      	beq.n	801be38 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0xd2>
    {
        const TransferBufferManagerKey key(frame.getSrcNodeID(), frame.getTransferType());
 801bd8e:	683b      	ldr	r3, [r7, #0]
 801bd90:	4618      	mov	r0, r3
 801bd92:	f7ea f9e5 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801bd96:	4604      	mov	r4, r0
 801bd98:	683b      	ldr	r3, [r7, #0]
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	f7ea f9d4 	bl	8006148 <_ZNK6uavcan5Frame15getTransferTypeEv>
 801bda0:	4603      	mov	r3, r0
 801bda2:	461a      	mov	r2, r3
 801bda4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bda8:	4621      	mov	r1, r4
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f7ff fae8 	bl	801b380 <_ZN6uavcan24TransferBufferManagerKeyC1ENS_6NodeIDENS_12TransferTypeE>

        TransferReceiver* recv = receivers_.access(key);
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	331c      	adds	r3, #28
 801bdb4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801bdb8:	4611      	mov	r1, r2
 801bdba:	4618      	mov	r0, r3
 801bdbc:	f000 f974 	bl	801c0a8 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_>
 801bdc0:	6478      	str	r0, [r7, #68]	; 0x44
        if (recv == UAVCAN_NULLPTR)
 801bdc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d126      	bne.n	801be16 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0xb0>
        {
            if (!frame.isStartOfTransfer())
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	4618      	mov	r0, r3
 801bdcc:	f7ff fa8e 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801bdd0:	4603      	mov	r3, r0
 801bdd2:	f083 0301 	eor.w	r3, r3, #1
 801bdd6:	b2db      	uxtb	r3, r3
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d163      	bne.n	801bea4 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x13e>
            {
                return;
            }

            TransferReceiver new_recv;
 801bddc:	f107 0308 	add.w	r3, r7, #8
 801bde0:	4618      	mov	r0, r3
 801bde2:	f7ff fb40 	bl	801b466 <_ZN6uavcan16TransferReceiverC1Ev>
            recv = receivers_.insert(key, new_recv);
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	331c      	adds	r3, #28
 801bdea:	f107 0208 	add.w	r2, r7, #8
 801bdee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	f000 f98a 	bl	801c10c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_>
 801bdf8:	6478      	str	r0, [r7, #68]	; 0x44
            if (recv == UAVCAN_NULLPTR)
 801bdfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d101      	bne.n	801be04 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x9e>
 801be00:	2400      	movs	r4, #0
            {
                UAVCAN_TRACE("TransferListener", "Receiver registration failed; frame %s", frame.toString().c_str());
                return;
 801be02:	e000      	b.n	801be06 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0xa0>
 801be04:	2401      	movs	r4, #1
 801be06:	f107 0308 	add.w	r3, r7, #8
 801be0a:	4618      	mov	r0, r3
 801be0c:	f7ff ff94 	bl	801bd38 <_ZN6uavcan16TransferReceiverD1Ev>
 801be10:	2c01      	cmp	r4, #1
 801be12:	d148      	bne.n	801bea6 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x140>
            TransferReceiver new_recv;
 801be14:	bf00      	nop
            }
        }
        TransferBufferAccessor tba(bufmgr_, key);
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	f103 010c 	add.w	r1, r3, #12
 801be1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801be20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be22:	4618      	mov	r0, r3
 801be24:	f7ff fad4 	bl	801b3d0 <_ZN6uavcan22TransferBufferAccessorC1ERNS_21TransferBufferManagerENS_24TransferBufferManagerKeyE>
        handleReception(*recv, frame, tba);
 801be28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801be2c:	683a      	ldr	r2, [r7, #0]
 801be2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801be30:	6878      	ldr	r0, [r7, #4]
 801be32:	f7ff fe43 	bl	801babc <_ZN6uavcan16TransferListener15handleReceptionERNS_16TransferReceiverERKNS_7RxFrameERNS_22TransferBufferAccessorE>
 801be36:	e036      	b.n	801bea6 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x140>
    }
    else if (frame.getSrcNodeID().isBroadcast() &&
 801be38:	683b      	ldr	r3, [r7, #0]
 801be3a:	4618      	mov	r0, r3
 801be3c:	f7ea f990 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801be40:	4603      	mov	r3, r0
 801be42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 801be46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801be4a:	4618      	mov	r0, r3
 801be4c:	f7f9 fe1d 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 801be50:	4603      	mov	r3, r0
             frame.isStartOfTransfer() &&
             frame.isEndOfTransfer() &&
 801be52:	2b00      	cmp	r3, #0
 801be54:	d01e      	beq.n	801be94 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x12e>
             frame.isStartOfTransfer() &&
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	4618      	mov	r0, r3
 801be5a:	f7ff fa47 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801be5e:	4603      	mov	r3, r0
    else if (frame.getSrcNodeID().isBroadcast() &&
 801be60:	2b00      	cmp	r3, #0
 801be62:	d017      	beq.n	801be94 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x12e>
             frame.isEndOfTransfer() &&
 801be64:	683b      	ldr	r3, [r7, #0]
 801be66:	4618      	mov	r0, r3
 801be68:	f7ff fa4c 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801be6c:	4603      	mov	r3, r0
             frame.isStartOfTransfer() &&
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d010      	beq.n	801be94 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x12e>
             frame.getDstNodeID().isBroadcast())        // Anonymous transfer
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	4618      	mov	r0, r3
 801be76:	f7fc faa9 	bl	80183cc <_ZNK6uavcan5Frame12getDstNodeIDEv>
 801be7a:	4603      	mov	r3, r0
 801be7c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 801be80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801be84:	4618      	mov	r0, r3
 801be86:	f7f9 fe00 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 801be8a:	4603      	mov	r3, r0
             frame.isEndOfTransfer() &&
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d001      	beq.n	801be94 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x12e>
 801be90:	2301      	movs	r3, #1
 801be92:	e000      	b.n	801be96 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x130>
 801be94:	2300      	movs	r3, #0
    else if (frame.getSrcNodeID().isBroadcast() &&
 801be96:	2b00      	cmp	r3, #0
 801be98:	d005      	beq.n	801bea6 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x140>
    {
        handleAnonymousTransferReception(frame);
 801be9a:	6839      	ldr	r1, [r7, #0]
 801be9c:	6878      	ldr	r0, [r7, #4]
 801be9e:	f7ff fea9 	bl	801bbf4 <_ZN6uavcan16TransferListener32handleAnonymousTransferReceptionERKNS_7RxFrameE>
 801bea2:	e000      	b.n	801bea6 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE+0x140>
                return;
 801bea4:	bf00      	nop
    }
    else
    {
        UAVCAN_TRACE("TransferListener", "Invalid frame: %s", frame.toString().c_str()); // Invalid frame
    }
}
 801bea6:	374c      	adds	r7, #76	; 0x4c
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd90      	pop	{r4, r7, pc}

0801beac <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE>:

/*
 * TransferListenerWithFilter
 */
void TransferListenerWithFilter::handleFrame(const RxFrame& frame)
{
 801beac:	b580      	push	{r7, lr}
 801beae:	b082      	sub	sp, #8
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	6078      	str	r0, [r7, #4]
 801beb4:	6039      	str	r1, [r7, #0]
    if (filter_ != UAVCAN_NULLPTR)
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d011      	beq.n	801bee2 <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE+0x36>
    {
        if (filter_->shouldAcceptFrame(frame))
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	6839      	ldr	r1, [r7, #0]
 801becc:	4610      	mov	r0, r2
 801bece:	4798      	blx	r3
 801bed0:	4603      	mov	r3, r0
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d00b      	beq.n	801beee <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE+0x42>
        {
            TransferListener::handleFrame(frame);
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	6839      	ldr	r1, [r7, #0]
 801beda:	4618      	mov	r0, r3
 801bedc:	f7ff ff43 	bl	801bd66 <_ZN6uavcan16TransferListener11handleFrameERKNS_7RxFrameE>
    }
    else
    {
        UAVCAN_ASSERT(0);
    }
}
 801bee0:	e005      	b.n	801beee <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE+0x42>
        UAVCAN_ASSERT(0);
 801bee2:	4b05      	ldr	r3, [pc, #20]	; (801bef8 <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE+0x4c>)
 801bee4:	4a05      	ldr	r2, [pc, #20]	; (801befc <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE+0x50>)
 801bee6:	21fe      	movs	r1, #254	; 0xfe
 801bee8:	4805      	ldr	r0, [pc, #20]	; (801bf00 <_ZN6uavcan26TransferListenerWithFilter11handleFrameERKNS_7RxFrameE+0x54>)
 801beea:	f004 fb4f 	bl	802058c <__assert_func>
}
 801beee:	bf00      	nop
 801bef0:	3708      	adds	r7, #8
 801bef2:	46bd      	mov	sp, r7
 801bef4:	bd80      	pop	{r7, pc}
 801bef6:	bf00      	nop
 801bef8:	08024228 	.word	0x08024228
 801befc:	0802c404 	.word	0x0802c404
 801bf00:	0802422c 	.word	0x0802422c

0801bf04 <_ZN6uavcan14LinkedListNodeINS_16TransferListenerEED1Ev>:
    ~LinkedListNode() { }
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b082      	sub	sp, #8
 801bf08:	af00      	add	r7, sp, #0
 801bf0a:	6078      	str	r0, [r7, #4]
 801bf0c:	6878      	ldr	r0, [r7, #4]
 801bf0e:	f7e9 fd71 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	4618      	mov	r0, r3
 801bf16:	3708      	adds	r7, #8
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd80      	pop	{r7, pc}

0801bf1c <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEED1Ev>:
class UAVCAN_EXPORT LinkedListRoot : Noncopyable
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	b082      	sub	sp, #8
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	6078      	str	r0, [r7, #4]
 801bf24:	6878      	ldr	r0, [r7, #4]
 801bf26:	f7e9 fd65 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	3708      	adds	r7, #8
 801bf30:	46bd      	mov	sp, r7
 801bf32:	bd80      	pop	{r7, pc}

0801bf34 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEED1Ev>:
    ~Map()
 801bf34:	b580      	push	{r7, lr}
 801bf36:	b082      	sub	sp, #8
 801bf38:	af00      	add	r7, sp, #0
 801bf3a:	6078      	str	r0, [r7, #4]
        clear();
 801bf3c:	6878      	ldr	r0, [r7, #4]
 801bf3e:	f000 f80d 	bl	801bf5c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE5clearEv>
    }
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	3304      	adds	r3, #4
 801bf46:	4618      	mov	r0, r3
 801bf48:	f7ff ffe8 	bl	801bf1c <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEED1Ev>
 801bf4c:	6878      	ldr	r0, [r7, #4]
 801bf4e:	f7e9 fd51 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	4618      	mov	r0, r3
 801bf56:	3708      	adds	r7, #8
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd80      	pop	{r7, pc}

0801bf5c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE5clearEv>:
void Map<Key, Value>::clear()
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b084      	sub	sp, #16
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
    removeAllWhere(YesPredicate());
 801bf64:	4619      	mov	r1, r3
 801bf66:	6878      	ldr	r0, [r7, #4]
 801bf68:	f000 f964 	bl	801c234 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_>
}
 801bf6c:	bf00      	nop
 801bf6e:	3710      	adds	r7, #16
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}

0801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>:
    struct KVPair
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b082      	sub	sp, #8
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	4618      	mov	r0, r3
 801bf80:	f7ff feda 	bl	801bd38 <_ZN6uavcan16TransferReceiverD1Ev>
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	4618      	mov	r0, r3
 801bf88:	3708      	adds	r7, #8
 801bf8a:	46bd      	mov	sp, r7
 801bf8c:	bd80      	pop	{r7, pc}

0801bf8e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_>:
void Map<Key, Value>::removeAllWhere(Predicate predicate)
 801bf8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf90:	b095      	sub	sp, #84	; 0x54
 801bf92:	af00      	add	r7, sp, #0
 801bf94:	6078      	str	r0, [r7, #4]
 801bf96:	6039      	str	r1, [r7, #0]
    unsigned num_removed = 0;
 801bf98:	2300      	movs	r3, #0
 801bf9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    KVGroup* p = list_.get();
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	3304      	adds	r3, #4
 801bfa0:	4618      	mov	r0, r3
 801bfa2:	f000 f9c2 	bl	801c32a <_ZNK6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE3getEv>
 801bfa6:	64b8      	str	r0, [r7, #72]	; 0x48
    while (p != UAVCAN_NULLPTR)
 801bfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d05f      	beq.n	801c06e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0xe0>
        KVGroup* const next_group = p->getNextListNode();
 801bfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f000 f9c6 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801bfb6:	6438      	str	r0, [r7, #64]	; 0x40
        for (int i = 0; i < KVGroup::NumKV; i++)
 801bfb8:	2300      	movs	r3, #0
 801bfba:	647b      	str	r3, [r7, #68]	; 0x44
 801bfbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	dc52      	bgt.n	801c068 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0xda>
            const KVPair* const kv = p->kvs + i;
 801bfc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfc4:	f103 0108 	add.w	r1, r3, #8
 801bfc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bfca:	4613      	mov	r3, r2
 801bfcc:	009b      	lsls	r3, r3, #2
 801bfce:	4413      	add	r3, r2
 801bfd0:	00db      	lsls	r3, r3, #3
 801bfd2:	440b      	add	r3, r1
 801bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (!kv->match(Key()))
 801bfd6:	f107 030c 	add.w	r3, r7, #12
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7ea f906 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801bfe0:	f107 030c 	add.w	r3, r7, #12
 801bfe4:	4619      	mov	r1, r3
 801bfe6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801bfe8:	f000 f9b7 	bl	801c35a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPair5matchERKS1_>
 801bfec:	4603      	mov	r3, r0
 801bfee:	f083 0301 	eor.w	r3, r3, #1
 801bff2:	b2db      	uxtb	r3, r3
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d033      	beq.n	801c060 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0xd2>
                if (predicate(kv->key, kv->value))
 801bff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bffa:	3320      	adds	r3, #32
 801bffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bffe:	4619      	mov	r1, r3
 801c000:	6838      	ldr	r0, [r7, #0]
 801c002:	f7ff fcee 	bl	801b9e2 <_ZNK6uavcan16TransferListener25TimedOutReceiverPredicateclERKNS_24TransferBufferManagerKeyERKNS_16TransferReceiverE>
 801c006:	4603      	mov	r3, r0
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d029      	beq.n	801c060 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0xd2>
                    num_removed++;
 801c00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c00e:	3301      	adds	r3, #1
 801c010:	64fb      	str	r3, [r7, #76]	; 0x4c
                    p->kvs[i] = KVPair();
 801c012:	f107 0310 	add.w	r3, r7, #16
 801c016:	4618      	mov	r0, r3
 801c018:	f000 f9af 	bl	801c37a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1Ev>
 801c01c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c01e:	4613      	mov	r3, r2
 801c020:	009b      	lsls	r3, r3, #2
 801c022:	4413      	add	r3, r2
 801c024:	00db      	lsls	r3, r3, #3
 801c026:	3308      	adds	r3, #8
 801c028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c02a:	4413      	add	r3, r2
 801c02c:	f107 0410 	add.w	r4, r7, #16
 801c030:	469c      	mov	ip, r3
 801c032:	f104 0e20 	add.w	lr, r4, #32
 801c036:	4665      	mov	r5, ip
 801c038:	4626      	mov	r6, r4
 801c03a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c03c:	6028      	str	r0, [r5, #0]
 801c03e:	6069      	str	r1, [r5, #4]
 801c040:	60aa      	str	r2, [r5, #8]
 801c042:	60eb      	str	r3, [r5, #12]
 801c044:	3410      	adds	r4, #16
 801c046:	f10c 0c10 	add.w	ip, ip, #16
 801c04a:	4574      	cmp	r4, lr
 801c04c:	d1f3      	bne.n	801c036 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0xa8>
 801c04e:	4662      	mov	r2, ip
 801c050:	4623      	mov	r3, r4
 801c052:	881b      	ldrh	r3, [r3, #0]
 801c054:	8013      	strh	r3, [r2, #0]
 801c056:	f107 0310 	add.w	r3, r7, #16
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7ff ff8a 	bl	801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c062:	3301      	adds	r3, #1
 801c064:	647b      	str	r3, [r7, #68]	; 0x44
 801c066:	e7a9      	b.n	801bfbc <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0x2e>
        p = next_group;
 801c068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c06a:	64bb      	str	r3, [r7, #72]	; 0x48
    while (p != UAVCAN_NULLPTR)
 801c06c:	e79c      	b.n	801bfa8 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0x1a>
    if (num_removed > 0)
 801c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c070:	2b00      	cmp	r3, #0
 801c072:	d002      	beq.n	801c07a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS_16TransferListener25TimedOutReceiverPredicateEEEvT_+0xec>
        compact();
 801c074:	6878      	ldr	r0, [r7, #4]
 801c076:	f000 f992 	bl	801c39e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv>
}
 801c07a:	bf00      	nop
 801c07c:	3754      	adds	r7, #84	; 0x54
 801c07e:	46bd      	mov	sp, r7
 801c080:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c082 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7isEmptyEv>:
    bool isEmpty() const { return find(YesPredicate()) == UAVCAN_NULLPTR; }
 801c082:	b580      	push	{r7, lr}
 801c084:	b084      	sub	sp, #16
 801c086:	af00      	add	r7, sp, #0
 801c088:	6078      	str	r0, [r7, #4]
 801c08a:	4619      	mov	r1, r3
 801c08c:	6878      	ldr	r0, [r7, #4]
 801c08e:	f000 f9d9 	bl	801c444 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_>
 801c092:	4603      	mov	r3, r0
 801c094:	2b00      	cmp	r3, #0
 801c096:	bf0c      	ite	eq
 801c098:	2301      	moveq	r3, #1
 801c09a:	2300      	movne	r3, #0
 801c09c:	b2db      	uxtb	r3, r3
 801c09e:	4618      	mov	r0, r3
 801c0a0:	3710      	adds	r7, #16
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	bd80      	pop	{r7, pc}
	...

0801c0a8 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_>:
Value* Map<Key, Value>::access(const Key& key)
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	b084      	sub	sp, #16
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	6078      	str	r0, [r7, #4]
 801c0b0:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!(key == Key()));
 801c0b2:	f107 0308 	add.w	r3, r7, #8
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	f7ea f898 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c0bc:	f107 0308 	add.w	r3, r7, #8
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	6838      	ldr	r0, [r7, #0]
 801c0c4:	f7ea f8b4 	bl	8006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	f083 0301 	eor.w	r3, r3, #1
 801c0ce:	b2db      	uxtb	r3, r3
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d105      	bne.n	801c0e0 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_+0x38>
 801c0d4:	4b0a      	ldr	r3, [pc, #40]	; (801c100 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_+0x58>)
 801c0d6:	4a0b      	ldr	r2, [pc, #44]	; (801c104 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_+0x5c>)
 801c0d8:	21e3      	movs	r1, #227	; 0xe3
 801c0da:	480b      	ldr	r0, [pc, #44]	; (801c108 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_+0x60>)
 801c0dc:	f004 fa56 	bl	802058c <__assert_func>
    KVPair* const kv = findKey(key);
 801c0e0:	6839      	ldr	r1, [r7, #0]
 801c0e2:	6878      	ldr	r0, [r7, #4]
 801c0e4:	f000 fa01 	bl	801c4ea <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_>
 801c0e8:	60f8      	str	r0, [r7, #12]
    return kv ? &kv->value : UAVCAN_NULLPTR;
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d001      	beq.n	801c0f4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_+0x4c>
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	e000      	b.n	801c0f6 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6accessERKS1_+0x4e>
 801c0f4:	2300      	movs	r3, #0
}
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	3710      	adds	r7, #16
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	bd80      	pop	{r7, pc}
 801c0fe:	bf00      	nop
 801c100:	08024348 	.word	0x08024348
 801c104:	0802c164 	.word	0x0802c164
 801c108:	08024358 	.word	0x08024358

0801c10c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_>:
Value* Map<Key, Value>::insert(const Key& key, const Value& value)
 801c10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c10e:	b09d      	sub	sp, #116	; 0x74
 801c110:	af00      	add	r7, sp, #0
 801c112:	60f8      	str	r0, [r7, #12]
 801c114:	60b9      	str	r1, [r7, #8]
 801c116:	607a      	str	r2, [r7, #4]
    UAVCAN_ASSERT(!(key == Key()));
 801c118:	f107 0310 	add.w	r3, r7, #16
 801c11c:	4618      	mov	r0, r3
 801c11e:	f7ea f865 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c122:	f107 0310 	add.w	r3, r7, #16
 801c126:	4619      	mov	r1, r3
 801c128:	68b8      	ldr	r0, [r7, #8]
 801c12a:	f7ea f881 	bl	8006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>
 801c12e:	4603      	mov	r3, r0
 801c130:	f083 0301 	eor.w	r3, r3, #1
 801c134:	b2db      	uxtb	r3, r3
 801c136:	2b00      	cmp	r3, #0
 801c138:	d105      	bne.n	801c146 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x3a>
 801c13a:	4b3b      	ldr	r3, [pc, #236]	; (801c228 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x11c>)
 801c13c:	4a3b      	ldr	r2, [pc, #236]	; (801c22c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x120>)
 801c13e:	21eb      	movs	r1, #235	; 0xeb
 801c140:	483b      	ldr	r0, [pc, #236]	; (801c230 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x124>)
 801c142:	f004 fa23 	bl	802058c <__assert_func>
    remove(key);
 801c146:	68b9      	ldr	r1, [r7, #8]
 801c148:	68f8      	ldr	r0, [r7, #12]
 801c14a:	f000 f9f1 	bl	801c530 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_>
    KVPair* const kv = findKey(Key());
 801c14e:	f107 0314 	add.w	r3, r7, #20
 801c152:	4618      	mov	r0, r3
 801c154:	f7ea f84a 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c158:	f107 0314 	add.w	r3, r7, #20
 801c15c:	4619      	mov	r1, r3
 801c15e:	68f8      	ldr	r0, [r7, #12]
 801c160:	f000 f9c3 	bl	801c4ea <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_>
 801c164:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (kv)
 801c166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d023      	beq.n	801c1b4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0xa8>
        *kv = KVPair(key, value);
 801c16c:	f107 0318 	add.w	r3, r7, #24
 801c170:	687a      	ldr	r2, [r7, #4]
 801c172:	68b9      	ldr	r1, [r7, #8]
 801c174:	4618      	mov	r0, r3
 801c176:	f000 fa2d 	bl	801c5d4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1ERKS1_RKS2_>
 801c17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c17c:	f107 0418 	add.w	r4, r7, #24
 801c180:	469c      	mov	ip, r3
 801c182:	f104 0e20 	add.w	lr, r4, #32
 801c186:	4665      	mov	r5, ip
 801c188:	4626      	mov	r6, r4
 801c18a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c18c:	6028      	str	r0, [r5, #0]
 801c18e:	6069      	str	r1, [r5, #4]
 801c190:	60aa      	str	r2, [r5, #8]
 801c192:	60eb      	str	r3, [r5, #12]
 801c194:	3410      	adds	r4, #16
 801c196:	f10c 0c10 	add.w	ip, ip, #16
 801c19a:	4574      	cmp	r4, lr
 801c19c:	d1f3      	bne.n	801c186 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x7a>
 801c19e:	4662      	mov	r2, ip
 801c1a0:	4623      	mov	r3, r4
 801c1a2:	881b      	ldrh	r3, [r3, #0]
 801c1a4:	8013      	strh	r3, [r2, #0]
 801c1a6:	f107 0318 	add.w	r3, r7, #24
 801c1aa:	4618      	mov	r0, r3
 801c1ac:	f7ff fee2 	bl	801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>
        return &kv->value;
 801c1b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c1b2:	e035      	b.n	801c220 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x114>
    KVGroup* const kvg = KVGroup::instantiate(allocator_);
 801c1b4:	68fb      	ldr	r3, [r7, #12]
 801c1b6:	689b      	ldr	r3, [r3, #8]
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f000 fa26 	bl	801c60a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup11instantiateERNS_14IPoolAllocatorE>
 801c1be:	66b8      	str	r0, [r7, #104]	; 0x68
    if (kvg == UAVCAN_NULLPTR)
 801c1c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d101      	bne.n	801c1ca <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0xbe>
        return UAVCAN_NULLPTR;
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	e02a      	b.n	801c220 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0x114>
    list_.insert(kvg);
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	3304      	adds	r3, #4
 801c1ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	f000 fa3d 	bl	801c650 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6insertEPS5_>
    kvg->kvs[0] = KVPair(key, value);
 801c1d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c1da:	687a      	ldr	r2, [r7, #4]
 801c1dc:	68b9      	ldr	r1, [r7, #8]
 801c1de:	4618      	mov	r0, r3
 801c1e0:	f000 f9f8 	bl	801c5d4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1ERKS1_RKS2_>
 801c1e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c1e6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801c1ea:	f103 0c08 	add.w	ip, r3, #8
 801c1ee:	f104 0e20 	add.w	lr, r4, #32
 801c1f2:	4665      	mov	r5, ip
 801c1f4:	4626      	mov	r6, r4
 801c1f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c1f8:	6028      	str	r0, [r5, #0]
 801c1fa:	6069      	str	r1, [r5, #4]
 801c1fc:	60aa      	str	r2, [r5, #8]
 801c1fe:	60eb      	str	r3, [r5, #12]
 801c200:	3410      	adds	r4, #16
 801c202:	f10c 0c10 	add.w	ip, ip, #16
 801c206:	4574      	cmp	r4, lr
 801c208:	d1f3      	bne.n	801c1f2 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6insertERKS1_RKS2_+0xe6>
 801c20a:	4662      	mov	r2, ip
 801c20c:	4623      	mov	r3, r4
 801c20e:	881b      	ldrh	r3, [r3, #0]
 801c210:	8013      	strh	r3, [r2, #0]
 801c212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c216:	4618      	mov	r0, r3
 801c218:	f7ff feac 	bl	801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>
    return &kvg->kvs[0].value;
 801c21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c21e:	3308      	adds	r3, #8
}
 801c220:	4618      	mov	r0, r3
 801c222:	3774      	adds	r7, #116	; 0x74
 801c224:	46bd      	mov	sp, r7
 801c226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c228:	08024348 	.word	0x08024348
 801c22c:	0802c1e8 	.word	0x0802c1e8
 801c230:	08024358 	.word	0x08024358

0801c234 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_>:
void Map<Key, Value>::removeAllWhere(Predicate predicate)
 801c234:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c236:	b095      	sub	sp, #84	; 0x54
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
 801c23c:	7039      	strb	r1, [r7, #0]
    unsigned num_removed = 0;
 801c23e:	2300      	movs	r3, #0
 801c240:	64fb      	str	r3, [r7, #76]	; 0x4c
    KVGroup* p = list_.get();
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	3304      	adds	r3, #4
 801c246:	4618      	mov	r0, r3
 801c248:	f000 f86f 	bl	801c32a <_ZNK6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE3getEv>
 801c24c:	64b8      	str	r0, [r7, #72]	; 0x48
    while (p != UAVCAN_NULLPTR)
 801c24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c250:	2b00      	cmp	r3, #0
 801c252:	d060      	beq.n	801c316 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0xe2>
        KVGroup* const next_group = p->getNextListNode();
 801c254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c256:	4618      	mov	r0, r3
 801c258:	f000 f873 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c25c:	6438      	str	r0, [r7, #64]	; 0x40
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c25e:	2300      	movs	r3, #0
 801c260:	647b      	str	r3, [r7, #68]	; 0x44
 801c262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c264:	2b00      	cmp	r3, #0
 801c266:	dc53      	bgt.n	801c310 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0xdc>
            const KVPair* const kv = p->kvs + i;
 801c268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c26a:	f103 0108 	add.w	r1, r3, #8
 801c26e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c270:	4613      	mov	r3, r2
 801c272:	009b      	lsls	r3, r3, #2
 801c274:	4413      	add	r3, r2
 801c276:	00db      	lsls	r3, r3, #3
 801c278:	440b      	add	r3, r1
 801c27a:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (!kv->match(Key()))
 801c27c:	f107 030c 	add.w	r3, r7, #12
 801c280:	4618      	mov	r0, r3
 801c282:	f7e9 ffb3 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c286:	f107 030c 	add.w	r3, r7, #12
 801c28a:	4619      	mov	r1, r3
 801c28c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c28e:	f000 f864 	bl	801c35a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPair5matchERKS1_>
 801c292:	4603      	mov	r3, r0
 801c294:	f083 0301 	eor.w	r3, r3, #1
 801c298:	b2db      	uxtb	r3, r3
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d034      	beq.n	801c308 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0xd4>
                if (predicate(kv->key, kv->value))
 801c29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2a0:	f103 0120 	add.w	r1, r3, #32
 801c2a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c2a6:	463b      	mov	r3, r7
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	f000 f9f7 	bl	801c69c <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE12YesPredicateclERKS1_RKS2_>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d029      	beq.n	801c308 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0xd4>
                    num_removed++;
 801c2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2b6:	3301      	adds	r3, #1
 801c2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                    p->kvs[i] = KVPair();
 801c2ba:	f107 0310 	add.w	r3, r7, #16
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f000 f85b 	bl	801c37a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1Ev>
 801c2c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c2c6:	4613      	mov	r3, r2
 801c2c8:	009b      	lsls	r3, r3, #2
 801c2ca:	4413      	add	r3, r2
 801c2cc:	00db      	lsls	r3, r3, #3
 801c2ce:	3308      	adds	r3, #8
 801c2d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c2d2:	4413      	add	r3, r2
 801c2d4:	f107 0410 	add.w	r4, r7, #16
 801c2d8:	469c      	mov	ip, r3
 801c2da:	f104 0e20 	add.w	lr, r4, #32
 801c2de:	4665      	mov	r5, ip
 801c2e0:	4626      	mov	r6, r4
 801c2e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c2e4:	6028      	str	r0, [r5, #0]
 801c2e6:	6069      	str	r1, [r5, #4]
 801c2e8:	60aa      	str	r2, [r5, #8]
 801c2ea:	60eb      	str	r3, [r5, #12]
 801c2ec:	3410      	adds	r4, #16
 801c2ee:	f10c 0c10 	add.w	ip, ip, #16
 801c2f2:	4574      	cmp	r4, lr
 801c2f4:	d1f3      	bne.n	801c2de <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0xaa>
 801c2f6:	4662      	mov	r2, ip
 801c2f8:	4623      	mov	r3, r4
 801c2fa:	881b      	ldrh	r3, [r3, #0]
 801c2fc:	8013      	strh	r3, [r2, #0]
 801c2fe:	f107 0310 	add.w	r3, r7, #16
 801c302:	4618      	mov	r0, r3
 801c304:	f7ff fe36 	bl	801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c30a:	3301      	adds	r3, #1
 801c30c:	647b      	str	r3, [r7, #68]	; 0x44
 801c30e:	e7a8      	b.n	801c262 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0x2e>
        p = next_group;
 801c310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c312:	64bb      	str	r3, [r7, #72]	; 0x48
    while (p != UAVCAN_NULLPTR)
 801c314:	e79b      	b.n	801c24e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0x1a>
    if (num_removed > 0)
 801c316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d002      	beq.n	801c322 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE14removeAllWhereINS3_12YesPredicateEEEvT_+0xee>
        compact();
 801c31c:	6878      	ldr	r0, [r7, #4]
 801c31e:	f000 f83e 	bl	801c39e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv>
}
 801c322:	bf00      	nop
 801c324:	3754      	adds	r7, #84	; 0x54
 801c326:	46bd      	mov	sp, r7
 801c328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c32a <_ZNK6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE3getEv>:
    T* get() const { return root_; }
 801c32a:	b480      	push	{r7}
 801c32c:	b083      	sub	sp, #12
 801c32e:	af00      	add	r7, sp, #0
 801c330:	6078      	str	r0, [r7, #4]
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	4618      	mov	r0, r3
 801c338:	370c      	adds	r7, #12
 801c33a:	46bd      	mov	sp, r7
 801c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c340:	4770      	bx	lr

0801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>:
    T* getNextListNode() const { return next_; }
 801c342:	b480      	push	{r7}
 801c344:	b083      	sub	sp, #12
 801c346:	af00      	add	r7, sp, #0
 801c348:	6078      	str	r0, [r7, #4]
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	4618      	mov	r0, r3
 801c350:	370c      	adds	r7, #12
 801c352:	46bd      	mov	sp, r7
 801c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c358:	4770      	bx	lr

0801c35a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPair5matchERKS1_>:
        bool match(const Key& rhs) const { return rhs == key; }
 801c35a:	b580      	push	{r7, lr}
 801c35c:	b082      	sub	sp, #8
 801c35e:	af00      	add	r7, sp, #0
 801c360:	6078      	str	r0, [r7, #4]
 801c362:	6039      	str	r1, [r7, #0]
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	3320      	adds	r3, #32
 801c368:	4619      	mov	r1, r3
 801c36a:	6838      	ldr	r0, [r7, #0]
 801c36c:	f7e9 ff60 	bl	8006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>
 801c370:	4603      	mov	r3, r0
 801c372:	4618      	mov	r0, r3
 801c374:	3708      	adds	r7, #8
 801c376:	46bd      	mov	sp, r7
 801c378:	bd80      	pop	{r7, pc}

0801c37a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1Ev>:
        KVPair() :
 801c37a:	b580      	push	{r7, lr}
 801c37c:	b082      	sub	sp, #8
 801c37e:	af00      	add	r7, sp, #0
 801c380:	6078      	str	r0, [r7, #4]
            key()
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	4618      	mov	r0, r3
 801c386:	f7ff f86e 	bl	801b466 <_ZN6uavcan16TransferReceiverC1Ev>
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	3320      	adds	r3, #32
 801c38e:	4618      	mov	r0, r3
 801c390:	f7e9 ff2c 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
        { }
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	4618      	mov	r0, r3
 801c398:	3708      	adds	r7, #8
 801c39a:	46bd      	mov	sp, r7
 801c39c:	bd80      	pop	{r7, pc}

0801c39e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv>:
void Map<Key, Value>::compact()
 801c39e:	b590      	push	{r4, r7, lr}
 801c3a0:	b089      	sub	sp, #36	; 0x24
 801c3a2:	af00      	add	r7, sp, #0
 801c3a4:	6078      	str	r0, [r7, #4]
    KVGroup* p = list_.get();
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	3304      	adds	r3, #4
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f7ff ffbd 	bl	801c32a <_ZNK6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE3getEv>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	60fb      	str	r3, [r7, #12]
    while (p)
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d040      	beq.n	801c43c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x9e>
        KVGroup* const next = p->getNextListNode();
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	4618      	mov	r0, r3
 801c3be:	f7ff ffc0 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c3c2:	6178      	str	r0, [r7, #20]
        bool remove_this = true;
 801c3c4:	2301      	movs	r3, #1
 801c3c6:	77fb      	strb	r3, [r7, #31]
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c3c8:	2300      	movs	r3, #0
 801c3ca:	61bb      	str	r3, [r7, #24]
 801c3cc:	69bb      	ldr	r3, [r7, #24]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	dc1f      	bgt.n	801c412 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x74>
            if (!p->kvs[i].match(Key()))
 801c3d2:	68f9      	ldr	r1, [r7, #12]
 801c3d4:	69ba      	ldr	r2, [r7, #24]
 801c3d6:	4613      	mov	r3, r2
 801c3d8:	009b      	lsls	r3, r3, #2
 801c3da:	4413      	add	r3, r2
 801c3dc:	00db      	lsls	r3, r3, #3
 801c3de:	3308      	adds	r3, #8
 801c3e0:	18cc      	adds	r4, r1, r3
 801c3e2:	f107 0310 	add.w	r3, r7, #16
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f7e9 ff00 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c3ec:	f107 0310 	add.w	r3, r7, #16
 801c3f0:	4619      	mov	r1, r3
 801c3f2:	4620      	mov	r0, r4
 801c3f4:	f7ff ffb1 	bl	801c35a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPair5matchERKS1_>
 801c3f8:	4603      	mov	r3, r0
 801c3fa:	f083 0301 	eor.w	r3, r3, #1
 801c3fe:	b2db      	uxtb	r3, r3
 801c400:	2b00      	cmp	r3, #0
 801c402:	d002      	beq.n	801c40a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x6c>
                remove_this = false;
 801c404:	2300      	movs	r3, #0
 801c406:	77fb      	strb	r3, [r7, #31]
                break;
 801c408:	e003      	b.n	801c412 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x74>
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c40a:	69bb      	ldr	r3, [r7, #24]
 801c40c:	3301      	adds	r3, #1
 801c40e:	61bb      	str	r3, [r7, #24]
 801c410:	e7dc      	b.n	801c3cc <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x2e>
        if (remove_this)
 801c412:	7ffb      	ldrb	r3, [r7, #31]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d00e      	beq.n	801c436 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x98>
            list_.remove(p);
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	3304      	adds	r3, #4
 801c41c:	68fa      	ldr	r2, [r7, #12]
 801c41e:	4611      	mov	r1, r2
 801c420:	4618      	mov	r0, r3
 801c422:	f000 f948 	bl	801c6b6 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_>
            KVGroup::destroy(p, allocator_);
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	689a      	ldr	r2, [r3, #8]
 801c42a:	f107 030c 	add.w	r3, r7, #12
 801c42e:	4611      	mov	r1, r2
 801c430:	4618      	mov	r0, r3
 801c432:	f000 f9ad 	bl	801c790 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup7destroyERPS4_RNS_14IPoolAllocatorE>
        p = next;
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	60fb      	str	r3, [r7, #12]
    while (p)
 801c43a:	e7bb      	b.n	801c3b4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv+0x16>
}
 801c43c:	bf00      	nop
 801c43e:	3724      	adds	r7, #36	; 0x24
 801c440:	46bd      	mov	sp, r7
 801c442:	bd90      	pop	{r4, r7, pc}

0801c444 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_>:
const Key* Map<Key, Value>::find(Predicate predicate) const
 801c444:	b580      	push	{r7, lr}
 801c446:	b088      	sub	sp, #32
 801c448:	af00      	add	r7, sp, #0
 801c44a:	6078      	str	r0, [r7, #4]
 801c44c:	7039      	strb	r1, [r7, #0]
    KVGroup* p = list_.get();
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	3304      	adds	r3, #4
 801c452:	4618      	mov	r0, r3
 801c454:	f7ff ff69 	bl	801c32a <_ZNK6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE3getEv>
 801c458:	61f8      	str	r0, [r7, #28]
    while (p != UAVCAN_NULLPTR)
 801c45a:	69fb      	ldr	r3, [r7, #28]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d03f      	beq.n	801c4e0 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x9c>
        KVGroup* const next_group = p->getNextListNode();
 801c460:	69fb      	ldr	r3, [r7, #28]
 801c462:	4618      	mov	r0, r3
 801c464:	f7ff ff6d 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c468:	6178      	str	r0, [r7, #20]
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c46a:	2300      	movs	r3, #0
 801c46c:	61bb      	str	r3, [r7, #24]
 801c46e:	69bb      	ldr	r3, [r7, #24]
 801c470:	2b00      	cmp	r3, #0
 801c472:	dc32      	bgt.n	801c4da <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x96>
            const KVPair* const kv = p->kvs + i;
 801c474:	69fb      	ldr	r3, [r7, #28]
 801c476:	f103 0108 	add.w	r1, r3, #8
 801c47a:	69ba      	ldr	r2, [r7, #24]
 801c47c:	4613      	mov	r3, r2
 801c47e:	009b      	lsls	r3, r3, #2
 801c480:	4413      	add	r3, r2
 801c482:	00db      	lsls	r3, r3, #3
 801c484:	440b      	add	r3, r1
 801c486:	613b      	str	r3, [r7, #16]
            if (!kv->match(Key()))
 801c488:	f107 030c 	add.w	r3, r7, #12
 801c48c:	4618      	mov	r0, r3
 801c48e:	f7e9 fead 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c492:	f107 030c 	add.w	r3, r7, #12
 801c496:	4619      	mov	r1, r3
 801c498:	6938      	ldr	r0, [r7, #16]
 801c49a:	f7ff ff5e 	bl	801c35a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPair5matchERKS1_>
 801c49e:	4603      	mov	r3, r0
 801c4a0:	f083 0301 	eor.w	r3, r3, #1
 801c4a4:	b2db      	uxtb	r3, r3
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d013      	beq.n	801c4d2 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x8e>
                if (predicate(kv->key, kv->value))
 801c4aa:	693b      	ldr	r3, [r7, #16]
 801c4ac:	f103 0120 	add.w	r1, r3, #32
 801c4b0:	693a      	ldr	r2, [r7, #16]
 801c4b2:	463b      	mov	r3, r7
 801c4b4:	4618      	mov	r0, r3
 801c4b6:	f000 f8f1 	bl	801c69c <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE12YesPredicateclERKS1_RKS2_>
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d008      	beq.n	801c4d2 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x8e>
                    return &p->kvs[i].key;
 801c4c0:	69bb      	ldr	r3, [r7, #24]
 801c4c2:	1c5a      	adds	r2, r3, #1
 801c4c4:	4613      	mov	r3, r2
 801c4c6:	009b      	lsls	r3, r3, #2
 801c4c8:	4413      	add	r3, r2
 801c4ca:	00db      	lsls	r3, r3, #3
 801c4cc:	69fa      	ldr	r2, [r7, #28]
 801c4ce:	4413      	add	r3, r2
 801c4d0:	e007      	b.n	801c4e2 <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x9e>
        for (int i = 0; i < KVGroup::NumKV; i++)
 801c4d2:	69bb      	ldr	r3, [r7, #24]
 801c4d4:	3301      	adds	r3, #1
 801c4d6:	61bb      	str	r3, [r7, #24]
 801c4d8:	e7c9      	b.n	801c46e <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x2a>
        p = next_group;
 801c4da:	697b      	ldr	r3, [r7, #20]
 801c4dc:	61fb      	str	r3, [r7, #28]
    while (p != UAVCAN_NULLPTR)
 801c4de:	e7bc      	b.n	801c45a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE4findINS3_12YesPredicateEEEPKS1_T_+0x16>
    return UAVCAN_NULLPTR;
 801c4e0:	2300      	movs	r3, #0
}
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	3720      	adds	r7, #32
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	bd80      	pop	{r7, pc}

0801c4ea <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_>:
typename Map<Key, Value>::KVPair* Map<Key, Value>::findKey(const Key& key)
 801c4ea:	b580      	push	{r7, lr}
 801c4ec:	b084      	sub	sp, #16
 801c4ee:	af00      	add	r7, sp, #0
 801c4f0:	6078      	str	r0, [r7, #4]
 801c4f2:	6039      	str	r1, [r7, #0]
    KVGroup* p = list_.get();
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	3304      	adds	r3, #4
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	f7ff ff16 	bl	801c32a <_ZNK6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE3getEv>
 801c4fe:	60f8      	str	r0, [r7, #12]
    while (p)
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d00f      	beq.n	801c526 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_+0x3c>
        KVPair* const kv = p->find(key);
 801c506:	6839      	ldr	r1, [r7, #0]
 801c508:	68f8      	ldr	r0, [r7, #12]
 801c50a:	f000 f95f 	bl	801c7cc <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup4findERKS1_>
 801c50e:	60b8      	str	r0, [r7, #8]
        if (kv)
 801c510:	68bb      	ldr	r3, [r7, #8]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d001      	beq.n	801c51a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_+0x30>
            return kv;
 801c516:	68bb      	ldr	r3, [r7, #8]
 801c518:	e006      	b.n	801c528 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_+0x3e>
        p = p->getNextListNode();
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	4618      	mov	r0, r3
 801c51e:	f7ff ff10 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c522:	60f8      	str	r0, [r7, #12]
    while (p)
 801c524:	e7ec      	b.n	801c500 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_+0x16>
    return UAVCAN_NULLPTR;
 801c526:	2300      	movs	r3, #0
}
 801c528:	4618      	mov	r0, r3
 801c52a:	3710      	adds	r7, #16
 801c52c:	46bd      	mov	sp, r7
 801c52e:	bd80      	pop	{r7, pc}

0801c530 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_>:
void Map<Key, Value>::remove(const Key& key)
 801c530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c532:	b091      	sub	sp, #68	; 0x44
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	6039      	str	r1, [r7, #0]
    UAVCAN_ASSERT(!(key == Key()));
 801c53a:	f107 030c 	add.w	r3, r7, #12
 801c53e:	4618      	mov	r0, r3
 801c540:	f7e9 fe54 	bl	80061ec <_ZN6uavcan24TransferBufferManagerKeyC1Ev>
 801c544:	f107 030c 	add.w	r3, r7, #12
 801c548:	4619      	mov	r1, r3
 801c54a:	6838      	ldr	r0, [r7, #0]
 801c54c:	f7e9 fe70 	bl	8006230 <_ZNK6uavcan24TransferBufferManagerKeyeqERKS0_>
 801c550:	4603      	mov	r3, r0
 801c552:	f083 0301 	eor.w	r3, r3, #1
 801c556:	b2db      	uxtb	r3, r3
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d106      	bne.n	801c56a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_+0x3a>
 801c55c:	4b1a      	ldr	r3, [pc, #104]	; (801c5c8 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_+0x98>)
 801c55e:	4a1b      	ldr	r2, [pc, #108]	; (801c5cc <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_+0x9c>)
 801c560:	f44f 7181 	mov.w	r1, #258	; 0x102
 801c564:	481a      	ldr	r0, [pc, #104]	; (801c5d0 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_+0xa0>)
 801c566:	f004 f811 	bl	802058c <__assert_func>
    KVPair* const kv = findKey(key);
 801c56a:	6839      	ldr	r1, [r7, #0]
 801c56c:	6878      	ldr	r0, [r7, #4]
 801c56e:	f7ff ffbc 	bl	801c4ea <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7findKeyERKS1_>
 801c572:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (kv)
 801c574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c576:	2b00      	cmp	r3, #0
 801c578:	d022      	beq.n	801c5c0 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_+0x90>
        *kv = KVPair();
 801c57a:	f107 0310 	add.w	r3, r7, #16
 801c57e:	4618      	mov	r0, r3
 801c580:	f7ff fefb 	bl	801c37a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1Ev>
 801c584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c586:	f107 0410 	add.w	r4, r7, #16
 801c58a:	469c      	mov	ip, r3
 801c58c:	f104 0e20 	add.w	lr, r4, #32
 801c590:	4665      	mov	r5, ip
 801c592:	4626      	mov	r6, r4
 801c594:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801c596:	6028      	str	r0, [r5, #0]
 801c598:	6069      	str	r1, [r5, #4]
 801c59a:	60aa      	str	r2, [r5, #8]
 801c59c:	60eb      	str	r3, [r5, #12]
 801c59e:	3410      	adds	r4, #16
 801c5a0:	f10c 0c10 	add.w	ip, ip, #16
 801c5a4:	4574      	cmp	r4, lr
 801c5a6:	d1f3      	bne.n	801c590 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6removeERKS1_+0x60>
 801c5a8:	4662      	mov	r2, ip
 801c5aa:	4623      	mov	r3, r4
 801c5ac:	881b      	ldrh	r3, [r3, #0]
 801c5ae:	8013      	strh	r3, [r2, #0]
 801c5b0:	f107 0310 	add.w	r3, r7, #16
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	f7ff fcdd 	bl	801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>
        compact();
 801c5ba:	6878      	ldr	r0, [r7, #4]
 801c5bc:	f7ff feef 	bl	801c39e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7compactEv>
}
 801c5c0:	bf00      	nop
 801c5c2:	3744      	adds	r7, #68	; 0x44
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c5c8:	08024348 	.word	0x08024348
 801c5cc:	0802c27c 	.word	0x0802c27c
 801c5d0:	08024358 	.word	0x08024358

0801c5d4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1ERKS1_RKS2_>:
        KVPair(const Key& arg_key, const Value& arg_value) :
 801c5d4:	b4b0      	push	{r4, r5, r7}
 801c5d6:	b085      	sub	sp, #20
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	60f8      	str	r0, [r7, #12]
 801c5dc:	60b9      	str	r1, [r7, #8]
 801c5de:	607a      	str	r2, [r7, #4]
            key(arg_key)
 801c5e0:	68fa      	ldr	r2, [r7, #12]
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	4614      	mov	r4, r2
 801c5e6:	461d      	mov	r5, r3
 801c5e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c5ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c5ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c5f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	68ba      	ldr	r2, [r7, #8]
 801c5f8:	3320      	adds	r3, #32
 801c5fa:	8812      	ldrh	r2, [r2, #0]
 801c5fc:	801a      	strh	r2, [r3, #0]
        { }
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	4618      	mov	r0, r3
 801c602:	3714      	adds	r7, #20
 801c604:	46bd      	mov	sp, r7
 801c606:	bcb0      	pop	{r4, r5, r7}
 801c608:	4770      	bx	lr

0801c60a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup11instantiateERNS_14IPoolAllocatorE>:
        static KVGroup* instantiate(IPoolAllocator& allocator)
 801c60a:	b590      	push	{r4, r7, lr}
 801c60c:	b085      	sub	sp, #20
 801c60e:	af00      	add	r7, sp, #0
 801c610:	6078      	str	r0, [r7, #4]
            void* const praw = allocator.allocate(sizeof(KVGroup));
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	3308      	adds	r3, #8
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	2130      	movs	r1, #48	; 0x30
 801c61c:	6878      	ldr	r0, [r7, #4]
 801c61e:	4798      	blx	r3
 801c620:	60f8      	str	r0, [r7, #12]
            if (praw == UAVCAN_NULLPTR)
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	2b00      	cmp	r3, #0
 801c626:	d101      	bne.n	801c62c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x22>
                return UAVCAN_NULLPTR;
 801c628:	2300      	movs	r3, #0
 801c62a:	e00d      	b.n	801c648 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x3e>
            return new (praw) KVGroup();
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	4619      	mov	r1, r3
 801c630:	2030      	movs	r0, #48	; 0x30
 801c632:	f7e9 fc61 	bl	8005ef8 <_ZnwjPv>
 801c636:	4604      	mov	r4, r0
 801c638:	2c00      	cmp	r4, #0
 801c63a:	d004      	beq.n	801c646 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x3c>
 801c63c:	4620      	mov	r0, r4
 801c63e:	f000 f8f1 	bl	801c824 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupC1Ev>
 801c642:	4623      	mov	r3, r4
 801c644:	e000      	b.n	801c648 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup11instantiateERNS_14IPoolAllocatorE+0x3e>
 801c646:	4623      	mov	r3, r4
        }
 801c648:	4618      	mov	r0, r3
 801c64a:	3714      	adds	r7, #20
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd90      	pop	{r4, r7, pc}

0801c650 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6insertEPS5_>:
void LinkedListRoot<T>::insert(T* node)
 801c650:	b580      	push	{r7, lr}
 801c652:	b082      	sub	sp, #8
 801c654:	af00      	add	r7, sp, #0
 801c656:	6078      	str	r0, [r7, #4]
 801c658:	6039      	str	r1, [r7, #0]
    if (node == UAVCAN_NULLPTR)
 801c65a:	683b      	ldr	r3, [r7, #0]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d105      	bne.n	801c66c <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6insertEPS5_+0x1c>
        UAVCAN_ASSERT(0);
 801c660:	4b0b      	ldr	r3, [pc, #44]	; (801c690 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6insertEPS5_+0x40>)
 801c662:	4a0c      	ldr	r2, [pc, #48]	; (801c694 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6insertEPS5_+0x44>)
 801c664:	216a      	movs	r1, #106	; 0x6a
 801c666:	480c      	ldr	r0, [pc, #48]	; (801c698 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6insertEPS5_+0x48>)
 801c668:	f003 ff90 	bl	802058c <__assert_func>
    remove(node);  // Making sure there will be no loops
 801c66c:	6839      	ldr	r1, [r7, #0]
 801c66e:	6878      	ldr	r0, [r7, #4]
 801c670:	f000 f821 	bl	801c6b6 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_>
    node->setNextListNode(root_);
 801c674:	683a      	ldr	r2, [r7, #0]
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	4619      	mov	r1, r3
 801c67c:	4610      	mov	r0, r2
 801c67e:	f000 f8ee 	bl	801c85e <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15setNextListNodeEPS5_>
    root_ = node;
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	683a      	ldr	r2, [r7, #0]
 801c686:	601a      	str	r2, [r3, #0]
}
 801c688:	bf00      	nop
 801c68a:	3708      	adds	r7, #8
 801c68c:	46bd      	mov	sp, r7
 801c68e:	bd80      	pop	{r7, pc}
 801c690:	08024228 	.word	0x08024228
 801c694:	0802c300 	.word	0x0802c300
 801c698:	08024398 	.word	0x08024398

0801c69c <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE12YesPredicateclERKS1_RKS2_>:
        bool operator()(const Key&, const Value&) const { return true; }
 801c69c:	b480      	push	{r7}
 801c69e:	b085      	sub	sp, #20
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	60f8      	str	r0, [r7, #12]
 801c6a4:	60b9      	str	r1, [r7, #8]
 801c6a6:	607a      	str	r2, [r7, #4]
 801c6a8:	2301      	movs	r3, #1
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	3714      	adds	r7, #20
 801c6ae:	46bd      	mov	sp, r7
 801c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6b4:	4770      	bx	lr

0801c6b6 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_>:
void LinkedListRoot<T>::remove(const T* node)
 801c6b6:	b590      	push	{r4, r7, lr}
 801c6b8:	b085      	sub	sp, #20
 801c6ba:	af00      	add	r7, sp, #0
 801c6bc:	6078      	str	r0, [r7, #4]
 801c6be:	6039      	str	r1, [r7, #0]
    if (root_ == UAVCAN_NULLPTR || node == UAVCAN_NULLPTR)
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d041      	beq.n	801c74c <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x96>
 801c6c8:	683b      	ldr	r3, [r7, #0]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d03e      	beq.n	801c74c <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x96>
    if (root_ == node)
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	683a      	ldr	r2, [r7, #0]
 801c6d4:	429a      	cmp	r2, r3
 801c6d6:	d108      	bne.n	801c6ea <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x34>
        root_ = root_->getNextListNode();
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	4618      	mov	r0, r3
 801c6de:	f7ff fe30 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c6e2:	4602      	mov	r2, r0
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	601a      	str	r2, [r3, #0]
 801c6e8:	e031      	b.n	801c74e <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x98>
        T* p = root_;
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	60fb      	str	r3, [r7, #12]
        while (p->getNextListNode())
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	4618      	mov	r0, r3
 801c6f4:	f7ff fe25 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c6f8:	4603      	mov	r3, r0
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	bf14      	ite	ne
 801c6fe:	2301      	movne	r3, #1
 801c700:	2300      	moveq	r3, #0
 801c702:	b2db      	uxtb	r3, r3
 801c704:	2b00      	cmp	r3, #0
 801c706:	d022      	beq.n	801c74e <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x98>
            if (p->getNextListNode() == node)
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7ff fe19 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c710:	4602      	mov	r2, r0
 801c712:	683b      	ldr	r3, [r7, #0]
 801c714:	4293      	cmp	r3, r2
 801c716:	bf0c      	ite	eq
 801c718:	2301      	moveq	r3, #1
 801c71a:	2300      	movne	r3, #0
 801c71c:	b2db      	uxtb	r3, r3
 801c71e:	2b00      	cmp	r3, #0
 801c720:	d00e      	beq.n	801c740 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x8a>
                p->setNextListNode(p->getNextListNode()->getNextListNode());
 801c722:	68fc      	ldr	r4, [r7, #12]
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	4618      	mov	r0, r3
 801c728:	f7ff fe0b 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c72c:	4603      	mov	r3, r0
 801c72e:	4618      	mov	r0, r3
 801c730:	f7ff fe07 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c734:	4603      	mov	r3, r0
 801c736:	4619      	mov	r1, r3
 801c738:	4620      	mov	r0, r4
 801c73a:	f000 f890 	bl	801c85e <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15setNextListNodeEPS5_>
                break;
 801c73e:	e006      	b.n	801c74e <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x98>
            p = p->getNextListNode();
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	4618      	mov	r0, r3
 801c744:	f7ff fdfd 	bl	801c342 <_ZNK6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15getNextListNodeEv>
 801c748:	60f8      	str	r0, [r7, #12]
        while (p->getNextListNode())
 801c74a:	e7d1      	b.n	801c6f0 <_ZN6uavcan14LinkedListRootINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE6removeEPKS5_+0x3a>
        return;
 801c74c:	bf00      	nop
}
 801c74e:	3714      	adds	r7, #20
 801c750:	46bd      	mov	sp, r7
 801c752:	bd90      	pop	{r4, r7, pc}

0801c754 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupD1Ev>:
    struct KVGroup : LinkedListNode<KVGroup>
 801c754:	b590      	push	{r4, r7, lr}
 801c756:	b083      	sub	sp, #12
 801c758:	af00      	add	r7, sp, #0
 801c75a:	6078      	str	r0, [r7, #4]
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	3308      	adds	r3, #8
 801c760:	2b00      	cmp	r3, #0
 801c762:	d00c      	beq.n	801c77e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupD1Ev+0x2a>
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	3308      	adds	r3, #8
 801c768:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	3308      	adds	r3, #8
 801c770:	429c      	cmp	r4, r3
 801c772:	d004      	beq.n	801c77e <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupD1Ev+0x2a>
 801c774:	3c28      	subs	r4, #40	; 0x28
 801c776:	4620      	mov	r0, r4
 801c778:	f7ff fbfc 	bl	801bf74 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairD1Ev>
 801c77c:	e7f6      	b.n	801c76c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupD1Ev+0x18>
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	4618      	mov	r0, r3
 801c782:	f000 f87a 	bl	801c87a <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEED1Ev>
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	4618      	mov	r0, r3
 801c78a:	370c      	adds	r7, #12
 801c78c:	46bd      	mov	sp, r7
 801c78e:	bd90      	pop	{r4, r7, pc}

0801c790 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup7destroyERPS4_RNS_14IPoolAllocatorE>:
        static void destroy(KVGroup*& obj, IPoolAllocator& allocator)
 801c790:	b580      	push	{r7, lr}
 801c792:	b082      	sub	sp, #8
 801c794:	af00      	add	r7, sp, #0
 801c796:	6078      	str	r0, [r7, #4]
 801c798:	6039      	str	r1, [r7, #0]
            if (obj != UAVCAN_NULLPTR)
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d010      	beq.n	801c7c4 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup7destroyERPS4_RNS_14IPoolAllocatorE+0x34>
                obj->~KVGroup();
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	4618      	mov	r0, r3
 801c7a8:	f7ff ffd4 	bl	801c754 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupD1Ev>
                allocator.deallocate(obj);
 801c7ac:	683b      	ldr	r3, [r7, #0]
 801c7ae:	681b      	ldr	r3, [r3, #0]
 801c7b0:	330c      	adds	r3, #12
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	687a      	ldr	r2, [r7, #4]
 801c7b6:	6812      	ldr	r2, [r2, #0]
 801c7b8:	4611      	mov	r1, r2
 801c7ba:	6838      	ldr	r0, [r7, #0]
 801c7bc:	4798      	blx	r3
                obj = UAVCAN_NULLPTR;
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	601a      	str	r2, [r3, #0]
        }
 801c7c4:	bf00      	nop
 801c7c6:	3708      	adds	r7, #8
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	bd80      	pop	{r7, pc}

0801c7cc <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup4findERKS1_>:
        KVPair* find(const Key& key)
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b084      	sub	sp, #16
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
 801c7d4:	6039      	str	r1, [r7, #0]
            for (unsigned i = 0; i < static_cast<unsigned>(NumKV); i++)
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	60fb      	str	r3, [r7, #12]
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d11c      	bne.n	801c81a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup4findERKS1_+0x4e>
                if (kvs[i].match(key))
 801c7e0:	68fa      	ldr	r2, [r7, #12]
 801c7e2:	4613      	mov	r3, r2
 801c7e4:	009b      	lsls	r3, r3, #2
 801c7e6:	4413      	add	r3, r2
 801c7e8:	00db      	lsls	r3, r3, #3
 801c7ea:	3308      	adds	r3, #8
 801c7ec:	687a      	ldr	r2, [r7, #4]
 801c7ee:	4413      	add	r3, r2
 801c7f0:	6839      	ldr	r1, [r7, #0]
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	f7ff fdb1 	bl	801c35a <_ZNK6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPair5matchERKS1_>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d009      	beq.n	801c812 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup4findERKS1_+0x46>
                    return kvs + i;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f103 0108 	add.w	r1, r3, #8
 801c804:	68fa      	ldr	r2, [r7, #12]
 801c806:	4613      	mov	r3, r2
 801c808:	009b      	lsls	r3, r3, #2
 801c80a:	4413      	add	r3, r2
 801c80c:	00db      	lsls	r3, r3, #3
 801c80e:	440b      	add	r3, r1
 801c810:	e004      	b.n	801c81c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup4findERKS1_+0x50>
            for (unsigned i = 0; i < static_cast<unsigned>(NumKV); i++)
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	3301      	adds	r3, #1
 801c816:	60fb      	str	r3, [r7, #12]
 801c818:	e7df      	b.n	801c7da <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroup4findERKS1_+0xe>
            return UAVCAN_NULLPTR;
 801c81a:	2300      	movs	r3, #0
        }
 801c81c:	4618      	mov	r0, r3
 801c81e:	3710      	adds	r7, #16
 801c820:	46bd      	mov	sp, r7
 801c822:	bd80      	pop	{r7, pc}

0801c824 <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupC1Ev>:
        KVGroup()
 801c824:	b5b0      	push	{r4, r5, r7, lr}
 801c826:	b082      	sub	sp, #8
 801c828:	af00      	add	r7, sp, #0
 801c82a:	6078      	str	r0, [r7, #4]
        {
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	4618      	mov	r0, r3
 801c830:	f000 f82f 	bl	801c892 <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEEC1Ev>
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	3308      	adds	r3, #8
 801c838:	2400      	movs	r4, #0
 801c83a:	461d      	mov	r5, r3
 801c83c:	2c00      	cmp	r4, #0
 801c83e:	db05      	blt.n	801c84c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupC1Ev+0x28>
 801c840:	4628      	mov	r0, r5
 801c842:	f7ff fd9a 	bl	801c37a <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE6KVPairC1Ev>
 801c846:	3528      	adds	r5, #40	; 0x28
 801c848:	3c01      	subs	r4, #1
 801c84a:	e7f7      	b.n	801c83c <_ZN6uavcan3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupC1Ev+0x18>
            StaticAssert<(static_cast<unsigned>(NumKV) > 0)>::check();
 801c84c:	f7e9 f8c0 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
            IsDynamicallyAllocatable<KVGroup>::check();
 801c850:	f000 f82e 	bl	801c8b0 <_ZN6uavcan24IsDynamicallyAllocatableINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE5checkEv>
        }
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	4618      	mov	r0, r3
 801c858:	3708      	adds	r7, #8
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bdb0      	pop	{r4, r5, r7, pc}

0801c85e <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE15setNextListNodeEPS5_>:
    void setNextListNode(T* node)
 801c85e:	b480      	push	{r7}
 801c860:	b083      	sub	sp, #12
 801c862:	af00      	add	r7, sp, #0
 801c864:	6078      	str	r0, [r7, #4]
 801c866:	6039      	str	r1, [r7, #0]
        next_ = node;
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	683a      	ldr	r2, [r7, #0]
 801c86c:	601a      	str	r2, [r3, #0]
    }
 801c86e:	bf00      	nop
 801c870:	370c      	adds	r7, #12
 801c872:	46bd      	mov	sp, r7
 801c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c878:	4770      	bx	lr

0801c87a <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEED1Ev>:
    ~LinkedListNode() { }
 801c87a:	b580      	push	{r7, lr}
 801c87c:	b082      	sub	sp, #8
 801c87e:	af00      	add	r7, sp, #0
 801c880:	6078      	str	r0, [r7, #4]
 801c882:	6878      	ldr	r0, [r7, #4]
 801c884:	f7e9 f8b6 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	4618      	mov	r0, r3
 801c88c:	3708      	adds	r7, #8
 801c88e:	46bd      	mov	sp, r7
 801c890:	bd80      	pop	{r7, pc}

0801c892 <_ZN6uavcan14LinkedListNodeINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEEC1Ev>:
    LinkedListNode()
 801c892:	b580      	push	{r7, lr}
 801c894:	b082      	sub	sp, #8
 801c896:	af00      	add	r7, sp, #0
 801c898:	6078      	str	r0, [r7, #4]
        : next_(UAVCAN_NULLPTR)
 801c89a:	6878      	ldr	r0, [r7, #4]
 801c89c:	f7e9 f89f 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	601a      	str	r2, [r3, #0]
    { }
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	3708      	adds	r7, #8
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	bd80      	pop	{r7, pc}

0801c8b0 <_ZN6uavcan24IsDynamicallyAllocatableINS_3MapINS_24TransferBufferManagerKeyENS_16TransferReceiverEE7KVGroupEE5checkEv>:
    static void check()
 801c8b0:	b480      	push	{r7}
 801c8b2:	b083      	sub	sp, #12
 801c8b4:	af00      	add	r7, sp, #0
        char dummy[(sizeof(T) <= MemPoolBlockSize) ? 1 : -1] = { '0' };
 801c8b6:	2330      	movs	r3, #48	; 0x30
 801c8b8:	713b      	strb	r3, [r7, #4]
    }
 801c8ba:	bf00      	nop
 801c8bc:	370c      	adds	r7, #12
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c4:	4770      	bx	lr
	...

0801c8c8 <_ZN6uavcan26MultiFrameIncomingTransferD1Ev>:
class UAVCAN_EXPORT MultiFrameIncomingTransfer : public IncomingTransfer, Noncopyable
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b082      	sub	sp, #8
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
 801c8d0:	4a07      	ldr	r2, [pc, #28]	; (801c8f0 <_ZN6uavcan26MultiFrameIncomingTransferD1Ev+0x28>)
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	601a      	str	r2, [r3, #0]
 801c8d6:	6878      	ldr	r0, [r7, #4]
 801c8d8:	f7e9 f88c 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	4618      	mov	r0, r3
 801c8e0:	f7fe fed2 	bl	801b688 <_ZN6uavcan16IncomingTransferD1Ev>
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	3708      	adds	r7, #8
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bd80      	pop	{r7, pc}
 801c8ee:	bf00      	nop
 801c8f0:	0802be24 	.word	0x0802be24

0801c8f4 <_ZN6uavcan26MultiFrameIncomingTransferD0Ev>:
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	b082      	sub	sp, #8
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
 801c8fc:	6878      	ldr	r0, [r7, #4]
 801c8fe:	f7ff ffe3 	bl	801c8c8 <_ZN6uavcan26MultiFrameIncomingTransferD1Ev>
 801c902:	2128      	movs	r1, #40	; 0x28
 801c904:	6878      	ldr	r0, [r7, #4]
 801c906:	f003 fe20 	bl	802054a <_ZdlPvj>
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	4618      	mov	r0, r3
 801c90e:	3708      	adds	r7, #8
 801c910:	46bd      	mov	sp, r7
 801c912:	bd80      	pop	{r7, pc}

0801c914 <_ZN6uavcan27SingleFrameIncomingTransferD1Ev>:
class UAVCAN_EXPORT SingleFrameIncomingTransfer : public IncomingTransfer
 801c914:	b580      	push	{r7, lr}
 801c916:	b082      	sub	sp, #8
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
 801c91c:	4a05      	ldr	r2, [pc, #20]	; (801c934 <_ZN6uavcan27SingleFrameIncomingTransferD1Ev+0x20>)
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	601a      	str	r2, [r3, #0]
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	4618      	mov	r0, r3
 801c926:	f7fe feaf 	bl	801b688 <_ZN6uavcan16IncomingTransferD1Ev>
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	4618      	mov	r0, r3
 801c92e:	3708      	adds	r7, #8
 801c930:	46bd      	mov	sp, r7
 801c932:	bd80      	pop	{r7, pc}
 801c934:	0802be44 	.word	0x0802be44

0801c938 <_ZN6uavcan27SingleFrameIncomingTransferD0Ev>:
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
 801c940:	6878      	ldr	r0, [r7, #4]
 801c942:	f7ff ffe7 	bl	801c914 <_ZN6uavcan27SingleFrameIncomingTransferD1Ev>
 801c946:	2128      	movs	r1, #40	; 0x28
 801c948:	6878      	ldr	r0, [r7, #4]
 801c94a:	f003 fdfe 	bl	802054a <_ZdlPvj>
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	4618      	mov	r0, r3
 801c952:	3708      	adds	r7, #8
 801c954:	46bd      	mov	sp, r7
 801c956:	bd80      	pop	{r7, pc}

0801c958 <_ZNK6uavcan10TransferIDneES0_>:
    bool operator!=(TransferID rhs) const { return !operator==(rhs); }
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
 801c960:	7039      	strb	r1, [r7, #0]
 801c962:	7839      	ldrb	r1, [r7, #0]
 801c964:	6878      	ldr	r0, [r7, #4]
 801c966:	f7e9 f8bf 	bl	8005ae8 <_ZNK6uavcan10TransferIDeqES0_>
 801c96a:	4603      	mov	r3, r0
 801c96c:	f083 0301 	eor.w	r3, r3, #1
 801c970:	b2db      	uxtb	r3, r3
 801c972:	4618      	mov	r0, r3
 801c974:	3708      	adds	r7, #8
 801c976:	46bd      	mov	sp, r7
 801c978:	bd80      	pop	{r7, pc}

0801c97a <_ZNK6uavcan5Frame9getToggleEv>:
    bool getToggle() const { return toggle_; }
 801c97a:	b480      	push	{r7}
 801c97c:	b083      	sub	sp, #12
 801c97e:	af00      	add	r7, sp, #0
 801c980:	6078      	str	r0, [r7, #4]
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	7e5b      	ldrb	r3, [r3, #25]
 801c986:	4618      	mov	r0, r3
 801c988:	370c      	adds	r7, #12
 801c98a:	46bd      	mov	sp, r7
 801c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c990:	4770      	bx	lr

0801c992 <_ZN6uavcan22TransferBufferAccessor6createEv>:
    ITransferBuffer* create() { return bufmgr_.create(key_); }
 801c992:	b580      	push	{r7, lr}
 801c994:	b082      	sub	sp, #8
 801c996:	af00      	add	r7, sp, #0
 801c998:	6078      	str	r0, [r7, #4]
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681a      	ldr	r2, [r3, #0]
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	3304      	adds	r3, #4
 801c9a2:	4619      	mov	r1, r3
 801c9a4:	4610      	mov	r0, r2
 801c9a6:	f7fe fa11 	bl	801adcc <_ZN6uavcan21TransferBufferManager6createERKNS_24TransferBufferManagerKeyE>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	4618      	mov	r0, r3
 801c9ae:	3708      	adds	r7, #8
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	bd80      	pop	{r7, pc}

0801c9b4 <_ZNK6uavcan16TransferReceiver13isInitializedEv>:
    bool isInitialized() const { return iface_index_ != IfaceIndexNotSet; }
 801c9b4:	b480      	push	{r7}
 801c9b6:	b083      	sub	sp, #12
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	6078      	str	r0, [r7, #4]
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	7fdb      	ldrb	r3, [r3, #31]
 801c9c0:	f003 0306 	and.w	r3, r3, #6
 801c9c4:	b2db      	uxtb	r3, r3
 801c9c6:	2b06      	cmp	r3, #6
 801c9c8:	bf14      	ite	ne
 801c9ca:	2301      	movne	r3, #1
 801c9cc:	2300      	moveq	r3, #0
 801c9ce:	b2db      	uxtb	r3, r3
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	370c      	adds	r7, #12
 801c9d4:	46bd      	mov	sp, r7
 801c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9da:	4770      	bx	lr

0801c9dc <_ZNK6uavcan16TransferReceiver13isMidTransferEv>:
    bool isMidTransfer() const { return buffer_write_pos_ > 0; }
 801c9dc:	b480      	push	{r7}
 801c9de:	b083      	sub	sp, #12
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	8b9b      	ldrh	r3, [r3, #28]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	bf14      	ite	ne
 801c9ec:	2301      	movne	r3, #1
 801c9ee:	2300      	moveq	r3, #0
 801c9f0:	b2db      	uxtb	r3, r3
 801c9f2:	4618      	mov	r0, r3
 801c9f4:	370c      	adds	r7, #12
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9fc:	4770      	bx	lr

0801c9fe <_ZNK6uavcan16TransferReceiver19getIfaceSwitchDelayEv>:
const uint16_t TransferReceiver::MaxTransferIntervalMSec;
const uint16_t TransferReceiver::DefaultTransferIntervalMSec;
const uint16_t TransferReceiver::DefaultTidTimeoutMSec;

MonotonicDuration TransferReceiver::getIfaceSwitchDelay() const
{
 801c9fe:	b590      	push	{r4, r7, lr}
 801ca00:	b083      	sub	sp, #12
 801ca02:	af00      	add	r7, sp, #0
 801ca04:	6078      	str	r0, [r7, #4]
 801ca06:	6039      	str	r1, [r7, #0]
    return MonotonicDuration::fromMSec(transfer_interval_msec_);
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	8b1b      	ldrh	r3, [r3, #24]
 801ca0c:	b29b      	uxth	r3, r3
 801ca0e:	f04f 0400 	mov.w	r4, #0
 801ca12:	6879      	ldr	r1, [r7, #4]
 801ca14:	461a      	mov	r2, r3
 801ca16:	4623      	mov	r3, r4
 801ca18:	4608      	mov	r0, r1
 801ca1a:	f7eb fe1f 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
}
 801ca1e:	6878      	ldr	r0, [r7, #4]
 801ca20:	370c      	adds	r7, #12
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd90      	pop	{r4, r7, pc}

0801ca26 <_ZNK6uavcan16TransferReceiver13getTidTimeoutEv>:

MonotonicDuration TransferReceiver::getTidTimeout() const
{
 801ca26:	b580      	push	{r7, lr}
 801ca28:	b082      	sub	sp, #8
 801ca2a:	af00      	add	r7, sp, #0
 801ca2c:	6078      	str	r0, [r7, #4]
 801ca2e:	6039      	str	r1, [r7, #0]
    return MonotonicDuration::fromMSec(DefaultTidTimeoutMSec);
 801ca30:	6879      	ldr	r1, [r7, #4]
 801ca32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ca36:	f04f 0300 	mov.w	r3, #0
 801ca3a:	4608      	mov	r0, r1
 801ca3c:	f7eb fe0e 	bl	800865c <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromMSecEx>
}
 801ca40:	6878      	ldr	r0, [r7, #4]
 801ca42:	3708      	adds	r7, #8
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}

0801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>:

void TransferReceiver::registerError() const
{
 801ca48:	b480      	push	{r7}
 801ca4a:	b083      	sub	sp, #12
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
    error_cnt_ = static_cast<uint8_t>(error_cnt_ + 1) & ErrorCntMask;
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	7fdb      	ldrb	r3, [r3, #31]
 801ca54:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ca58:	b2db      	uxtb	r3, r3
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	b2db      	uxtb	r3, r3
 801ca5e:	f003 031f 	and.w	r3, r3, #31
 801ca62:	b2d9      	uxtb	r1, r3
 801ca64:	687a      	ldr	r2, [r7, #4]
 801ca66:	7fd3      	ldrb	r3, [r2, #31]
 801ca68:	f361 03c7 	bfi	r3, r1, #3, #5
 801ca6c:	77d3      	strb	r3, [r2, #31]
}
 801ca6e:	bf00      	nop
 801ca70:	370c      	adds	r7, #12
 801ca72:	46bd      	mov	sp, r7
 801ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca78:	4770      	bx	lr
	...

0801ca7c <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv>:

void TransferReceiver::updateTransferTimings()
{
 801ca7c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 801ca80:	b08c      	sub	sp, #48	; 0x30
 801ca82:	af00      	add	r7, sp, #0
 801ca84:	6078      	str	r0, [r7, #4]
    UAVCAN_ASSERT(!this_transfer_ts_.isZero());
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	3308      	adds	r3, #8
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f7eb fe6e 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 801ca90:	4603      	mov	r3, r0
 801ca92:	f083 0301 	eor.w	r3, r3, #1
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d105      	bne.n	801caa8 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x2c>
 801ca9c:	4b52      	ldr	r3, [pc, #328]	; (801cbe8 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x16c>)
 801ca9e:	4a53      	ldr	r2, [pc, #332]	; (801cbec <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x170>)
 801caa0:	2124      	movs	r1, #36	; 0x24
 801caa2:	4853      	ldr	r0, [pc, #332]	; (801cbf0 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x174>)
 801caa4:	f003 fd72 	bl	802058c <__assert_func>

    const MonotonicTime prev_prev_ts = prev_transfer_ts_;
 801caa8:	687a      	ldr	r2, [r7, #4]
 801caaa:	f107 0310 	add.w	r3, r7, #16
 801caae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cab2:	e883 0003 	stmia.w	r3, {r0, r1}
    prev_transfer_ts_ = this_transfer_ts_;
 801cab6:	687a      	ldr	r2, [r7, #4]
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	3308      	adds	r3, #8
 801cabc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cac0:	e882 0003 	stmia.w	r2, {r0, r1}

    if ((!prev_prev_ts.isZero()) && (!prev_transfer_ts_.isZero()) && (prev_transfer_ts_ >= prev_prev_ts))
 801cac4:	f107 0310 	add.w	r3, r7, #16
 801cac8:	4618      	mov	r0, r3
 801caca:	f7eb fe4f 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 801cace:	4603      	mov	r3, r0
 801cad0:	f083 0301 	eor.w	r3, r3, #1
 801cad4:	b2db      	uxtb	r3, r3
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d015      	beq.n	801cb06 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x8a>
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	4618      	mov	r0, r3
 801cade:	f7eb fe45 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 801cae2:	4603      	mov	r3, r0
 801cae4:	f083 0301 	eor.w	r3, r3, #1
 801cae8:	b2db      	uxtb	r3, r3
 801caea:	2b00      	cmp	r3, #0
 801caec:	d00b      	beq.n	801cb06 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x8a>
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	f107 0210 	add.w	r2, r7, #16
 801caf4:	4611      	mov	r1, r2
 801caf6:	4618      	mov	r0, r3
 801caf8:	f7f8 ff8f 	bl	8015a1a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEgeERKS1_>
 801cafc:	4603      	mov	r3, r0
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d001      	beq.n	801cb06 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x8a>
 801cb02:	2301      	movs	r3, #1
 801cb04:	e000      	b.n	801cb08 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x8c>
 801cb06:	2300      	movs	r3, #0
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d063      	beq.n	801cbd4 <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv+0x158>
    {
        uint64_t interval_msec = uint64_t((prev_transfer_ts_ - prev_prev_ts).toMSec());
 801cb0c:	6879      	ldr	r1, [r7, #4]
 801cb0e:	f107 0318 	add.w	r3, r7, #24
 801cb12:	f107 0210 	add.w	r2, r7, #16
 801cb16:	4618      	mov	r0, r3
 801cb18:	f7f8 ff11 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 801cb1c:	f107 0318 	add.w	r3, r7, #24
 801cb20:	4618      	mov	r0, r3
 801cb22:	f7f9 fdbe 	bl	80166a2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toMSecEv>
 801cb26:	4603      	mov	r3, r0
 801cb28:	460c      	mov	r4, r1
 801cb2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 801cb2e:	f107 0318 	add.w	r3, r7, #24
 801cb32:	4618      	mov	r0, r3
 801cb34:	f7e9 fbc1 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
        interval_msec = min(interval_msec, uint64_t(MaxTransferIntervalMSec));
 801cb38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb3c:	f04f 0400 	mov.w	r4, #0
 801cb40:	e9c7 3408 	strd	r3, r4, [r7, #32]
 801cb44:	f107 0220 	add.w	r2, r7, #32
 801cb48:	f107 0308 	add.w	r3, r7, #8
 801cb4c:	4611      	mov	r1, r2
 801cb4e:	4618      	mov	r0, r3
 801cb50:	f000 fbd0 	bl	801d2f4 <_ZN6uavcan3minIyEERKT_S3_S3_>
 801cb54:	4603      	mov	r3, r0
 801cb56:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cb5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
        interval_msec = max(interval_msec, uint64_t(MinTransferIntervalMSec));
 801cb5e:	f04f 0301 	mov.w	r3, #1
 801cb62:	f04f 0400 	mov.w	r4, #0
 801cb66:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 801cb6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801cb6e:	f107 0308 	add.w	r3, r7, #8
 801cb72:	4611      	mov	r1, r2
 801cb74:	4618      	mov	r0, r3
 801cb76:	f000 fbd4 	bl	801d322 <_ZN6uavcan3maxIyEERKT_S3_S3_>
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cb80:	e9c7 3402 	strd	r3, r4, [r7, #8]
        transfer_interval_msec_ = static_cast<uint16_t>((uint64_t(transfer_interval_msec_) * 7U + interval_msec) / 8U);
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	8b1b      	ldrh	r3, [r3, #24]
 801cb88:	b29d      	uxth	r5, r3
 801cb8a:	f04f 0600 	mov.w	r6, #0
 801cb8e:	46ab      	mov	fp, r5
 801cb90:	46b4      	mov	ip, r6
 801cb92:	f04f 0300 	mov.w	r3, #0
 801cb96:	f04f 0400 	mov.w	r4, #0
 801cb9a:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 801cb9e:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 801cba2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801cba6:	469b      	mov	fp, r3
 801cba8:	46a4      	mov	ip, r4
 801cbaa:	4659      	mov	r1, fp
 801cbac:	4662      	mov	r2, ip
 801cbae:	1b49      	subs	r1, r1, r5
 801cbb0:	eb62 0206 	sbc.w	r2, r2, r6
 801cbb4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801cbb8:	18cd      	adds	r5, r1, r3
 801cbba:	eb42 0604 	adc.w	r6, r2, r4
 801cbbe:	f04f 0300 	mov.w	r3, #0
 801cbc2:	f04f 0400 	mov.w	r4, #0
 801cbc6:	08eb      	lsrs	r3, r5, #3
 801cbc8:	ea43 7346 	orr.w	r3, r3, r6, lsl #29
 801cbcc:	08f4      	lsrs	r4, r6, #3
 801cbce:	b29a      	uxth	r2, r3
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	831a      	strh	r2, [r3, #24]
    const MonotonicTime prev_prev_ts = prev_transfer_ts_;
 801cbd4:	f107 0310 	add.w	r3, r7, #16
 801cbd8:	4618      	mov	r0, r3
 801cbda:	f7e9 fa9b 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    }
}
 801cbde:	bf00      	nop
 801cbe0:	3730      	adds	r7, #48	; 0x30
 801cbe2:	46bd      	mov	sp, r7
 801cbe4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 801cbe8:	08024438 	.word	0x08024438
 801cbec:	0802c45c 	.word	0x0802c45c
 801cbf0:	08024454 	.word	0x08024454

0801cbf4 <_ZN6uavcan16TransferReceiver22prepareForNextTransferEv>:

void TransferReceiver::prepareForNextTransfer()
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b082      	sub	sp, #8
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
    tid_.increment();
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	331e      	adds	r3, #30
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7f8 ff2f 	bl	8015a64 <_ZN6uavcan10TransferID9incrementEv>
    next_toggle_ = false;
 801cc06:	687a      	ldr	r2, [r7, #4]
 801cc08:	7fd3      	ldrb	r3, [r2, #31]
 801cc0a:	f36f 0300 	bfc	r3, #0, #1
 801cc0e:	77d3      	strb	r3, [r2, #31]
    buffer_write_pos_ = 0;
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	2200      	movs	r2, #0
 801cc14:	839a      	strh	r2, [r3, #28]
}
 801cc16:	bf00      	nop
 801cc18:	3708      	adds	r7, #8
 801cc1a:	46bd      	mov	sp, r7
 801cc1c:	bd80      	pop	{r7, pc}

0801cc1e <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE>:

bool TransferReceiver::validate(const RxFrame& frame) const
{
 801cc1e:	b590      	push	{r4, r7, lr}
 801cc20:	b085      	sub	sp, #20
 801cc22:	af00      	add	r7, sp, #0
 801cc24:	6078      	str	r0, [r7, #4]
 801cc26:	6039      	str	r1, [r7, #0]
    if (iface_index_ != frame.getIfaceIndex())
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	7fdb      	ldrb	r3, [r3, #31]
 801cc2c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801cc30:	b2db      	uxtb	r3, r3
 801cc32:	461c      	mov	r4, r3
 801cc34:	6838      	ldr	r0, [r7, #0]
 801cc36:	f7fe fb95 	bl	801b364 <_ZNK6uavcan7RxFrame13getIfaceIndexEv>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	429c      	cmp	r4, r3
 801cc3e:	bf14      	ite	ne
 801cc40:	2301      	movne	r3, #1
 801cc42:	2300      	moveq	r3, #0
 801cc44:	b2db      	uxtb	r3, r3
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d001      	beq.n	801cc4e <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x30>
    {
        return false;
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	e07b      	b.n	801cd46 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x128>
    }
    if (frame.isStartOfTransfer() && !frame.isEndOfTransfer() && (frame.getPayloadLen() < TransferCRC::NumBytes))
 801cc4e:	683b      	ldr	r3, [r7, #0]
 801cc50:	4618      	mov	r0, r3
 801cc52:	f7fe fb4b 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801cc56:	4603      	mov	r3, r0
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d012      	beq.n	801cc82 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x64>
 801cc5c:	683b      	ldr	r3, [r7, #0]
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7fe fb50 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801cc64:	4603      	mov	r3, r0
 801cc66:	f083 0301 	eor.w	r3, r3, #1
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d008      	beq.n	801cc82 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x64>
 801cc70:	683b      	ldr	r3, [r7, #0]
 801cc72:	4618      	mov	r0, r3
 801cc74:	f7fe fb23 	bl	801b2be <_ZNK6uavcan5Frame13getPayloadLenEv>
 801cc78:	4603      	mov	r3, r0
 801cc7a:	2b01      	cmp	r3, #1
 801cc7c:	d801      	bhi.n	801cc82 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x64>
 801cc7e:	2301      	movs	r3, #1
 801cc80:	e000      	b.n	801cc84 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x66>
 801cc82:	2300      	movs	r3, #0
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d004      	beq.n	801cc92 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x74>
    {
        UAVCAN_TRACE("TransferReceiver", "CRC expected, %s", frame.toString().c_str());
        registerError();
 801cc88:	6878      	ldr	r0, [r7, #4]
 801cc8a:	f7ff fedd 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        return false;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	e059      	b.n	801cd46 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x128>
    }
    if (frame.isStartOfTransfer() && frame.getToggle())
 801cc92:	683b      	ldr	r3, [r7, #0]
 801cc94:	4618      	mov	r0, r3
 801cc96:	f7fe fb29 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d008      	beq.n	801ccb2 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x94>
 801cca0:	683b      	ldr	r3, [r7, #0]
 801cca2:	4618      	mov	r0, r3
 801cca4:	f7ff fe69 	bl	801c97a <_ZNK6uavcan5Frame9getToggleEv>
 801cca8:	4603      	mov	r3, r0
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d001      	beq.n	801ccb2 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x94>
 801ccae:	2301      	movs	r3, #1
 801ccb0:	e000      	b.n	801ccb4 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x96>
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d004      	beq.n	801ccc2 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0xa4>
    {
        UAVCAN_TRACE("TransferReceiver", "Toggle bit is not cleared, %s", frame.toString().c_str());
        registerError();
 801ccb8:	6878      	ldr	r0, [r7, #4]
 801ccba:	f7ff fec5 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        return false;
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	e041      	b.n	801cd46 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x128>
    }
    if (frame.isStartOfTransfer() && isMidTransfer())
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	4618      	mov	r0, r3
 801ccc6:	f7fe fb11 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801ccca:	4603      	mov	r3, r0
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d007      	beq.n	801cce0 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0xc2>
 801ccd0:	6878      	ldr	r0, [r7, #4]
 801ccd2:	f7ff fe83 	bl	801c9dc <_ZNK6uavcan16TransferReceiver13isMidTransferEv>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d001      	beq.n	801cce0 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0xc2>
 801ccdc:	2301      	movs	r3, #1
 801ccde:	e000      	b.n	801cce2 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0xc4>
 801cce0:	2300      	movs	r3, #0
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d002      	beq.n	801ccec <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0xce>
    {
        UAVCAN_TRACE("TransferReceiver", "Unexpected start of transfer, %s", frame.toString().c_str());
        registerError();
 801cce6:	6878      	ldr	r0, [r7, #4]
 801cce8:	f7ff feae 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
    }
    if (frame.getToggle() != next_toggle_)
 801ccec:	683b      	ldr	r3, [r7, #0]
 801ccee:	4618      	mov	r0, r3
 801ccf0:	f7ff fe43 	bl	801c97a <_ZNK6uavcan5Frame9getToggleEv>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	461a      	mov	r2, r3
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	7fdb      	ldrb	r3, [r3, #31]
 801ccfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801cd00:	b2db      	uxtb	r3, r3
 801cd02:	429a      	cmp	r2, r3
 801cd04:	bf14      	ite	ne
 801cd06:	2301      	movne	r3, #1
 801cd08:	2300      	moveq	r3, #0
 801cd0a:	b2db      	uxtb	r3, r3
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d004      	beq.n	801cd1a <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0xfc>
    {
        UAVCAN_TRACE("TransferReceiver", "Unexpected toggle bit (not %i), %s",
                     int(next_toggle_), frame.toString().c_str());
        registerError();
 801cd10:	6878      	ldr	r0, [r7, #4]
 801cd12:	f7ff fe99 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        return false;
 801cd16:	2300      	movs	r3, #0
 801cd18:	e015      	b.n	801cd46 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x128>
    }
    if (frame.getTransferID() != tid_)
 801cd1a:	683b      	ldr	r3, [r7, #0]
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	f7e9 fa2b 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801cd22:	4603      	mov	r3, r0
 801cd24:	733b      	strb	r3, [r7, #12]
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	f107 020c 	add.w	r2, r7, #12
 801cd2c:	7f99      	ldrb	r1, [r3, #30]
 801cd2e:	4610      	mov	r0, r2
 801cd30:	f7ff fe12 	bl	801c958 <_ZNK6uavcan10TransferIDneES0_>
 801cd34:	4603      	mov	r3, r0
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d004      	beq.n	801cd44 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x126>
    {
        UAVCAN_TRACE("TransferReceiver", "Unexpected TID (current %i), %s", tid_.get(), frame.toString().c_str());
        registerError();
 801cd3a:	6878      	ldr	r0, [r7, #4]
 801cd3c:	f7ff fe84 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        return false;
 801cd40:	2300      	movs	r3, #0
 801cd42:	e000      	b.n	801cd46 <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE+0x128>
    }
    return true;
 801cd44:	2301      	movs	r3, #1
}
 801cd46:	4618      	mov	r0, r3
 801cd48:	3714      	adds	r7, #20
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	bd90      	pop	{r4, r7, pc}

0801cd4e <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE>:

bool TransferReceiver::writePayload(const RxFrame& frame, ITransferBuffer& buf)
{
 801cd4e:	b590      	push	{r4, r7, lr}
 801cd50:	b08d      	sub	sp, #52	; 0x34
 801cd52:	af00      	add	r7, sp, #0
 801cd54:	60f8      	str	r0, [r7, #12]
 801cd56:	60b9      	str	r1, [r7, #8]
 801cd58:	607a      	str	r2, [r7, #4]
    const uint8_t* const payload = frame.getPayloadPtr();
 801cd5a:	68bb      	ldr	r3, [r7, #8]
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7fe faba 	bl	801b2d6 <_ZNK6uavcan5Frame13getPayloadPtrEv>
 801cd62:	62f8      	str	r0, [r7, #44]	; 0x2c
    const unsigned payload_len = frame.getPayloadLen();
 801cd64:	68bb      	ldr	r3, [r7, #8]
 801cd66:	4618      	mov	r0, r3
 801cd68:	f7fe faa9 	bl	801b2be <_ZNK6uavcan5Frame13getPayloadLenEv>
 801cd6c:	62b8      	str	r0, [r7, #40]	; 0x28

    if (frame.isStartOfTransfer())     // First frame contains CRC, we need to extract it now
 801cd6e:	68bb      	ldr	r3, [r7, #8]
 801cd70:	4618      	mov	r0, r3
 801cd72:	f7fe fabb 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801cd76:	4603      	mov	r3, r0
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d042      	beq.n	801ce02 <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE+0xb4>
    {
        if (frame.getPayloadLen() < TransferCRC::NumBytes)
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	4618      	mov	r0, r3
 801cd80:	f7fe fa9d 	bl	801b2be <_ZNK6uavcan5Frame13getPayloadLenEv>
 801cd84:	4603      	mov	r3, r0
 801cd86:	2b01      	cmp	r3, #1
 801cd88:	bf94      	ite	ls
 801cd8a:	2301      	movls	r3, #1
 801cd8c:	2300      	movhi	r3, #0
 801cd8e:	b2db      	uxtb	r3, r3
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d001      	beq.n	801cd98 <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE+0x4a>
        {
            return false;    // Must have been validated earlier though. I think I'm paranoid.
 801cd94:	2300      	movs	r3, #0
 801cd96:	e056      	b.n	801ce46 <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE+0xf8>
        }
        this_transfer_crc_ = static_cast<uint16_t>(payload[0] & 0xFF);
 801cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd9a:	781b      	ldrb	r3, [r3, #0]
 801cd9c:	b29a      	uxth	r2, r3
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	835a      	strh	r2, [r3, #26]
        this_transfer_crc_ |= static_cast<uint16_t>(static_cast<uint16_t>(payload[1] & 0xFF) << 8);  // Little endian.
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	8b5a      	ldrh	r2, [r3, #26]
 801cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cda8:	3301      	adds	r3, #1
 801cdaa:	781b      	ldrb	r3, [r3, #0]
 801cdac:	b29b      	uxth	r3, r3
 801cdae:	021b      	lsls	r3, r3, #8
 801cdb0:	b29b      	uxth	r3, r3
 801cdb2:	4313      	orrs	r3, r2
 801cdb4:	b29a      	uxth	r2, r3
 801cdb6:	68fb      	ldr	r3, [r7, #12]
 801cdb8:	835a      	strh	r2, [r3, #26]

        const unsigned effective_payload_len = payload_len - TransferCRC::NumBytes;
 801cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdbc:	3b02      	subs	r3, #2
 801cdbe:	61fb      	str	r3, [r7, #28]
        const int res = buf.write(buffer_write_pos_, payload + TransferCRC::NumBytes, effective_payload_len);
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	330c      	adds	r3, #12
 801cdc6:	681c      	ldr	r4, [r3, #0]
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	8b9b      	ldrh	r3, [r3, #28]
 801cdcc:	4619      	mov	r1, r3
 801cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdd0:	1c9a      	adds	r2, r3, #2
 801cdd2:	69fb      	ldr	r3, [r7, #28]
 801cdd4:	6878      	ldr	r0, [r7, #4]
 801cdd6:	47a0      	blx	r4
 801cdd8:	61b8      	str	r0, [r7, #24]
        const bool success = res == static_cast<int>(effective_payload_len);
 801cdda:	69fb      	ldr	r3, [r7, #28]
 801cddc:	69ba      	ldr	r2, [r7, #24]
 801cdde:	429a      	cmp	r2, r3
 801cde0:	bf0c      	ite	eq
 801cde2:	2301      	moveq	r3, #1
 801cde4:	2300      	movne	r3, #0
 801cde6:	75fb      	strb	r3, [r7, #23]
        if (success)
 801cde8:	7dfb      	ldrb	r3, [r7, #23]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d007      	beq.n	801cdfe <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE+0xb0>
        {
            buffer_write_pos_ = static_cast<uint16_t>(buffer_write_pos_ + effective_payload_len);
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	8b9a      	ldrh	r2, [r3, #28]
 801cdf2:	69fb      	ldr	r3, [r7, #28]
 801cdf4:	b29b      	uxth	r3, r3
 801cdf6:	4413      	add	r3, r2
 801cdf8:	b29a      	uxth	r2, r3
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	839a      	strh	r2, [r3, #28]
        }
        return success;
 801cdfe:	7dfb      	ldrb	r3, [r7, #23]
 801ce00:	e021      	b.n	801ce46 <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE+0xf8>
    }
    else
    {
        const int res = buf.write(buffer_write_pos_, payload, payload_len);
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	330c      	adds	r3, #12
 801ce08:	681c      	ldr	r4, [r3, #0]
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	8b9b      	ldrh	r3, [r3, #28]
 801ce0e:	4619      	mov	r1, r3
 801ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce14:	6878      	ldr	r0, [r7, #4]
 801ce16:	47a0      	blx	r4
 801ce18:	6278      	str	r0, [r7, #36]	; 0x24
        const bool success = res == static_cast<int>(payload_len);
 801ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce1e:	429a      	cmp	r2, r3
 801ce20:	bf0c      	ite	eq
 801ce22:	2301      	moveq	r3, #1
 801ce24:	2300      	movne	r3, #0
 801ce26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (success)
 801ce2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d007      	beq.n	801ce42 <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE+0xf4>
        {
            buffer_write_pos_ = static_cast<uint16_t>(buffer_write_pos_ + payload_len);
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	8b9a      	ldrh	r2, [r3, #28]
 801ce36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce38:	b29b      	uxth	r3, r3
 801ce3a:	4413      	add	r3, r2
 801ce3c:	b29a      	uxth	r2, r3
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	839a      	strh	r2, [r3, #28]
        }
        return success;
 801ce42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    }
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	3734      	adds	r7, #52	; 0x34
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	bd90      	pop	{r4, r7, pc}

0801ce4e <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE>:

TransferReceiver::ResultCode TransferReceiver::receive(const RxFrame& frame, TransferBufferAccessor& tba)
{
 801ce4e:	b580      	push	{r7, lr}
 801ce50:	b08a      	sub	sp, #40	; 0x28
 801ce52:	af00      	add	r7, sp, #0
 801ce54:	60f8      	str	r0, [r7, #12]
 801ce56:	60b9      	str	r1, [r7, #8]
 801ce58:	607a      	str	r2, [r7, #4]
    // Transfer timestamps are derived from the first frame
    if (frame.isStartOfTransfer())
 801ce5a:	68bb      	ldr	r3, [r7, #8]
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	f7fe fa45 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801ce62:	4603      	mov	r3, r0
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d025      	beq.n	801ceb4 <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x66>
    {
        this_transfer_ts_ = frame.getMonotonicTimestamp();
 801ce68:	f107 0310 	add.w	r3, r7, #16
 801ce6c:	68b9      	ldr	r1, [r7, #8]
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f7fe fa54 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	3308      	adds	r3, #8
 801ce78:	f107 0210 	add.w	r2, r7, #16
 801ce7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ce80:	e883 0003 	stmia.w	r3, {r0, r1}
 801ce84:	f107 0310 	add.w	r3, r7, #16
 801ce88:	4618      	mov	r0, r3
 801ce8a:	f7e9 f943 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        first_frame_ts_   = frame.getUtcTimestamp();
 801ce8e:	f107 0318 	add.w	r3, r7, #24
 801ce92:	68b9      	ldr	r1, [r7, #8]
 801ce94:	4618      	mov	r0, r3
 801ce96:	f7fe fa53 	bl	801b340 <_ZNK6uavcan7RxFrame15getUtcTimestampEv>
 801ce9a:	68fb      	ldr	r3, [r7, #12]
 801ce9c:	3310      	adds	r3, #16
 801ce9e:	f107 0218 	add.w	r2, r7, #24
 801cea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cea6:	e883 0003 	stmia.w	r3, {r0, r1}
 801ceaa:	f107 0318 	add.w	r3, r7, #24
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f7fb fa27 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
    }

    if (frame.isStartOfTransfer() && frame.isEndOfTransfer())
 801ceb4:	68bb      	ldr	r3, [r7, #8]
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f7fe fa18 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801cebc:	4603      	mov	r3, r0
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d008      	beq.n	801ced4 <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x86>
 801cec2:	68bb      	ldr	r3, [r7, #8]
 801cec4:	4618      	mov	r0, r3
 801cec6:	f7fe fa1d 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801ceca:	4603      	mov	r3, r0
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d001      	beq.n	801ced4 <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x86>
 801ced0:	2301      	movs	r3, #1
 801ced2:	e000      	b.n	801ced6 <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x88>
 801ced4:	2300      	movs	r3, #0
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d00d      	beq.n	801cef6 <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xa8>
    {
        tba.remove();
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f7fe fab3 	bl	801b446 <_ZN6uavcan22TransferBufferAccessor6removeEv>
        updateTransferTimings();
 801cee0:	68f8      	ldr	r0, [r7, #12]
 801cee2:	f7ff fdcb 	bl	801ca7c <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv>
        prepareForNextTransfer();
 801cee6:	68f8      	ldr	r0, [r7, #12]
 801cee8:	f7ff fe84 	bl	801cbf4 <_ZN6uavcan16TransferReceiver22prepareForNextTransferEv>
        this_transfer_crc_ = 0;         // SFT has no CRC
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	2200      	movs	r2, #0
 801cef0:	835a      	strh	r2, [r3, #26]
        return ResultSingleFrame;
 801cef2:	2302      	movs	r3, #2
 801cef4:	e04a      	b.n	801cf8c <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x13e>
    }

    // Payload write
    ITransferBuffer* buf = tba.access();
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f7fe fa94 	bl	801b424 <_ZN6uavcan22TransferBufferAccessor6accessEv>
 801cefc:	6278      	str	r0, [r7, #36]	; 0x24
    if (buf == UAVCAN_NULLPTR)
 801cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d103      	bne.n	801cf0c <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xbe>
    {
        buf = tba.create();
 801cf04:	6878      	ldr	r0, [r7, #4]
 801cf06:	f7ff fd44 	bl	801c992 <_ZN6uavcan22TransferBufferAccessor6createEv>
 801cf0a:	6278      	str	r0, [r7, #36]	; 0x24
    }
    if (buf == UAVCAN_NULLPTR)
 801cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d107      	bne.n	801cf22 <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xd4>
    {
        UAVCAN_TRACE("TransferReceiver", "Failed to access the buffer, %s", frame.toString().c_str());
        prepareForNextTransfer();
 801cf12:	68f8      	ldr	r0, [r7, #12]
 801cf14:	f7ff fe6e 	bl	801cbf4 <_ZN6uavcan16TransferReceiver22prepareForNextTransferEv>
        registerError();
 801cf18:	68f8      	ldr	r0, [r7, #12]
 801cf1a:	f7ff fd95 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        return ResultNotComplete;
 801cf1e:	2300      	movs	r3, #0
 801cf20:	e034      	b.n	801cf8c <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x13e>
    }
    if (!writePayload(frame, *buf))
 801cf22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf24:	68b9      	ldr	r1, [r7, #8]
 801cf26:	68f8      	ldr	r0, [r7, #12]
 801cf28:	f7ff ff11 	bl	801cd4e <_ZN6uavcan16TransferReceiver12writePayloadERKNS_7RxFrameERNS_15ITransferBufferE>
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	f083 0301 	eor.w	r3, r3, #1
 801cf32:	b2db      	uxtb	r3, r3
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d00a      	beq.n	801cf4e <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x100>
    {
        UAVCAN_TRACE("TransferReceiver", "Payload write failed, %s", frame.toString().c_str());
        tba.remove();
 801cf38:	6878      	ldr	r0, [r7, #4]
 801cf3a:	f7fe fa84 	bl	801b446 <_ZN6uavcan22TransferBufferAccessor6removeEv>
        prepareForNextTransfer();
 801cf3e:	68f8      	ldr	r0, [r7, #12]
 801cf40:	f7ff fe58 	bl	801cbf4 <_ZN6uavcan16TransferReceiver22prepareForNextTransferEv>
        registerError();
 801cf44:	68f8      	ldr	r0, [r7, #12]
 801cf46:	f7ff fd7f 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        return ResultNotComplete;
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	e01e      	b.n	801cf8c <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x13e>
    }
    next_toggle_ = !next_toggle_;
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	7fdb      	ldrb	r3, [r3, #31]
 801cf52:	f003 0301 	and.w	r3, r3, #1
 801cf56:	b2db      	uxtb	r3, r3
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	bf0c      	ite	eq
 801cf5c:	2301      	moveq	r3, #1
 801cf5e:	2300      	movne	r3, #0
 801cf60:	b2d9      	uxtb	r1, r3
 801cf62:	68fa      	ldr	r2, [r7, #12]
 801cf64:	7fd3      	ldrb	r3, [r2, #31]
 801cf66:	f361 0300 	bfi	r3, r1, #0, #1
 801cf6a:	77d3      	strb	r3, [r2, #31]

    if (frame.isEndOfTransfer())
 801cf6c:	68bb      	ldr	r3, [r7, #8]
 801cf6e:	4618      	mov	r0, r3
 801cf70:	f7fe f9c8 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801cf74:	4603      	mov	r3, r0
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d007      	beq.n	801cf8a <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x13c>
    {
        updateTransferTimings();
 801cf7a:	68f8      	ldr	r0, [r7, #12]
 801cf7c:	f7ff fd7e 	bl	801ca7c <_ZN6uavcan16TransferReceiver21updateTransferTimingsEv>
        prepareForNextTransfer();
 801cf80:	68f8      	ldr	r0, [r7, #12]
 801cf82:	f7ff fe37 	bl	801cbf4 <_ZN6uavcan16TransferReceiver22prepareForNextTransferEv>
        return ResultComplete;
 801cf86:	2301      	movs	r3, #1
 801cf88:	e000      	b.n	801cf8c <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x13e>
    }
    return ResultNotComplete;
 801cf8a:	2300      	movs	r3, #0
}
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	3728      	adds	r7, #40	; 0x28
 801cf90:	46bd      	mov	sp, r7
 801cf92:	bd80      	pop	{r7, pc}

0801cf94 <_ZNK6uavcan16TransferReceiver10isTimedOutENS_13MonotonicTimeE>:

bool TransferReceiver::isTimedOut(MonotonicTime current_ts) const
{
 801cf94:	b590      	push	{r4, r7, lr}
 801cf96:	b087      	sub	sp, #28
 801cf98:	af00      	add	r7, sp, #0
 801cf9a:	6078      	str	r0, [r7, #4]
 801cf9c:	6039      	str	r1, [r7, #0]
    return (current_ts - this_transfer_ts_) > getTidTimeout();
 801cf9e:	6839      	ldr	r1, [r7, #0]
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	f103 0208 	add.w	r2, r3, #8
 801cfa6:	f107 0308 	add.w	r3, r7, #8
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f7f8 fcc7 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 801cfb0:	f107 0310 	add.w	r3, r7, #16
 801cfb4:	6879      	ldr	r1, [r7, #4]
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	f7ff fd35 	bl	801ca26 <_ZNK6uavcan16TransferReceiver13getTidTimeoutEv>
 801cfbc:	f107 0210 	add.w	r2, r7, #16
 801cfc0:	f107 0308 	add.w	r3, r7, #8
 801cfc4:	4611      	mov	r1, r2
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	f7f8 fcf1 	bl	80159ae <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEgtERKS1_>
 801cfcc:	4603      	mov	r3, r0
 801cfce:	461c      	mov	r4, r3
 801cfd0:	f107 0310 	add.w	r3, r7, #16
 801cfd4:	4618      	mov	r0, r3
 801cfd6:	f7e9 f970 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 801cfda:	f107 0308 	add.w	r3, r7, #8
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f7e9 f96b 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 801cfe4:	4623      	mov	r3, r4
}
 801cfe6:	4618      	mov	r0, r3
 801cfe8:	371c      	adds	r7, #28
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd90      	pop	{r4, r7, pc}

0801cfee <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE>:

TransferReceiver::ResultCode TransferReceiver::addFrame(const RxFrame& frame, TransferBufferAccessor& tba)
{
 801cfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff2:	b098      	sub	sp, #96	; 0x60
 801cff4:	af00      	add	r7, sp, #0
 801cff6:	60f8      	str	r0, [r7, #12]
 801cff8:	60b9      	str	r1, [r7, #8]
 801cffa:	607a      	str	r2, [r7, #4]
    if ((frame.getMonotonicTimestamp().isZero()) ||
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801cffc:	2500      	movs	r5, #0
 801cffe:	2600      	movs	r6, #0
    if ((frame.getMonotonicTimestamp().isZero()) ||
 801d000:	f107 0318 	add.w	r3, r7, #24
 801d004:	68b9      	ldr	r1, [r7, #8]
 801d006:	4618      	mov	r0, r3
 801d008:	f7fe f988 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801d00c:	f04f 0801 	mov.w	r8, #1
    if ((frame.getMonotonicTimestamp().isZero()) ||
 801d010:	f107 0318 	add.w	r3, r7, #24
 801d014:	4618      	mov	r0, r3
 801d016:	f7eb fba9 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 801d01a:	4603      	mov	r3, r0
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d123      	bne.n	801d068 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x7a>
 801d020:	f107 0320 	add.w	r3, r7, #32
 801d024:	68b9      	ldr	r1, [r7, #8]
 801d026:	4618      	mov	r0, r3
 801d028:	f7fe f978 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
    if ((frame.getMonotonicTimestamp().isZero()) ||
 801d02c:	2501      	movs	r5, #1
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801d02e:	68fa      	ldr	r2, [r7, #12]
 801d030:	f107 0320 	add.w	r3, r7, #32
 801d034:	4611      	mov	r1, r2
 801d036:	4618      	mov	r0, r3
 801d038:	f7f8 fc44 	bl	80158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>
 801d03c:	4603      	mov	r3, r0
    if ((frame.getMonotonicTimestamp().isZero()) ||
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d112      	bne.n	801d068 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x7a>
        (frame.getMonotonicTimestamp() < this_transfer_ts_))
 801d042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d046:	68b9      	ldr	r1, [r7, #8]
 801d048:	4618      	mov	r0, r3
 801d04a:	f7fe f967 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801d04e:	2601      	movs	r6, #1
        (frame.getMonotonicTimestamp() < this_transfer_ts_))
 801d050:	68fb      	ldr	r3, [r7, #12]
 801d052:	f103 0208 	add.w	r2, r3, #8
 801d056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d05a:	4611      	mov	r1, r2
 801d05c:	4618      	mov	r0, r3
 801d05e:	f7f8 fc31 	bl	80158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>
 801d062:	4603      	mov	r3, r0
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801d064:	2b00      	cmp	r3, #0
 801d066:	d001      	beq.n	801d06c <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x7e>
 801d068:	2401      	movs	r4, #1
 801d06a:	e000      	b.n	801d06e <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x80>
 801d06c:	2400      	movs	r4, #0
        (frame.getMonotonicTimestamp() < this_transfer_ts_))
 801d06e:	2e00      	cmp	r6, #0
 801d070:	d004      	beq.n	801d07c <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x8e>
 801d072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d076:	4618      	mov	r0, r3
 801d078:	f7e9 f84c 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
        (frame.getMonotonicTimestamp() < prev_transfer_ts_) ||
 801d07c:	2d00      	cmp	r5, #0
 801d07e:	d004      	beq.n	801d08a <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x9c>
 801d080:	f107 0320 	add.w	r3, r7, #32
 801d084:	4618      	mov	r0, r3
 801d086:	f7e9 f845 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if ((frame.getMonotonicTimestamp().isZero()) ||
 801d08a:	f1b8 0f00 	cmp.w	r8, #0
 801d08e:	d004      	beq.n	801d09a <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xac>
 801d090:	f107 0318 	add.w	r3, r7, #24
 801d094:	4618      	mov	r0, r3
 801d096:	f7e9 f83d 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801d09a:	2c00      	cmp	r4, #0
 801d09c:	d001      	beq.n	801d0a2 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0xb4>
    {
        UAVCAN_TRACE("TransferReceiver", "Invalid frame, %s", frame.toString().c_str());
        return ResultNotComplete;
 801d09e:	2300      	movs	r3, #0
 801d0a0:	e10d      	b.n	801d2be <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x2d0>
    }

    const bool not_initialized = !isInitialized();
 801d0a2:	68f8      	ldr	r0, [r7, #12]
 801d0a4:	f7ff fc86 	bl	801c9b4 <_ZNK6uavcan16TransferReceiver13isInitializedEv>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	f083 0301 	eor.w	r3, r3, #1
 801d0ae:	b2db      	uxtb	r3, r3
 801d0b0:	75fb      	strb	r3, [r7, #23]
    const bool tid_timed_out = isTimedOut(frame.getMonotonicTimestamp());
 801d0b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0b6:	68b9      	ldr	r1, [r7, #8]
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f7fe f92f 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
 801d0be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0c2:	4619      	mov	r1, r3
 801d0c4:	68f8      	ldr	r0, [r7, #12]
 801d0c6:	f7ff ff65 	bl	801cf94 <_ZNK6uavcan16TransferReceiver10isTimedOutENS_13MonotonicTimeE>
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	75bb      	strb	r3, [r7, #22]
 801d0ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	f7e9 f81e 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    const bool same_iface = frame.getIfaceIndex() == iface_index_;
 801d0d8:	68b8      	ldr	r0, [r7, #8]
 801d0da:	f7fe f943 	bl	801b364 <_ZNK6uavcan7RxFrame13getIfaceIndexEv>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	461a      	mov	r2, r3
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	7fdb      	ldrb	r3, [r3, #31]
 801d0e6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801d0ea:	b2db      	uxtb	r3, r3
 801d0ec:	429a      	cmp	r2, r3
 801d0ee:	bf0c      	ite	eq
 801d0f0:	2301      	moveq	r3, #1
 801d0f2:	2300      	movne	r3, #0
 801d0f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    const bool first_frame = frame.isStartOfTransfer();
 801d0f8:	68bb      	ldr	r3, [r7, #8]
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f7fe f8f6 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801d100:	4603      	mov	r3, r0
 801d102:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    const bool non_wrapped_tid = tid_.computeForwardDistance(frame.getTransferID()) < TransferID::Half;
 801d106:	68fb      	ldr	r3, [r7, #12]
 801d108:	f103 041e 	add.w	r4, r3, #30
 801d10c:	68bb      	ldr	r3, [r7, #8]
 801d10e:	4618      	mov	r0, r3
 801d110:	f7e9 f832 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801d114:	4603      	mov	r3, r0
 801d116:	4619      	mov	r1, r3
 801d118:	4620      	mov	r0, r4
 801d11a:	f7fd f95b 	bl	801a3d4 <_ZNK6uavcan10TransferID22computeForwardDistanceES0_>
 801d11e:	4603      	mov	r3, r0
 801d120:	2b0f      	cmp	r3, #15
 801d122:	bfd4      	ite	le
 801d124:	2301      	movle	r3, #1
 801d126:	2300      	movgt	r3, #0
 801d128:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    const bool not_previous_tid = frame.getTransferID().computeForwardDistance(tid_) > 1;
 801d12c:	68bb      	ldr	r3, [r7, #8]
 801d12e:	4618      	mov	r0, r3
 801d130:	f7e9 f822 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801d134:	4603      	mov	r3, r0
 801d136:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801d140:	7f99      	ldrb	r1, [r3, #30]
 801d142:	4610      	mov	r0, r2
 801d144:	f7fd f946 	bl	801a3d4 <_ZNK6uavcan10TransferID22computeForwardDistanceES0_>
 801d148:	4603      	mov	r3, r0
 801d14a:	2b01      	cmp	r3, #1
 801d14c:	bfcc      	ite	gt
 801d14e:	2301      	movgt	r3, #1
 801d150:	2300      	movle	r3, #0
 801d152:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    const bool iface_switch_allowed = (frame.getMonotonicTimestamp() - this_transfer_ts_) > getIfaceSwitchDelay();
 801d156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d15a:	68b9      	ldr	r1, [r7, #8]
 801d15c:	4618      	mov	r0, r3
 801d15e:	f7fe f8dd 	bl	801b31c <_ZNK6uavcan7RxFrame21getMonotonicTimestampEv>
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	f103 0208 	add.w	r2, r3, #8
 801d168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d16c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d170:	4618      	mov	r0, r3
 801d172:	f7f8 fbe4 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 801d176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d17a:	68f9      	ldr	r1, [r7, #12]
 801d17c:	4618      	mov	r0, r3
 801d17e:	f7ff fc3e 	bl	801c9fe <_ZNK6uavcan16TransferReceiver19getIfaceSwitchDelayEv>
 801d182:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d18a:	4611      	mov	r1, r2
 801d18c:	4618      	mov	r0, r3
 801d18e:	f7f8 fc0e 	bl	80159ae <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEgtERKS1_>
 801d192:	4603      	mov	r3, r0
 801d194:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 801d198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d19c:	4618      	mov	r0, r3
 801d19e:	f7e9 f88c 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 801d1a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f7e9 f887 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
 801d1ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f7e8 ffaf 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>

    // FSM, the hard way
    const bool need_restart =
        (not_initialized) ||
 801d1b6:	7dfb      	ldrb	r3, [r7, #23]
        (tid_timed_out) ||
        (same_iface && first_frame && not_previous_tid) ||
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d11a      	bne.n	801d1f2 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x204>
        (tid_timed_out) ||
 801d1bc:	7dbb      	ldrb	r3, [r7, #22]
        (not_initialized) ||
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d117      	bne.n	801d1f2 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x204>
        (tid_timed_out) ||
 801d1c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d007      	beq.n	801d1da <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x1ec>
        (same_iface && first_frame && not_previous_tid) ||
 801d1ca:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d003      	beq.n	801d1da <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x1ec>
 801d1d2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d10b      	bne.n	801d1f2 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x204>
 801d1da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d009      	beq.n	801d1f6 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x208>
        (iface_switch_allowed && first_frame && non_wrapped_tid);
 801d1e2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d005      	beq.n	801d1f6 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x208>
 801d1ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d001      	beq.n	801d1f6 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x208>
        (same_iface && first_frame && not_previous_tid) ||
 801d1f2:	2301      	movs	r3, #1
 801d1f4:	e000      	b.n	801d1f8 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x20a>
 801d1f6:	2300      	movs	r3, #0
    const bool need_restart =
 801d1f8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

    if (need_restart)
 801d1fc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 801d200:	2b00      	cmp	r3, #0
 801d202:	d04a      	beq.n	801d29a <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x2ac>
    {
        if (!not_initialized && (tid_ != frame.getTransferID()))
 801d204:	7dfb      	ldrb	r3, [r7, #23]
 801d206:	f083 0301 	eor.w	r3, r3, #1
 801d20a:	b2db      	uxtb	r3, r3
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d010      	beq.n	801d232 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x244>
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	f103 041e 	add.w	r4, r3, #30
 801d216:	68bb      	ldr	r3, [r7, #8]
 801d218:	4618      	mov	r0, r3
 801d21a:	f7e8 ffad 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801d21e:	4603      	mov	r3, r0
 801d220:	4619      	mov	r1, r3
 801d222:	4620      	mov	r0, r4
 801d224:	f7ff fb98 	bl	801c958 <_ZNK6uavcan10TransferIDneES0_>
 801d228:	4603      	mov	r3, r0
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d001      	beq.n	801d232 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x244>
 801d22e:	2301      	movs	r3, #1
 801d230:	e000      	b.n	801d234 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x246>
 801d232:	2300      	movs	r3, #0
 801d234:	2b00      	cmp	r3, #0
 801d236:	d002      	beq.n	801d23e <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x250>
        {
            registerError();
 801d238:	68f8      	ldr	r0, [r7, #12]
 801d23a:	f7ff fc05 	bl	801ca48 <_ZNK6uavcan16TransferReceiver13registerErrorEv>
        }
        UAVCAN_TRACE("TransferReceiver", "Restart [ni=%d, isa=%d, tt=%d, si=%d, ff=%d, nwtid=%d, nptid=%d, tid=%d], %s",
                     int(not_initialized), int(iface_switch_allowed), int(tid_timed_out), int(same_iface),
                     int(first_frame), int(non_wrapped_tid), int(not_previous_tid), int(tid_.get()),
                     frame.toString().c_str());
        tba.remove();
 801d23e:	6878      	ldr	r0, [r7, #4]
 801d240:	f7fe f901 	bl	801b446 <_ZN6uavcan22TransferBufferAccessor6removeEv>
        iface_index_ = frame.getIfaceIndex() & IfaceIndexMask;
 801d244:	68b8      	ldr	r0, [r7, #8]
 801d246:	f7fe f88d 	bl	801b364 <_ZNK6uavcan7RxFrame13getIfaceIndexEv>
 801d24a:	4603      	mov	r3, r0
 801d24c:	f003 0303 	and.w	r3, r3, #3
 801d250:	b2d9      	uxtb	r1, r3
 801d252:	68fa      	ldr	r2, [r7, #12]
 801d254:	7fd3      	ldrb	r3, [r2, #31]
 801d256:	f361 0342 	bfi	r3, r1, #1, #2
 801d25a:	77d3      	strb	r3, [r2, #31]
        tid_ = frame.getTransferID();
 801d25c:	68bb      	ldr	r3, [r7, #8]
 801d25e:	68fc      	ldr	r4, [r7, #12]
 801d260:	4618      	mov	r0, r3
 801d262:	f7e8 ff89 	bl	8006178 <_ZNK6uavcan5Frame13getTransferIDEv>
 801d266:	77a0      	strb	r0, [r4, #30]
        next_toggle_ = false;
 801d268:	68fa      	ldr	r2, [r7, #12]
 801d26a:	7fd3      	ldrb	r3, [r2, #31]
 801d26c:	f36f 0300 	bfc	r3, #0, #1
 801d270:	77d3      	strb	r3, [r2, #31]
        buffer_write_pos_ = 0;
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	2200      	movs	r2, #0
 801d276:	839a      	strh	r2, [r3, #28]
        this_transfer_crc_ = 0;
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	2200      	movs	r2, #0
 801d27c:	835a      	strh	r2, [r3, #26]
        if (!first_frame)
 801d27e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801d282:	f083 0301 	eor.w	r3, r3, #1
 801d286:	b2db      	uxtb	r3, r3
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d006      	beq.n	801d29a <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x2ac>
        {
            tid_.increment();
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	331e      	adds	r3, #30
 801d290:	4618      	mov	r0, r3
 801d292:	f7f8 fbe7 	bl	8015a64 <_ZN6uavcan10TransferID9incrementEv>
            return ResultNotComplete;
 801d296:	2300      	movs	r3, #0
 801d298:	e011      	b.n	801d2be <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x2d0>
        }
    }

    if (!validate(frame))
 801d29a:	68b9      	ldr	r1, [r7, #8]
 801d29c:	68f8      	ldr	r0, [r7, #12]
 801d29e:	f7ff fcbe 	bl	801cc1e <_ZNK6uavcan16TransferReceiver8validateERKNS_7RxFrameE>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	f083 0301 	eor.w	r3, r3, #1
 801d2a8:	b2db      	uxtb	r3, r3
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d001      	beq.n	801d2b2 <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x2c4>
    {
        return ResultNotComplete;
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	e005      	b.n	801d2be <_ZN6uavcan16TransferReceiver8addFrameERKNS_7RxFrameERNS_22TransferBufferAccessorE+0x2d0>
    }
    return receive(frame, tba);
 801d2b2:	687a      	ldr	r2, [r7, #4]
 801d2b4:	68b9      	ldr	r1, [r7, #8]
 801d2b6:	68f8      	ldr	r0, [r7, #12]
 801d2b8:	f7ff fdc9 	bl	801ce4e <_ZN6uavcan16TransferReceiver7receiveERKNS_7RxFrameERNS_22TransferBufferAccessorE>
 801d2bc:	4603      	mov	r3, r0
}
 801d2be:	4618      	mov	r0, r3
 801d2c0:	3760      	adds	r7, #96	; 0x60
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d2c8 <_ZN6uavcan16TransferReceiver15yieldErrorCountEv>:

uint8_t TransferReceiver::yieldErrorCount()
{
 801d2c8:	b480      	push	{r7}
 801d2ca:	b085      	sub	sp, #20
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	6078      	str	r0, [r7, #4]
    const uint8_t ret = error_cnt_;
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	7fdb      	ldrb	r3, [r3, #31]
 801d2d4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801d2d8:	b2db      	uxtb	r3, r3
 801d2da:	73fb      	strb	r3, [r7, #15]
    error_cnt_ = 0;
 801d2dc:	687a      	ldr	r2, [r7, #4]
 801d2de:	7fd3      	ldrb	r3, [r2, #31]
 801d2e0:	f36f 03c7 	bfc	r3, #3, #5
 801d2e4:	77d3      	strb	r3, [r2, #31]
    return ret;
 801d2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	3714      	adds	r7, #20
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2f2:	4770      	bx	lr

0801d2f4 <_ZN6uavcan3minIyEERKT_S3_S3_>:
const T& min(const T& a, const T& b)
 801d2f4:	b490      	push	{r4, r7}
 801d2f6:	b082      	sub	sp, #8
 801d2f8:	af00      	add	r7, sp, #0
 801d2fa:	6078      	str	r0, [r7, #4]
 801d2fc:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 801d2fe:	683b      	ldr	r3, [r7, #0]
 801d300:	e9d3 1200 	ldrd	r1, r2, [r3]
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d30a:	42a2      	cmp	r2, r4
 801d30c:	bf08      	it	eq
 801d30e:	4299      	cmpeq	r1, r3
 801d310:	d201      	bcs.n	801d316 <_ZN6uavcan3minIyEERKT_S3_S3_+0x22>
 801d312:	683b      	ldr	r3, [r7, #0]
 801d314:	e000      	b.n	801d318 <_ZN6uavcan3minIyEERKT_S3_S3_+0x24>
 801d316:	687b      	ldr	r3, [r7, #4]
}
 801d318:	4618      	mov	r0, r3
 801d31a:	3708      	adds	r7, #8
 801d31c:	46bd      	mov	sp, r7
 801d31e:	bc90      	pop	{r4, r7}
 801d320:	4770      	bx	lr

0801d322 <_ZN6uavcan3maxIyEERKT_S3_S3_>:
const T& max(const T& a, const T& b)
 801d322:	b490      	push	{r4, r7}
 801d324:	b082      	sub	sp, #8
 801d326:	af00      	add	r7, sp, #0
 801d328:	6078      	str	r0, [r7, #4]
 801d32a:	6039      	str	r1, [r7, #0]
    return (a < b) ? b : a;
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	e9d3 1200 	ldrd	r1, r2, [r3]
 801d332:	683b      	ldr	r3, [r7, #0]
 801d334:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d338:	42a2      	cmp	r2, r4
 801d33a:	bf08      	it	eq
 801d33c:	4299      	cmpeq	r1, r3
 801d33e:	d201      	bcs.n	801d344 <_ZN6uavcan3maxIyEERKT_S3_S3_+0x22>
 801d340:	683b      	ldr	r3, [r7, #0]
 801d342:	e000      	b.n	801d346 <_ZN6uavcan3maxIyEERKT_S3_S3_+0x24>
 801d344:	687b      	ldr	r3, [r7, #4]
}
 801d346:	4618      	mov	r0, r3
 801d348:	3708      	adds	r7, #8
 801d34a:	46bd      	mov	sp, r7
 801d34c:	bc90      	pop	{r4, r7}
 801d34e:	4770      	bx	lr

0801d350 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE>:
{
 801d350:	b580      	push	{r7, lr}
 801d352:	b082      	sub	sp, #8
 801d354:	af00      	add	r7, sp, #0
 801d356:	4603      	mov	r3, r0
 801d358:	71fb      	strb	r3, [r7, #7]
    if (tt == TransferTypeServiceResponse ||
 801d35a:	79fb      	ldrb	r3, [r7, #7]
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d002      	beq.n	801d366 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x16>
 801d360:	79fb      	ldrb	r3, [r7, #7]
 801d362:	2b01      	cmp	r3, #1
 801d364:	d101      	bne.n	801d36a <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x1a>
        return DataTypeKindService;
 801d366:	2300      	movs	r3, #0
 801d368:	e00a      	b.n	801d380 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x30>
    else if (tt == TransferTypeMessageBroadcast)
 801d36a:	79fb      	ldrb	r3, [r7, #7]
 801d36c:	2b02      	cmp	r3, #2
 801d36e:	d101      	bne.n	801d374 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x24>
        return DataTypeKindMessage;
 801d370:	2301      	movs	r3, #1
 801d372:	e005      	b.n	801d380 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x30>
        UAVCAN_ASSERT(0);
 801d374:	4b04      	ldr	r3, [pc, #16]	; (801d388 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x38>)
 801d376:	4a05      	ldr	r2, [pc, #20]	; (801d38c <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x3c>)
 801d378:	2129      	movs	r1, #41	; 0x29
 801d37a:	4805      	ldr	r0, [pc, #20]	; (801d390 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE+0x40>)
 801d37c:	f003 f906 	bl	802058c <__assert_func>
}
 801d380:	4618      	mov	r0, r3
 801d382:	3708      	adds	r7, #8
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}
 801d388:	08024540 	.word	0x08024540
 801d38c:	0802c618 	.word	0x0802c618
 801d390:	08024544 	.word	0x08024544

0801d394 <_ZN6uavcan19TransferPerfCounter13addTxTransferEv>:
    void addTxTransfer() { transfers_tx_++; }
 801d394:	b490      	push	{r4, r7}
 801d396:	b082      	sub	sp, #8
 801d398:	af00      	add	r7, sp, #0
 801d39a:	6078      	str	r0, [r7, #4]
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	e9d3 1200 	ldrd	r1, r2, [r3]
 801d3a2:	1c4b      	adds	r3, r1, #1
 801d3a4:	f142 0400 	adc.w	r4, r2, #0
 801d3a8:	687a      	ldr	r2, [r7, #4]
 801d3aa:	e9c2 3400 	strd	r3, r4, [r2]
 801d3ae:	bf00      	nop
 801d3b0:	3708      	adds	r7, #8
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	bc90      	pop	{r4, r7}
 801d3b6:	4770      	bx	lr

0801d3b8 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE>:
    Frame(DataTypeID data_type_id,
 801d3b8:	b590      	push	{r4, r7, lr}
 801d3ba:	b085      	sub	sp, #20
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	60f8      	str	r0, [r7, #12]
 801d3c0:	60b9      	str	r1, [r7, #8]
 801d3c2:	713b      	strb	r3, [r7, #4]
 801d3c4:	4613      	mov	r3, r2
 801d3c6:	71fb      	strb	r3, [r7, #7]
        toggle_(false)
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	4a33      	ldr	r2, [pc, #204]	; (801d498 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xe0>)
 801d3cc:	7812      	ldrb	r2, [r2, #0]
 801d3ce:	71da      	strb	r2, [r3, #7]
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	79fa      	ldrb	r2, [r7, #7]
 801d3d4:	721a      	strb	r2, [r3, #8]
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	68ba      	ldr	r2, [r7, #8]
 801d3da:	60da      	str	r2, [r3, #12]
 801d3dc:	68fb      	ldr	r3, [r7, #12]
 801d3de:	2200      	movs	r2, #0
 801d3e0:	611a      	str	r2, [r3, #16]
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	793a      	ldrb	r2, [r7, #4]
 801d3e6:	751a      	strb	r2, [r3, #20]
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 801d3ee:	755a      	strb	r2, [r3, #21]
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801d3f6:	759a      	strb	r2, [r3, #22]
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	75da      	strb	r2, [r3, #23]
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	2200      	movs	r2, #0
 801d402:	761a      	strb	r2, [r3, #24]
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	2200      	movs	r2, #0
 801d408:	765a      	strb	r2, [r3, #25]
        UAVCAN_ASSERT((transfer_type == TransferTypeMessageBroadcast) == dst_node_id.isBroadcast());
 801d40a:	79fb      	ldrb	r3, [r7, #7]
 801d40c:	2b02      	cmp	r3, #2
 801d40e:	bf0c      	ite	eq
 801d410:	2301      	moveq	r3, #1
 801d412:	2300      	movne	r3, #0
 801d414:	b2db      	uxtb	r3, r3
 801d416:	461c      	mov	r4, r3
 801d418:	f107 0020 	add.w	r0, r7, #32
 801d41c:	f7f8 fb35 	bl	8015a8a <_ZNK6uavcan6NodeID11isBroadcastEv>
 801d420:	4603      	mov	r3, r0
 801d422:	429c      	cmp	r4, r3
 801d424:	d005      	beq.n	801d432 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0x7a>
 801d426:	4b1d      	ldr	r3, [pc, #116]	; (801d49c <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xe4>)
 801d428:	4a1d      	ldr	r2, [pc, #116]	; (801d4a0 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xe8>)
 801d42a:	213a      	movs	r1, #58	; 0x3a
 801d42c:	481d      	ldr	r0, [pc, #116]	; (801d4a4 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xec>)
 801d42e:	f003 f8ad 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(data_type_id.isValidForDataTypeKind(getDataTypeKindForTransferType(transfer_type)));
 801d432:	79fb      	ldrb	r3, [r7, #7]
 801d434:	4618      	mov	r0, r3
 801d436:	f7ff ff8b 	bl	801d350 <_ZN6uavcanL30getDataTypeKindForTransferTypeENS_12TransferTypeE>
 801d43a:	4603      	mov	r3, r0
 801d43c:	461a      	mov	r2, r3
 801d43e:	f107 0308 	add.w	r3, r7, #8
 801d442:	4611      	mov	r1, r2
 801d444:	4618      	mov	r0, r3
 801d446:	f7fb fe17 	bl	8019078 <_ZNK6uavcan10DataTypeID22isValidForDataTypeKindENS_12DataTypeKindE>
 801d44a:	4603      	mov	r3, r0
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d105      	bne.n	801d45c <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xa4>
 801d450:	4b15      	ldr	r3, [pc, #84]	; (801d4a8 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xf0>)
 801d452:	4a13      	ldr	r2, [pc, #76]	; (801d4a0 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xe8>)
 801d454:	213b      	movs	r1, #59	; 0x3b
 801d456:	4813      	ldr	r0, [pc, #76]	; (801d4a4 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xec>)
 801d458:	f003 f898 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(src_node_id.isUnicast() ? (src_node_id != dst_node_id) : true);
 801d45c:	1d3b      	adds	r3, r7, #4
 801d45e:	4618      	mov	r0, r3
 801d460:	f7e8 fbbf 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 801d464:	4603      	mov	r3, r0
 801d466:	2b00      	cmp	r3, #0
 801d468:	d007      	beq.n	801d47a <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xc2>
 801d46a:	1d3b      	adds	r3, r7, #4
 801d46c:	f897 1020 	ldrb.w	r1, [r7, #32]
 801d470:	4618      	mov	r0, r3
 801d472:	f7fa ff15 	bl	80182a0 <_ZNK6uavcan6NodeIDneES0_>
 801d476:	4603      	mov	r3, r0
 801d478:	e000      	b.n	801d47c <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xc4>
 801d47a:	2301      	movs	r3, #1
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d105      	bne.n	801d48c <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xd4>
 801d480:	4b0a      	ldr	r3, [pc, #40]	; (801d4ac <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xf4>)
 801d482:	4a07      	ldr	r2, [pc, #28]	; (801d4a0 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xe8>)
 801d484:	213c      	movs	r1, #60	; 0x3c
 801d486:	4807      	ldr	r0, [pc, #28]	; (801d4a4 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE+0xec>)
 801d488:	f003 f880 	bl	802058c <__assert_func>
    }
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	4618      	mov	r0, r3
 801d490:	3714      	adds	r7, #20
 801d492:	46bd      	mov	sp, r7
 801d494:	bd90      	pop	{r4, r7, pc}
 801d496:	bf00      	nop
 801d498:	200085f0 	.word	0x200085f0
 801d49c:	080245d0 	.word	0x080245d0
 801d4a0:	0802c5a4 	.word	0x0802c5a4
 801d4a4:	08024620 	.word	0x08024620
 801d4a8:	08024668 	.word	0x08024668
 801d4ac:	080246bc 	.word	0x080246bc

0801d4b0 <_ZN6uavcan5Frame11setPriorityENS_16TransferPriorityE>:
    void setPriority(TransferPriority priority) { transfer_priority_ = priority; }
 801d4b0:	b480      	push	{r7}
 801d4b2:	b083      	sub	sp, #12
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	6078      	str	r0, [r7, #4]
 801d4b8:	7039      	strb	r1, [r7, #0]
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	783a      	ldrb	r2, [r7, #0]
 801d4be:	71da      	strb	r2, [r3, #7]
 801d4c0:	bf00      	nop
 801d4c2:	370c      	adds	r7, #12
 801d4c4:	46bd      	mov	sp, r7
 801d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ca:	4770      	bx	lr

0801d4cc <_ZN6uavcan5Frame18setStartOfTransferEb>:
    void setStartOfTransfer(bool x) { start_of_transfer_ = x; }
 801d4cc:	b480      	push	{r7}
 801d4ce:	b083      	sub	sp, #12
 801d4d0:	af00      	add	r7, sp, #0
 801d4d2:	6078      	str	r0, [r7, #4]
 801d4d4:	460b      	mov	r3, r1
 801d4d6:	70fb      	strb	r3, [r7, #3]
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	78fa      	ldrb	r2, [r7, #3]
 801d4dc:	75da      	strb	r2, [r3, #23]
 801d4de:	bf00      	nop
 801d4e0:	370c      	adds	r7, #12
 801d4e2:	46bd      	mov	sp, r7
 801d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4e8:	4770      	bx	lr

0801d4ea <_ZN6uavcan5Frame16setEndOfTransferEb>:
    void setEndOfTransfer(bool x)   { end_of_transfer_ = x; }
 801d4ea:	b480      	push	{r7}
 801d4ec:	b083      	sub	sp, #12
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	6078      	str	r0, [r7, #4]
 801d4f2:	460b      	mov	r3, r1
 801d4f4:	70fb      	strb	r3, [r7, #3]
 801d4f6:	687b      	ldr	r3, [r7, #4]
 801d4f8:	78fa      	ldrb	r2, [r7, #3]
 801d4fa:	761a      	strb	r2, [r3, #24]
 801d4fc:	bf00      	nop
 801d4fe:	370c      	adds	r7, #12
 801d500:	46bd      	mov	sp, r7
 801d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d506:	4770      	bx	lr

0801d508 <_ZN6uavcan5Frame10flipToggleEv>:
    void flipToggle() { toggle_ = !toggle_; }
 801d508:	b480      	push	{r7}
 801d50a:	b083      	sub	sp, #12
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	6078      	str	r0, [r7, #4]
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	7e5b      	ldrb	r3, [r3, #25]
 801d514:	f083 0301 	eor.w	r3, r3, #1
 801d518:	b2da      	uxtb	r2, r3
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	765a      	strb	r2, [r3, #25]
 801d51e:	bf00      	nop
 801d520:	370c      	adds	r7, #12
 801d522:	46bd      	mov	sp, r7
 801d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d528:	4770      	bx	lr

0801d52a <_ZNK6uavcan14TransferSender13registerErrorEv>:

namespace uavcan
{

void TransferSender::registerError() const
{
 801d52a:	b580      	push	{r7, lr}
 801d52c:	b082      	sub	sp, #8
 801d52e:	af00      	add	r7, sp, #0
 801d530:	6078      	str	r0, [r7, #4]
    dispatcher_.getTransferPerfCounter().addError();
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	689b      	ldr	r3, [r3, #8]
 801d536:	4618      	mov	r0, r3
 801d538:	f7e9 f8d3 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 801d53c:	4603      	mov	r3, r0
 801d53e:	4618      	mov	r0, r3
 801d540:	f7e8 fd37 	bl	8005fb2 <_ZN6uavcan19TransferPerfCounter8addErrorEv>
}
 801d544:	bf00      	nop
 801d546:	3708      	adds	r7, #8
 801d548:	46bd      	mov	sp, r7
 801d54a:	bd80      	pop	{r7, pc}

0801d54c <_ZN6uavcan14TransferSender4initERKNS_18DataTypeDescriptorENS_10CanTxQueue3QosE>:

void TransferSender::init(const DataTypeDescriptor& dtid, CanTxQueue::Qos qos)
{
 801d54c:	b590      	push	{r4, r7, lr}
 801d54e:	b085      	sub	sp, #20
 801d550:	af00      	add	r7, sp, #0
 801d552:	60f8      	str	r0, [r7, #12]
 801d554:	60b9      	str	r1, [r7, #8]
 801d556:	4613      	mov	r3, r2
 801d558:	71fb      	strb	r3, [r7, #7]
    UAVCAN_ASSERT(!isInitialized());
 801d55a:	68f8      	ldr	r0, [r7, #12]
 801d55c:	f7f7 f803 	bl	8014566 <_ZNK6uavcan14TransferSender13isInitializedEv>
 801d560:	4603      	mov	r3, r0
 801d562:	f083 0301 	eor.w	r3, r3, #1
 801d566:	b2db      	uxtb	r3, r3
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d105      	bne.n	801d578 <_ZN6uavcan14TransferSender4initERKNS_18DataTypeDescriptorENS_10CanTxQueue3QosE+0x2c>
 801d56c:	4b0d      	ldr	r3, [pc, #52]	; (801d5a4 <_ZN6uavcan14TransferSender4initERKNS_18DataTypeDescriptorENS_10CanTxQueue3QosE+0x58>)
 801d56e:	4a0e      	ldr	r2, [pc, #56]	; (801d5a8 <_ZN6uavcan14TransferSender4initERKNS_18DataTypeDescriptorENS_10CanTxQueue3QosE+0x5c>)
 801d570:	2114      	movs	r1, #20
 801d572:	480e      	ldr	r0, [pc, #56]	; (801d5ac <_ZN6uavcan14TransferSender4initERKNS_18DataTypeDescriptorENS_10CanTxQueue3QosE+0x60>)
 801d574:	f003 f80a 	bl	802058c <__assert_func>

    qos_          = qos;
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	79fa      	ldrb	r2, [r7, #7]
 801d57c:	735a      	strb	r2, [r3, #13]
    data_type_id_ = dtid.getID();
 801d57e:	68fc      	ldr	r4, [r7, #12]
 801d580:	68b8      	ldr	r0, [r7, #8]
 801d582:	f7e8 fc33 	bl	8005dec <_ZNK6uavcan18DataTypeDescriptor5getIDEv>
 801d586:	6120      	str	r0, [r4, #16]
    crc_base_     = dtid.getSignature().toTransferCRC();
 801d588:	68b8      	ldr	r0, [r7, #8]
 801d58a:	f7e8 fc3b 	bl	8005e04 <_ZNK6uavcan18DataTypeDescriptor12getSignatureEv>
 801d58e:	4603      	mov	r3, r0
 801d590:	68fc      	ldr	r4, [r7, #12]
 801d592:	4618      	mov	r0, r3
 801d594:	f000 fbfc 	bl	801dd90 <_ZNK6uavcan17DataTypeSignature13toTransferCRCEv>
 801d598:	81e0      	strh	r0, [r4, #14]
}
 801d59a:	bf00      	nop
 801d59c:	3714      	adds	r7, #20
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd90      	pop	{r4, r7, pc}
 801d5a2:	bf00      	nop
 801d5a4:	080247e0 	.word	0x080247e0
 801d5a8:	0802c494 	.word	0x0802c494
 801d5ac:	080247f4 	.word	0x080247f4

0801d5b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE>:

int TransferSender::send(const uint8_t* payload, unsigned payload_len, MonotonicTime tx_deadline,
                         MonotonicTime blocking_deadline, TransferType transfer_type, NodeID dst_node_id,
                         TransferID tid) const
{
 801d5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5b2:	b0a7      	sub	sp, #156	; 0x9c
 801d5b4:	af04      	add	r7, sp, #16
 801d5b6:	60f8      	str	r0, [r7, #12]
 801d5b8:	60b9      	str	r1, [r7, #8]
 801d5ba:	607a      	str	r2, [r7, #4]
 801d5bc:	603b      	str	r3, [r7, #0]
    Frame frame(data_type_id_, transfer_type, dispatcher_.getNodeID(), dst_node_id, tid);
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	689b      	ldr	r3, [r3, #8]
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f7f8 faba 	bl	8015b3c <_ZNK6uavcan10Dispatcher9getNodeIDEv>
 801d5c8:	4604      	mov	r4, r0
 801d5ca:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 801d5ce:	68f9      	ldr	r1, [r7, #12]
 801d5d0:	f107 0020 	add.w	r0, r7, #32
 801d5d4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 801d5d8:	f88d 3004 	strb.w	r3, [sp, #4]
 801d5dc:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801d5e0:	f88d 3000 	strb.w	r3, [sp]
 801d5e4:	4623      	mov	r3, r4
 801d5e6:	6909      	ldr	r1, [r1, #16]
 801d5e8:	f7ff fee6 	bl	801d3b8 <_ZN6uavcan5FrameC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDES3_NS_10TransferIDE>

    frame.setPriority(priority_);
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	f107 0220 	add.w	r2, r7, #32
 801d5f2:	7b19      	ldrb	r1, [r3, #12]
 801d5f4:	4610      	mov	r0, r2
 801d5f6:	f7ff ff5b 	bl	801d4b0 <_ZN6uavcan5Frame11setPriorityENS_16TransferPriorityE>
    frame.setStartOfTransfer(true);
 801d5fa:	f107 0320 	add.w	r3, r7, #32
 801d5fe:	2101      	movs	r1, #1
 801d600:	4618      	mov	r0, r3
 801d602:	f7ff ff63 	bl	801d4cc <_ZN6uavcan5Frame18setStartOfTransferEb>

    /*
     * Checking if we're allowed to send.
     * In passive mode we can send only anonymous transfers, if they are enabled.
     */
    if (dispatcher_.isPassiveMode())
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	689b      	ldr	r3, [r3, #8]
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7f8 fdf2 	bl	80161f4 <_ZNK6uavcan10Dispatcher13isPassiveModeEv>
 801d610:	4603      	mov	r3, r0
 801d612:	2b00      	cmp	r3, #0
 801d614:	d020      	beq.n	801d658 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0xa8>
    {
        const bool allow = allow_anonymous_transfers_ &&
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	7ddb      	ldrb	r3, [r3, #23]
                           (transfer_type == TransferTypeMessageBroadcast) &&
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d00f      	beq.n	801d63e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x8e>
        const bool allow = allow_anonymous_transfers_ &&
 801d61e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801d622:	2b02      	cmp	r3, #2
 801d624:	d10b      	bne.n	801d63e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x8e>
                           (int(payload_len) <= frame.getPayloadCapacity());
 801d626:	f107 0320 	add.w	r3, r7, #32
 801d62a:	4618      	mov	r0, r3
 801d62c:	f7fb fd75 	bl	801911a <_ZNK6uavcan5Frame18getPayloadCapacityEv>
 801d630:	4603      	mov	r3, r0
 801d632:	461a      	mov	r2, r3
 801d634:	687b      	ldr	r3, [r7, #4]
                           (transfer_type == TransferTypeMessageBroadcast) &&
 801d636:	429a      	cmp	r2, r3
 801d638:	db01      	blt.n	801d63e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x8e>
 801d63a:	2301      	movs	r3, #1
 801d63c:	e000      	b.n	801d640 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x90>
 801d63e:	2300      	movs	r3, #0
                           (int(payload_len) <= frame.getPayloadCapacity());
 801d640:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if (!allow)
 801d644:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801d648:	f083 0301 	eor.w	r3, r3, #1
 801d64c:	b2db      	uxtb	r3, r3
 801d64e:	2b00      	cmp	r3, #0
 801d650:	d002      	beq.n	801d658 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0xa8>
        {
            return -ErrPassiveMode;
 801d652:	f06f 040a 	mvn.w	r4, #10
 801d656:	e1a2      	b.n	801d99e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3ee>
        }
    }

    dispatcher_.getTransferPerfCounter().addTxTransfer();
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	689b      	ldr	r3, [r3, #8]
 801d65c:	4618      	mov	r0, r3
 801d65e:	f7e9 f840 	bl	80066e2 <_ZN6uavcan10Dispatcher22getTransferPerfCounterEv>
 801d662:	4603      	mov	r3, r0
 801d664:	4618      	mov	r0, r3
 801d666:	f7ff fe95 	bl	801d394 <_ZN6uavcan19TransferPerfCounter13addTxTransferEv>

    /*
     * Sending frames
     */
    if (frame.getPayloadCapacity() >= payload_len)           // Single Frame Transfer
 801d66a:	f107 0320 	add.w	r3, r7, #32
 801d66e:	4618      	mov	r0, r3
 801d670:	f7fb fd53 	bl	801911a <_ZNK6uavcan5Frame18getPayloadCapacityEv>
 801d674:	4603      	mov	r3, r0
 801d676:	461a      	mov	r2, r3
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	4293      	cmp	r3, r2
 801d67c:	bf94      	ite	ls
 801d67e:	2301      	movls	r3, #1
 801d680:	2300      	movhi	r3, #0
 801d682:	b2db      	uxtb	r3, r3
 801d684:	2b00      	cmp	r3, #0
 801d686:	f000 8085 	beq.w	801d794 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x1e4>
    {
        const int res = frame.setPayload(payload, payload_len);
 801d68a:	f107 0320 	add.w	r3, r7, #32
 801d68e:	687a      	ldr	r2, [r7, #4]
 801d690:	68b9      	ldr	r1, [r7, #8]
 801d692:	4618      	mov	r0, r3
 801d694:	f7fb fdaa 	bl	80191ec <_ZN6uavcan5Frame10setPayloadEPKhj>
 801d698:	4603      	mov	r3, r0
 801d69a:	66fb      	str	r3, [r7, #108]	; 0x6c
        if (res != int(payload_len))
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d6a0:	429a      	cmp	r2, r3
 801d6a2:	d005      	beq.n	801d6b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x100>
        {
            UAVCAN_ASSERT(0);
 801d6a4:	4bc0      	ldr	r3, [pc, #768]	; (801d9a8 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3f8>)
 801d6a6:	4ac1      	ldr	r2, [pc, #772]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d6a8:	213f      	movs	r1, #63	; 0x3f
 801d6aa:	48c1      	ldr	r0, [pc, #772]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d6ac:	f002 ff6e 	bl	802058c <__assert_func>
            UAVCAN_TRACE("TransferSender", "Frame payload write failure, %i", res);
            registerError();
            return (res < 0) ? res : -ErrLogic;
        }

        frame.setEndOfTransfer(true);
 801d6b0:	f107 0320 	add.w	r3, r7, #32
 801d6b4:	2101      	movs	r1, #1
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ff ff17 	bl	801d4ea <_ZN6uavcan5Frame16setEndOfTransferEb>
        UAVCAN_ASSERT(frame.isStartOfTransfer() && frame.isEndOfTransfer() && !frame.getToggle());
 801d6bc:	f107 0320 	add.w	r3, r7, #32
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7fd fe13 	bl	801b2ec <_ZNK6uavcan5Frame17isStartOfTransferEv>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d012      	beq.n	801d6f2 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x142>
 801d6cc:	f107 0320 	add.w	r3, r7, #32
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	f7fd fe17 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801d6d6:	4603      	mov	r3, r0
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d00a      	beq.n	801d6f2 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x142>
 801d6dc:	f107 0320 	add.w	r3, r7, #32
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7ff f94a 	bl	801c97a <_ZNK6uavcan5Frame9getToggleEv>
 801d6e6:	4603      	mov	r3, r0
 801d6e8:	f083 0301 	eor.w	r3, r3, #1
 801d6ec:	b2db      	uxtb	r3, r3
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d105      	bne.n	801d6fe <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x14e>
 801d6f2:	4bb0      	ldr	r3, [pc, #704]	; (801d9b4 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x404>)
 801d6f4:	4aad      	ldr	r2, [pc, #692]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d6f6:	2146      	movs	r1, #70	; 0x46
 801d6f8:	48ad      	ldr	r0, [pc, #692]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d6fa:	f002 ff47 	bl	802058c <__assert_func>

        const CanIOFlags flags = frame.getSrcNodeID().isUnicast() ? flags_ : (flags_ | CanIOFlagAbortOnError);
 801d6fe:	f107 0320 	add.w	r3, r7, #32
 801d702:	4618      	mov	r0, r3
 801d704:	f7e8 fd2c 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801d708:	4603      	mov	r3, r0
 801d70a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 801d70e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d712:	4618      	mov	r0, r3
 801d714:	f7e8 fa65 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 801d718:	4603      	mov	r3, r0
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d002      	beq.n	801d724 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x174>
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	8a9b      	ldrh	r3, [r3, #20]
 801d722:	e004      	b.n	801d72e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x17e>
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	8a9b      	ldrh	r3, [r3, #20]
 801d728:	f043 0302 	orr.w	r3, r3, #2
 801d72c:	b29b      	uxth	r3, r3
 801d72e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

        return dispatcher_.send(frame, tx_deadline, blocking_deadline, qos_, flags, iface_mask_);
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	689c      	ldr	r4, [r3, #8]
 801d736:	683a      	ldr	r2, [r7, #0]
 801d738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d73c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d740:	e883 0003 	stmia.w	r3, {r0, r1}
 801d744:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801d748:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d74c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d750:	e883 0003 	stmia.w	r3, {r0, r1}
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	7b5b      	ldrb	r3, [r3, #13]
 801d758:	68fa      	ldr	r2, [r7, #12]
 801d75a:	7d92      	ldrb	r2, [r2, #22]
 801d75c:	f107 0548 	add.w	r5, r7, #72	; 0x48
 801d760:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801d764:	f107 0120 	add.w	r1, r7, #32
 801d768:	9202      	str	r2, [sp, #8]
 801d76a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801d76e:	9201      	str	r2, [sp, #4]
 801d770:	9300      	str	r3, [sp, #0]
 801d772:	462b      	mov	r3, r5
 801d774:	4602      	mov	r2, r0
 801d776:	4620      	mov	r0, r4
 801d778:	f7fb f942 	bl	8018a00 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth>
 801d77c:	4604      	mov	r4, r0
 801d77e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d782:	4618      	mov	r0, r3
 801d784:	f7e8 fcc6 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801d788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d78c:	4618      	mov	r0, r3
 801d78e:	f7e8 fcc1 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801d792:	e104      	b.n	801d99e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3ee>
    }
    else                                                   // Multi Frame Transfer
    {
        UAVCAN_ASSERT(!dispatcher_.isPassiveMode());
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	689b      	ldr	r3, [r3, #8]
 801d798:	4618      	mov	r0, r3
 801d79a:	f7f8 fd2b 	bl	80161f4 <_ZNK6uavcan10Dispatcher13isPassiveModeEv>
 801d79e:	4603      	mov	r3, r0
 801d7a0:	f083 0301 	eor.w	r3, r3, #1
 801d7a4:	b2db      	uxtb	r3, r3
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d105      	bne.n	801d7b6 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x206>
 801d7aa:	4b83      	ldr	r3, [pc, #524]	; (801d9b8 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x408>)
 801d7ac:	4a7f      	ldr	r2, [pc, #508]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d7ae:	214e      	movs	r1, #78	; 0x4e
 801d7b0:	487f      	ldr	r0, [pc, #508]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d7b2:	f002 feeb 	bl	802058c <__assert_func>
        UAVCAN_ASSERT(frame.getSrcNodeID().isUnicast());
 801d7b6:	f107 0320 	add.w	r3, r7, #32
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f7e8 fcd0 	bl	8006160 <_ZNK6uavcan5Frame12getSrcNodeIDEv>
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801d7c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	f7e8 fa09 	bl	8005be2 <_ZNK6uavcan6NodeID9isUnicastEv>
 801d7d0:	4603      	mov	r3, r0
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d105      	bne.n	801d7e2 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x232>
 801d7d6:	4b79      	ldr	r3, [pc, #484]	; (801d9bc <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x40c>)
 801d7d8:	4a74      	ldr	r2, [pc, #464]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d7da:	214f      	movs	r1, #79	; 0x4f
 801d7dc:	4874      	ldr	r0, [pc, #464]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d7de:	f002 fed5 	bl	802058c <__assert_func>

        int offset = 0;
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        {
            TransferCRC crc = crc_base_;
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	89db      	ldrh	r3, [r3, #14]
 801d7ec:	83bb      	strh	r3, [r7, #28]
            crc.add(payload, payload_len);
 801d7ee:	f107 031c 	add.w	r3, r7, #28
 801d7f2:	687a      	ldr	r2, [r7, #4]
 801d7f4:	68b9      	ldr	r1, [r7, #8]
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f7fb fcc0 	bl	801917c <_ZN6uavcan11TransferCRC3addEPKhj>

            static const int BUFLEN = sizeof(static_cast<CanFrame*>(0)->data);
            uint8_t buf[BUFLEN];

            buf[0] = uint8_t(crc.get() & 0xFFU);       // Transfer CRC, little endian
 801d7fc:	f107 031c 	add.w	r3, r7, #28
 801d800:	4618      	mov	r0, r3
 801d802:	f7fb fce7 	bl	80191d4 <_ZNK6uavcan11TransferCRC3getEv>
 801d806:	4603      	mov	r3, r0
 801d808:	b2db      	uxtb	r3, r3
 801d80a:	753b      	strb	r3, [r7, #20]
            buf[1] = uint8_t((crc.get() >> 8) & 0xFF);
 801d80c:	f107 031c 	add.w	r3, r7, #28
 801d810:	4618      	mov	r0, r3
 801d812:	f7fb fcdf 	bl	80191d4 <_ZNK6uavcan11TransferCRC3getEv>
 801d816:	4603      	mov	r3, r0
 801d818:	121b      	asrs	r3, r3, #8
 801d81a:	b2db      	uxtb	r3, r3
 801d81c:	757b      	strb	r3, [r7, #21]
            (void)copy(payload, payload + BUFLEN - 2, buf + 2);
 801d81e:	68bb      	ldr	r3, [r7, #8]
 801d820:	1d99      	adds	r1, r3, #6
 801d822:	f107 0314 	add.w	r3, r7, #20
 801d826:	3302      	adds	r3, #2
 801d828:	461a      	mov	r2, r3
 801d82a:	68b8      	ldr	r0, [r7, #8]
 801d82c:	f7f8 fbc4 	bl	8015fb8 <_ZN6uavcan4copyIPKhPhEET0_T_S5_S4_>

            const int write_res = frame.setPayload(buf, BUFLEN);
 801d830:	f107 0114 	add.w	r1, r7, #20
 801d834:	f107 0320 	add.w	r3, r7, #32
 801d838:	2208      	movs	r2, #8
 801d83a:	4618      	mov	r0, r3
 801d83c:	f7fb fcd6 	bl	80191ec <_ZN6uavcan5Frame10setPayloadEPKhj>
 801d840:	4603      	mov	r3, r0
 801d842:	67bb      	str	r3, [r7, #120]	; 0x78
            if (write_res < 2)
 801d844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d846:	2b01      	cmp	r3, #1
 801d848:	dc04      	bgt.n	801d854 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x2a4>
            {
                UAVCAN_TRACE("TransferSender", "Frame payload write failure, %i", write_res);
                registerError();
 801d84a:	68f8      	ldr	r0, [r7, #12]
 801d84c:	f7ff fe6d 	bl	801d52a <_ZNK6uavcan14TransferSender13registerErrorEv>
                return write_res;
 801d850:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 801d852:	e0a4      	b.n	801d99e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3ee>
            }
            offset = write_res - 2;
 801d854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d856:	3b02      	subs	r3, #2
 801d858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            UAVCAN_ASSERT(int(payload_len) > offset);
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d862:	429a      	cmp	r2, r3
 801d864:	db05      	blt.n	801d872 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x2c2>
 801d866:	4b56      	ldr	r3, [pc, #344]	; (801d9c0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x410>)
 801d868:	4a50      	ldr	r2, [pc, #320]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d86a:	2165      	movs	r1, #101	; 0x65
 801d86c:	4850      	ldr	r0, [pc, #320]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d86e:	f002 fe8d 	bl	802058c <__assert_func>
        }

        int num_sent = 0;
 801d872:	2300      	movs	r3, #0
 801d874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        while (true)
        {
            const int send_res = dispatcher_.send(frame, tx_deadline, blocking_deadline, qos_, flags_, iface_mask_);
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	689c      	ldr	r4, [r3, #8]
 801d87c:	683a      	ldr	r2, [r7, #0]
 801d87e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d882:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d886:	e883 0003 	stmia.w	r3, {r0, r1}
 801d88a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801d88e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d892:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d896:	e883 0003 	stmia.w	r3, {r0, r1}
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	7b5b      	ldrb	r3, [r3, #13]
 801d89e:	68fa      	ldr	r2, [r7, #12]
 801d8a0:	8a92      	ldrh	r2, [r2, #20]
 801d8a2:	68f9      	ldr	r1, [r7, #12]
 801d8a4:	7d89      	ldrb	r1, [r1, #22]
 801d8a6:	f107 0660 	add.w	r6, r7, #96	; 0x60
 801d8aa:	f107 0558 	add.w	r5, r7, #88	; 0x58
 801d8ae:	f107 0020 	add.w	r0, r7, #32
 801d8b2:	9102      	str	r1, [sp, #8]
 801d8b4:	9201      	str	r2, [sp, #4]
 801d8b6:	9300      	str	r3, [sp, #0]
 801d8b8:	4633      	mov	r3, r6
 801d8ba:	462a      	mov	r2, r5
 801d8bc:	4601      	mov	r1, r0
 801d8be:	4620      	mov	r0, r4
 801d8c0:	f7fb f89e 	bl	8018a00 <_ZN6uavcan10Dispatcher4sendERKNS_5FrameENS_13MonotonicTimeES4_NS_10CanTxQueue3QosEth>
 801d8c4:	6778      	str	r0, [r7, #116]	; 0x74
 801d8c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	f7e8 fc22 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801d8d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d8d4:	4618      	mov	r0, r3
 801d8d6:	f7e8 fc1d 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
            if (send_res < 0)
 801d8da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	da04      	bge.n	801d8ea <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x33a>
            {
                registerError();
 801d8e0:	68f8      	ldr	r0, [r7, #12]
 801d8e2:	f7ff fe22 	bl	801d52a <_ZNK6uavcan14TransferSender13registerErrorEv>
                return send_res;
 801d8e6:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 801d8e8:	e059      	b.n	801d99e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3ee>
            }

            num_sent++;
 801d8ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d8ee:	3301      	adds	r3, #1
 801d8f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            if (frame.isEndOfTransfer())
 801d8f4:	f107 0320 	add.w	r3, r7, #32
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7fd fd03 	bl	801b304 <_ZNK6uavcan5Frame15isEndOfTransferEv>
 801d8fe:	4603      	mov	r3, r0
 801d900:	2b00      	cmp	r3, #0
 801d902:	d002      	beq.n	801d90a <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x35a>
            {
                return num_sent;  // Number of frames transmitted
 801d904:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 801d908:	e049      	b.n	801d99e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3ee>
            }

            frame.setStartOfTransfer(false);
 801d90a:	f107 0320 	add.w	r3, r7, #32
 801d90e:	2100      	movs	r1, #0
 801d910:	4618      	mov	r0, r3
 801d912:	f7ff fddb 	bl	801d4cc <_ZN6uavcan5Frame18setStartOfTransferEb>
            frame.flipToggle();
 801d916:	f107 0320 	add.w	r3, r7, #32
 801d91a:	4618      	mov	r0, r3
 801d91c:	f7ff fdf4 	bl	801d508 <_ZN6uavcan5Frame10flipToggleEv>

            UAVCAN_ASSERT(offset >= 0);
 801d920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d924:	2b00      	cmp	r3, #0
 801d926:	da05      	bge.n	801d934 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x384>
 801d928:	4b26      	ldr	r3, [pc, #152]	; (801d9c4 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x414>)
 801d92a:	4a20      	ldr	r2, [pc, #128]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d92c:	217c      	movs	r1, #124	; 0x7c
 801d92e:	4820      	ldr	r0, [pc, #128]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d930:	f002 fe2c 	bl	802058c <__assert_func>
            const int write_res = frame.setPayload(payload + offset, payload_len - unsigned(offset));
 801d934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d938:	68ba      	ldr	r2, [r7, #8]
 801d93a:	18d1      	adds	r1, r2, r3
 801d93c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d940:	687a      	ldr	r2, [r7, #4]
 801d942:	1ad2      	subs	r2, r2, r3
 801d944:	f107 0320 	add.w	r3, r7, #32
 801d948:	4618      	mov	r0, r3
 801d94a:	f7fb fc4f 	bl	80191ec <_ZN6uavcan5Frame10setPayloadEPKhj>
 801d94e:	4603      	mov	r3, r0
 801d950:	673b      	str	r3, [r7, #112]	; 0x70
            if (write_res < 0)
 801d952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d954:	2b00      	cmp	r3, #0
 801d956:	da04      	bge.n	801d962 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3b2>
            {
                UAVCAN_TRACE("TransferSender", "Frame payload write failure, %i", write_res);
                registerError();
 801d958:	68f8      	ldr	r0, [r7, #12]
 801d95a:	f7ff fde6 	bl	801d52a <_ZNK6uavcan14TransferSender13registerErrorEv>
                return write_res;
 801d95e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 801d960:	e01d      	b.n	801d99e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3ee>
            }

            offset += write_res;
 801d962:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d968:	4413      	add	r3, r2
 801d96a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            UAVCAN_ASSERT(offset <= int(payload_len));
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d974:	429a      	cmp	r2, r3
 801d976:	dd05      	ble.n	801d984 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3d4>
 801d978:	4b13      	ldr	r3, [pc, #76]	; (801d9c8 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x418>)
 801d97a:	4a0c      	ldr	r2, [pc, #48]	; (801d9ac <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x3fc>)
 801d97c:	2186      	movs	r1, #134	; 0x86
 801d97e:	480c      	ldr	r0, [pc, #48]	; (801d9b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x400>)
 801d980:	f002 fe04 	bl	802058c <__assert_func>
            if (offset >= int(payload_len))
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d98a:	429a      	cmp	r2, r3
 801d98c:	f6ff af74 	blt.w	801d878 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x2c8>
            {
                frame.setEndOfTransfer(true);
 801d990:	f107 0320 	add.w	r3, r7, #32
 801d994:	2101      	movs	r1, #1
 801d996:	4618      	mov	r0, r3
 801d998:	f7ff fda7 	bl	801d4ea <_ZN6uavcan5Frame16setEndOfTransferEb>
            }
        }
 801d99c:	e76c      	b.n	801d878 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE+0x2c8>
 801d99e:	4623      	mov	r3, r4
    }

    UAVCAN_ASSERT(0);
    return -ErrLogic; // Return path analysis is apparently broken. There should be no warning, this 'return' is unreachable.
}
 801d9a0:	4618      	mov	r0, r3
 801d9a2:	378c      	adds	r7, #140	; 0x8c
 801d9a4:	46bd      	mov	sp, r7
 801d9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9a8:	08024540 	.word	0x08024540
 801d9ac:	0802c4f4 	.word	0x0802c4f4
 801d9b0:	080247f4 	.word	0x080247f4
 801d9b4:	08024878 	.word	0x08024878
 801d9b8:	080248c4 	.word	0x080248c4
 801d9bc:	080248e4 	.word	0x080248e4
 801d9c0:	08024908 	.word	0x08024908
 801d9c4:	08024924 	.word	0x08024924
 801d9c8:	08024930 	.word	0x08024930

0801d9cc <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE>:

int TransferSender::send(const uint8_t* payload, unsigned payload_len, MonotonicTime tx_deadline,
                         MonotonicTime blocking_deadline, TransferType transfer_type, NodeID dst_node_id) const
{
 801d9cc:	b590      	push	{r4, r7, lr}
 801d9ce:	b099      	sub	sp, #100	; 0x64
 801d9d0:	af04      	add	r7, sp, #16
 801d9d2:	60f8      	str	r0, [r7, #12]
 801d9d4:	60b9      	str	r1, [r7, #8]
 801d9d6:	607a      	str	r2, [r7, #4]
 801d9d8:	603b      	str	r3, [r7, #0]
    /*
     * TODO: TID is not needed for anonymous transfers, this part of the code can be skipped?
     */
    const OutgoingTransferRegistryKey otr_key(data_type_id_, transfer_type, dst_node_id);
 801d9da:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801d9de:	68f9      	ldr	r1, [r7, #12]
 801d9e0:	f107 0020 	add.w	r0, r7, #32
 801d9e4:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801d9e8:	6909      	ldr	r1, [r1, #16]
 801d9ea:	f7f8 f85f 	bl	8015aac <_ZN6uavcan27OutgoingTransferRegistryKeyC1ENS_10DataTypeIDENS_12TransferTypeENS_6NodeIDE>

    UAVCAN_ASSERT(!tx_deadline.isZero());
 801d9ee:	683b      	ldr	r3, [r7, #0]
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	f7ea febb 	bl	800876c <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE6isZeroEv>
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	f083 0301 	eor.w	r3, r3, #1
 801d9fc:	b2db      	uxtb	r3, r3
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d105      	bne.n	801da0e <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0x42>
 801da02:	4b44      	ldr	r3, [pc, #272]	; (801db14 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0x148>)
 801da04:	4a44      	ldr	r2, [pc, #272]	; (801db18 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0x14c>)
 801da06:	219a      	movs	r1, #154	; 0x9a
 801da08:	4844      	ldr	r0, [pc, #272]	; (801db1c <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0x150>)
 801da0a:	f002 fdbf 	bl	802058c <__assert_func>
    const MonotonicTime otr_deadline = tx_deadline + max(max_transfer_interval_ * 2,
                                                         OutgoingTransferRegistry::MinEntryLifetime);
 801da0e:	683c      	ldr	r4, [r7, #0]
    const MonotonicTime otr_deadline = tx_deadline + max(max_transfer_interval_ * 2,
 801da10:	68f9      	ldr	r1, [r7, #12]
 801da12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801da16:	2202      	movs	r2, #2
 801da18:	4618      	mov	r0, r3
 801da1a:	f000 f883 	bl	801db24 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEmlIiEES1_T_>
                                                         OutgoingTransferRegistry::MinEntryLifetime);
 801da1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801da22:	493f      	ldr	r1, [pc, #252]	; (801db20 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0x154>)
 801da24:	4618      	mov	r0, r3
 801da26:	f7ea ff84 	bl	8008932 <_ZN6uavcan3maxINS_17MonotonicDurationEEERKT_S4_S4_>
 801da2a:	4602      	mov	r2, r0
 801da2c:	f107 0318 	add.w	r3, r7, #24
 801da30:	4621      	mov	r1, r4
 801da32:	4618      	mov	r0, r3
 801da34:	f7ea ff91 	bl	800895a <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEplERKS2_>
 801da38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801da3c:	4618      	mov	r0, r3
 801da3e:	f7e8 fc3c 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>

    TransferID* const tid = dispatcher_.getOutgoingTransferRegistry().accessOrCreate(otr_key, otr_deadline);
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	689b      	ldr	r3, [r3, #8]
 801da46:	4618      	mov	r0, r3
 801da48:	f7f8 f86c 	bl	8015b24 <_ZN6uavcan10Dispatcher27getOutgoingTransferRegistryEv>
 801da4c:	4604      	mov	r4, r0
 801da4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801da52:	f107 0218 	add.w	r2, r7, #24
 801da56:	e892 0003 	ldmia.w	r2, {r0, r1}
 801da5a:	e883 0003 	stmia.w	r3, {r0, r1}
 801da5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801da62:	f107 0320 	add.w	r3, r7, #32
 801da66:	4619      	mov	r1, r3
 801da68:	4620      	mov	r0, r4
 801da6a:	f7fc f919 	bl	8019ca0 <_ZN6uavcan24OutgoingTransferRegistry14accessOrCreateERKNS_27OutgoingTransferRegistryKeyENS_13MonotonicTimeE>
 801da6e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801da70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801da74:	4618      	mov	r0, r3
 801da76:	f7e8 fb4d 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    if (tid == UAVCAN_NULLPTR)
 801da7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d102      	bne.n	801da86 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0xba>
    {
        UAVCAN_TRACE("TransferSender", "OTR access failure, dtid=%d tt=%i",
                     int(data_type_id_.get()), int(transfer_type));
        return -ErrMemory;
 801da80:	f06f 0402 	mvn.w	r4, #2
 801da84:	e03b      	b.n	801dafe <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDE+0x132>
    }

    const TransferID this_tid = tid->get();
 801da86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801da88:	f7e8 f846 	bl	8005b18 <_ZNK6uavcan10TransferID3getEv>
 801da8c:	4603      	mov	r3, r0
 801da8e:	461a      	mov	r2, r3
 801da90:	f107 0314 	add.w	r3, r7, #20
 801da94:	4611      	mov	r1, r2
 801da96:	4618      	mov	r0, r3
 801da98:	f7fb faa6 	bl	8018fe8 <_ZN6uavcan10TransferIDC1Eh>
    tid->increment();
 801da9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801da9e:	f7f7 ffe1 	bl	8015a64 <_ZN6uavcan10TransferID9incrementEv>

    return send(payload, payload_len, tx_deadline, blocking_deadline, transfer_type,
 801daa2:	683a      	ldr	r2, [r7, #0]
 801daa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801daa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801daac:	e883 0003 	stmia.w	r3, {r0, r1}
 801dab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801daba:	e883 0003 	stmia.w	r3, {r0, r1}
                dst_node_id, this_tid);
 801dabe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801dac2:	7d3b      	ldrb	r3, [r7, #20]
 801dac4:	f88d 300c 	strb.w	r3, [sp, #12]
 801dac8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 801dacc:	f88d 3008 	strb.w	r3, [sp, #8]
 801dad0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 801dad4:	9301      	str	r3, [sp, #4]
 801dad6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dada:	9300      	str	r3, [sp, #0]
 801dadc:	4613      	mov	r3, r2
 801dade:	687a      	ldr	r2, [r7, #4]
 801dae0:	68b9      	ldr	r1, [r7, #8]
 801dae2:	68f8      	ldr	r0, [r7, #12]
 801dae4:	f7ff fd64 	bl	801d5b0 <_ZNK6uavcan14TransferSender4sendEPKhjNS_13MonotonicTimeES3_NS_12TransferTypeENS_6NodeIDENS_10TransferIDE>
 801dae8:	4604      	mov	r4, r0
    return send(payload, payload_len, tx_deadline, blocking_deadline, transfer_type,
 801daea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801daee:	4618      	mov	r0, r3
 801daf0:	f7e8 fb10 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801daf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7e8 fb0b 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
                                                         OutgoingTransferRegistry::MinEntryLifetime);
 801dafe:	f107 0318 	add.w	r3, r7, #24
 801db02:	4618      	mov	r0, r3
 801db04:	f7e8 fb06 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801db08:	4623      	mov	r3, r4
}
 801db0a:	4618      	mov	r0, r3
 801db0c:	3754      	adds	r7, #84	; 0x54
 801db0e:	46bd      	mov	sp, r7
 801db10:	bd90      	pop	{r4, r7, pc}
 801db12:	bf00      	nop
 801db14:	0802494c 	.word	0x0802494c
 801db18:	0802c66c 	.word	0x0802c66c
 801db1c:	080247f4 	.word	0x080247f4
 801db20:	200085e8 	.word	0x200085e8

0801db24 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEEmlIiEES1_T_>:
    D operator*(Scale scale)   const { return fromUSec(usec_ * scale); }
 801db24:	b5b0      	push	{r4, r5, r7, lr}
 801db26:	b084      	sub	sp, #16
 801db28:	af00      	add	r7, sp, #0
 801db2a:	60f8      	str	r0, [r7, #12]
 801db2c:	60b9      	str	r1, [r7, #8]
 801db2e:	607a      	str	r2, [r7, #4]
 801db30:	68bb      	ldr	r3, [r7, #8]
 801db32:	e9d3 1200 	ldrd	r1, r2, [r3]
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	ea4f 74e3 	mov.w	r4, r3, asr #31
 801db3c:	fb03 f502 	mul.w	r5, r3, r2
 801db40:	fb01 f004 	mul.w	r0, r1, r4
 801db44:	4428      	add	r0, r5
 801db46:	fba1 3403 	umull	r3, r4, r1, r3
 801db4a:	1902      	adds	r2, r0, r4
 801db4c:	4614      	mov	r4, r2
 801db4e:	68f9      	ldr	r1, [r7, #12]
 801db50:	461a      	mov	r2, r3
 801db52:	4623      	mov	r3, r4
 801db54:	4608      	mov	r0, r1
 801db56:	f7ea ff83 	bl	8008a60 <_ZN6uavcan12DurationBaseINS_17MonotonicDurationEE8fromUSecEx>
 801db5a:	68f8      	ldr	r0, [r7, #12]
 801db5c:	3710      	adds	r7, #16
 801db5e:	46bd      	mov	sp, r7
 801db60:	bdb0      	pop	{r4, r5, r7, pc}

0801db62 <_ZN6uavcan20DataTypeSignatureCRCC1Ev>:
    DataTypeSignatureCRC() : crc_(0xFFFFFFFFFFFFFFFFULL) { }
 801db62:	b490      	push	{r4, r7}
 801db64:	b082      	sub	sp, #8
 801db66:	af00      	add	r7, sp, #0
 801db68:	6078      	str	r0, [r7, #4]
 801db6a:	687a      	ldr	r2, [r7, #4]
 801db6c:	f04f 33ff 	mov.w	r3, #4294967295
 801db70:	f04f 34ff 	mov.w	r4, #4294967295
 801db74:	e9c2 3400 	strd	r3, r4, [r2]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	4618      	mov	r0, r3
 801db7c:	3708      	adds	r7, #8
 801db7e:	46bd      	mov	sp, r7
 801db80:	bc90      	pop	{r4, r7}
 801db82:	4770      	bx	lr

0801db84 <_ZNK6uavcan20DataTypeSignatureCRC3getEv>:
    uint64_t get() const { return crc_ ^ 0xFFFFFFFFFFFFFFFFULL; }
 801db84:	b490      	push	{r4, r7}
 801db86:	b082      	sub	sp, #8
 801db88:	af00      	add	r7, sp, #0
 801db8a:	6078      	str	r0, [r7, #4]
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	e9d3 1200 	ldrd	r1, r2, [r3]
 801db92:	ea6f 0301 	mvn.w	r3, r1
 801db96:	ea6f 0402 	mvn.w	r4, r2
 801db9a:	4618      	mov	r0, r3
 801db9c:	4621      	mov	r1, r4
 801db9e:	3708      	adds	r7, #8
 801dba0:	46bd      	mov	sp, r7
 801dba2:	bc90      	pop	{r4, r7}
 801dba4:	4770      	bx	lr
	...

0801dba8 <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE>:
const uint16_t DataTypeID::MaxServiceDataTypeIDValue;
const uint16_t DataTypeID::MaxMessageDataTypeIDValue;
const uint16_t DataTypeID::MaxPossibleDataTypeIDValue;

DataTypeID DataTypeID::getMaxValueForDataTypeKind(const DataTypeKind dtkind)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b086      	sub	sp, #24
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	4603      	mov	r3, r0
 801dbb0:	71fb      	strb	r3, [r7, #7]
    if (dtkind == DataTypeKindService)
 801dbb2:	79fb      	ldrb	r3, [r7, #7]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d107      	bne.n	801dbc8 <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x20>
    {
        return MaxServiceDataTypeIDValue;
 801dbb8:	f107 030c 	add.w	r3, r7, #12
 801dbbc:	21ff      	movs	r1, #255	; 0xff
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	f7e8 f847 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 801dbc4:	68fb      	ldr	r3, [r7, #12]
 801dbc6:	e011      	b.n	801dbec <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x44>
    }
    else if (dtkind == DataTypeKindMessage)
 801dbc8:	79fb      	ldrb	r3, [r7, #7]
 801dbca:	2b01      	cmp	r3, #1
 801dbcc:	d108      	bne.n	801dbe0 <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x38>
    {
        return MaxMessageDataTypeIDValue;
 801dbce:	f107 0310 	add.w	r3, r7, #16
 801dbd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f7e8 f83b 	bl	8005c52 <_ZN6uavcan10DataTypeIDC1Et>
 801dbdc:	693b      	ldr	r3, [r7, #16]
 801dbde:	e005      	b.n	801dbec <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x44>
    }
    else
    {
        UAVCAN_ASSERT(0);
 801dbe0:	4b04      	ldr	r3, [pc, #16]	; (801dbf4 <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x4c>)
 801dbe2:	4a05      	ldr	r2, [pc, #20]	; (801dbf8 <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x50>)
 801dbe4:	211f      	movs	r1, #31
 801dbe6:	4805      	ldr	r0, [pc, #20]	; (801dbfc <_ZN6uavcan10DataTypeID26getMaxValueForDataTypeKindENS_12DataTypeKindE+0x54>)
 801dbe8:	f002 fcd0 	bl	802058c <__assert_func>
        return DataTypeID(0);
    }
}
 801dbec:	4618      	mov	r0, r3
 801dbee:	3718      	adds	r7, #24
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	bd80      	pop	{r7, pc}
 801dbf4:	08024964 	.word	0x08024964
 801dbf8:	0802c708 	.word	0x0802c708
 801dbfc:	08024968 	.word	0x08024968

0801dc00 <_ZN6uavcan20DataTypeSignatureCRC6extendEy>:

/*
 * DataTypeSignatureCRC
 */
DataTypeSignatureCRC DataTypeSignatureCRC::extend(uint64_t crc)
{
 801dc00:	b590      	push	{r4, r7, lr}
 801dc02:	b085      	sub	sp, #20
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	60f8      	str	r0, [r7, #12]
 801dc08:	e9c7 2300 	strd	r2, r3, [r7]
    DataTypeSignatureCRC ret;
 801dc0c:	68f8      	ldr	r0, [r7, #12]
 801dc0e:	f7ff ffa8 	bl	801db62 <_ZN6uavcan20DataTypeSignatureCRCC1Ev>
    ret.crc_ = crc ^ 0xFFFFFFFFFFFFFFFF;
 801dc12:	e9d7 3400 	ldrd	r3, r4, [r7]
 801dc16:	ea6f 0003 	mvn.w	r0, r3
 801dc1a:	ea6f 0104 	mvn.w	r1, r4
 801dc1e:	68fa      	ldr	r2, [r7, #12]
 801dc20:	e9c2 0100 	strd	r0, r1, [r2]
    return ret;
 801dc24:	bf00      	nop
}
 801dc26:	68f8      	ldr	r0, [r7, #12]
 801dc28:	3714      	adds	r7, #20
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	bd90      	pop	{r4, r7, pc}
	...

0801dc30 <_ZN6uavcan20DataTypeSignatureCRC3addEh>:

void DataTypeSignatureCRC::add(uint8_t byte)
{
 801dc30:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 801dc34:	b085      	sub	sp, #20
 801dc36:	af00      	add	r7, sp, #0
 801dc38:	6078      	str	r0, [r7, #4]
 801dc3a:	460b      	mov	r3, r1
 801dc3c:	70fb      	strb	r3, [r7, #3]
    static const uint64_t Poly = 0x42F0E1EBA9EA3693;
    crc_ ^= uint64_t(byte) << 56;
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	e9d3 1200 	ldrd	r1, r2, [r3]
 801dc44:	78fd      	ldrb	r5, [r7, #3]
 801dc46:	f04f 0600 	mov.w	r6, #0
 801dc4a:	f04f 0b00 	mov.w	fp, #0
 801dc4e:	f04f 0c00 	mov.w	ip, #0
 801dc52:	ea4f 6c05 	mov.w	ip, r5, lsl #24
 801dc56:	f04f 0b00 	mov.w	fp, #0
 801dc5a:	ea8b 0301 	eor.w	r3, fp, r1
 801dc5e:	ea8c 0402 	eor.w	r4, ip, r2
 801dc62:	687a      	ldr	r2, [r7, #4]
 801dc64:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < 8; i++)
 801dc68:	2300      	movs	r3, #0
 801dc6a:	60fb      	str	r3, [r7, #12]
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	2b07      	cmp	r3, #7
 801dc70:	dc25      	bgt.n	801dcbe <_ZN6uavcan20DataTypeSignatureCRC3addEh+0x8e>
    {
        crc_ = (crc_ & (uint64_t(1) << 63)) ? (crc_ << 1) ^ Poly : crc_ << 1;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	e9d3 3400 	ldrd	r3, r4, [r3]
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	f174 0300 	sbcs.w	r3, r4, #0
 801dc7e:	da0f      	bge.n	801dca0 <_ZN6uavcan20DataTypeSignatureCRC3addEh+0x70>
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	e9d3 1200 	ldrd	r1, r2, [r3]
 801dc86:	184b      	adds	r3, r1, r1
 801dc88:	eb42 0402 	adc.w	r4, r2, r2
 801dc8c:	4619      	mov	r1, r3
 801dc8e:	4622      	mov	r2, r4
 801dc90:	a40f      	add	r4, pc, #60	; (adr r4, 801dcd0 <_ZN6uavcan20DataTypeSignatureCRC3addEh+0xa0>)
 801dc92:	e9d4 3400 	ldrd	r3, r4, [r4]
 801dc96:	ea83 0501 	eor.w	r5, r3, r1
 801dc9a:	ea84 0602 	eor.w	r6, r4, r2
 801dc9e:	e007      	b.n	801dcb0 <_ZN6uavcan20DataTypeSignatureCRC3addEh+0x80>
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	e9d3 1200 	ldrd	r1, r2, [r3]
 801dca6:	184b      	adds	r3, r1, r1
 801dca8:	eb42 0402 	adc.w	r4, r2, r2
 801dcac:	461d      	mov	r5, r3
 801dcae:	4626      	mov	r6, r4
 801dcb0:	687a      	ldr	r2, [r7, #4]
 801dcb2:	e9c2 5600 	strd	r5, r6, [r2]
    for (int i = 0; i < 8; i++)
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	3301      	adds	r3, #1
 801dcba:	60fb      	str	r3, [r7, #12]
 801dcbc:	e7d6      	b.n	801dc6c <_ZN6uavcan20DataTypeSignatureCRC3addEh+0x3c>
    }
}
 801dcbe:	bf00      	nop
 801dcc0:	3714      	adds	r7, #20
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 801dcc8:	4770      	bx	lr
 801dcca:	bf00      	nop
 801dccc:	f3af 8000 	nop.w
 801dcd0:	a9ea3693 	.word	0xa9ea3693
 801dcd4:	42f0e1eb 	.word	0x42f0e1eb

0801dcd8 <_ZN6uavcan17DataTypeSignature7mixin64Ey>:

/*
 * DataTypeSignature
 */
void DataTypeSignature::mixin64(uint64_t x)
{
 801dcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcda:	b089      	sub	sp, #36	; 0x24
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	60f8      	str	r0, [r7, #12]
 801dce0:	e9c7 2300 	strd	r2, r3, [r7]
    DataTypeSignatureCRC crc = DataTypeSignatureCRC::extend(value_);
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcea:	f107 0110 	add.w	r1, r7, #16
 801dcee:	4608      	mov	r0, r1
 801dcf0:	f7ff ff86 	bl	801dc00 <_ZN6uavcan20DataTypeSignatureCRC6extendEy>
    for (int i = 0; i < 64; i += 8)   // LSB first
 801dcf4:	2300      	movs	r3, #0
 801dcf6:	61fb      	str	r3, [r7, #28]
 801dcf8:	69fb      	ldr	r3, [r7, #28]
 801dcfa:	2b3f      	cmp	r3, #63	; 0x3f
 801dcfc:	dc1b      	bgt.n	801dd36 <_ZN6uavcan17DataTypeSignature7mixin64Ey+0x5e>
    {
        crc.add((x >> i) & 0xFF);
 801dcfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dd02:	69f9      	ldr	r1, [r7, #28]
 801dd04:	f1c1 0620 	rsb	r6, r1, #32
 801dd08:	f1a1 0020 	sub.w	r0, r1, #32
 801dd0c:	fa22 f401 	lsr.w	r4, r2, r1
 801dd10:	fa03 f606 	lsl.w	r6, r3, r6
 801dd14:	4334      	orrs	r4, r6
 801dd16:	fa23 f000 	lsr.w	r0, r3, r0
 801dd1a:	4304      	orrs	r4, r0
 801dd1c:	fa23 f501 	lsr.w	r5, r3, r1
 801dd20:	b2e2      	uxtb	r2, r4
 801dd22:	f107 0310 	add.w	r3, r7, #16
 801dd26:	4611      	mov	r1, r2
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f7ff ff81 	bl	801dc30 <_ZN6uavcan20DataTypeSignatureCRC3addEh>
    for (int i = 0; i < 64; i += 8)   // LSB first
 801dd2e:	69fb      	ldr	r3, [r7, #28]
 801dd30:	3308      	adds	r3, #8
 801dd32:	61fb      	str	r3, [r7, #28]
 801dd34:	e7e0      	b.n	801dcf8 <_ZN6uavcan17DataTypeSignature7mixin64Ey+0x20>
    }
    value_ = crc.get();
 801dd36:	f107 0310 	add.w	r3, r7, #16
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	f7ff ff22 	bl	801db84 <_ZNK6uavcan20DataTypeSignatureCRC3getEv>
 801dd40:	4603      	mov	r3, r0
 801dd42:	460c      	mov	r4, r1
 801dd44:	68fa      	ldr	r2, [r7, #12]
 801dd46:	e9c2 3400 	strd	r3, r4, [r2]
}
 801dd4a:	bf00      	nop
 801dd4c:	3724      	adds	r7, #36	; 0x24
 801dd4e:	46bd      	mov	sp, r7
 801dd50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dd52 <_ZN6uavcan17DataTypeSignature6extendES0_>:

void DataTypeSignature::extend(DataTypeSignature dts)
{
 801dd52:	b590      	push	{r4, r7, lr}
 801dd54:	b087      	sub	sp, #28
 801dd56:	af00      	add	r7, sp, #0
 801dd58:	60f8      	str	r0, [r7, #12]
 801dd5a:	e9c7 2300 	strd	r2, r3, [r7]
    const uint64_t y = value_;
 801dd5e:	68fb      	ldr	r3, [r7, #12]
 801dd60:	e9d3 3400 	ldrd	r3, r4, [r3]
 801dd64:	e9c7 3404 	strd	r3, r4, [r7, #16]
    mixin64(dts.get());
 801dd68:	463b      	mov	r3, r7
 801dd6a:	4618      	mov	r0, r3
 801dd6c:	f7e7 ffc3 	bl	8005cf6 <_ZNK6uavcan17DataTypeSignature3getEv>
 801dd70:	4603      	mov	r3, r0
 801dd72:	460c      	mov	r4, r1
 801dd74:	461a      	mov	r2, r3
 801dd76:	4623      	mov	r3, r4
 801dd78:	68f8      	ldr	r0, [r7, #12]
 801dd7a:	f7ff ffad 	bl	801dcd8 <_ZN6uavcan17DataTypeSignature7mixin64Ey>
    mixin64(y);
 801dd7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801dd82:	68f8      	ldr	r0, [r7, #12]
 801dd84:	f7ff ffa8 	bl	801dcd8 <_ZN6uavcan17DataTypeSignature7mixin64Ey>
}
 801dd88:	bf00      	nop
 801dd8a:	371c      	adds	r7, #28
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd90      	pop	{r4, r7, pc}

0801dd90 <_ZNK6uavcan17DataTypeSignature13toTransferCRCEv>:

TransferCRC DataTypeSignature::toTransferCRC() const
{
 801dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd92:	b085      	sub	sp, #20
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	6078      	str	r0, [r7, #4]
    TransferCRC tcrc;
 801dd98:	f107 0308 	add.w	r3, r7, #8
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	f7e8 fa99 	bl	80062d4 <_ZN6uavcan11TransferCRCC1Ev>
    for (int i = 0; i < 64; i += 8)    // LSB first
 801dda2:	2300      	movs	r3, #0
 801dda4:	60fb      	str	r3, [r7, #12]
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	2b3f      	cmp	r3, #63	; 0x3f
 801ddaa:	dc1c      	bgt.n	801dde6 <_ZNK6uavcan17DataTypeSignature13toTransferCRCEv+0x56>
    {
        tcrc.add((value_ >> i) & 0xFF);
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddb2:	68f9      	ldr	r1, [r7, #12]
 801ddb4:	f1c1 0620 	rsb	r6, r1, #32
 801ddb8:	f1a1 0020 	sub.w	r0, r1, #32
 801ddbc:	fa22 f401 	lsr.w	r4, r2, r1
 801ddc0:	fa03 f606 	lsl.w	r6, r3, r6
 801ddc4:	4334      	orrs	r4, r6
 801ddc6:	fa23 f000 	lsr.w	r0, r3, r0
 801ddca:	4304      	orrs	r4, r0
 801ddcc:	fa23 f501 	lsr.w	r5, r3, r1
 801ddd0:	b2e2      	uxtb	r2, r4
 801ddd2:	f107 0308 	add.w	r3, r7, #8
 801ddd6:	4611      	mov	r1, r2
 801ddd8:	4618      	mov	r0, r3
 801ddda:	f7fb f9a9 	bl	8019130 <_ZN6uavcan11TransferCRC3addEh>
    for (int i = 0; i < 64; i += 8)    // LSB first
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	3308      	adds	r3, #8
 801dde2:	60fb      	str	r3, [r7, #12]
 801dde4:	e7df      	b.n	801dda6 <_ZNK6uavcan17DataTypeSignature13toTransferCRCEv+0x16>
    }
    return tcrc;
 801dde6:	893b      	ldrh	r3, [r7, #8]
}
 801dde8:	4618      	mov	r0, r3
 801ddea:	3714      	adds	r7, #20
 801ddec:	46bd      	mov	sp, r7
 801ddee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ddf0 <_ZNK6uavcan18DataTypeDescriptor7isValidEv>:
 * DataTypeDescriptor
 */
const unsigned DataTypeDescriptor::MaxFullNameLen;

bool DataTypeDescriptor::isValid() const
{
 801ddf0:	b580      	push	{r7, lr}
 801ddf2:	b082      	sub	sp, #8
 801ddf4:	af00      	add	r7, sp, #0
 801ddf6:	6078      	str	r0, [r7, #4]
    return id_.isValidForDataTypeKind(kind_) &&
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	f103 0210 	add.w	r2, r3, #16
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	7b1b      	ldrb	r3, [r3, #12]
 801de02:	4619      	mov	r1, r3
 801de04:	4610      	mov	r0, r2
 801de06:	f7fb f937 	bl	8019078 <_ZNK6uavcan10DataTypeID22isValidForDataTypeKindENS_12DataTypeKindE>
 801de0a:	4603      	mov	r3, r0
           (full_name_ != UAVCAN_NULLPTR) &&
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d00a      	beq.n	801de26 <_ZNK6uavcan18DataTypeDescriptor7isValidEv+0x36>
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	689b      	ldr	r3, [r3, #8]
    return id_.isValidForDataTypeKind(kind_) &&
 801de14:	2b00      	cmp	r3, #0
 801de16:	d006      	beq.n	801de26 <_ZNK6uavcan18DataTypeDescriptor7isValidEv+0x36>
           (*full_name_ != '\0');
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	689b      	ldr	r3, [r3, #8]
 801de1c:	781b      	ldrb	r3, [r3, #0]
           (full_name_ != UAVCAN_NULLPTR) &&
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d001      	beq.n	801de26 <_ZNK6uavcan18DataTypeDescriptor7isValidEv+0x36>
 801de22:	2301      	movs	r3, #1
 801de24:	e000      	b.n	801de28 <_ZNK6uavcan18DataTypeDescriptor7isValidEv+0x38>
 801de26:	2300      	movs	r3, #0
}
 801de28:	4618      	mov	r0, r3
 801de2a:	3708      	adds	r7, #8
 801de2c:	46bd      	mov	sp, r7
 801de2e:	bd80      	pop	{r7, pc}

0801de30 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc>:

bool DataTypeDescriptor::match(DataTypeKind kind, const char* name) const
{
 801de30:	b580      	push	{r7, lr}
 801de32:	b084      	sub	sp, #16
 801de34:	af00      	add	r7, sp, #0
 801de36:	60f8      	str	r0, [r7, #12]
 801de38:	460b      	mov	r3, r1
 801de3a:	607a      	str	r2, [r7, #4]
 801de3c:	72fb      	strb	r3, [r7, #11]
    return (kind_ == kind) && !std::strncmp(full_name_, name, MaxFullNameLen);
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	7b1b      	ldrb	r3, [r3, #12]
 801de42:	7afa      	ldrb	r2, [r7, #11]
 801de44:	429a      	cmp	r2, r3
 801de46:	d10b      	bne.n	801de60 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc+0x30>
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	689b      	ldr	r3, [r3, #8]
 801de4c:	2250      	movs	r2, #80	; 0x50
 801de4e:	6879      	ldr	r1, [r7, #4]
 801de50:	4618      	mov	r0, r3
 801de52:	f002 ffe3 	bl	8020e1c <strncmp>
 801de56:	4603      	mov	r3, r0
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d101      	bne.n	801de60 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc+0x30>
 801de5c:	2301      	movs	r3, #1
 801de5e:	e000      	b.n	801de62 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindEPKc+0x32>
 801de60:	2300      	movs	r3, #0
}
 801de62:	4618      	mov	r0, r3
 801de64:	3710      	adds	r7, #16
 801de66:	46bd      	mov	sp, r7
 801de68:	bd80      	pop	{r7, pc}

0801de6a <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindENS_10DataTypeIDE>:

bool DataTypeDescriptor::match(DataTypeKind kind, DataTypeID id) const
{
 801de6a:	b580      	push	{r7, lr}
 801de6c:	b084      	sub	sp, #16
 801de6e:	af00      	add	r7, sp, #0
 801de70:	60f8      	str	r0, [r7, #12]
 801de72:	460b      	mov	r3, r1
 801de74:	607a      	str	r2, [r7, #4]
 801de76:	72fb      	strb	r3, [r7, #11]
    return (kind_ == kind) && (id_ == id);
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	7b1b      	ldrb	r3, [r3, #12]
 801de7c:	7afa      	ldrb	r2, [r7, #11]
 801de7e:	429a      	cmp	r2, r3
 801de80:	d10a      	bne.n	801de98 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindENS_10DataTypeIDE+0x2e>
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	3310      	adds	r3, #16
 801de86:	6879      	ldr	r1, [r7, #4]
 801de88:	4618      	mov	r0, r3
 801de8a:	f7e7 feff 	bl	8005c8c <_ZNK6uavcan10DataTypeIDeqES0_>
 801de8e:	4603      	mov	r3, r0
 801de90:	2b00      	cmp	r3, #0
 801de92:	d001      	beq.n	801de98 <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindENS_10DataTypeIDE+0x2e>
 801de94:	2301      	movs	r3, #1
 801de96:	e000      	b.n	801de9a <_ZNK6uavcan18DataTypeDescriptor5matchENS_12DataTypeKindENS_10DataTypeIDE+0x30>
 801de98:	2300      	movs	r3, #0
}
 801de9a:	4618      	mov	r0, r3
 801de9c:	3710      	adds	r7, #16
 801de9e:	46bd      	mov	sp, r7
 801dea0:	bd80      	pop	{r7, pc}

0801dea2 <_ZN6uavcan20LimitedPoolAllocator8allocateEj>:
{
/*
 * LimitedPoolAllocator
 */
void* LimitedPoolAllocator::allocate(std::size_t size)
{
 801dea2:	b580      	push	{r7, lr}
 801dea4:	b082      	sub	sp, #8
 801dea6:	af00      	add	r7, sp, #0
 801dea8:	6078      	str	r0, [r7, #4]
 801deaa:	6039      	str	r1, [r7, #0]
    if (used_blocks_ < max_blocks_)
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	895a      	ldrh	r2, [r3, #10]
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	891b      	ldrh	r3, [r3, #8]
 801deb4:	429a      	cmp	r2, r3
 801deb6:	d211      	bcs.n	801dedc <_ZN6uavcan20LimitedPoolAllocator8allocateEj+0x3a>
    {
        used_blocks_++;
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	895b      	ldrh	r3, [r3, #10]
 801debc:	3301      	adds	r3, #1
 801debe:	b29a      	uxth	r2, r3
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	815a      	strh	r2, [r3, #10]
        return allocator_.allocate(size);
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	685a      	ldr	r2, [r3, #4]
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	685b      	ldr	r3, [r3, #4]
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	3308      	adds	r3, #8
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	6839      	ldr	r1, [r7, #0]
 801ded4:	4610      	mov	r0, r2
 801ded6:	4798      	blx	r3
 801ded8:	4603      	mov	r3, r0
 801deda:	e000      	b.n	801dede <_ZN6uavcan20LimitedPoolAllocator8allocateEj+0x3c>
    }
    else
    {
        return UAVCAN_NULLPTR;
 801dedc:	2300      	movs	r3, #0
    }
}
 801dede:	4618      	mov	r0, r3
 801dee0:	3708      	adds	r7, #8
 801dee2:	46bd      	mov	sp, r7
 801dee4:	bd80      	pop	{r7, pc}
	...

0801dee8 <_ZN6uavcan20LimitedPoolAllocator10deallocateEPKv>:

void LimitedPoolAllocator::deallocate(const void* ptr)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b082      	sub	sp, #8
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
 801def0:	6039      	str	r1, [r7, #0]
    allocator_.deallocate(ptr);
 801def2:	687b      	ldr	r3, [r7, #4]
 801def4:	685a      	ldr	r2, [r3, #4]
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	685b      	ldr	r3, [r3, #4]
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	330c      	adds	r3, #12
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	6839      	ldr	r1, [r7, #0]
 801df02:	4610      	mov	r0, r2
 801df04:	4798      	blx	r3

    UAVCAN_ASSERT(used_blocks_ > 0);
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	895b      	ldrh	r3, [r3, #10]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d105      	bne.n	801df1a <_ZN6uavcan20LimitedPoolAllocator10deallocateEPKv+0x32>
 801df0e:	4b0a      	ldr	r3, [pc, #40]	; (801df38 <_ZN6uavcan20LimitedPoolAllocator10deallocateEPKv+0x50>)
 801df10:	4a0a      	ldr	r2, [pc, #40]	; (801df3c <_ZN6uavcan20LimitedPoolAllocator10deallocateEPKv+0x54>)
 801df12:	211d      	movs	r1, #29
 801df14:	480a      	ldr	r0, [pc, #40]	; (801df40 <_ZN6uavcan20LimitedPoolAllocator10deallocateEPKv+0x58>)
 801df16:	f002 fb39 	bl	802058c <__assert_func>
    if (used_blocks_ > 0)
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	895b      	ldrh	r3, [r3, #10]
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d005      	beq.n	801df2e <_ZN6uavcan20LimitedPoolAllocator10deallocateEPKv+0x46>
    {
        used_blocks_--;
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	895b      	ldrh	r3, [r3, #10]
 801df26:	3b01      	subs	r3, #1
 801df28:	b29a      	uxth	r2, r3
 801df2a:	687b      	ldr	r3, [r7, #4]
 801df2c:	815a      	strh	r2, [r3, #10]
    }
}
 801df2e:	bf00      	nop
 801df30:	3708      	adds	r7, #8
 801df32:	46bd      	mov	sp, r7
 801df34:	bd80      	pop	{r7, pc}
 801df36:	bf00      	nop
 801df38:	080249e4 	.word	0x080249e4
 801df3c:	0802c784 	.word	0x0802c784
 801df40:	080249f8 	.word	0x080249f8

0801df44 <_ZNK6uavcan20LimitedPoolAllocator16getBlockCapacityEv>:

uint16_t LimitedPoolAllocator::getBlockCapacity() const
{
 801df44:	b590      	push	{r4, r7, lr}
 801df46:	b085      	sub	sp, #20
 801df48:	af00      	add	r7, sp, #0
 801df4a:	6078      	str	r0, [r7, #4]
    return min(max_blocks_, allocator_.getBlockCapacity());
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	f103 0408 	add.w	r4, r3, #8
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	685a      	ldr	r2, [r3, #4]
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	685b      	ldr	r3, [r3, #4]
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	3310      	adds	r3, #16
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	4610      	mov	r0, r2
 801df62:	4798      	blx	r3
 801df64:	4603      	mov	r3, r0
 801df66:	81fb      	strh	r3, [r7, #14]
 801df68:	f107 030e 	add.w	r3, r7, #14
 801df6c:	4619      	mov	r1, r3
 801df6e:	4620      	mov	r0, r4
 801df70:	f7f8 ff4f 	bl	8016e12 <_ZN6uavcan3minItEERKT_S3_S3_>
 801df74:	4603      	mov	r3, r0
 801df76:	881b      	ldrh	r3, [r3, #0]
}
 801df78:	4618      	mov	r0, r3
 801df7a:	3714      	adds	r7, #20
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd90      	pop	{r4, r7, pc}

0801df80 <_ZN6uavcan16handleFatalErrorEPKc>:

namespace uavcan
{

void handleFatalError(const char* msg)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
#if UAVCAN_EXCEPTIONS
    throw std::runtime_error(msg);
#else
    (void)msg;
    UAVCAN_ASSERT(0);
 801df88:	4b02      	ldr	r3, [pc, #8]	; (801df94 <_ZN6uavcan16handleFatalErrorEPKc+0x14>)
 801df8a:	4a03      	ldr	r2, [pc, #12]	; (801df98 <_ZN6uavcan16handleFatalErrorEPKc+0x18>)
 801df8c:	211a      	movs	r1, #26
 801df8e:	4803      	ldr	r0, [pc, #12]	; (801df9c <_ZN6uavcan16handleFatalErrorEPKc+0x1c>)
 801df90:	f002 fafc 	bl	802058c <__assert_func>
 801df94:	08024a70 	.word	0x08024a70
 801df98:	0802c7c8 	.word	0x0802c7c8
 801df9c:	08024a74 	.word	0x08024a74

0801dfa0 <_ZNK12uavcan_stm328CanIface7RxQueue9getLengthEv>:
        unsigned getLength() const { return len_; }
 801dfa0:	b480      	push	{r7}
 801dfa2:	b083      	sub	sp, #12
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	79db      	ldrb	r3, [r3, #7]
 801dfac:	4618      	mov	r0, r3
 801dfae:	370c      	adds	r7, #12
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb6:	4770      	bx	lr

0801dfb8 <_ZNK12uavcan_stm328CanIface7RxQueue16getOverflowCountEv>:
        uavcan::uint32_t getOverflowCount() const { return overflow_cnt_; }
 801dfb8:	b480      	push	{r7}
 801dfba:	b083      	sub	sp, #12
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	689b      	ldr	r3, [r3, #8]
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	370c      	adds	r7, #12
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfce:	4770      	bx	lr

0801dfd0 <_ZN12uavcan_stm328CanIface7TimingsC1Ev>:
        Timings()
 801dfd0:	b480      	push	{r7}
 801dfd2:	b083      	sub	sp, #12
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
            , bs2(0)
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	2200      	movs	r2, #0
 801dfdc:	801a      	strh	r2, [r3, #0]
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	709a      	strb	r2, [r3, #2]
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	2200      	movs	r2, #0
 801dfe8:	70da      	strb	r2, [r3, #3]
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	2200      	movs	r2, #0
 801dfee:	711a      	strb	r2, [r3, #4]
        { }
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	4618      	mov	r0, r3
 801dff4:	370c      	adds	r7, #12
 801dff6:	46bd      	mov	sp, r7
 801dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dffc:	4770      	bx	lr

0801dffe <_ZNK12uavcan_stm328CanIface13getNumFiltersEv>:
    virtual uavcan::uint16_t getNumFilters() const { return NumFilters; }
 801dffe:	b480      	push	{r7}
 801e000:	b083      	sub	sp, #12
 801e002:	af00      	add	r7, sp, #0
 801e004:	6078      	str	r0, [r7, #4]
 801e006:	230e      	movs	r3, #14
 801e008:	4618      	mov	r0, r3
 801e00a:	370c      	adds	r7, #12
 801e00c:	46bd      	mov	sp, r7
 801e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e012:	4770      	bx	lr

0801e014 <_ZNK12uavcan_stm329CanDriver12getNumIfacesEv>:
    virtual uavcan::uint8_t getNumIfaces() const { return UAVCAN_STM32_NUM_IFACES; }
 801e014:	b480      	push	{r7}
 801e016:	b083      	sub	sp, #12
 801e018:	af00      	add	r7, sp, #0
 801e01a:	6078      	str	r0, [r7, #4]
 801e01c:	2301      	movs	r3, #1
 801e01e:	4618      	mov	r0, r3
 801e020:	370c      	adds	r7, #12
 801e022:	46bd      	mov	sp, r7
 801e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e028:	4770      	bx	lr

0801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>:
#elif UAVCAN_STM32_FREERTOS

struct CriticalSectionLocker
{

    CriticalSectionLocker()
 801e02a:	b580      	push	{r7, lr}
 801e02c:	b082      	sub	sp, #8
 801e02e:	af00      	add	r7, sp, #0
 801e030:	6078      	str	r0, [r7, #4]
    {
        taskENTER_CRITICAL();
 801e032:	f7e7 f9ab 	bl	800538c <vPortEnterCritical>
    }
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	4618      	mov	r0, r3
 801e03a:	3708      	adds	r7, #8
 801e03c:	46bd      	mov	sp, r7
 801e03e:	bd80      	pop	{r7, pc}

0801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>:

    ~CriticalSectionLocker()
 801e040:	b580      	push	{r7, lr}
 801e042:	b082      	sub	sp, #8
 801e044:	af00      	add	r7, sp, #0
 801e046:	6078      	str	r0, [r7, #4]
    {
        taskEXIT_CRITICAL();
 801e048:	f7e7 f9ce 	bl	80053e8 <vPortExitCritical>
    }
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	4618      	mov	r0, r3
 801e050:	3708      	adds	r7, #8
 801e052:	46bd      	mov	sp, r7
 801e054:	bd80      	pop	{r7, pc}
	...

0801e058 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh>:
    , UAVCAN_NULLPTR
#endif
};

inline void handleTxInterrupt(uavcan::uint8_t iface_index)
{
 801e058:	b590      	push	{r4, r7, lr}
 801e05a:	b085      	sub	sp, #20
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	4603      	mov	r3, r0
 801e060:	71fb      	strb	r3, [r7, #7]
    UAVCAN_ASSERT(iface_index < UAVCAN_STM32_NUM_IFACES);
 801e062:	79fb      	ldrb	r3, [r7, #7]
 801e064:	2b00      	cmp	r3, #0
 801e066:	d005      	beq.n	801e074 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x1c>
 801e068:	4b17      	ldr	r3, [pc, #92]	; (801e0c8 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x70>)
 801e06a:	4a18      	ldr	r2, [pc, #96]	; (801e0cc <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x74>)
 801e06c:	215a      	movs	r1, #90	; 0x5a
 801e06e:	4818      	ldr	r0, [pc, #96]	; (801e0d0 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x78>)
 801e070:	f002 fa8c 	bl	802058c <__assert_func>
    uavcan::uint64_t utc_usec = clock::getUtcUSecFromCanInterrupt();
 801e074:	f001 fca4 	bl	801f9c0 <_ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv>
 801e078:	e9c7 0102 	strd	r0, r1, [r7, #8]
    if (utc_usec > 0)
 801e07c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e080:	4323      	orrs	r3, r4
 801e082:	d007      	beq.n	801e094 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x3c>
    {
        utc_usec--;
 801e084:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e088:	f113 31ff 	adds.w	r1, r3, #4294967295
 801e08c:	f144 32ff 	adc.w	r2, r4, #4294967295
 801e090:	e9c7 1202 	strd	r1, r2, [r7, #8]
    }
    if (ifaces[iface_index] != UAVCAN_NULLPTR)
 801e094:	79fb      	ldrb	r3, [r7, #7]
 801e096:	4a0f      	ldr	r2, [pc, #60]	; (801e0d4 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x7c>)
 801e098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d009      	beq.n	801e0b4 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x5c>
    {
        ifaces[iface_index]->handleTxInterrupt(utc_usec);
 801e0a0:	79fb      	ldrb	r3, [r7, #7]
 801e0a2:	4a0c      	ldr	r2, [pc, #48]	; (801e0d4 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x7c>)
 801e0a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801e0a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e0ac:	4608      	mov	r0, r1
 801e0ae:	f000 fe31 	bl	801ed14 <_ZN12uavcan_stm328CanIface17handleTxInterruptEy>
    }
    else
    {
        UAVCAN_ASSERT(0);
    }
}
 801e0b2:	e005      	b.n	801e0c0 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x68>
        UAVCAN_ASSERT(0);
 801e0b4:	4b08      	ldr	r3, [pc, #32]	; (801e0d8 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x80>)
 801e0b6:	4a05      	ldr	r2, [pc, #20]	; (801e0cc <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x74>)
 801e0b8:	2166      	movs	r1, #102	; 0x66
 801e0ba:	4805      	ldr	r0, [pc, #20]	; (801e0d0 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh+0x78>)
 801e0bc:	f002 fa66 	bl	802058c <__assert_func>
}
 801e0c0:	3714      	adds	r7, #20
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd90      	pop	{r4, r7, pc}
 801e0c6:	bf00      	nop
 801e0c8:	08024c10 	.word	0x08024c10
 801e0cc:	0802caac 	.word	0x0802caac
 801e0d0:	08024c20 	.word	0x08024c20
 801e0d4:	20008620 	.word	0x20008620
 801e0d8:	08024ca8 	.word	0x08024ca8

0801e0dc <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh>:

inline void handleRxInterrupt(uavcan::uint8_t iface_index, uavcan::uint8_t fifo_index)
{
 801e0dc:	b590      	push	{r4, r7, lr}
 801e0de:	b085      	sub	sp, #20
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	4603      	mov	r3, r0
 801e0e4:	460a      	mov	r2, r1
 801e0e6:	71fb      	strb	r3, [r7, #7]
 801e0e8:	4613      	mov	r3, r2
 801e0ea:	71bb      	strb	r3, [r7, #6]
    UAVCAN_ASSERT(iface_index < UAVCAN_STM32_NUM_IFACES);
 801e0ec:	79fb      	ldrb	r3, [r7, #7]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d005      	beq.n	801e0fe <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x22>
 801e0f2:	4b17      	ldr	r3, [pc, #92]	; (801e150 <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x74>)
 801e0f4:	4a17      	ldr	r2, [pc, #92]	; (801e154 <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x78>)
 801e0f6:	216c      	movs	r1, #108	; 0x6c
 801e0f8:	4817      	ldr	r0, [pc, #92]	; (801e158 <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x7c>)
 801e0fa:	f002 fa47 	bl	802058c <__assert_func>
    uavcan::uint64_t utc_usec = clock::getUtcUSecFromCanInterrupt();
 801e0fe:	f001 fc5f 	bl	801f9c0 <_ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv>
 801e102:	e9c7 0102 	strd	r0, r1, [r7, #8]
    if (utc_usec > 0)
 801e106:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e10a:	4323      	orrs	r3, r4
 801e10c:	d007      	beq.n	801e11e <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x42>
    {
        utc_usec--;
 801e10e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e112:	f113 31ff 	adds.w	r1, r3, #4294967295
 801e116:	f144 32ff 	adc.w	r2, r4, #4294967295
 801e11a:	e9c7 1202 	strd	r1, r2, [r7, #8]
    }
    if (ifaces[iface_index] != UAVCAN_NULLPTR)
 801e11e:	79fb      	ldrb	r3, [r7, #7]
 801e120:	4a0e      	ldr	r2, [pc, #56]	; (801e15c <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x80>)
 801e122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e126:	2b00      	cmp	r3, #0
 801e128:	d009      	beq.n	801e13e <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x62>
    {
        ifaces[iface_index]->handleRxInterrupt(fifo_index, utc_usec);
 801e12a:	79fb      	ldrb	r3, [r7, #7]
 801e12c:	4a0b      	ldr	r2, [pc, #44]	; (801e15c <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x80>)
 801e12e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e132:	79b9      	ldrb	r1, [r7, #6]
 801e134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e138:	f000 fe6e 	bl	801ee18 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy>
    }
    else
    {
        UAVCAN_ASSERT(0);
    }
}
 801e13c:	e005      	b.n	801e14a <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x6e>
        UAVCAN_ASSERT(0);
 801e13e:	4b08      	ldr	r3, [pc, #32]	; (801e160 <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x84>)
 801e140:	4a04      	ldr	r2, [pc, #16]	; (801e154 <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x78>)
 801e142:	2178      	movs	r1, #120	; 0x78
 801e144:	4804      	ldr	r0, [pc, #16]	; (801e158 <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh+0x7c>)
 801e146:	f002 fa21 	bl	802058c <__assert_func>
}
 801e14a:	3714      	adds	r7, #20
 801e14c:	46bd      	mov	sp, r7
 801e14e:	bd90      	pop	{r4, r7, pc}
 801e150:	08024c10 	.word	0x08024c10
 801e154:	0802caf0 	.word	0x0802caf0
 801e158:	08024c20 	.word	0x08024c20
 801e15c:	20008620 	.word	0x20008620
 801e160:	08024ca8 	.word	0x08024ca8

0801e164 <_ZN12uavcan_stm328CanIface7RxQueue16registerOverflowEv>:

/*
 * CanIface::RxQueue
 */
void CanIface::RxQueue::registerOverflow()
{
 801e164:	b480      	push	{r7}
 801e166:	b083      	sub	sp, #12
 801e168:	af00      	add	r7, sp, #0
 801e16a:	6078      	str	r0, [r7, #4]
    if (overflow_cnt_ < 0xFFFFFFFF)
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	689b      	ldr	r3, [r3, #8]
 801e170:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e174:	d004      	beq.n	801e180 <_ZN12uavcan_stm328CanIface7RxQueue16registerOverflowEv+0x1c>
    {
        overflow_cnt_++;
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	689b      	ldr	r3, [r3, #8]
 801e17a:	1c5a      	adds	r2, r3, #1
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	609a      	str	r2, [r3, #8]
    }
}
 801e180:	bf00      	nop
 801e182:	370c      	adds	r7, #12
 801e184:	46bd      	mov	sp, r7
 801e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e18a:	4770      	bx	lr

0801e18c <_ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt>:

void CanIface::RxQueue::push(const uavcan::CanFrame& frame, const uint64_t& utc_usec, uavcan::CanIOFlags flags)
{
 801e18c:	b590      	push	{r4, r7, lr}
 801e18e:	b085      	sub	sp, #20
 801e190:	af00      	add	r7, sp, #0
 801e192:	60f8      	str	r0, [r7, #12]
 801e194:	60b9      	str	r1, [r7, #8]
 801e196:	607a      	str	r2, [r7, #4]
 801e198:	807b      	strh	r3, [r7, #2]
    buf_[in_].frame    = frame;
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	681a      	ldr	r2, [r3, #0]
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	795b      	ldrb	r3, [r3, #5]
 801e1a2:	015b      	lsls	r3, r3, #5
 801e1a4:	4413      	add	r3, r2
 801e1a6:	68ba      	ldr	r2, [r7, #8]
 801e1a8:	3308      	adds	r3, #8
 801e1aa:	6814      	ldr	r4, [r2, #0]
 801e1ac:	6850      	ldr	r0, [r2, #4]
 801e1ae:	6891      	ldr	r1, [r2, #8]
 801e1b0:	601c      	str	r4, [r3, #0]
 801e1b2:	6058      	str	r0, [r3, #4]
 801e1b4:	6099      	str	r1, [r3, #8]
 801e1b6:	7b12      	ldrb	r2, [r2, #12]
 801e1b8:	731a      	strb	r2, [r3, #12]
    buf_[in_].utc_usec = utc_usec;
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	681a      	ldr	r2, [r3, #0]
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	795b      	ldrb	r3, [r3, #5]
 801e1c2:	015b      	lsls	r3, r3, #5
 801e1c4:	441a      	add	r2, r3
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e1cc:	e9c2 3400 	strd	r3, r4, [r2]
    buf_[in_].flags    = flags;
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	681a      	ldr	r2, [r3, #0]
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	795b      	ldrb	r3, [r3, #5]
 801e1d8:	015b      	lsls	r3, r3, #5
 801e1da:	4413      	add	r3, r2
 801e1dc:	887a      	ldrh	r2, [r7, #2]
 801e1de:	831a      	strh	r2, [r3, #24]
    in_++;
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	795b      	ldrb	r3, [r3, #5]
 801e1e4:	3301      	adds	r3, #1
 801e1e6:	b2da      	uxtb	r2, r3
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	715a      	strb	r2, [r3, #5]
    if (in_ >= capacity_)
 801e1ec:	68fb      	ldr	r3, [r7, #12]
 801e1ee:	795a      	ldrb	r2, [r3, #5]
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	791b      	ldrb	r3, [r3, #4]
 801e1f4:	429a      	cmp	r2, r3
 801e1f6:	d302      	bcc.n	801e1fe <_ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt+0x72>
    {
        in_ = 0;
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	2200      	movs	r2, #0
 801e1fc:	715a      	strb	r2, [r3, #5]
    }
    len_++;
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	79db      	ldrb	r3, [r3, #7]
 801e202:	3301      	adds	r3, #1
 801e204:	b2da      	uxtb	r2, r3
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	71da      	strb	r2, [r3, #7]
    if (len_ > capacity_)
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	79da      	ldrb	r2, [r3, #7]
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	791b      	ldrb	r3, [r3, #4]
 801e212:	429a      	cmp	r2, r3
 801e214:	d915      	bls.n	801e242 <_ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt+0xb6>
    {
        len_ = capacity_;
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	791a      	ldrb	r2, [r3, #4]
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	71da      	strb	r2, [r3, #7]
        registerOverflow();
 801e21e:	68f8      	ldr	r0, [r7, #12]
 801e220:	f7ff ffa0 	bl	801e164 <_ZN12uavcan_stm328CanIface7RxQueue16registerOverflowEv>
        out_++;
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	799b      	ldrb	r3, [r3, #6]
 801e228:	3301      	adds	r3, #1
 801e22a:	b2da      	uxtb	r2, r3
 801e22c:	68fb      	ldr	r3, [r7, #12]
 801e22e:	719a      	strb	r2, [r3, #6]
        if (out_ >= capacity_)
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	799a      	ldrb	r2, [r3, #6]
 801e234:	68fb      	ldr	r3, [r7, #12]
 801e236:	791b      	ldrb	r3, [r3, #4]
 801e238:	429a      	cmp	r2, r3
 801e23a:	d302      	bcc.n	801e242 <_ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt+0xb6>
        {
            out_ = 0;
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	2200      	movs	r2, #0
 801e240:	719a      	strb	r2, [r3, #6]
        }
    }
}
 801e242:	bf00      	nop
 801e244:	3714      	adds	r7, #20
 801e246:	46bd      	mov	sp, r7
 801e248:	bd90      	pop	{r4, r7, pc}
	...

0801e24c <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt>:

void CanIface::RxQueue::pop(uavcan::CanFrame& out_frame, uavcan::uint64_t& out_utc_usec, uavcan::CanIOFlags& out_flags)
{
 801e24c:	b590      	push	{r4, r7, lr}
 801e24e:	b085      	sub	sp, #20
 801e250:	af00      	add	r7, sp, #0
 801e252:	60f8      	str	r0, [r7, #12]
 801e254:	60b9      	str	r1, [r7, #8]
 801e256:	607a      	str	r2, [r7, #4]
 801e258:	603b      	str	r3, [r7, #0]
    if (len_ > 0)
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	79db      	ldrb	r3, [r3, #7]
 801e25e:	2b00      	cmp	r3, #0
 801e260:	d039      	beq.n	801e2d6 <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt+0x8a>
    {
        out_frame    = buf_[out_].frame;
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	681a      	ldr	r2, [r3, #0]
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	799b      	ldrb	r3, [r3, #6]
 801e26a:	015b      	lsls	r3, r3, #5
 801e26c:	4413      	add	r3, r2
 801e26e:	68ba      	ldr	r2, [r7, #8]
 801e270:	3308      	adds	r3, #8
 801e272:	681c      	ldr	r4, [r3, #0]
 801e274:	6858      	ldr	r0, [r3, #4]
 801e276:	6899      	ldr	r1, [r3, #8]
 801e278:	6014      	str	r4, [r2, #0]
 801e27a:	6050      	str	r0, [r2, #4]
 801e27c:	6091      	str	r1, [r2, #8]
 801e27e:	7b1b      	ldrb	r3, [r3, #12]
 801e280:	7313      	strb	r3, [r2, #12]
        out_utc_usec = buf_[out_].utc_usec;
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	681a      	ldr	r2, [r3, #0]
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	799b      	ldrb	r3, [r3, #6]
 801e28a:	015b      	lsls	r3, r3, #5
 801e28c:	4413      	add	r3, r2
 801e28e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e292:	687a      	ldr	r2, [r7, #4]
 801e294:	e9c2 3400 	strd	r3, r4, [r2]
        out_flags    = buf_[out_].flags;
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	681a      	ldr	r2, [r3, #0]
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	799b      	ldrb	r3, [r3, #6]
 801e2a0:	015b      	lsls	r3, r3, #5
 801e2a2:	4413      	add	r3, r2
 801e2a4:	8b1a      	ldrh	r2, [r3, #24]
 801e2a6:	683b      	ldr	r3, [r7, #0]
 801e2a8:	801a      	strh	r2, [r3, #0]
        out_++;
 801e2aa:	68fb      	ldr	r3, [r7, #12]
 801e2ac:	799b      	ldrb	r3, [r3, #6]
 801e2ae:	3301      	adds	r3, #1
 801e2b0:	b2da      	uxtb	r2, r3
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	719a      	strb	r2, [r3, #6]
        if (out_ >= capacity_)
 801e2b6:	68fb      	ldr	r3, [r7, #12]
 801e2b8:	799a      	ldrb	r2, [r3, #6]
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	791b      	ldrb	r3, [r3, #4]
 801e2be:	429a      	cmp	r2, r3
 801e2c0:	d302      	bcc.n	801e2c8 <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt+0x7c>
        {
            out_ = 0;
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	2200      	movs	r2, #0
 801e2c6:	719a      	strb	r2, [r3, #6]
        }
        len_--;
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	79db      	ldrb	r3, [r3, #7]
 801e2cc:	3b01      	subs	r3, #1
 801e2ce:	b2da      	uxtb	r2, r3
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	71da      	strb	r2, [r3, #7]
    }
    else { UAVCAN_ASSERT(0); }
}
 801e2d4:	e005      	b.n	801e2e2 <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt+0x96>
    else { UAVCAN_ASSERT(0); }
 801e2d6:	4b04      	ldr	r3, [pc, #16]	; (801e2e8 <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt+0x9c>)
 801e2d8:	4a04      	ldr	r2, [pc, #16]	; (801e2ec <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt+0xa0>)
 801e2da:	21ae      	movs	r1, #174	; 0xae
 801e2dc:	4804      	ldr	r0, [pc, #16]	; (801e2f0 <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt+0xa4>)
 801e2de:	f002 f955 	bl	802058c <__assert_func>
}
 801e2e2:	3714      	adds	r7, #20
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	bd90      	pop	{r4, r7, pc}
 801e2e8:	08024ca8 	.word	0x08024ca8
 801e2ec:	0802c844 	.word	0x0802c844
 801e2f0:	08024c20 	.word	0x08024c20

0801e2f4 <_ZN12uavcan_stm328CanIface7RxQueue5resetEv>:

void CanIface::RxQueue::reset()
{
 801e2f4:	b480      	push	{r7}
 801e2f6:	b083      	sub	sp, #12
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	6078      	str	r0, [r7, #4]
    in_ = 0;
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	2200      	movs	r2, #0
 801e300:	715a      	strb	r2, [r3, #5]
    out_ = 0;
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	2200      	movs	r2, #0
 801e306:	719a      	strb	r2, [r3, #6]
    len_ = 0;
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	2200      	movs	r2, #0
 801e30c:	71da      	strb	r2, [r3, #7]
    overflow_cnt_ = 0;
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	2200      	movs	r2, #0
 801e312:	609a      	str	r2, [r3, #8]
}
 801e314:	bf00      	nop
 801e316:	370c      	adds	r7, #12
 801e318:	46bd      	mov	sp, r7
 801e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e31e:	4770      	bx	lr

0801e320 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh>:
            bs1(0),
            bs2(0),
            sample_point_permill(0)
        { }

        BsPair(uavcan::uint8_t bs1_bs2_sum, uavcan::uint8_t arg_bs1) :
 801e320:	b580      	push	{r7, lr}
 801e322:	b082      	sub	sp, #8
 801e324:	af00      	add	r7, sp, #0
 801e326:	6078      	str	r0, [r7, #4]
 801e328:	460b      	mov	r3, r1
 801e32a:	70fb      	strb	r3, [r7, #3]
 801e32c:	4613      	mov	r3, r2
 801e32e:	70bb      	strb	r3, [r7, #2]
            bs1(arg_bs1),
            bs2(uavcan::uint8_t(bs1_bs2_sum - bs1)),
            sample_point_permill(uavcan::uint16_t(1000 * (1 + bs1) / (1 + bs1 + bs2)))
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	78ba      	ldrb	r2, [r7, #2]
 801e334:	701a      	strb	r2, [r3, #0]
            bs2(uavcan::uint8_t(bs1_bs2_sum - bs1)),
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	781b      	ldrb	r3, [r3, #0]
 801e33a:	78fa      	ldrb	r2, [r7, #3]
 801e33c:	1ad3      	subs	r3, r2, r3
 801e33e:	b2da      	uxtb	r2, r3
            sample_point_permill(uavcan::uint16_t(1000 * (1 + bs1) / (1 + bs1 + bs2)))
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	705a      	strb	r2, [r3, #1]
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	781b      	ldrb	r3, [r3, #0]
 801e348:	3301      	adds	r3, #1
 801e34a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e34e:	fb02 f203 	mul.w	r2, r2, r3
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	781b      	ldrb	r3, [r3, #0]
 801e356:	3301      	adds	r3, #1
 801e358:	6879      	ldr	r1, [r7, #4]
 801e35a:	7849      	ldrb	r1, [r1, #1]
 801e35c:	440b      	add	r3, r1
 801e35e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e362:	b29a      	uxth	r2, r3
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	805a      	strh	r2, [r3, #2]
        {
            UAVCAN_ASSERT(bs1_bs2_sum > arg_bs1);
 801e368:	78fa      	ldrb	r2, [r7, #3]
 801e36a:	78bb      	ldrb	r3, [r7, #2]
 801e36c:	429a      	cmp	r2, r3
 801e36e:	d806      	bhi.n	801e37e <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh+0x5e>
 801e370:	4b05      	ldr	r3, [pc, #20]	; (801e388 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh+0x68>)
 801e372:	4a06      	ldr	r2, [pc, #24]	; (801e38c <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh+0x6c>)
 801e374:	f44f 7198 	mov.w	r1, #304	; 0x130
 801e378:	4805      	ldr	r0, [pc, #20]	; (801e390 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh+0x70>)
 801e37a:	f002 f907 	bl	802058c <__assert_func>
        }
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	4618      	mov	r0, r3
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}
 801e388:	08024cac 	.word	0x08024cac
 801e38c:	0802c90c 	.word	0x0802c90c
 801e390:	08024c20 	.word	0x08024c20

0801e394 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv>:

        bool isValid() const { return (bs1 >= 1) && (bs1 <= MaxBS1) && (bs2 >= 1) && (bs2 <= MaxBS2); }
 801e394:	b480      	push	{r7}
 801e396:	b083      	sub	sp, #12
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	781b      	ldrb	r3, [r3, #0]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d00d      	beq.n	801e3c0 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv+0x2c>
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	781b      	ldrb	r3, [r3, #0]
 801e3a8:	2b10      	cmp	r3, #16
 801e3aa:	d809      	bhi.n	801e3c0 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv+0x2c>
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	785b      	ldrb	r3, [r3, #1]
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d005      	beq.n	801e3c0 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv+0x2c>
 801e3b4:	687b      	ldr	r3, [r7, #4]
 801e3b6:	785b      	ldrb	r3, [r3, #1]
 801e3b8:	2b08      	cmp	r3, #8
 801e3ba:	d801      	bhi.n	801e3c0 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv+0x2c>
 801e3bc:	2301      	movs	r3, #1
 801e3be:	e000      	b.n	801e3c2 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv+0x2e>
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	370c      	adds	r7, #12
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3cc:	4770      	bx	lr
	...

0801e3d0 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE>:
{
 801e3d0:	b580      	push	{r7, lr}
 801e3d2:	b08c      	sub	sp, #48	; 0x30
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	60f8      	str	r0, [r7, #12]
 801e3d8:	60b9      	str	r1, [r7, #8]
 801e3da:	607a      	str	r2, [r7, #4]
    if (target_bitrate < 1)
 801e3dc:	68bb      	ldr	r3, [r7, #8]
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d101      	bne.n	801e3e6 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x16>
        return -ErrInvalidBitRate;
 801e3e2:	4b58      	ldr	r3, [pc, #352]	; (801e544 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x174>)
 801e3e4:	e0a9      	b.n	801e53a <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x16a>
    const uavcan::uint32_t pclk = HAL_RCC_GetPCLK1Freq();
 801e3e6:	f7e2 ff71 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 801e3ea:	62b8      	str	r0, [r7, #40]	; 0x28
    const int max_quanta_per_bit = (target_bitrate >= 1000000) ? 10 : 17;
 801e3ec:	68bb      	ldr	r3, [r7, #8]
 801e3ee:	4a56      	ldr	r2, [pc, #344]	; (801e548 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x178>)
 801e3f0:	4293      	cmp	r3, r2
 801e3f2:	d901      	bls.n	801e3f8 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x28>
 801e3f4:	230a      	movs	r3, #10
 801e3f6:	e000      	b.n	801e3fa <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x2a>
 801e3f8:	2311      	movs	r3, #17
 801e3fa:	627b      	str	r3, [r7, #36]	; 0x24
    UAVCAN_ASSERT(max_quanta_per_bit <= (MaxBS1 + MaxBS2));
 801e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3fe:	2b18      	cmp	r3, #24
 801e400:	dd05      	ble.n	801e40e <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x3e>
 801e402:	4b52      	ldr	r3, [pc, #328]	; (801e54c <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x17c>)
 801e404:	4a52      	ldr	r2, [pc, #328]	; (801e550 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x180>)
 801e406:	21e9      	movs	r1, #233	; 0xe9
 801e408:	4852      	ldr	r0, [pc, #328]	; (801e554 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x184>)
 801e40a:	f002 f8bf 	bl	802058c <__assert_func>
    const uavcan::uint32_t prescaler_bs = pclk / target_bitrate;
 801e40e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e410:	68bb      	ldr	r3, [r7, #8]
 801e412:	fbb2 f3f3 	udiv	r3, r2, r3
 801e416:	623b      	str	r3, [r7, #32]
    uavcan::uint8_t bs1_bs2_sum = uavcan::uint8_t(max_quanta_per_bit - 1);
 801e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e41a:	b2db      	uxtb	r3, r3
 801e41c:	3b01      	subs	r3, #1
 801e41e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((prescaler_bs % (1 + bs1_bs2_sum)) != 0)
 801e422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e426:	3301      	adds	r3, #1
 801e428:	461a      	mov	r2, r3
 801e42a:	6a3b      	ldr	r3, [r7, #32]
 801e42c:	fbb3 f1f2 	udiv	r1, r3, r2
 801e430:	fb02 f201 	mul.w	r2, r2, r1
 801e434:	1a9b      	subs	r3, r3, r2
 801e436:	2b00      	cmp	r3, #0
 801e438:	d00b      	beq.n	801e452 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x82>
        if (bs1_bs2_sum <= 2)
 801e43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e43e:	2b02      	cmp	r3, #2
 801e440:	d801      	bhi.n	801e446 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x76>
            return -ErrInvalidBitRate;          // No solution
 801e442:	4b40      	ldr	r3, [pc, #256]	; (801e544 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x174>)
 801e444:	e079      	b.n	801e53a <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x16a>
        bs1_bs2_sum--;
 801e446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e44a:	3b01      	subs	r3, #1
 801e44c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((prescaler_bs % (1 + bs1_bs2_sum)) != 0)
 801e450:	e7e7      	b.n	801e422 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x52>
    const uavcan::uint32_t prescaler = prescaler_bs / (1 + bs1_bs2_sum);
 801e452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e456:	3301      	adds	r3, #1
 801e458:	461a      	mov	r2, r3
 801e45a:	6a3b      	ldr	r3, [r7, #32]
 801e45c:	fbb3 f3f2 	udiv	r3, r3, r2
 801e460:	61fb      	str	r3, [r7, #28]
    if ((prescaler < 1U) || (prescaler > 1024U))
 801e462:	69fb      	ldr	r3, [r7, #28]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d003      	beq.n	801e470 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0xa0>
 801e468:	69fb      	ldr	r3, [r7, #28]
 801e46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e46e:	d901      	bls.n	801e474 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0xa4>
        return -ErrInvalidBitRate;              // No solution
 801e470:	4b34      	ldr	r3, [pc, #208]	; (801e544 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x174>)
 801e472:	e062      	b.n	801e53a <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x16a>
    };

    // First attempt with rounding to nearest
    BsPair solution(bs1_bs2_sum, uavcan::uint8_t(((7 * bs1_bs2_sum - 1) + 4) / 8));
 801e474:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801e478:	4613      	mov	r3, r2
 801e47a:	00db      	lsls	r3, r3, #3
 801e47c:	1a9b      	subs	r3, r3, r2
 801e47e:	3303      	adds	r3, #3
 801e480:	2b00      	cmp	r3, #0
 801e482:	da00      	bge.n	801e486 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0xb6>
 801e484:	3307      	adds	r3, #7
 801e486:	10db      	asrs	r3, r3, #3
 801e488:	b2da      	uxtb	r2, r3
 801e48a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801e48e:	f107 0314 	add.w	r3, r7, #20
 801e492:	4618      	mov	r0, r3
 801e494:	f7ff ff44 	bl	801e320 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh>

    if (solution.sample_point_permill > MaxSamplePointLocation)
 801e498:	8afb      	ldrh	r3, [r7, #22]
 801e49a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 801e49e:	d913      	bls.n	801e4c8 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0xf8>
    {
        // Second attempt with rounding to zero
        solution = BsPair(bs1_bs2_sum, uavcan::uint8_t((7 * bs1_bs2_sum - 1) / 8));
 801e4a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801e4a4:	4613      	mov	r3, r2
 801e4a6:	00db      	lsls	r3, r3, #3
 801e4a8:	1a9b      	subs	r3, r3, r2
 801e4aa:	3b01      	subs	r3, #1
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	da00      	bge.n	801e4b2 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0xe2>
 801e4b0:	3307      	adds	r3, #7
 801e4b2:	10db      	asrs	r3, r3, #3
 801e4b4:	b2da      	uxtb	r2, r3
 801e4b6:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801e4ba:	f107 0318 	add.w	r3, r7, #24
 801e4be:	4618      	mov	r0, r3
 801e4c0:	f7ff ff2e 	bl	801e320 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEEN6BsPairC1Ehh>
 801e4c4:	69bb      	ldr	r3, [r7, #24]
 801e4c6:	617b      	str	r3, [r7, #20]
     *     assert 0b0011110010000000111111000000000 & x == 0
     *     ts2,ts1,brp = (x>>20)&7, (x>>16)&15, x&511
     *     return (1+ts1+1)/(1+ts1+1+ts2+1)
     *
     */
    if ((target_bitrate != (pclk / (prescaler * (1 + solution.bs1 + solution.bs2)))) || !solution.isValid())
 801e4c8:	7d3b      	ldrb	r3, [r7, #20]
 801e4ca:	3301      	adds	r3, #1
 801e4cc:	7d7a      	ldrb	r2, [r7, #21]
 801e4ce:	4413      	add	r3, r2
 801e4d0:	461a      	mov	r2, r3
 801e4d2:	69fb      	ldr	r3, [r7, #28]
 801e4d4:	fb03 f302 	mul.w	r3, r3, r2
 801e4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e4da:	fbb2 f3f3 	udiv	r3, r2, r3
 801e4de:	68ba      	ldr	r2, [r7, #8]
 801e4e0:	429a      	cmp	r2, r3
 801e4e2:	d10a      	bne.n	801e4fa <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x12a>
 801e4e4:	f107 0314 	add.w	r3, r7, #20
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f7ff ff53 	bl	801e394 <_ZZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsEENK6BsPair7isValidEv>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	f083 0301 	eor.w	r3, r3, #1
 801e4f4:	b2db      	uxtb	r3, r3
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d001      	beq.n	801e4fe <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x12e>
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	e000      	b.n	801e500 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x130>
 801e4fe:	2300      	movs	r3, #0
 801e500:	2b00      	cmp	r3, #0
 801e502:	d006      	beq.n	801e512 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x142>
    {
        UAVCAN_ASSERT(0);
 801e504:	4b14      	ldr	r3, [pc, #80]	; (801e558 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x188>)
 801e506:	4a12      	ldr	r2, [pc, #72]	; (801e550 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x180>)
 801e508:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801e50c:	4811      	ldr	r0, [pc, #68]	; (801e554 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE+0x184>)
 801e50e:	f002 f83d 	bl	802058c <__assert_func>
    }

    UAVCAN_STM32_LOG("Timings: quanta/bit: %d, sample point location: %.1f%%",
                     int(1 + solution.bs1 + solution.bs2), float(solution.sample_point_permill) / 10.F);

    out_timings.prescaler = uavcan::uint16_t(prescaler - 1U);
 801e512:	69fb      	ldr	r3, [r7, #28]
 801e514:	b29b      	uxth	r3, r3
 801e516:	3b01      	subs	r3, #1
 801e518:	b29a      	uxth	r2, r3
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	801a      	strh	r2, [r3, #0]
    out_timings.sjw = 0;                                        // Which means one
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	2200      	movs	r2, #0
 801e522:	709a      	strb	r2, [r3, #2]
    out_timings.bs1 = uavcan::uint8_t(solution.bs1 - 1);
 801e524:	7d3b      	ldrb	r3, [r7, #20]
 801e526:	3b01      	subs	r3, #1
 801e528:	b2da      	uxtb	r2, r3
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	70da      	strb	r2, [r3, #3]
    out_timings.bs2 = uavcan::uint8_t(solution.bs2 - 1);
 801e52e:	7d7b      	ldrb	r3, [r7, #21]
 801e530:	3b01      	subs	r3, #1
 801e532:	b2da      	uxtb	r2, r3
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	711a      	strb	r2, [r3, #4]
    return 0;
 801e538:	2300      	movs	r3, #0
}
 801e53a:	4618      	mov	r0, r3
 801e53c:	3730      	adds	r7, #48	; 0x30
 801e53e:	46bd      	mov	sp, r7
 801e540:	bd80      	pop	{r7, pc}
 801e542:	bf00      	nop
 801e544:	fffffc16 	.word	0xfffffc16
 801e548:	000f423f 	.word	0x000f423f
 801e54c:	08024cc4 	.word	0x08024cc4
 801e550:	0802c8ac 	.word	0x0802c8ac
 801e554:	08024c20 	.word	0x08024c20
 801e558:	08024ca8 	.word	0x08024ca8

0801e55c <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt>:

uavcan::int16_t CanIface::send(const uavcan::CanFrame& frame, uavcan::MonotonicTime tx_deadline,
                               uavcan::CanIOFlags flags)
{
 801e55c:	b590      	push	{r4, r7, lr}
 801e55e:	b089      	sub	sp, #36	; 0x24
 801e560:	af00      	add	r7, sp, #0
 801e562:	60f8      	str	r0, [r7, #12]
 801e564:	60b9      	str	r1, [r7, #8]
 801e566:	607a      	str	r2, [r7, #4]
 801e568:	807b      	strh	r3, [r7, #2]
    if (frame.isErrorFrame() || frame.dlc > 8)
 801e56a:	68b8      	ldr	r0, [r7, #8]
 801e56c:	f7fa fdc2 	bl	80190f4 <_ZNK6uavcan8CanFrame12isErrorFrameEv>
 801e570:	4603      	mov	r3, r0
 801e572:	2b00      	cmp	r3, #0
 801e574:	d103      	bne.n	801e57e <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x22>
 801e576:	68bb      	ldr	r3, [r7, #8]
 801e578:	7b1b      	ldrb	r3, [r3, #12]
 801e57a:	2b08      	cmp	r3, #8
 801e57c:	d901      	bls.n	801e582 <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x26>
 801e57e:	2301      	movs	r3, #1
 801e580:	e000      	b.n	801e584 <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x28>
 801e582:	2300      	movs	r3, #0
 801e584:	2b00      	cmp	r3, #0
 801e586:	d001      	beq.n	801e58c <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x30>
    {
        return -ErrUnsupportedFrame;
 801e588:	4c68      	ldr	r4, [pc, #416]	; (801e72c <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x1d0>)
 801e58a:	e0ca      	b.n	801e722 <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x1c6>
     *  - If high-priority frames are timing out in the TX queue, there's probably a lot of other
     *    issues to take care of before this one becomes relevant.
     *
     *  - It takes CPU time. Not just CPU time, but critical section time, which is expensive.
     */
    CriticalSectionLocker lock;
 801e58c:	f107 0314 	add.w	r3, r7, #20
 801e590:	4618      	mov	r0, r3
 801e592:	f7ff fd4a 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>

    /*
     * Seeking for an empty slot
     */
    uavcan::uint8_t txmailbox = 0xFF;
 801e596:	23ff      	movs	r3, #255	; 0xff
 801e598:	74fb      	strb	r3, [r7, #19]
    if ((can_->TSR & bxcan::TSR_TME0) == bxcan::TSR_TME0)
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	691b      	ldr	r3, [r3, #16]
 801e59e:	689b      	ldr	r3, [r3, #8]
 801e5a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801e5a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801e5a8:	bf0c      	ite	eq
 801e5aa:	2301      	moveq	r3, #1
 801e5ac:	2300      	movne	r3, #0
 801e5ae:	b2db      	uxtb	r3, r3
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d002      	beq.n	801e5ba <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x5e>
    {
        txmailbox = 0;
 801e5b4:	2300      	movs	r3, #0
 801e5b6:	74fb      	strb	r3, [r7, #19]
 801e5b8:	e021      	b.n	801e5fe <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0xa2>
    }
    else if ((can_->TSR & bxcan::TSR_TME1) == bxcan::TSR_TME1)
 801e5ba:	68fb      	ldr	r3, [r7, #12]
 801e5bc:	691b      	ldr	r3, [r3, #16]
 801e5be:	689b      	ldr	r3, [r3, #8]
 801e5c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e5c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e5c8:	bf0c      	ite	eq
 801e5ca:	2301      	moveq	r3, #1
 801e5cc:	2300      	movne	r3, #0
 801e5ce:	b2db      	uxtb	r3, r3
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d002      	beq.n	801e5da <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x7e>
    {
        txmailbox = 1;
 801e5d4:	2301      	movs	r3, #1
 801e5d6:	74fb      	strb	r3, [r7, #19]
 801e5d8:	e011      	b.n	801e5fe <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0xa2>
    }
    else if ((can_->TSR & bxcan::TSR_TME2) == bxcan::TSR_TME2)
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	691b      	ldr	r3, [r3, #16]
 801e5de:	689b      	ldr	r3, [r3, #8]
 801e5e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e5e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e5e8:	bf0c      	ite	eq
 801e5ea:	2301      	moveq	r3, #1
 801e5ec:	2300      	movne	r3, #0
 801e5ee:	b2db      	uxtb	r3, r3
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d002      	beq.n	801e5fa <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x9e>
    {
        txmailbox = 2;
 801e5f4:	2302      	movs	r3, #2
 801e5f6:	74fb      	strb	r3, [r7, #19]
 801e5f8:	e001      	b.n	801e5fe <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0xa2>
    }
    else
    {
        return 0;       // No transmission for you.
 801e5fa:	2400      	movs	r4, #0
 801e5fc:	e08c      	b.n	801e718 <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x1bc>
    }

    peak_tx_mailbox_index_ = uavcan::max(peak_tx_mailbox_index_, txmailbox);    // Statistics
 801e5fe:	68fb      	ldr	r3, [r7, #12]
 801e600:	3388      	adds	r3, #136	; 0x88
 801e602:	f107 0213 	add.w	r2, r7, #19
 801e606:	4611      	mov	r1, r2
 801e608:	4618      	mov	r0, r3
 801e60a:	f7f5 fdd1 	bl	80141b0 <_ZN6uavcan3maxIhEERKT_S3_S3_>
 801e60e:	4603      	mov	r3, r0
 801e610:	781a      	ldrb	r2, [r3, #0]
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /*
     * Setting up the mailbox
     */
    bxcan::TxMailboxType& mb = can_->TxMailbox[txmailbox];
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	691a      	ldr	r2, [r3, #16]
 801e61c:	7cfb      	ldrb	r3, [r7, #19]
 801e61e:	3318      	adds	r3, #24
 801e620:	011b      	lsls	r3, r3, #4
 801e622:	4413      	add	r3, r2
 801e624:	61fb      	str	r3, [r7, #28]
    if (frame.isExtended())
 801e626:	68b8      	ldr	r0, [r7, #8]
 801e628:	f7fa fd43 	bl	80190b2 <_ZNK6uavcan8CanFrame10isExtendedEv>
 801e62c:	4603      	mov	r3, r0
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d007      	beq.n	801e642 <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0xe6>
    {
        mb.TIR = ((frame.id & uavcan::CanFrame::MaskExtID) << 3) | bxcan::TIR_IDE;
 801e632:	68bb      	ldr	r3, [r7, #8]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	00db      	lsls	r3, r3, #3
 801e638:	f043 0204 	orr.w	r2, r3, #4
 801e63c:	69fb      	ldr	r3, [r7, #28]
 801e63e:	601a      	str	r2, [r3, #0]
 801e640:	e004      	b.n	801e64c <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0xf0>
    }
    else
    {
        mb.TIR = ((frame.id & uavcan::CanFrame::MaskStdID) << 21);
 801e642:	68bb      	ldr	r3, [r7, #8]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	055a      	lsls	r2, r3, #21
 801e648:	69fb      	ldr	r3, [r7, #28]
 801e64a:	601a      	str	r2, [r3, #0]
    }

    if (frame.isRemoteTransmissionRequest())
 801e64c:	68b8      	ldr	r0, [r7, #8]
 801e64e:	f7fa fd3e 	bl	80190ce <_ZNK6uavcan8CanFrame27isRemoteTransmissionRequestEv>
 801e652:	4603      	mov	r3, r0
 801e654:	2b00      	cmp	r3, #0
 801e656:	d005      	beq.n	801e664 <_ZN12uavcan_stm328CanIface4sendERKN6uavcan8CanFrameENS1_13MonotonicTimeEt+0x108>
    {
        mb.TIR |= bxcan::TIR_RTR;
 801e658:	69fb      	ldr	r3, [r7, #28]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	f043 0202 	orr.w	r2, r3, #2
 801e660:	69fb      	ldr	r3, [r7, #28]
 801e662:	601a      	str	r2, [r3, #0]
    }

    mb.TDTR = frame.dlc;
 801e664:	68bb      	ldr	r3, [r7, #8]
 801e666:	7b1b      	ldrb	r3, [r3, #12]
 801e668:	461a      	mov	r2, r3
 801e66a:	69fb      	ldr	r3, [r7, #28]
 801e66c:	605a      	str	r2, [r3, #4]

    mb.TDHR = (uavcan::uint32_t(frame.data[7]) << 24) |
 801e66e:	68bb      	ldr	r3, [r7, #8]
 801e670:	7adb      	ldrb	r3, [r3, #11]
 801e672:	061a      	lsls	r2, r3, #24
              (uavcan::uint32_t(frame.data[6]) << 16) |
 801e674:	68bb      	ldr	r3, [r7, #8]
 801e676:	7a9b      	ldrb	r3, [r3, #10]
 801e678:	041b      	lsls	r3, r3, #16
    mb.TDHR = (uavcan::uint32_t(frame.data[7]) << 24) |
 801e67a:	431a      	orrs	r2, r3
              (uavcan::uint32_t(frame.data[5]) << 8)  |
 801e67c:	68bb      	ldr	r3, [r7, #8]
 801e67e:	7a5b      	ldrb	r3, [r3, #9]
 801e680:	021b      	lsls	r3, r3, #8
              (uavcan::uint32_t(frame.data[6]) << 16) |
 801e682:	4313      	orrs	r3, r2
              (uavcan::uint32_t(frame.data[4]) << 0);
 801e684:	68ba      	ldr	r2, [r7, #8]
 801e686:	7a12      	ldrb	r2, [r2, #8]
              (uavcan::uint32_t(frame.data[5]) << 8)  |
 801e688:	431a      	orrs	r2, r3
    mb.TDHR = (uavcan::uint32_t(frame.data[7]) << 24) |
 801e68a:	69fb      	ldr	r3, [r7, #28]
 801e68c:	60da      	str	r2, [r3, #12]
    mb.TDLR = (uavcan::uint32_t(frame.data[3]) << 24) |
 801e68e:	68bb      	ldr	r3, [r7, #8]
 801e690:	79db      	ldrb	r3, [r3, #7]
 801e692:	061a      	lsls	r2, r3, #24
              (uavcan::uint32_t(frame.data[2]) << 16) |
 801e694:	68bb      	ldr	r3, [r7, #8]
 801e696:	799b      	ldrb	r3, [r3, #6]
 801e698:	041b      	lsls	r3, r3, #16
    mb.TDLR = (uavcan::uint32_t(frame.data[3]) << 24) |
 801e69a:	431a      	orrs	r2, r3
              (uavcan::uint32_t(frame.data[1]) << 8)  |
 801e69c:	68bb      	ldr	r3, [r7, #8]
 801e69e:	795b      	ldrb	r3, [r3, #5]
 801e6a0:	021b      	lsls	r3, r3, #8
              (uavcan::uint32_t(frame.data[2]) << 16) |
 801e6a2:	4313      	orrs	r3, r2
              (uavcan::uint32_t(frame.data[0]) << 0);
 801e6a4:	68ba      	ldr	r2, [r7, #8]
 801e6a6:	7912      	ldrb	r2, [r2, #4]
              (uavcan::uint32_t(frame.data[1]) << 8)  |
 801e6a8:	431a      	orrs	r2, r3
    mb.TDLR = (uavcan::uint32_t(frame.data[3]) << 24) |
 801e6aa:	69fb      	ldr	r3, [r7, #28]
 801e6ac:	609a      	str	r2, [r3, #8]

    mb.TIR |= bxcan::TIR_TXRQ;  // Go.
 801e6ae:	69fb      	ldr	r3, [r7, #28]
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	f043 0201 	orr.w	r2, r3, #1
 801e6b6:	69fb      	ldr	r3, [r7, #28]
 801e6b8:	601a      	str	r2, [r3, #0]

    /*
     * Registering the pending transmission so we can track its deadline and loopback it as needed
     */
    TxItem& txi = pending_tx_[txmailbox];
 801e6ba:	7cfb      	ldrb	r3, [r7, #19]
 801e6bc:	015b      	lsls	r3, r3, #5
 801e6be:	3328      	adds	r3, #40	; 0x28
 801e6c0:	68fa      	ldr	r2, [r7, #12]
 801e6c2:	4413      	add	r3, r2
 801e6c4:	61bb      	str	r3, [r7, #24]
    txi.deadline       = tx_deadline;
 801e6c6:	69bb      	ldr	r3, [r7, #24]
 801e6c8:	687a      	ldr	r2, [r7, #4]
 801e6ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e6ce:	e883 0003 	stmia.w	r3, {r0, r1}
    txi.frame          = frame;
 801e6d2:	69bb      	ldr	r3, [r7, #24]
 801e6d4:	68ba      	ldr	r2, [r7, #8]
 801e6d6:	3308      	adds	r3, #8
 801e6d8:	6814      	ldr	r4, [r2, #0]
 801e6da:	6850      	ldr	r0, [r2, #4]
 801e6dc:	6891      	ldr	r1, [r2, #8]
 801e6de:	601c      	str	r4, [r3, #0]
 801e6e0:	6058      	str	r0, [r3, #4]
 801e6e2:	6099      	str	r1, [r3, #8]
 801e6e4:	7b12      	ldrb	r2, [r2, #12]
 801e6e6:	731a      	strb	r2, [r3, #12]
    txi.loopback       = (flags & uavcan::CanIOFlagLoopback) != 0;
 801e6e8:	887b      	ldrh	r3, [r7, #2]
 801e6ea:	f003 0301 	and.w	r3, r3, #1
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	bf14      	ite	ne
 801e6f2:	2301      	movne	r3, #1
 801e6f4:	2300      	moveq	r3, #0
 801e6f6:	b2da      	uxtb	r2, r3
 801e6f8:	69bb      	ldr	r3, [r7, #24]
 801e6fa:	765a      	strb	r2, [r3, #25]
    txi.abort_on_error = (flags & uavcan::CanIOFlagAbortOnError) != 0;
 801e6fc:	887b      	ldrh	r3, [r7, #2]
 801e6fe:	f003 0302 	and.w	r3, r3, #2
 801e702:	2b00      	cmp	r3, #0
 801e704:	bf14      	ite	ne
 801e706:	2301      	movne	r3, #1
 801e708:	2300      	moveq	r3, #0
 801e70a:	b2da      	uxtb	r2, r3
 801e70c:	69bb      	ldr	r3, [r7, #24]
 801e70e:	769a      	strb	r2, [r3, #26]
    txi.pending        = true;
 801e710:	69bb      	ldr	r3, [r7, #24]
 801e712:	2201      	movs	r2, #1
 801e714:	761a      	strb	r2, [r3, #24]
    return 1;
 801e716:	2401      	movs	r4, #1
    CriticalSectionLocker lock;
 801e718:	f107 0314 	add.w	r3, r7, #20
 801e71c:	4618      	mov	r0, r3
 801e71e:	f7ff fc8f 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
 801e722:	4623      	mov	r3, r4
}
 801e724:	4618      	mov	r0, r3
 801e726:	3724      	adds	r7, #36	; 0x24
 801e728:	46bd      	mov	sp, r7
 801e72a:	bd90      	pop	{r4, r7, pc}
 801e72c:	fffffc14 	.word	0xfffffc14

0801e730 <_ZN12uavcan_stm328CanIface7receiveERN6uavcan8CanFrameERNS1_13MonotonicTimeERNS1_7UtcTimeERt>:

uavcan::int16_t CanIface::receive(uavcan::CanFrame& out_frame, uavcan::MonotonicTime& out_ts_monotonic,
                                  uavcan::UtcTime& out_ts_utc, uavcan::CanIOFlags& out_flags)
{
 801e730:	b5b0      	push	{r4, r5, r7, lr}
 801e732:	b08c      	sub	sp, #48	; 0x30
 801e734:	af00      	add	r7, sp, #0
 801e736:	60f8      	str	r0, [r7, #12]
 801e738:	60b9      	str	r1, [r7, #8]
 801e73a:	607a      	str	r2, [r7, #4]
 801e73c:	603b      	str	r3, [r7, #0]
    out_ts_monotonic = clock::getMonotonic();  // High precision is not required for monotonic timestamps
 801e73e:	f107 0320 	add.w	r3, r7, #32
 801e742:	4618      	mov	r0, r3
 801e744:	f001 f950 	bl	801f9e8 <_ZN12uavcan_stm325clock12getMonotonicEv>
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	461a      	mov	r2, r3
 801e74c:	f107 0320 	add.w	r3, r7, #32
 801e750:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e754:	e882 0003 	stmia.w	r2, {r0, r1}
 801e758:	f107 0320 	add.w	r3, r7, #32
 801e75c:	4618      	mov	r0, r3
 801e75e:	f7e7 fcd9 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    uavcan::uint64_t utc_usec = 0;
 801e762:	f04f 0300 	mov.w	r3, #0
 801e766:	f04f 0400 	mov.w	r4, #0
 801e76a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    {
        CriticalSectionLocker lock;
 801e76e:	f107 0314 	add.w	r3, r7, #20
 801e772:	4618      	mov	r0, r3
 801e774:	f7ff fc59 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
        if (rx_queue_.getLength() == 0)
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	3304      	adds	r3, #4
 801e77c:	4618      	mov	r0, r3
 801e77e:	f7ff fc0f 	bl	801dfa0 <_ZNK12uavcan_stm328CanIface7RxQueue9getLengthEv>
 801e782:	4603      	mov	r3, r0
 801e784:	2b00      	cmp	r3, #0
 801e786:	bf0c      	ite	eq
 801e788:	2301      	moveq	r3, #1
 801e78a:	2300      	movne	r3, #0
 801e78c:	b2db      	uxtb	r3, r3
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d002      	beq.n	801e798 <_ZN12uavcan_stm328CanIface7receiveERN6uavcan8CanFrameERNS1_13MonotonicTimeERNS1_7UtcTimeERt+0x68>
        {
            return 0;
 801e792:	2500      	movs	r5, #0
 801e794:	2400      	movs	r4, #0
 801e796:	e008      	b.n	801e7aa <_ZN12uavcan_stm328CanIface7receiveERN6uavcan8CanFrameERNS1_13MonotonicTimeERNS1_7UtcTimeERt+0x7a>
        }
        rx_queue_.pop(out_frame, utc_usec, out_flags);
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	1d18      	adds	r0, r3, #4
 801e79c:	f107 0218 	add.w	r2, r7, #24
 801e7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7a2:	68b9      	ldr	r1, [r7, #8]
 801e7a4:	f7ff fd52 	bl	801e24c <_ZN12uavcan_stm328CanIface7RxQueue3popERN6uavcan8CanFrameERyRt>
 801e7a8:	2401      	movs	r4, #1
 801e7aa:	f107 0314 	add.w	r3, r7, #20
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f7ff fc46 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
 801e7b4:	2c01      	cmp	r4, #1
 801e7b6:	d117      	bne.n	801e7e8 <_ZN12uavcan_stm328CanIface7receiveERN6uavcan8CanFrameERNS1_13MonotonicTimeERNS1_7UtcTimeERt+0xb8>
        CriticalSectionLocker lock;
 801e7b8:	bf00      	nop
    }
    out_ts_utc = uavcan::UtcTime::fromUSec(utc_usec);
 801e7ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801e7be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801e7c2:	461a      	mov	r2, r3
 801e7c4:	4623      	mov	r3, r4
 801e7c6:	4608      	mov	r0, r1
 801e7c8:	f000 fe9f 	bl	801f50a <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEE8fromUSecEy>
 801e7cc:	683b      	ldr	r3, [r7, #0]
 801e7ce:	461a      	mov	r2, r3
 801e7d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e7d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e7d8:	e882 0003 	stmia.w	r2, {r0, r1}
 801e7dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e7e0:	4618      	mov	r0, r3
 801e7e2:	f7f9 fd8e 	bl	8018302 <_ZN6uavcan7UtcTimeD1Ev>
    return 1;
 801e7e6:	2501      	movs	r5, #1
 801e7e8:	462b      	mov	r3, r5
}
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	3730      	adds	r7, #48	; 0x30
 801e7ee:	46bd      	mov	sp, r7
 801e7f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801e7f4 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt>:

uavcan::int16_t CanIface::configureFilters(const uavcan::CanFilterConfig* filter_configs,
                                           uavcan::uint16_t num_configs)
{
 801e7f4:	b590      	push	{r4, r7, lr}
 801e7f6:	b08b      	sub	sp, #44	; 0x2c
 801e7f8:	af00      	add	r7, sp, #0
 801e7fa:	60f8      	str	r0, [r7, #12]
 801e7fc:	60b9      	str	r1, [r7, #8]
 801e7fe:	4613      	mov	r3, r2
 801e800:	80fb      	strh	r3, [r7, #6]
    if (num_configs <= NumFilters)
 801e802:	88fb      	ldrh	r3, [r7, #6]
 801e804:	2b0e      	cmp	r3, #14
 801e806:	f200 80fb 	bhi.w	801ea00 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x20c>
    {
        CriticalSectionLocker lock;
 801e80a:	f107 0310 	add.w	r3, r7, #16
 801e80e:	4618      	mov	r0, r3
 801e810:	f7ff fc0b 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>

        can_->FMR |= bxcan::FMR_FINIT;
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	691b      	ldr	r3, [r3, #16]
 801e818:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	691b      	ldr	r3, [r3, #16]
 801e820:	f042 0201 	orr.w	r2, r2, #1
 801e824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

        // Slave (CAN2) gets half of the filters
        can_->FMR &= ~0x00003F00UL;
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	691b      	ldr	r3, [r3, #16]
 801e82c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	691b      	ldr	r3, [r3, #16]
 801e834:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 801e838:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        can_->FMR |= static_cast<uint32_t>(NumFilters) << 8;
 801e83c:	68fb      	ldr	r3, [r7, #12]
 801e83e:	691b      	ldr	r3, [r3, #16]
 801e840:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	691b      	ldr	r3, [r3, #16]
 801e848:	f442 6260 	orr.w	r2, r2, #3584	; 0xe00
 801e84c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

        can_->FFA1R = 0x0AAAAAAA; // FIFO's are interleaved between filters
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	691b      	ldr	r3, [r3, #16]
 801e854:	4a6d      	ldr	r2, [pc, #436]	; (801ea0c <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x218>)
 801e856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        can_->FM1R = 0; // Identifier Mask mode
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	691b      	ldr	r3, [r3, #16]
 801e85e:	2200      	movs	r2, #0
 801e860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        can_->FS1R = 0x7ffffff; // Single 32-bit for all
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	691b      	ldr	r3, [r3, #16]
 801e868:	f06f 4278 	mvn.w	r2, #4160749568	; 0xf8000000
 801e86c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

        const uint8_t filter_start_index = (self_index_ == 0) ? 0 : NumFilters;
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801e876:	2b00      	cmp	r3, #0
 801e878:	d101      	bne.n	801e87e <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x8a>
 801e87a:	2300      	movs	r3, #0
 801e87c:	e000      	b.n	801e880 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x8c>
 801e87e:	230e      	movs	r3, #14
 801e880:	76fb      	strb	r3, [r7, #27]

        if (num_configs == 0)
 801e882:	88fb      	ldrh	r3, [r7, #6]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d11b      	bne.n	801e8c0 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0xcc>
        {
            can_->FilterRegister[filter_start_index].FR1 = 0;
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	691b      	ldr	r3, [r3, #16]
 801e88c:	7efa      	ldrb	r2, [r7, #27]
 801e88e:	3248      	adds	r2, #72	; 0x48
 801e890:	2100      	movs	r1, #0
 801e892:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            can_->FilterRegister[filter_start_index].FR2 = 0;
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	691a      	ldr	r2, [r3, #16]
 801e89a:	7efb      	ldrb	r3, [r7, #27]
 801e89c:	3348      	adds	r3, #72	; 0x48
 801e89e:	00db      	lsls	r3, r3, #3
 801e8a0:	4413      	add	r3, r2
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	605a      	str	r2, [r3, #4]
            // We can't directly overwrite FA1R because that breaks the other CAN interface
            can_->FA1R |= 1U << filter_start_index;              // Other filters may still be enabled, we don't care
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	691b      	ldr	r3, [r3, #16]
 801e8aa:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 801e8ae:	7efb      	ldrb	r3, [r7, #27]
 801e8b0:	2201      	movs	r2, #1
 801e8b2:	409a      	lsls	r2, r3
 801e8b4:	68fb      	ldr	r3, [r7, #12]
 801e8b6:	691b      	ldr	r3, [r3, #16]
 801e8b8:	430a      	orrs	r2, r1
 801e8ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 801e8be:	e08e      	b.n	801e9de <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x1ea>
        }
        else
        {
            for (uint8_t i = 0; i < NumFilters; i++)
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e8ca:	2b0d      	cmp	r3, #13
 801e8cc:	f200 8087 	bhi.w	801e9de <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x1ea>
            {
                if (i < num_configs)
 801e8d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e8d4:	88fb      	ldrh	r3, [r7, #6]
 801e8d6:	429a      	cmp	r2, r3
 801e8d8:	da69      	bge.n	801e9ae <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x1ba>
                {
                    uint32_t id   = 0;
 801e8da:	2300      	movs	r3, #0
 801e8dc:	623b      	str	r3, [r7, #32]
                    uint32_t mask = 0;
 801e8de:	2300      	movs	r3, #0
 801e8e0:	61fb      	str	r3, [r7, #28]

                    const uavcan::CanFilterConfig* const cfg = filter_configs + i;
 801e8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e8e6:	00db      	lsls	r3, r3, #3
 801e8e8:	68ba      	ldr	r2, [r7, #8]
 801e8ea:	4413      	add	r3, r2
 801e8ec:	617b      	str	r3, [r7, #20]

                    if ((cfg->id & uavcan::CanFrame::FlagEFF) || !(cfg->mask & uavcan::CanFrame::FlagEFF))
 801e8ee:	697b      	ldr	r3, [r7, #20]
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	db03      	blt.n	801e8fe <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x10a>
 801e8f6:	697b      	ldr	r3, [r7, #20]
 801e8f8:	685b      	ldr	r3, [r3, #4]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	db0c      	blt.n	801e918 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x124>
                    {
                        id   = (cfg->id   & uavcan::CanFrame::MaskExtID) << 3;
 801e8fe:	697b      	ldr	r3, [r7, #20]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	00db      	lsls	r3, r3, #3
 801e904:	623b      	str	r3, [r7, #32]
                        mask = (cfg->mask & uavcan::CanFrame::MaskExtID) << 3;
 801e906:	697b      	ldr	r3, [r7, #20]
 801e908:	685b      	ldr	r3, [r3, #4]
 801e90a:	00db      	lsls	r3, r3, #3
 801e90c:	61fb      	str	r3, [r7, #28]
                        id |= bxcan::RIR_IDE;
 801e90e:	6a3b      	ldr	r3, [r7, #32]
 801e910:	f043 0304 	orr.w	r3, r3, #4
 801e914:	623b      	str	r3, [r7, #32]
 801e916:	e007      	b.n	801e928 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x134>
                    }
                    else
                    {
                        id   = (cfg->id   & uavcan::CanFrame::MaskStdID) << 21;  // Regular std frames, nothing fancy.
 801e918:	697b      	ldr	r3, [r7, #20]
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	055b      	lsls	r3, r3, #21
 801e91e:	623b      	str	r3, [r7, #32]
                        mask = (cfg->mask & uavcan::CanFrame::MaskStdID) << 21;  // Boring.
 801e920:	697b      	ldr	r3, [r7, #20]
 801e922:	685b      	ldr	r3, [r3, #4]
 801e924:	055b      	lsls	r3, r3, #21
 801e926:	61fb      	str	r3, [r7, #28]
                    }

                    if (cfg->id & uavcan::CanFrame::FlagRTR)
 801e928:	697b      	ldr	r3, [r7, #20]
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801e930:	2b00      	cmp	r3, #0
 801e932:	d003      	beq.n	801e93c <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x148>
                    {
                        id |= bxcan::RIR_RTR;
 801e934:	6a3b      	ldr	r3, [r7, #32]
 801e936:	f043 0302 	orr.w	r3, r3, #2
 801e93a:	623b      	str	r3, [r7, #32]
                    }

                    if (cfg->mask & uavcan::CanFrame::FlagEFF)
 801e93c:	697b      	ldr	r3, [r7, #20]
 801e93e:	685b      	ldr	r3, [r3, #4]
 801e940:	2b00      	cmp	r3, #0
 801e942:	da03      	bge.n	801e94c <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x158>
                    {
                        mask |= bxcan::RIR_IDE;
 801e944:	69fb      	ldr	r3, [r7, #28]
 801e946:	f043 0304 	orr.w	r3, r3, #4
 801e94a:	61fb      	str	r3, [r7, #28]
                    }

                    if (cfg->mask & uavcan::CanFrame::FlagRTR)
 801e94c:	697b      	ldr	r3, [r7, #20]
 801e94e:	685b      	ldr	r3, [r3, #4]
 801e950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801e954:	2b00      	cmp	r3, #0
 801e956:	d003      	beq.n	801e960 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x16c>
                    {
                        mask |= bxcan::RIR_RTR;
 801e958:	69fb      	ldr	r3, [r7, #28]
 801e95a:	f043 0302 	orr.w	r3, r3, #2
 801e95e:	61fb      	str	r3, [r7, #28]
                    }

                    can_->FilterRegister[filter_start_index + i].FR1 = id;
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	691b      	ldr	r3, [r3, #16]
 801e964:	7ef9      	ldrb	r1, [r7, #27]
 801e966:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e96a:	440a      	add	r2, r1
 801e96c:	3248      	adds	r2, #72	; 0x48
 801e96e:	6a39      	ldr	r1, [r7, #32]
 801e970:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                    can_->FilterRegister[filter_start_index + i].FR2 = mask;
 801e974:	68fb      	ldr	r3, [r7, #12]
 801e976:	691a      	ldr	r2, [r3, #16]
 801e978:	7ef9      	ldrb	r1, [r7, #27]
 801e97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e97e:	440b      	add	r3, r1
 801e980:	3348      	adds	r3, #72	; 0x48
 801e982:	00db      	lsls	r3, r3, #3
 801e984:	4413      	add	r3, r2
 801e986:	69fa      	ldr	r2, [r7, #28]
 801e988:	605a      	str	r2, [r3, #4]

                    can_->FA1R |= (1 << (filter_start_index + i));
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	691b      	ldr	r3, [r3, #16]
 801e98e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801e992:	7ef9      	ldrb	r1, [r7, #27]
 801e994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e998:	440b      	add	r3, r1
 801e99a:	2101      	movs	r1, #1
 801e99c:	fa01 f303 	lsl.w	r3, r1, r3
 801e9a0:	4619      	mov	r1, r3
 801e9a2:	68fb      	ldr	r3, [r7, #12]
 801e9a4:	691b      	ldr	r3, [r3, #16]
 801e9a6:	430a      	orrs	r2, r1
 801e9a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 801e9ac:	e011      	b.n	801e9d2 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x1de>
                }
                else
                {
                    can_->FA1R &= ~(1 << (filter_start_index + i));
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	691b      	ldr	r3, [r3, #16]
 801e9b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801e9b6:	7ef9      	ldrb	r1, [r7, #27]
 801e9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e9bc:	440b      	add	r3, r1
 801e9be:	2101      	movs	r1, #1
 801e9c0:	fa01 f303 	lsl.w	r3, r1, r3
 801e9c4:	43db      	mvns	r3, r3
 801e9c6:	4619      	mov	r1, r3
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	691b      	ldr	r3, [r3, #16]
 801e9cc:	400a      	ands	r2, r1
 801e9ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
            for (uint8_t i = 0; i < NumFilters; i++)
 801e9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e9d6:	3301      	adds	r3, #1
 801e9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e9dc:	e773      	b.n	801e8c6 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0xd2>
                }
            }
        }

        can_->FMR &= ~bxcan::FMR_FINIT;
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	691b      	ldr	r3, [r3, #16]
 801e9e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801e9e6:	68fb      	ldr	r3, [r7, #12]
 801e9e8:	691b      	ldr	r3, [r3, #16]
 801e9ea:	f022 0201 	bic.w	r2, r2, #1
 801e9ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

        return 0;
 801e9f2:	2400      	movs	r4, #0
        CriticalSectionLocker lock;
 801e9f4:	f107 0310 	add.w	r3, r7, #16
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	f7ff fb21 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
 801e9fe:	e000      	b.n	801ea02 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x20e>
    }

    return -ErrFilterNumConfigs;
 801ea00:	4c03      	ldr	r4, [pc, #12]	; (801ea10 <_ZN12uavcan_stm328CanIface16configureFiltersEPKN6uavcan15CanFilterConfigEt+0x21c>)
 801ea02:	4623      	mov	r3, r4
}
 801ea04:	4618      	mov	r0, r3
 801ea06:	372c      	adds	r7, #44	; 0x2c
 801ea08:	46bd      	mov	sp, r7
 801ea0a:	bd90      	pop	{r4, r7, pc}
 801ea0c:	0aaaaaaa 	.word	0x0aaaaaaa
 801ea10:	fffffc10 	.word	0xfffffc10

0801ea14 <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb>:

bool CanIface::waitMsrINakBitStateChange(bool target_state)
{
 801ea14:	b580      	push	{r7, lr}
 801ea16:	b086      	sub	sp, #24
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
 801ea1c:	460b      	mov	r3, r1
 801ea1e:	70fb      	strb	r3, [r7, #3]
#if UAVCAN_STM32_NUTTX || UAVCAN_STM32_CHIBIOS || UAVCAN_STM32_FREERTOS
    const unsigned Timeout = 1000;
 801ea20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ea24:	613b      	str	r3, [r7, #16]
#else
    const unsigned Timeout = 2000000;
#endif
    for (unsigned wait_ack = 0; wait_ack < Timeout; wait_ack++)
 801ea26:	2300      	movs	r3, #0
 801ea28:	617b      	str	r3, [r7, #20]
 801ea2a:	697b      	ldr	r3, [r7, #20]
 801ea2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ea30:	d216      	bcs.n	801ea60 <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb+0x4c>
    {
        const bool state = (can_->MSR & bxcan::MSR_INAK) != 0;
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	691b      	ldr	r3, [r3, #16]
 801ea36:	685b      	ldr	r3, [r3, #4]
 801ea38:	f003 0301 	and.w	r3, r3, #1
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	bf14      	ite	ne
 801ea40:	2301      	movne	r3, #1
 801ea42:	2300      	moveq	r3, #0
 801ea44:	73fb      	strb	r3, [r7, #15]
        if (state == target_state)
 801ea46:	7bfa      	ldrb	r2, [r7, #15]
 801ea48:	78fb      	ldrb	r3, [r7, #3]
 801ea4a:	429a      	cmp	r2, r3
 801ea4c:	d101      	bne.n	801ea52 <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb+0x3e>
        {
            return true;
 801ea4e:	2301      	movs	r3, #1
 801ea50:	e007      	b.n	801ea62 <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb+0x4e>
#else
        ::chThdSleep(TIME_MS2I(1));
#endif
#endif
#if UAVCAN_STM32_FREERTOS
        ::osDelay(1);
 801ea52:	2001      	movs	r0, #1
 801ea54:	f7e4 fc63 	bl	800331e <osDelay>
    for (unsigned wait_ack = 0; wait_ack < Timeout; wait_ack++)
 801ea58:	697b      	ldr	r3, [r7, #20]
 801ea5a:	3301      	adds	r3, #1
 801ea5c:	617b      	str	r3, [r7, #20]
 801ea5e:	e7e4      	b.n	801ea2a <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb+0x16>
#endif
    }
    return false;
 801ea60:	2300      	movs	r3, #0
}
 801ea62:	4618      	mov	r0, r3
 801ea64:	3718      	adds	r7, #24
 801ea66:	46bd      	mov	sp, r7
 801ea68:	bd80      	pop	{r7, pc}
	...

0801ea6c <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE>:

int CanIface::init(const uavcan::uint32_t bitrate, const OperatingMode mode)
{
 801ea6c:	b590      	push	{r4, r7, lr}
 801ea6e:	b093      	sub	sp, #76	; 0x4c
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	60f8      	str	r0, [r7, #12]
 801ea74:	60b9      	str	r1, [r7, #8]
 801ea76:	4613      	mov	r3, r2
 801ea78:	71fb      	strb	r3, [r7, #7]
    /*
     * We need to silence the controller in the first order, otherwise it may interfere with the following operations.
     */
    {
        CriticalSectionLocker lock;
 801ea7a:	f107 0314 	add.w	r3, r7, #20
 801ea7e:	4618      	mov	r0, r3
 801ea80:	f7ff fad3 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>

        can_->MCR &= ~bxcan::MCR_SLEEP; // Exit sleep mode
 801ea84:	68fb      	ldr	r3, [r7, #12]
 801ea86:	691b      	ldr	r3, [r3, #16]
 801ea88:	681a      	ldr	r2, [r3, #0]
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	691b      	ldr	r3, [r3, #16]
 801ea8e:	f022 0202 	bic.w	r2, r2, #2
 801ea92:	601a      	str	r2, [r3, #0]
        can_->MCR |= bxcan::MCR_INRQ;   // Request init
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	691b      	ldr	r3, [r3, #16]
 801ea98:	681a      	ldr	r2, [r3, #0]
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	691b      	ldr	r3, [r3, #16]
 801ea9e:	f042 0201 	orr.w	r2, r2, #1
 801eaa2:	601a      	str	r2, [r3, #0]

        can_->IER = 0;                  // Disable interrupts while initialization is in progress
 801eaa4:	68fb      	ldr	r3, [r7, #12]
 801eaa6:	691b      	ldr	r3, [r3, #16]
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	615a      	str	r2, [r3, #20]
        CriticalSectionLocker lock;
 801eaac:	f107 0314 	add.w	r3, r7, #20
 801eab0:	4618      	mov	r0, r3
 801eab2:	f7ff fac5 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
    }

    if (!waitMsrINakBitStateChange(true))
 801eab6:	2101      	movs	r1, #1
 801eab8:	68f8      	ldr	r0, [r7, #12]
 801eaba:	f7ff ffab 	bl	801ea14 <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb>
 801eabe:	4603      	mov	r3, r0
 801eac0:	f083 0301 	eor.w	r3, r3, #1
 801eac4:	b2db      	uxtb	r3, r3
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d007      	beq.n	801eada <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x6e>
    {
        UAVCAN_STM32_LOG("MSR INAK not set");
        can_->MCR = bxcan::MCR_RESET;
 801eaca:	68fb      	ldr	r3, [r7, #12]
 801eacc:	691b      	ldr	r3, [r3, #16]
 801eace:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801ead2:	601a      	str	r2, [r3, #0]
        return -ErrMsrInakNotSet;
 801ead4:	f46f 737b 	mvn.w	r3, #1004	; 0x3ec
 801ead8:	e0ce      	b.n	801ec78 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x20c>
    }

    /*
     * Object state - interrupts are disabled, so it's safe to modify it now
     */
    rx_queue_.reset();
 801eada:	68fb      	ldr	r3, [r7, #12]
 801eadc:	3304      	adds	r3, #4
 801eade:	4618      	mov	r0, r3
 801eae0:	f7ff fc08 	bl	801e2f4 <_ZN12uavcan_stm328CanIface7RxQueue5resetEv>
    error_cnt_ = 0;
 801eae4:	68fa      	ldr	r2, [r7, #12]
 801eae6:	f04f 0300 	mov.w	r3, #0
 801eaea:	f04f 0400 	mov.w	r4, #0
 801eaee:	e9c2 3406 	strd	r3, r4, [r2, #24]
    served_aborts_cnt_ = 0;
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	2200      	movs	r2, #0
 801eaf6:	621a      	str	r2, [r3, #32]
    uavcan::fill_n(pending_tx_, NumTxMailboxes, TxItem());
 801eaf8:	68fb      	ldr	r3, [r7, #12]
 801eafa:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801eafe:	f107 0320 	add.w	r3, r7, #32
 801eb02:	4618      	mov	r0, r3
 801eb04:	f7e9 f897 	bl	8007c36 <_ZN12uavcan_stm328CanIface6TxItemC1Ev>
 801eb08:	f107 0320 	add.w	r3, r7, #32
 801eb0c:	461a      	mov	r2, r3
 801eb0e:	2103      	movs	r1, #3
 801eb10:	4620      	mov	r0, r4
 801eb12:	f000 fd0d 	bl	801f530 <_ZN6uavcan6fill_nIPN12uavcan_stm328CanIface6TxItemES3_EEvT_jRKT0_>
 801eb16:	f107 0320 	add.w	r3, r7, #32
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	f7e9 f8b6 	bl	8007c8c <_ZN12uavcan_stm328CanIface6TxItemD1Ev>
    peak_tx_mailbox_index_ = 0;
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	2200      	movs	r2, #0
 801eb24:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    had_activity_ = false;
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	2200      	movs	r2, #0
 801eb2c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a

    /*
     * CAN timings for this bitrate
     */
    Timings timings;
 801eb30:	f107 0318 	add.w	r3, r7, #24
 801eb34:	4618      	mov	r0, r3
 801eb36:	f7ff fa4b 	bl	801dfd0 <_ZN12uavcan_stm328CanIface7TimingsC1Ev>
    const int timings_res = computeTimings(bitrate, timings);
 801eb3a:	f107 0318 	add.w	r3, r7, #24
 801eb3e:	461a      	mov	r2, r3
 801eb40:	68b9      	ldr	r1, [r7, #8]
 801eb42:	68f8      	ldr	r0, [r7, #12]
 801eb44:	f7ff fc44 	bl	801e3d0 <_ZN12uavcan_stm328CanIface14computeTimingsEmRNS0_7TimingsE>
 801eb48:	6478      	str	r0, [r7, #68]	; 0x44
    if (timings_res < 0)
 801eb4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	da06      	bge.n	801eb5e <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0xf2>
    {
        can_->MCR = bxcan::MCR_RESET;
 801eb50:	68fb      	ldr	r3, [r7, #12]
 801eb52:	691b      	ldr	r3, [r3, #16]
 801eb54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801eb58:	601a      	str	r2, [r3, #0]
        return timings_res;
 801eb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801eb5c:	e08c      	b.n	801ec78 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x20c>
                     unsigned(timings.prescaler), unsigned(timings.sjw), unsigned(timings.bs1), unsigned(timings.bs2));

    /*
     * Hardware initialization (the hardware has already confirmed initialization mode, see above)
     */
    can_->MCR = bxcan::MCR_ABOM | bxcan::MCR_AWUM | bxcan::MCR_INRQ;  // RM page 648
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	691b      	ldr	r3, [r3, #16]
 801eb62:	2261      	movs	r2, #97	; 0x61
 801eb64:	601a      	str	r2, [r3, #0]

    can_->BTR = ((timings.sjw & 3U)  << 24) |
 801eb66:	7ebb      	ldrb	r3, [r7, #26]
 801eb68:	061b      	lsls	r3, r3, #24
 801eb6a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
                ((timings.bs1 & 15U) << 16) |
 801eb6e:	7efb      	ldrb	r3, [r7, #27]
 801eb70:	041b      	lsls	r3, r3, #16
 801eb72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    can_->BTR = ((timings.sjw & 3U)  << 24) |
 801eb76:	431a      	orrs	r2, r3
                ((timings.bs2 & 7U)  << 20) |
 801eb78:	7f3b      	ldrb	r3, [r7, #28]
 801eb7a:	051b      	lsls	r3, r3, #20
 801eb7c:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
                ((timings.bs1 & 15U) << 16) |
 801eb80:	431a      	orrs	r2, r3
                (timings.prescaler & 1023U) |
 801eb82:	8b3b      	ldrh	r3, [r7, #24]
 801eb84:	f3c3 0309 	ubfx	r3, r3, #0, #10
                ((timings.bs2 & 7U)  << 20) |
 801eb88:	431a      	orrs	r2, r3
                ((mode == SilentMode) ? bxcan::BTR_SILM : 0);
 801eb8a:	79fb      	ldrb	r3, [r7, #7]
 801eb8c:	2b01      	cmp	r3, #1
 801eb8e:	d102      	bne.n	801eb96 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x12a>
 801eb90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801eb94:	e000      	b.n	801eb98 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x12c>
 801eb96:	2100      	movs	r1, #0
    can_->BTR = ((timings.sjw & 3U)  << 24) |
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	691b      	ldr	r3, [r3, #16]
                (timings.prescaler & 1023U) |
 801eb9c:	430a      	orrs	r2, r1
    can_->BTR = ((timings.sjw & 3U)  << 24) |
 801eb9e:	61da      	str	r2, [r3, #28]

    can_->IER = bxcan::IER_TMEIE |   // TX mailbox empty
 801eba0:	68fb      	ldr	r3, [r7, #12]
 801eba2:	691b      	ldr	r3, [r3, #16]
 801eba4:	2213      	movs	r2, #19
 801eba6:	615a      	str	r2, [r3, #20]
                bxcan::IER_FMPIE0 |  // RX FIFO 0 is not empty
                bxcan::IER_FMPIE1;   // RX FIFO 1 is not empty

    can_->MCR &= ~bxcan::MCR_INRQ;   // Leave init mode
 801eba8:	68fb      	ldr	r3, [r7, #12]
 801ebaa:	691b      	ldr	r3, [r3, #16]
 801ebac:	681a      	ldr	r2, [r3, #0]
 801ebae:	68fb      	ldr	r3, [r7, #12]
 801ebb0:	691b      	ldr	r3, [r3, #16]
 801ebb2:	f022 0201 	bic.w	r2, r2, #1
 801ebb6:	601a      	str	r2, [r3, #0]

    if (!waitMsrINakBitStateChange(false))
 801ebb8:	2100      	movs	r1, #0
 801ebba:	68f8      	ldr	r0, [r7, #12]
 801ebbc:	f7ff ff2a 	bl	801ea14 <_ZN12uavcan_stm328CanIface25waitMsrINakBitStateChangeEb>
 801ebc0:	4603      	mov	r3, r0
 801ebc2:	f083 0301 	eor.w	r3, r3, #1
 801ebc6:	b2db      	uxtb	r3, r3
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d006      	beq.n	801ebda <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x16e>
    {
        UAVCAN_STM32_LOG("MSR INAK not cleared");
        can_->MCR = bxcan::MCR_RESET;
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	691b      	ldr	r3, [r3, #16]
 801ebd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801ebd4:	601a      	str	r2, [r3, #0]
        return -ErrMsrInakNotCleared;
 801ebd6:	4b2a      	ldr	r3, [pc, #168]	; (801ec80 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x214>)
 801ebd8:	e04e      	b.n	801ec78 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x20c>
    }

    /*
     * Default filter configuration
     */
    if (self_index_ == 0)
 801ebda:	68fb      	ldr	r3, [r7, #12]
 801ebdc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d148      	bne.n	801ec76 <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE+0x20a>
    {
        can_->FMR |= bxcan::FMR_FINIT;
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	691b      	ldr	r3, [r3, #16]
 801ebe8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801ebec:	68fb      	ldr	r3, [r7, #12]
 801ebee:	691b      	ldr	r3, [r3, #16]
 801ebf0:	f042 0201 	orr.w	r2, r2, #1
 801ebf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

        can_->FMR &= 0xFFFFC0F1;
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	691b      	ldr	r3, [r3, #16]
 801ebfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801ec00:	68fa      	ldr	r2, [r7, #12]
 801ec02:	6912      	ldr	r2, [r2, #16]
 801ec04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ec08:	f023 030e 	bic.w	r3, r3, #14
 801ec0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
        can_->FMR |= static_cast<uavcan::uint32_t>(NumFilters) << 8;  // Slave (CAN2) gets half of the filters
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	691b      	ldr	r3, [r3, #16]
 801ec14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	691b      	ldr	r3, [r3, #16]
 801ec1c:	f442 6260 	orr.w	r2, r2, #3584	; 0xe00
 801ec20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

        can_->FFA1R = 0;                           // All assigned to FIFO0 by default
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	691b      	ldr	r3, [r3, #16]
 801ec28:	2200      	movs	r2, #0
 801ec2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
        can_->FM1R = 0;                            // Indentifier Mask mode
 801ec2e:	68fb      	ldr	r3, [r7, #12]
 801ec30:	691b      	ldr	r3, [r3, #16]
 801ec32:	2200      	movs	r2, #0
 801ec34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        can_->FilterRegister[0].FR2 = 0;
        can_->FilterRegister[NumFilters].FR1 = 0; // CAN2 accepts everything
        can_->FilterRegister[NumFilters].FR2 = 0;
        can_->FA1R = 1 | (1 << NumFilters);        // One filter per each iface
#else
        can_->FS1R = 0x1fff;
 801ec38:	68fb      	ldr	r3, [r7, #12]
 801ec3a:	691b      	ldr	r3, [r3, #16]
 801ec3c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 801ec40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        can_->FilterRegister[0].FR1 = 0;
 801ec44:	68fb      	ldr	r3, [r7, #12]
 801ec46:	691b      	ldr	r3, [r3, #16]
 801ec48:	2200      	movs	r2, #0
 801ec4a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
        can_->FilterRegister[0].FR2 = 0;
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	691b      	ldr	r3, [r3, #16]
 801ec52:	2200      	movs	r2, #0
 801ec54:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
        can_->FA1R = 1;
 801ec58:	68fb      	ldr	r3, [r7, #12]
 801ec5a:	691b      	ldr	r3, [r3, #16]
 801ec5c:	2201      	movs	r2, #1
 801ec5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
#endif

        can_->FMR &= ~bxcan::FMR_FINIT;
 801ec62:	68fb      	ldr	r3, [r7, #12]
 801ec64:	691b      	ldr	r3, [r3, #16]
 801ec66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	691b      	ldr	r3, [r3, #16]
 801ec6e:	f022 0201 	bic.w	r2, r2, #1
 801ec72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    }

    return 0;
 801ec76:	2300      	movs	r3, #0
}
 801ec78:	4618      	mov	r0, r3
 801ec7a:	374c      	adds	r7, #76	; 0x4c
 801ec7c:	46bd      	mov	sp, r7
 801ec7e:	bd90      	pop	{r4, r7, pc}
 801ec80:	fffffc12 	.word	0xfffffc12

0801ec84 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby>:

void CanIface::handleTxMailboxInterrupt(uavcan::uint8_t mailbox_index, bool txok, const uavcan::uint64_t utc_usec)
{
 801ec84:	b580      	push	{r7, lr}
 801ec86:	b084      	sub	sp, #16
 801ec88:	af00      	add	r7, sp, #0
 801ec8a:	6078      	str	r0, [r7, #4]
 801ec8c:	460b      	mov	r3, r1
 801ec8e:	70fb      	strb	r3, [r7, #3]
 801ec90:	4613      	mov	r3, r2
 801ec92:	70bb      	strb	r3, [r7, #2]
    UAVCAN_ASSERT(mailbox_index < NumTxMailboxes);
 801ec94:	78fb      	ldrb	r3, [r7, #3]
 801ec96:	2b02      	cmp	r3, #2
 801ec98:	d906      	bls.n	801eca8 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x24>
 801ec9a:	4b1b      	ldr	r3, [pc, #108]	; (801ed08 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x84>)
 801ec9c:	4a1b      	ldr	r2, [pc, #108]	; (801ed0c <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x88>)
 801ec9e:	f240 219e 	movw	r1, #670	; 0x29e
 801eca2:	481b      	ldr	r0, [pc, #108]	; (801ed10 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x8c>)
 801eca4:	f001 fc72 	bl	802058c <__assert_func>

    had_activity_ = had_activity_ || txok;
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d102      	bne.n	801ecb8 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x34>
 801ecb2:	78bb      	ldrb	r3, [r7, #2]
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	d001      	beq.n	801ecbc <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x38>
 801ecb8:	2201      	movs	r2, #1
 801ecba:	e000      	b.n	801ecbe <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x3a>
 801ecbc:	2200      	movs	r2, #0
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a

    TxItem& txi = pending_tx_[mailbox_index];
 801ecc4:	78fb      	ldrb	r3, [r7, #3]
 801ecc6:	015b      	lsls	r3, r3, #5
 801ecc8:	3328      	adds	r3, #40	; 0x28
 801ecca:	687a      	ldr	r2, [r7, #4]
 801eccc:	4413      	add	r3, r2
 801ecce:	60fb      	str	r3, [r7, #12]

    if (txi.loopback && txok && txi.pending)
 801ecd0:	68fb      	ldr	r3, [r7, #12]
 801ecd2:	7e5b      	ldrb	r3, [r3, #25]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d010      	beq.n	801ecfa <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x76>
 801ecd8:	78bb      	ldrb	r3, [r7, #2]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d00d      	beq.n	801ecfa <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x76>
 801ecde:	68fb      	ldr	r3, [r7, #12]
 801ece0:	7e1b      	ldrb	r3, [r3, #24]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d009      	beq.n	801ecfa <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby+0x76>
    {
        rx_queue_.push(txi.frame, utc_usec, uavcan::CanIOFlagLoopback);
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	1d18      	adds	r0, r3, #4
 801ecea:	68fb      	ldr	r3, [r7, #12]
 801ecec:	f103 0108 	add.w	r1, r3, #8
 801ecf0:	2301      	movs	r3, #1
 801ecf2:	f107 0218 	add.w	r2, r7, #24
 801ecf6:	f7ff fa49 	bl	801e18c <_ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt>
    }

    txi.pending = false;
 801ecfa:	68fb      	ldr	r3, [r7, #12]
 801ecfc:	2200      	movs	r2, #0
 801ecfe:	761a      	strb	r2, [r3, #24]
}
 801ed00:	bf00      	nop
 801ed02:	3710      	adds	r7, #16
 801ed04:	46bd      	mov	sp, r7
 801ed06:	bd80      	pop	{r7, pc}
 801ed08:	08024cec 	.word	0x08024cec
 801ed0c:	0802c99c 	.word	0x0802c99c
 801ed10:	08024c20 	.word	0x08024c20

0801ed14 <_ZN12uavcan_stm328CanIface17handleTxInterruptEy>:

void CanIface::handleTxInterrupt(const uavcan::uint64_t utc_usec)
{
 801ed14:	b590      	push	{r4, r7, lr}
 801ed16:	b089      	sub	sp, #36	; 0x24
 801ed18:	af02      	add	r7, sp, #8
 801ed1a:	60f8      	str	r0, [r7, #12]
 801ed1c:	e9c7 2300 	strd	r2, r3, [r7]
    // TXOK == false means that there was a hardware failure
    if (can_->TSR & bxcan::TSR_RQCP0)
 801ed20:	68fb      	ldr	r3, [r7, #12]
 801ed22:	691b      	ldr	r3, [r3, #16]
 801ed24:	689b      	ldr	r3, [r3, #8]
 801ed26:	f003 0301 	and.w	r3, r3, #1
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	bf14      	ite	ne
 801ed2e:	2301      	movne	r3, #1
 801ed30:	2300      	moveq	r3, #0
 801ed32:	b2db      	uxtb	r3, r3
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	d016      	beq.n	801ed66 <_ZN12uavcan_stm328CanIface17handleTxInterruptEy+0x52>
    {
        const bool txok = can_->TSR & bxcan::TSR_TXOK0;
 801ed38:	68fb      	ldr	r3, [r7, #12]
 801ed3a:	691b      	ldr	r3, [r3, #16]
 801ed3c:	689b      	ldr	r3, [r3, #8]
 801ed3e:	f003 0302 	and.w	r3, r3, #2
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	bf14      	ite	ne
 801ed46:	2301      	movne	r3, #1
 801ed48:	2300      	moveq	r3, #0
 801ed4a:	75fb      	strb	r3, [r7, #23]
        can_->TSR = bxcan::TSR_RQCP0;
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	691b      	ldr	r3, [r3, #16]
 801ed50:	2201      	movs	r2, #1
 801ed52:	609a      	str	r2, [r3, #8]
        handleTxMailboxInterrupt(0, txok, utc_usec);
 801ed54:	7dfa      	ldrb	r2, [r7, #23]
 801ed56:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ed5a:	e9cd 3400 	strd	r3, r4, [sp]
 801ed5e:	2100      	movs	r1, #0
 801ed60:	68f8      	ldr	r0, [r7, #12]
 801ed62:	f7ff ff8f 	bl	801ec84 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby>
    }
    if (can_->TSR & bxcan::TSR_RQCP1)
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	691b      	ldr	r3, [r3, #16]
 801ed6a:	689b      	ldr	r3, [r3, #8]
 801ed6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	bf14      	ite	ne
 801ed74:	2301      	movne	r3, #1
 801ed76:	2300      	moveq	r3, #0
 801ed78:	b2db      	uxtb	r3, r3
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d017      	beq.n	801edae <_ZN12uavcan_stm328CanIface17handleTxInterruptEy+0x9a>
    {
        const bool txok = can_->TSR & bxcan::TSR_TXOK1;
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	691b      	ldr	r3, [r3, #16]
 801ed82:	689b      	ldr	r3, [r3, #8]
 801ed84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	bf14      	ite	ne
 801ed8c:	2301      	movne	r3, #1
 801ed8e:	2300      	moveq	r3, #0
 801ed90:	75bb      	strb	r3, [r7, #22]
        can_->TSR = bxcan::TSR_RQCP1;
 801ed92:	68fb      	ldr	r3, [r7, #12]
 801ed94:	691b      	ldr	r3, [r3, #16]
 801ed96:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ed9a:	609a      	str	r2, [r3, #8]
        handleTxMailboxInterrupt(1, txok, utc_usec);
 801ed9c:	7dba      	ldrb	r2, [r7, #22]
 801ed9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801eda2:	e9cd 3400 	strd	r3, r4, [sp]
 801eda6:	2101      	movs	r1, #1
 801eda8:	68f8      	ldr	r0, [r7, #12]
 801edaa:	f7ff ff6b 	bl	801ec84 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby>
    }
    if (can_->TSR & bxcan::TSR_RQCP2)
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	691b      	ldr	r3, [r3, #16]
 801edb2:	689b      	ldr	r3, [r3, #8]
 801edb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801edb8:	2b00      	cmp	r3, #0
 801edba:	bf14      	ite	ne
 801edbc:	2301      	movne	r3, #1
 801edbe:	2300      	moveq	r3, #0
 801edc0:	b2db      	uxtb	r3, r3
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d017      	beq.n	801edf6 <_ZN12uavcan_stm328CanIface17handleTxInterruptEy+0xe2>
    {
        const bool txok = can_->TSR & bxcan::TSR_TXOK2;
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	691b      	ldr	r3, [r3, #16]
 801edca:	689b      	ldr	r3, [r3, #8]
 801edcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	bf14      	ite	ne
 801edd4:	2301      	movne	r3, #1
 801edd6:	2300      	moveq	r3, #0
 801edd8:	757b      	strb	r3, [r7, #21]
        can_->TSR = bxcan::TSR_RQCP2;
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	691b      	ldr	r3, [r3, #16]
 801edde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801ede2:	609a      	str	r2, [r3, #8]
        handleTxMailboxInterrupt(2, txok, utc_usec);
 801ede4:	7d7a      	ldrb	r2, [r7, #21]
 801ede6:	e9d7 3400 	ldrd	r3, r4, [r7]
 801edea:	e9cd 3400 	strd	r3, r4, [sp]
 801edee:	2102      	movs	r1, #2
 801edf0:	68f8      	ldr	r0, [r7, #12]
 801edf2:	f7ff ff47 	bl	801ec84 <_ZN12uavcan_stm328CanIface24handleTxMailboxInterruptEhby>
    }
    update_event_.signalFromInterrupt();
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edfa:	4618      	mov	r0, r3
 801edfc:	f001 fb20 	bl	8020440 <_ZN12uavcan_stm328BusEvent19signalFromInterruptEv>

    pollErrorFlagsFromISR();
 801ee00:	68f8      	ldr	r0, [r7, #12]
 801ee02:	f000 f8d9 	bl	801efb8 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv>

    #if UAVCAN_STM32_FREERTOS
    update_event_.yieldFromISR();
 801ee06:	68fb      	ldr	r3, [r7, #12]
 801ee08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee0a:	4618      	mov	r0, r3
 801ee0c:	f001 fb2c 	bl	8020468 <_ZN12uavcan_stm328BusEvent12yieldFromISREv>
    #endif
}
 801ee10:	bf00      	nop
 801ee12:	371c      	adds	r7, #28
 801ee14:	46bd      	mov	sp, r7
 801ee16:	bd90      	pop	{r4, r7, pc}

0801ee18 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy>:

void CanIface::handleRxInterrupt(uavcan::uint8_t fifo_index, uavcan::uint64_t utc_usec)
{
 801ee18:	b590      	push	{r4, r7, lr}
 801ee1a:	b08b      	sub	sp, #44	; 0x2c
 801ee1c:	af00      	add	r7, sp, #0
 801ee1e:	60f8      	str	r0, [r7, #12]
 801ee20:	e9c7 2300 	strd	r2, r3, [r7]
 801ee24:	460b      	mov	r3, r1
 801ee26:	72fb      	strb	r3, [r7, #11]
    UAVCAN_ASSERT(fifo_index < 2);
 801ee28:	7afb      	ldrb	r3, [r7, #11]
 801ee2a:	2b01      	cmp	r3, #1
 801ee2c:	d906      	bls.n	801ee3c <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x24>
 801ee2e:	4b5e      	ldr	r3, [pc, #376]	; (801efa8 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x190>)
 801ee30:	4a5e      	ldr	r2, [pc, #376]	; (801efac <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x194>)
 801ee32:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ee36:	485e      	ldr	r0, [pc, #376]	; (801efb0 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x198>)
 801ee38:	f001 fba8 	bl	802058c <__assert_func>

    volatile uavcan::uint32_t* const rfr_reg = (fifo_index == 0) ? &can_->RF0R : &can_->RF1R;
 801ee3c:	7afb      	ldrb	r3, [r7, #11]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d103      	bne.n	801ee4a <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x32>
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	691b      	ldr	r3, [r3, #16]
 801ee46:	330c      	adds	r3, #12
 801ee48:	e002      	b.n	801ee50 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x38>
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	691b      	ldr	r3, [r3, #16]
 801ee4e:	3310      	adds	r3, #16
 801ee50:	627b      	str	r3, [r7, #36]	; 0x24
    if ((*rfr_reg & bxcan::RFR_FMP_MASK) == 0)
 801ee52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee54:	681b      	ldr	r3, [r3, #0]
 801ee56:	f003 0303 	and.w	r3, r3, #3
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	bf0c      	ite	eq
 801ee5e:	2301      	moveq	r3, #1
 801ee60:	2300      	movne	r3, #0
 801ee62:	b2db      	uxtb	r3, r3
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d006      	beq.n	801ee76 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x5e>
    {
        UAVCAN_ASSERT(0);  // Weird, IRQ is here but no data to read
 801ee68:	4b52      	ldr	r3, [pc, #328]	; (801efb4 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x19c>)
 801ee6a:	4a50      	ldr	r2, [pc, #320]	; (801efac <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x194>)
 801ee6c:	f240 21d1 	movw	r1, #721	; 0x2d1
 801ee70:	484f      	ldr	r0, [pc, #316]	; (801efb0 <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x198>)
 801ee72:	f001 fb8b 	bl	802058c <__assert_func>
    }

    /*
     * Register overflow as a hardware error
     */
    if ((*rfr_reg & bxcan::RFR_FOVR) != 0)
 801ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	f003 0310 	and.w	r3, r3, #16
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	bf14      	ite	ne
 801ee82:	2301      	movne	r3, #1
 801ee84:	2300      	moveq	r3, #0
 801ee86:	b2db      	uxtb	r3, r3
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d008      	beq.n	801ee9e <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0x86>
    {
        error_cnt_++;
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 801ee92:	1c4b      	adds	r3, r1, #1
 801ee94:	f142 0400 	adc.w	r4, r2, #0
 801ee98:	68fa      	ldr	r2, [r7, #12]
 801ee9a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    }

    /*
     * Read the frame contents
     */
    uavcan::CanFrame frame;
 801ee9e:	f107 0310 	add.w	r3, r7, #16
 801eea2:	4618      	mov	r0, r3
 801eea4:	f7e7 f8ba 	bl	800601c <_ZN6uavcan8CanFrameC1Ev>
    const bxcan::RxMailboxType& rf = can_->RxMailbox[fifo_index];
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	691a      	ldr	r2, [r3, #16]
 801eeac:	7afb      	ldrb	r3, [r7, #11]
 801eeae:	331b      	adds	r3, #27
 801eeb0:	011b      	lsls	r3, r3, #4
 801eeb2:	4413      	add	r3, r2
 801eeb4:	623b      	str	r3, [r7, #32]

    if ((rf.RIR & bxcan::RIR_IDE) == 0)
 801eeb6:	6a3b      	ldr	r3, [r7, #32]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	f003 0304 	and.w	r3, r3, #4
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	bf0c      	ite	eq
 801eec2:	2301      	moveq	r3, #1
 801eec4:	2300      	movne	r3, #0
 801eec6:	b2db      	uxtb	r3, r3
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d006      	beq.n	801eeda <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0xc2>
    {
        frame.id = uavcan::CanFrame::MaskStdID & (rf.RIR >> 21);
 801eecc:	6a3b      	ldr	r3, [r7, #32]
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	0d5b      	lsrs	r3, r3, #21
 801eed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801eed6:	613b      	str	r3, [r7, #16]
 801eed8:	e009      	b.n	801eeee <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0xd6>
    }
    else
    {
        frame.id = uavcan::CanFrame::MaskExtID & (rf.RIR >> 3);
 801eeda:	6a3b      	ldr	r3, [r7, #32]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	08db      	lsrs	r3, r3, #3
 801eee0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 801eee4:	613b      	str	r3, [r7, #16]
        frame.id |= uavcan::CanFrame::FlagEFF;
 801eee6:	693b      	ldr	r3, [r7, #16]
 801eee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801eeec:	613b      	str	r3, [r7, #16]
    }

    if ((rf.RIR & bxcan::RIR_RTR) != 0)
 801eeee:	6a3b      	ldr	r3, [r7, #32]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	f003 0302 	and.w	r3, r3, #2
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	bf14      	ite	ne
 801eefa:	2301      	movne	r3, #1
 801eefc:	2300      	moveq	r3, #0
 801eefe:	b2db      	uxtb	r3, r3
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d003      	beq.n	801ef0c <_ZN12uavcan_stm328CanIface17handleRxInterruptEhy+0xf4>
    {
        frame.id |= uavcan::CanFrame::FlagRTR;
 801ef04:	693b      	ldr	r3, [r7, #16]
 801ef06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801ef0a:	613b      	str	r3, [r7, #16]
    }

    frame.dlc = rf.RDTR & 15;
 801ef0c:	6a3b      	ldr	r3, [r7, #32]
 801ef0e:	685b      	ldr	r3, [r3, #4]
 801ef10:	b2db      	uxtb	r3, r3
 801ef12:	f003 030f 	and.w	r3, r3, #15
 801ef16:	b2db      	uxtb	r3, r3
 801ef18:	773b      	strb	r3, [r7, #28]

    frame.data[0] = uavcan::uint8_t(0xFF & (rf.RDLR >> 0));
 801ef1a:	6a3b      	ldr	r3, [r7, #32]
 801ef1c:	689b      	ldr	r3, [r3, #8]
 801ef1e:	b2db      	uxtb	r3, r3
 801ef20:	753b      	strb	r3, [r7, #20]
    frame.data[1] = uavcan::uint8_t(0xFF & (rf.RDLR >> 8));
 801ef22:	6a3b      	ldr	r3, [r7, #32]
 801ef24:	689b      	ldr	r3, [r3, #8]
 801ef26:	0a1b      	lsrs	r3, r3, #8
 801ef28:	b2db      	uxtb	r3, r3
 801ef2a:	757b      	strb	r3, [r7, #21]
    frame.data[2] = uavcan::uint8_t(0xFF & (rf.RDLR >> 16));
 801ef2c:	6a3b      	ldr	r3, [r7, #32]
 801ef2e:	689b      	ldr	r3, [r3, #8]
 801ef30:	0c1b      	lsrs	r3, r3, #16
 801ef32:	b2db      	uxtb	r3, r3
 801ef34:	75bb      	strb	r3, [r7, #22]
    frame.data[3] = uavcan::uint8_t(0xFF & (rf.RDLR >> 24));
 801ef36:	6a3b      	ldr	r3, [r7, #32]
 801ef38:	689b      	ldr	r3, [r3, #8]
 801ef3a:	0e1b      	lsrs	r3, r3, #24
 801ef3c:	b2db      	uxtb	r3, r3
 801ef3e:	75fb      	strb	r3, [r7, #23]
    frame.data[4] = uavcan::uint8_t(0xFF & (rf.RDHR >> 0));
 801ef40:	6a3b      	ldr	r3, [r7, #32]
 801ef42:	68db      	ldr	r3, [r3, #12]
 801ef44:	b2db      	uxtb	r3, r3
 801ef46:	763b      	strb	r3, [r7, #24]
    frame.data[5] = uavcan::uint8_t(0xFF & (rf.RDHR >> 8));
 801ef48:	6a3b      	ldr	r3, [r7, #32]
 801ef4a:	68db      	ldr	r3, [r3, #12]
 801ef4c:	0a1b      	lsrs	r3, r3, #8
 801ef4e:	b2db      	uxtb	r3, r3
 801ef50:	767b      	strb	r3, [r7, #25]
    frame.data[6] = uavcan::uint8_t(0xFF & (rf.RDHR >> 16));
 801ef52:	6a3b      	ldr	r3, [r7, #32]
 801ef54:	68db      	ldr	r3, [r3, #12]
 801ef56:	0c1b      	lsrs	r3, r3, #16
 801ef58:	b2db      	uxtb	r3, r3
 801ef5a:	76bb      	strb	r3, [r7, #26]
    frame.data[7] = uavcan::uint8_t(0xFF & (rf.RDHR >> 24));
 801ef5c:	6a3b      	ldr	r3, [r7, #32]
 801ef5e:	68db      	ldr	r3, [r3, #12]
 801ef60:	0e1b      	lsrs	r3, r3, #24
 801ef62:	b2db      	uxtb	r3, r3
 801ef64:	76fb      	strb	r3, [r7, #27]

    *rfr_reg = bxcan::RFR_RFOM | bxcan::RFR_FOVR | bxcan::RFR_FULL;  // Release FIFO entry we just read
 801ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef68:	2238      	movs	r2, #56	; 0x38
 801ef6a:	601a      	str	r2, [r3, #0]

    /*
     * Store with timeout into the FIFO buffer and signal update event
     */
    rx_queue_.push(frame, utc_usec, 0);
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	1d18      	adds	r0, r3, #4
 801ef70:	463a      	mov	r2, r7
 801ef72:	f107 0110 	add.w	r1, r7, #16
 801ef76:	2300      	movs	r3, #0
 801ef78:	f7ff f908 	bl	801e18c <_ZN12uavcan_stm328CanIface7RxQueue4pushERKN6uavcan8CanFrameERKyt>
    had_activity_ = true;
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	2201      	movs	r2, #1
 801ef80:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    update_event_.signalFromInterrupt();
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef88:	4618      	mov	r0, r3
 801ef8a:	f001 fa59 	bl	8020440 <_ZN12uavcan_stm328BusEvent19signalFromInterruptEv>

    pollErrorFlagsFromISR();
 801ef8e:	68f8      	ldr	r0, [r7, #12]
 801ef90:	f000 f812 	bl	801efb8 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv>

    #if UAVCAN_STM32_FREERTOS
    update_event_.yieldFromISR();
 801ef94:	68fb      	ldr	r3, [r7, #12]
 801ef96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef98:	4618      	mov	r0, r3
 801ef9a:	f001 fa65 	bl	8020468 <_ZN12uavcan_stm328BusEvent12yieldFromISREv>
    #endif
}
 801ef9e:	bf00      	nop
 801efa0:	372c      	adds	r7, #44	; 0x2c
 801efa2:	46bd      	mov	sp, r7
 801efa4:	bd90      	pop	{r4, r7, pc}
 801efa6:	bf00      	nop
 801efa8:	08024d0c 	.word	0x08024d0c
 801efac:	0802c9fc 	.word	0x0802c9fc
 801efb0:	08024c20 	.word	0x08024c20
 801efb4:	08024ca8 	.word	0x08024ca8

0801efb8 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv>:

void CanIface::pollErrorFlagsFromISR()
{
 801efb8:	b490      	push	{r4, r7}
 801efba:	b086      	sub	sp, #24
 801efbc:	af00      	add	r7, sp, #0
 801efbe:	6078      	str	r0, [r7, #4]
    const uavcan::uint8_t lec = uavcan::uint8_t((can_->ESR & bxcan::ESR_LEC_MASK) >> bxcan::ESR_LEC_SHIFT);
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	691b      	ldr	r3, [r3, #16]
 801efc4:	699b      	ldr	r3, [r3, #24]
 801efc6:	091b      	lsrs	r3, r3, #4
 801efc8:	b2db      	uxtb	r3, r3
 801efca:	f003 0307 	and.w	r3, r3, #7
 801efce:	74fb      	strb	r3, [r7, #19]
    if (lec != 0)
 801efd0:	7cfb      	ldrb	r3, [r7, #19]
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d032      	beq.n	801f03c <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv+0x84>
    {
        can_->ESR = 0;
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	691b      	ldr	r3, [r3, #16]
 801efda:	2200      	movs	r2, #0
 801efdc:	619a      	str	r2, [r3, #24]
        error_cnt_++;
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 801efe4:	1c4b      	adds	r3, r1, #1
 801efe6:	f142 0400 	adc.w	r4, r2, #0
 801efea:	687a      	ldr	r2, [r7, #4]
 801efec:	e9c2 3406 	strd	r3, r4, [r2, #24]

        // Serving abort requests
        for (int i = 0; i < NumTxMailboxes; i++)    // Dear compiler, may I suggest you to unroll this loop please.
 801eff0:	2300      	movs	r3, #0
 801eff2:	617b      	str	r3, [r7, #20]
 801eff4:	697b      	ldr	r3, [r7, #20]
 801eff6:	2b02      	cmp	r3, #2
 801eff8:	dc20      	bgt.n	801f03c <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv+0x84>
        {
            TxItem& txi = pending_tx_[i];
 801effa:	697b      	ldr	r3, [r7, #20]
 801effc:	015b      	lsls	r3, r3, #5
 801effe:	3328      	adds	r3, #40	; 0x28
 801f000:	687a      	ldr	r2, [r7, #4]
 801f002:	4413      	add	r3, r2
 801f004:	60fb      	str	r3, [r7, #12]
            if (txi.pending && txi.abort_on_error)
 801f006:	68fb      	ldr	r3, [r7, #12]
 801f008:	7e1b      	ldrb	r3, [r3, #24]
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d012      	beq.n	801f034 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv+0x7c>
 801f00e:	68fb      	ldr	r3, [r7, #12]
 801f010:	7e9b      	ldrb	r3, [r3, #26]
 801f012:	2b00      	cmp	r3, #0
 801f014:	d00e      	beq.n	801f034 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv+0x7c>
            {
                can_->TSR = TSR_ABRQx[i];
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	691b      	ldr	r3, [r3, #16]
 801f01a:	490b      	ldr	r1, [pc, #44]	; (801f048 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv+0x90>)
 801f01c:	697a      	ldr	r2, [r7, #20]
 801f01e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f022:	609a      	str	r2, [r3, #8]
                txi.pending = false;
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	2200      	movs	r2, #0
 801f028:	761a      	strb	r2, [r3, #24]
                served_aborts_cnt_++;
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	6a1b      	ldr	r3, [r3, #32]
 801f02e:	1c5a      	adds	r2, r3, #1
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	621a      	str	r2, [r3, #32]
        for (int i = 0; i < NumTxMailboxes; i++)    // Dear compiler, may I suggest you to unroll this loop please.
 801f034:	697b      	ldr	r3, [r7, #20]
 801f036:	3301      	adds	r3, #1
 801f038:	617b      	str	r3, [r7, #20]
 801f03a:	e7db      	b.n	801eff4 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv+0x3c>
            }
        }
    }
}
 801f03c:	bf00      	nop
 801f03e:	3718      	adds	r7, #24
 801f040:	46bd      	mov	sp, r7
 801f042:	bc90      	pop	{r4, r7}
 801f044:	4770      	bx	lr
 801f046:	bf00      	nop
 801f048:	0802c7f4 	.word	0x0802c7f4

0801f04c <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE>:

void CanIface::discardTimedOutTxMailboxes(uavcan::MonotonicTime current_time)
{
 801f04c:	b590      	push	{r4, r7, lr}
 801f04e:	b087      	sub	sp, #28
 801f050:	af00      	add	r7, sp, #0
 801f052:	6078      	str	r0, [r7, #4]
 801f054:	6039      	str	r1, [r7, #0]
    CriticalSectionLocker lock;
 801f056:	f107 030c 	add.w	r3, r7, #12
 801f05a:	4618      	mov	r0, r3
 801f05c:	f7fe ffe5 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
    for (int i = 0; i < NumTxMailboxes; i++)
 801f060:	2300      	movs	r3, #0
 801f062:	617b      	str	r3, [r7, #20]
 801f064:	697b      	ldr	r3, [r7, #20]
 801f066:	2b02      	cmp	r3, #2
 801f068:	dc2d      	bgt.n	801f0c6 <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x7a>
    {
        TxItem& txi = pending_tx_[i];
 801f06a:	697b      	ldr	r3, [r7, #20]
 801f06c:	015b      	lsls	r3, r3, #5
 801f06e:	3328      	adds	r3, #40	; 0x28
 801f070:	687a      	ldr	r2, [r7, #4]
 801f072:	4413      	add	r3, r2
 801f074:	613b      	str	r3, [r7, #16]
        if (txi.pending && txi.deadline < current_time)
 801f076:	693b      	ldr	r3, [r7, #16]
 801f078:	7e1b      	ldrb	r3, [r3, #24]
 801f07a:	2b00      	cmp	r3, #0
 801f07c:	d009      	beq.n	801f092 <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x46>
 801f07e:	693b      	ldr	r3, [r7, #16]
 801f080:	6839      	ldr	r1, [r7, #0]
 801f082:	4618      	mov	r0, r3
 801f084:	f7f6 fc1e 	bl	80158c4 <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEltERKS1_>
 801f088:	4603      	mov	r3, r0
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d001      	beq.n	801f092 <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x46>
 801f08e:	2301      	movs	r3, #1
 801f090:	e000      	b.n	801f094 <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x48>
 801f092:	2300      	movs	r3, #0
 801f094:	2b00      	cmp	r3, #0
 801f096:	d012      	beq.n	801f0be <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x72>
        {
            can_->TSR = TSR_ABRQx[i];  // Goodnight sweet transmission
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	691b      	ldr	r3, [r3, #16]
 801f09c:	490e      	ldr	r1, [pc, #56]	; (801f0d8 <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x8c>)
 801f09e:	697a      	ldr	r2, [r7, #20]
 801f0a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801f0a4:	609a      	str	r2, [r3, #8]
            txi.pending = false;
 801f0a6:	693b      	ldr	r3, [r7, #16]
 801f0a8:	2200      	movs	r2, #0
 801f0aa:	761a      	strb	r2, [r3, #24]
            error_cnt_++;
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 801f0b2:	1c4b      	adds	r3, r1, #1
 801f0b4:	f142 0400 	adc.w	r4, r2, #0
 801f0b8:	687a      	ldr	r2, [r7, #4]
 801f0ba:	e9c2 3406 	strd	r3, r4, [r2, #24]
    for (int i = 0; i < NumTxMailboxes; i++)
 801f0be:	697b      	ldr	r3, [r7, #20]
 801f0c0:	3301      	adds	r3, #1
 801f0c2:	617b      	str	r3, [r7, #20]
 801f0c4:	e7ce      	b.n	801f064 <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE+0x18>
    CriticalSectionLocker lock;
 801f0c6:	f107 030c 	add.w	r3, r7, #12
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	f7fe ffb8 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
        }
    }
}
 801f0d0:	bf00      	nop
 801f0d2:	371c      	adds	r7, #28
 801f0d4:	46bd      	mov	sp, r7
 801f0d6:	bd90      	pop	{r4, r7, pc}
 801f0d8:	0802c7f4 	.word	0x0802c7f4

0801f0dc <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE>:

bool CanIface::canAcceptNewTxFrame(const uavcan::CanFrame& frame) const
{
 801f0dc:	b590      	push	{r4, r7, lr}
 801f0de:	b087      	sub	sp, #28
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
 801f0e4:	6039      	str	r1, [r7, #0]
     *  - There is at least one TX mailbox free (obvious enough);
     *  - The priority of the new frame is higher than priority of all TX mailboxes.
     */
    {
        static const uavcan::uint32_t TME = bxcan::TSR_TME0 | bxcan::TSR_TME1 | bxcan::TSR_TME2;
        const uavcan::uint32_t tme = can_->TSR & TME;
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	691b      	ldr	r3, [r3, #16]
 801f0ea:	689b      	ldr	r3, [r3, #8]
 801f0ec:	f003 53e0 	and.w	r3, r3, #469762048	; 0x1c000000
 801f0f0:	613b      	str	r3, [r7, #16]

        if (tme == TME)     // All TX mailboxes are free (as in freedom).
 801f0f2:	693b      	ldr	r3, [r7, #16]
 801f0f4:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 801f0f8:	d101      	bne.n	801f0fe <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x22>
        {
            return true;
 801f0fa:	2401      	movs	r4, #1
 801f0fc:	e036      	b.n	801f16c <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x90>
        }

        if (tme == 0)       // All TX mailboxes are busy transmitting.
 801f0fe:	693b      	ldr	r3, [r7, #16]
 801f100:	2b00      	cmp	r3, #0
 801f102:	d101      	bne.n	801f108 <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x2c>
        {
            return false;
 801f104:	2400      	movs	r4, #0
 801f106:	e031      	b.n	801f16c <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x90>
    }

    /*
     * The second condition requires a critical section.
     */
    CriticalSectionLocker lock;
 801f108:	f107 030c 	add.w	r3, r7, #12
 801f10c:	4618      	mov	r0, r3
 801f10e:	f7fe ff8c 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>

    for (int mbx = 0; mbx < NumTxMailboxes; mbx++)
 801f112:	2300      	movs	r3, #0
 801f114:	617b      	str	r3, [r7, #20]
 801f116:	697b      	ldr	r3, [r7, #20]
 801f118:	2b02      	cmp	r3, #2
 801f11a:	dc21      	bgt.n	801f160 <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x84>
    {
        if (pending_tx_[mbx].pending && !frame.priorityHigherThan(pending_tx_[mbx].frame))
 801f11c:	687a      	ldr	r2, [r7, #4]
 801f11e:	697b      	ldr	r3, [r7, #20]
 801f120:	3302      	adds	r3, #2
 801f122:	015b      	lsls	r3, r3, #5
 801f124:	4413      	add	r3, r2
 801f126:	781b      	ldrb	r3, [r3, #0]
 801f128:	2b00      	cmp	r3, #0
 801f12a:	d010      	beq.n	801f14e <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x72>
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	015b      	lsls	r3, r3, #5
 801f130:	3330      	adds	r3, #48	; 0x30
 801f132:	687a      	ldr	r2, [r7, #4]
 801f134:	4413      	add	r3, r2
 801f136:	4619      	mov	r1, r3
 801f138:	6838      	ldr	r0, [r7, #0]
 801f13a:	f7f4 ff3c 	bl	8013fb6 <_ZNK6uavcan8CanFrame18priorityHigherThanERKS0_>
 801f13e:	4603      	mov	r3, r0
 801f140:	f083 0301 	eor.w	r3, r3, #1
 801f144:	b2db      	uxtb	r3, r3
 801f146:	2b00      	cmp	r3, #0
 801f148:	d001      	beq.n	801f14e <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x72>
 801f14a:	2301      	movs	r3, #1
 801f14c:	e000      	b.n	801f150 <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x74>
 801f14e:	2300      	movs	r3, #0
 801f150:	2b00      	cmp	r3, #0
 801f152:	d001      	beq.n	801f158 <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x7c>
        {
            return false;       // There's a mailbox whose priority is higher or equal the priority of the new frame.
 801f154:	2400      	movs	r4, #0
 801f156:	e004      	b.n	801f162 <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x86>
    for (int mbx = 0; mbx < NumTxMailboxes; mbx++)
 801f158:	697b      	ldr	r3, [r7, #20]
 801f15a:	3301      	adds	r3, #1
 801f15c:	617b      	str	r3, [r7, #20]
 801f15e:	e7da      	b.n	801f116 <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE+0x3a>
        }
    }

    return true;                // This new frame will be added to a free TX mailbox in the next @ref send().
 801f160:	2401      	movs	r4, #1
    CriticalSectionLocker lock;
 801f162:	f107 030c 	add.w	r3, r7, #12
 801f166:	4618      	mov	r0, r3
 801f168:	f7fe ff6a 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
 801f16c:	4623      	mov	r3, r4
}
 801f16e:	4618      	mov	r0, r3
 801f170:	371c      	adds	r7, #28
 801f172:	46bd      	mov	sp, r7
 801f174:	bd90      	pop	{r4, r7, pc}

0801f176 <_ZNK12uavcan_stm328CanIface15isRxBufferEmptyEv>:

bool CanIface::isRxBufferEmpty() const
{
 801f176:	b590      	push	{r4, r7, lr}
 801f178:	b085      	sub	sp, #20
 801f17a:	af00      	add	r7, sp, #0
 801f17c:	6078      	str	r0, [r7, #4]
    CriticalSectionLocker lock;
 801f17e:	f107 030c 	add.w	r3, r7, #12
 801f182:	4618      	mov	r0, r3
 801f184:	f7fe ff51 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
    return rx_queue_.getLength() == 0;
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	3304      	adds	r3, #4
 801f18c:	4618      	mov	r0, r3
 801f18e:	f7fe ff07 	bl	801dfa0 <_ZNK12uavcan_stm328CanIface7RxQueue9getLengthEv>
 801f192:	4603      	mov	r3, r0
 801f194:	2b00      	cmp	r3, #0
 801f196:	bf0c      	ite	eq
 801f198:	2301      	moveq	r3, #1
 801f19a:	2300      	movne	r3, #0
 801f19c:	b2dc      	uxtb	r4, r3
    CriticalSectionLocker lock;
 801f19e:	f107 030c 	add.w	r3, r7, #12
 801f1a2:	4618      	mov	r0, r3
 801f1a4:	f7fe ff4c 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
    return rx_queue_.getLength() == 0;
 801f1a8:	4623      	mov	r3, r4
}
 801f1aa:	4618      	mov	r0, r3
 801f1ac:	3714      	adds	r7, #20
 801f1ae:	46bd      	mov	sp, r7
 801f1b0:	bd90      	pop	{r4, r7, pc}

0801f1b2 <_ZNK12uavcan_stm328CanIface13getErrorCountEv>:

uavcan::uint64_t CanIface::getErrorCount() const
{
 801f1b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1b4:	b085      	sub	sp, #20
 801f1b6:	af00      	add	r7, sp, #0
 801f1b8:	6078      	str	r0, [r7, #4]
    CriticalSectionLocker lock;
 801f1ba:	f107 030c 	add.w	r3, r7, #12
 801f1be:	4618      	mov	r0, r3
 801f1c0:	f7fe ff33 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
    return error_cnt_ + rx_queue_.getOverflowCount();
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	e9d3 5606 	ldrd	r5, r6, [r3, #24]
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	3304      	adds	r3, #4
 801f1ce:	4618      	mov	r0, r3
 801f1d0:	f7fe fef2 	bl	801dfb8 <_ZNK12uavcan_stm328CanIface7RxQueue16getOverflowCountEv>
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	f04f 0400 	mov.w	r4, #0
 801f1da:	18e9      	adds	r1, r5, r3
 801f1dc:	eb46 0204 	adc.w	r2, r6, r4
 801f1e0:	460c      	mov	r4, r1
 801f1e2:	4615      	mov	r5, r2
    CriticalSectionLocker lock;
 801f1e4:	f107 030c 	add.w	r3, r7, #12
 801f1e8:	4618      	mov	r0, r3
 801f1ea:	f7fe ff29 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
    return error_cnt_ + rx_queue_.getOverflowCount();
 801f1ee:	4623      	mov	r3, r4
 801f1f0:	462c      	mov	r4, r5
}
 801f1f2:	4618      	mov	r0, r3
 801f1f4:	4621      	mov	r1, r4
 801f1f6:	3714      	adds	r7, #20
 801f1f8:	46bd      	mov	sp, r7
 801f1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f1fc <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE>:

/*
 * CanDriver
 */
uavcan::CanSelectMasks CanDriver::makeSelectMasks(const uavcan::CanFrame* (& pending_tx)[uavcan::MaxCanIfaces]) const
{
 801f1fc:	b580      	push	{r7, lr}
 801f1fe:	b084      	sub	sp, #16
 801f200:	af00      	add	r7, sp, #0
 801f202:	6078      	str	r0, [r7, #4]
 801f204:	6039      	str	r1, [r7, #0]
    uavcan::CanSelectMasks msk;
 801f206:	f107 0308 	add.w	r3, r7, #8
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7f7 fe50 	bl	8016eb0 <_ZN6uavcan14CanSelectMasksC1Ev>

    // Iface 0
    msk.read  = if0_.isRxBufferEmpty() ? 0 : 1;
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	3310      	adds	r3, #16
 801f214:	4618      	mov	r0, r3
 801f216:	f7ff ffae 	bl	801f176 <_ZNK12uavcan_stm328CanIface15isRxBufferEmptyEv>
 801f21a:	4603      	mov	r3, r0
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d001      	beq.n	801f224 <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE+0x28>
 801f220:	2300      	movs	r3, #0
 801f222:	e000      	b.n	801f226 <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE+0x2a>
 801f224:	2301      	movs	r3, #1
 801f226:	723b      	strb	r3, [r7, #8]

    if (pending_tx[0] != UAVCAN_NULLPTR)
 801f228:	683b      	ldr	r3, [r7, #0]
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d00f      	beq.n	801f250 <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE+0x54>
    {
        msk.write = if0_.canAcceptNewTxFrame(*pending_tx[0]) ? 1 : 0;
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	f103 0210 	add.w	r2, r3, #16
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	4619      	mov	r1, r3
 801f23c:	4610      	mov	r0, r2
 801f23e:	f7ff ff4d 	bl	801f0dc <_ZNK12uavcan_stm328CanIface19canAcceptNewTxFrameERKN6uavcan8CanFrameE>
 801f242:	4603      	mov	r3, r0
 801f244:	2b00      	cmp	r3, #0
 801f246:	d001      	beq.n	801f24c <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE+0x50>
 801f248:	2301      	movs	r3, #1
 801f24a:	e000      	b.n	801f24e <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE+0x52>
 801f24c:	2300      	movs	r3, #0
 801f24e:	727b      	strb	r3, [r7, #9]
        {
            msk.write |= 1 << 1;
        }
    }
#endif
    return msk;
 801f250:	893b      	ldrh	r3, [r7, #8]
 801f252:	81bb      	strh	r3, [r7, #12]
 801f254:	2300      	movs	r3, #0
 801f256:	7b3a      	ldrb	r2, [r7, #12]
 801f258:	f362 0307 	bfi	r3, r2, #0, #8
 801f25c:	7b7a      	ldrb	r2, [r7, #13]
 801f25e:	f362 230f 	bfi	r3, r2, #8, #8
}
 801f262:	4618      	mov	r0, r3
 801f264:	3710      	adds	r7, #16
 801f266:	46bd      	mov	sp, r7
 801f268:	bd80      	pop	{r7, pc}

0801f26a <_ZN12uavcan_stm329CanDriver6selectERN6uavcan14CanSelectMasksERA3_PKNS1_8CanFrameENS1_13MonotonicTimeE>:
}

uavcan::int16_t CanDriver::select(uavcan::CanSelectMasks& inout_masks,
                                  const uavcan::CanFrame* (& pending_tx)[uavcan::MaxCanIfaces],
                                  const uavcan::MonotonicTime blocking_deadline)
{
 801f26a:	b590      	push	{r4, r7, lr}
 801f26c:	b08f      	sub	sp, #60	; 0x3c
 801f26e:	af00      	add	r7, sp, #0
 801f270:	60f8      	str	r0, [r7, #12]
 801f272:	60b9      	str	r1, [r7, #8]
 801f274:	607a      	str	r2, [r7, #4]
 801f276:	603b      	str	r3, [r7, #0]
    const uavcan::CanSelectMasks in_masks = inout_masks;
 801f278:	68ba      	ldr	r2, [r7, #8]
 801f27a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f27e:	8812      	ldrh	r2, [r2, #0]
 801f280:	801a      	strh	r2, [r3, #0]
    const uavcan::MonotonicTime time = clock::getMonotonic();
 801f282:	f107 0318 	add.w	r3, r7, #24
 801f286:	4618      	mov	r0, r3
 801f288:	f000 fbae 	bl	801f9e8 <_ZN12uavcan_stm325clock12getMonotonicEv>

    if0_.discardTimedOutTxMailboxes(time);              // Check TX timeouts - this may release some TX slots
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	f103 0410 	add.w	r4, r3, #16
 801f292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f296:	f107 0218 	add.w	r2, r7, #24
 801f29a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f29e:	e883 0003 	stmia.w	r3, {r0, r1}
 801f2a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f2a6:	4619      	mov	r1, r3
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f7ff fecf 	bl	801f04c <_ZN12uavcan_stm328CanIface26discardTimedOutTxMailboxesEN6uavcan13MonotonicTimeE>
 801f2ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f2b2:	4618      	mov	r0, r3
 801f2b4:	f7e6 ff2e 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
    {
        CriticalSectionLocker cs_locker;
 801f2b8:	f107 0314 	add.w	r3, r7, #20
 801f2bc:	4618      	mov	r0, r3
 801f2be:	f7fe feb4 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
        if0_.pollErrorFlagsFromISR();
 801f2c2:	68fb      	ldr	r3, [r7, #12]
 801f2c4:	3310      	adds	r3, #16
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	f7ff fe76 	bl	801efb8 <_ZN12uavcan_stm328CanIface21pollErrorFlagsFromISREv>
        CriticalSectionLocker cs_locker;
 801f2cc:	f107 0314 	add.w	r3, r7, #20
 801f2d0:	4618      	mov	r0, r3
 801f2d2:	f7fe feb5 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
        CriticalSectionLocker cs_locker;
        if1_.pollErrorFlagsFromISR();
    }
#endif

    inout_masks = makeSelectMasks(pending_tx);          // Check if we already have some of the requested events
 801f2d6:	6879      	ldr	r1, [r7, #4]
 801f2d8:	68f8      	ldr	r0, [r7, #12]
 801f2da:	f7ff ff8f 	bl	801f1fc <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE>
 801f2de:	4602      	mov	r2, r0
 801f2e0:	68bb      	ldr	r3, [r7, #8]
 801f2e2:	b212      	sxth	r2, r2
 801f2e4:	4611      	mov	r1, r2
 801f2e6:	7019      	strb	r1, [r3, #0]
 801f2e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f2ec:	705a      	strb	r2, [r3, #1]
    if ((inout_masks.read  & in_masks.read)  != 0 ||
 801f2ee:	68bb      	ldr	r3, [r7, #8]
 801f2f0:	781a      	ldrb	r2, [r3, #0]
 801f2f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f2f6:	4013      	ands	r3, r2
 801f2f8:	b2db      	uxtb	r3, r3
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d107      	bne.n	801f30e <_ZN12uavcan_stm329CanDriver6selectERN6uavcan14CanSelectMasksERA3_PKNS1_8CanFrameENS1_13MonotonicTimeE+0xa4>
        (inout_masks.write & in_masks.write) != 0)
 801f2fe:	68bb      	ldr	r3, [r7, #8]
 801f300:	785a      	ldrb	r2, [r3, #1]
 801f302:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f306:	4013      	ands	r3, r2
 801f308:	b2db      	uxtb	r3, r3
    if ((inout_masks.read  & in_masks.read)  != 0 ||
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d001      	beq.n	801f312 <_ZN12uavcan_stm329CanDriver6selectERN6uavcan14CanSelectMasksERA3_PKNS1_8CanFrameENS1_13MonotonicTimeE+0xa8>
    {
        return 1;
 801f30e:	2401      	movs	r4, #1
 801f310:	e021      	b.n	801f356 <_ZN12uavcan_stm329CanDriver6selectERN6uavcan14CanSelectMasksERA3_PKNS1_8CanFrameENS1_13MonotonicTimeE+0xec>
    }

    (void)update_event_.wait(blocking_deadline - time); // Block until timeout expires or any iface updates
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	1d1c      	adds	r4, r3, #4
 801f316:	6839      	ldr	r1, [r7, #0]
 801f318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f31c:	f107 0218 	add.w	r2, r7, #24
 801f320:	4618      	mov	r0, r3
 801f322:	f7f6 fb0c 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 801f326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f32a:	4619      	mov	r1, r3
 801f32c:	4620      	mov	r0, r4
 801f32e:	f001 f851 	bl	80203d4 <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE>
 801f332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f336:	4618      	mov	r0, r3
 801f338:	f7e6 ffbf 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    inout_masks = makeSelectMasks(pending_tx);  // Return what we got even if none of the requested events are set
 801f33c:	6879      	ldr	r1, [r7, #4]
 801f33e:	68f8      	ldr	r0, [r7, #12]
 801f340:	f7ff ff5c 	bl	801f1fc <_ZNK12uavcan_stm329CanDriver15makeSelectMasksERA3_PKN6uavcan8CanFrameE>
 801f344:	4602      	mov	r2, r0
 801f346:	68bb      	ldr	r3, [r7, #8]
 801f348:	b212      	sxth	r2, r2
 801f34a:	4611      	mov	r1, r2
 801f34c:	7019      	strb	r1, [r3, #0]
 801f34e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f352:	705a      	strb	r2, [r3, #1]
    return 1;                                   // Return value doesn't matter as long as it is non-negative
 801f354:	2401      	movs	r4, #1
    const uavcan::MonotonicTime time = clock::getMonotonic();
 801f356:	f107 0318 	add.w	r3, r7, #24
 801f35a:	4618      	mov	r0, r3
 801f35c:	f7e6 feda 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
 801f360:	4623      	mov	r3, r4
}
 801f362:	4618      	mov	r0, r3
 801f364:	373c      	adds	r7, #60	; 0x3c
 801f366:	46bd      	mov	sp, r7
 801f368:	bd90      	pop	{r4, r7, pc}

0801f36a <_ZN12uavcan_stm32L16nvicEnableVectorE9IRQn_Typeh>:


#if UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS

static void nvicEnableVector(IRQn_Type irq,  uint8_t prio)
{
 801f36a:	b580      	push	{r7, lr}
 801f36c:	b082      	sub	sp, #8
 801f36e:	af00      	add	r7, sp, #0
 801f370:	4603      	mov	r3, r0
 801f372:	460a      	mov	r2, r1
 801f374:	71fb      	strb	r3, [r7, #7]
 801f376:	4613      	mov	r3, r2
 801f378:	71bb      	strb	r3, [r7, #6]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = prio;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
    #else
      HAL_NVIC_SetPriority(irq, prio, 0);
 801f37a:	79b9      	ldrb	r1, [r7, #6]
 801f37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f380:	2200      	movs	r2, #0
 801f382:	4618      	mov	r0, r3
 801f384:	f7e1 fb96 	bl	8000ab4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(irq);
 801f388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f38c:	4618      	mov	r0, r3
 801f38e:	f7e1 fbad 	bl	8000aec <HAL_NVIC_EnableIRQ>
    #endif
}
 801f392:	bf00      	nop
 801f394:	3708      	adds	r7, #8
 801f396:	46bd      	mov	sp, r7
 801f398:	bd80      	pop	{r7, pc}
	...

0801f39c <_ZN12uavcan_stm329CanDriver8initOnceEv>:

#endif

void CanDriver::initOnce()
{
 801f39c:	b580      	push	{r7, lr}
 801f39e:	b082      	sub	sp, #8
 801f3a0:	af00      	add	r7, sp, #0
    /*
     * CAN1, CAN2
     */
    {
        CriticalSectionLocker lock;
 801f3a2:	1d3b      	adds	r3, r7, #4
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f7fe fe40 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
        modifyreg32(STM32_RCC_APB1ENR,  0, RCC_APB1ENR_CAN2EN);
        modifyreg32(STM32_RCC_APB1RSTR, 0, RCC_APB1RSTR_CAN2RST);
        modifyreg32(STM32_RCC_APB1RSTR, RCC_APB1RSTR_CAN2RST, 0);
# endif
#else
        RCC->APB1ENR  |=  RCC_APB1ENR_CAN1EN;
 801f3aa:	4b17      	ldr	r3, [pc, #92]	; (801f408 <_ZN12uavcan_stm329CanDriver8initOnceEv+0x6c>)
 801f3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3ae:	4a16      	ldr	r2, [pc, #88]	; (801f408 <_ZN12uavcan_stm329CanDriver8initOnceEv+0x6c>)
 801f3b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801f3b4:	6413      	str	r3, [r2, #64]	; 0x40
        RCC->APB1RSTR |=  RCC_APB1RSTR_CAN1RST;
 801f3b6:	4b14      	ldr	r3, [pc, #80]	; (801f408 <_ZN12uavcan_stm329CanDriver8initOnceEv+0x6c>)
 801f3b8:	6a1b      	ldr	r3, [r3, #32]
 801f3ba:	4a13      	ldr	r2, [pc, #76]	; (801f408 <_ZN12uavcan_stm329CanDriver8initOnceEv+0x6c>)
 801f3bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801f3c0:	6213      	str	r3, [r2, #32]
        RCC->APB1RSTR &= ~RCC_APB1RSTR_CAN1RST;
 801f3c2:	4b11      	ldr	r3, [pc, #68]	; (801f408 <_ZN12uavcan_stm329CanDriver8initOnceEv+0x6c>)
 801f3c4:	6a1b      	ldr	r3, [r3, #32]
 801f3c6:	4a10      	ldr	r2, [pc, #64]	; (801f408 <_ZN12uavcan_stm329CanDriver8initOnceEv+0x6c>)
 801f3c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801f3cc:	6213      	str	r3, [r2, #32]
        CriticalSectionLocker lock;
 801f3ce:	1d3b      	adds	r3, r7, #4
 801f3d0:	4618      	mov	r0, r3
 801f3d2:	f7fe fe35 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
    IRQ_ATTACH(STM32_IRQ_CAN2RX1, can2_irq);
# endif
# undef IRQ_ATTACH
#elif UAVCAN_STM32_CHIBIOS || UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS
    {
        CriticalSectionLocker lock;
 801f3d6:	463b      	mov	r3, r7
 801f3d8:	4618      	mov	r0, r3
 801f3da:	f7fe fe26 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
        nvicEnableVector(CAN1_TX_IRQn,  UAVCAN_STM32_IRQ_PRIORITY_MASK);
 801f3de:	2105      	movs	r1, #5
 801f3e0:	2013      	movs	r0, #19
 801f3e2:	f7ff ffc2 	bl	801f36a <_ZN12uavcan_stm32L16nvicEnableVectorE9IRQn_Typeh>
        nvicEnableVector(CAN1_RX0_IRQn, UAVCAN_STM32_IRQ_PRIORITY_MASK);
 801f3e6:	2105      	movs	r1, #5
 801f3e8:	2014      	movs	r0, #20
 801f3ea:	f7ff ffbe 	bl	801f36a <_ZN12uavcan_stm32L16nvicEnableVectorE9IRQn_Typeh>
        nvicEnableVector(CAN1_RX1_IRQn, UAVCAN_STM32_IRQ_PRIORITY_MASK);
 801f3ee:	2105      	movs	r1, #5
 801f3f0:	2015      	movs	r0, #21
 801f3f2:	f7ff ffba 	bl	801f36a <_ZN12uavcan_stm32L16nvicEnableVectorE9IRQn_Typeh>
        CriticalSectionLocker lock;
 801f3f6:	463b      	mov	r3, r7
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	f7fe fe21 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
        nvicEnableVector(CAN2_RX0_IRQn, UAVCAN_STM32_IRQ_PRIORITY_MASK);
        nvicEnableVector(CAN2_RX1_IRQn, UAVCAN_STM32_IRQ_PRIORITY_MASK);
# endif
    }
#endif
}
 801f3fe:	bf00      	nop
 801f400:	3708      	adds	r7, #8
 801f402:	46bd      	mov	sp, r7
 801f404:	bd80      	pop	{r7, pc}
 801f406:	bf00      	nop
 801f408:	40023800 	.word	0x40023800

0801f40c <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE>:

int CanDriver::init(const uavcan::uint32_t bitrate, const CanIface::OperatingMode mode)
{
 801f40c:	b580      	push	{r7, lr}
 801f40e:	b086      	sub	sp, #24
 801f410:	af00      	add	r7, sp, #0
 801f412:	60f8      	str	r0, [r7, #12]
 801f414:	60b9      	str	r1, [r7, #8]
 801f416:	4613      	mov	r3, r2
 801f418:	71fb      	strb	r3, [r7, #7]
    int res = 0;
 801f41a:	2300      	movs	r3, #0
 801f41c:	617b      	str	r3, [r7, #20]

    UAVCAN_STM32_LOG("Bitrate %lu mode %d", static_cast<unsigned long>(bitrate), static_cast<int>(mode));

    static bool initialized_once = false;
    if (!initialized_once)
 801f41e:	4b1d      	ldr	r3, [pc, #116]	; (801f494 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x88>)
 801f420:	781b      	ldrb	r3, [r3, #0]
 801f422:	f083 0301 	eor.w	r3, r3, #1
 801f426:	b2db      	uxtb	r3, r3
 801f428:	2b00      	cmp	r3, #0
 801f42a:	d004      	beq.n	801f436 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x2a>
    {
        initialized_once = true;
 801f42c:	4b19      	ldr	r3, [pc, #100]	; (801f494 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x88>)
 801f42e:	2201      	movs	r2, #1
 801f430:	701a      	strb	r2, [r3, #0]
        UAVCAN_STM32_LOG("First initialization");
        initOnce();
 801f432:	f7ff ffb3 	bl	801f39c <_ZN12uavcan_stm329CanDriver8initOnceEv>

    /*
     * CAN1
     */
    UAVCAN_STM32_LOG("Initing iface 0...");
    ifaces[0] = &if0_;                          // This link must be initialized first,
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	3310      	adds	r3, #16
 801f43a:	4a17      	ldr	r2, [pc, #92]	; (801f498 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x8c>)
 801f43c:	6013      	str	r3, [r2, #0]
    res = if0_.init(bitrate, mode);             // otherwise an IRQ may fire while the interface is not linked yet;
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	3310      	adds	r3, #16
 801f442:	79fa      	ldrb	r2, [r7, #7]
 801f444:	68b9      	ldr	r1, [r7, #8]
 801f446:	4618      	mov	r0, r3
 801f448:	f7ff fb10 	bl	801ea6c <_ZN12uavcan_stm328CanIface4initEmNS0_13OperatingModeE>
 801f44c:	6178      	str	r0, [r7, #20]
    if (res < 0)                                // a typical race condition.
 801f44e:	697b      	ldr	r3, [r7, #20]
 801f450:	2b00      	cmp	r3, #0
 801f452:	da07      	bge.n	801f464 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x58>
    {
        UAVCAN_STM32_LOG("Iface 0 init failed %i", res);
        ifaces[0] = UAVCAN_NULLPTR;
 801f454:	4b10      	ldr	r3, [pc, #64]	; (801f498 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x8c>)
 801f456:	2200      	movs	r2, #0
 801f458:	601a      	str	r2, [r3, #0]
        goto fail;
 801f45a:	bf00      	nop
    UAVCAN_ASSERT(res >= 0);
    return res;

fail:
    UAVCAN_STM32_LOG("CAN drv init failed %i", res);
    UAVCAN_ASSERT(res < 0);
 801f45c:	697b      	ldr	r3, [r7, #20]
 801f45e:	2b00      	cmp	r3, #0
 801f460:	db13      	blt.n	801f48a <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x7e>
 801f462:	e00b      	b.n	801f47c <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x70>
    UAVCAN_ASSERT(res >= 0);
 801f464:	697b      	ldr	r3, [r7, #20]
 801f466:	2b00      	cmp	r3, #0
 801f468:	da06      	bge.n	801f478 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x6c>
 801f46a:	4b0c      	ldr	r3, [pc, #48]	; (801f49c <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x90>)
 801f46c:	4a0c      	ldr	r2, [pc, #48]	; (801f4a0 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x94>)
 801f46e:	f240 413d 	movw	r1, #1085	; 0x43d
 801f472:	480c      	ldr	r0, [pc, #48]	; (801f4a4 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x98>)
 801f474:	f001 f88a 	bl	802058c <__assert_func>
    return res;
 801f478:	697b      	ldr	r3, [r7, #20]
 801f47a:	e007      	b.n	801f48c <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x80>
    UAVCAN_ASSERT(res < 0);
 801f47c:	4b0a      	ldr	r3, [pc, #40]	; (801f4a8 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x9c>)
 801f47e:	4a08      	ldr	r2, [pc, #32]	; (801f4a0 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x94>)
 801f480:	f240 4142 	movw	r1, #1090	; 0x442
 801f484:	4807      	ldr	r0, [pc, #28]	; (801f4a4 <_ZN12uavcan_stm329CanDriver4initEmNS_8CanIface13OperatingModeE+0x98>)
 801f486:	f001 f881 	bl	802058c <__assert_func>
    return res;
 801f48a:	697b      	ldr	r3, [r7, #20]
}
 801f48c:	4618      	mov	r0, r3
 801f48e:	3718      	adds	r7, #24
 801f490:	46bd      	mov	sp, r7
 801f492:	bd80      	pop	{r7, pc}
 801f494:	20008624 	.word	0x20008624
 801f498:	20008620 	.word	0x20008620
 801f49c:	08024d1c 	.word	0x08024d1c
 801f4a0:	0802ca50 	.word	0x0802ca50
 801f4a4:	08024c20 	.word	0x08024c20
 801f4a8:	08024d28 	.word	0x08024d28

0801f4ac <_ZN12uavcan_stm329CanDriver8getIfaceEh>:

CanIface* CanDriver::getIface(uavcan::uint8_t iface_index)
{
 801f4ac:	b480      	push	{r7}
 801f4ae:	b083      	sub	sp, #12
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	6078      	str	r0, [r7, #4]
 801f4b4:	460b      	mov	r3, r1
 801f4b6:	70fb      	strb	r3, [r7, #3]
    if (iface_index < UAVCAN_STM32_NUM_IFACES)
 801f4b8:	78fb      	ldrb	r3, [r7, #3]
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d104      	bne.n	801f4c8 <_ZN12uavcan_stm329CanDriver8getIfaceEh+0x1c>
    {
        return ifaces[iface_index];
 801f4be:	78fb      	ldrb	r3, [r7, #3]
 801f4c0:	4a05      	ldr	r2, [pc, #20]	; (801f4d8 <_ZN12uavcan_stm329CanDriver8getIfaceEh+0x2c>)
 801f4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f4c6:	e000      	b.n	801f4ca <_ZN12uavcan_stm329CanDriver8getIfaceEh+0x1e>
    }
    return UAVCAN_NULLPTR;
 801f4c8:	2300      	movs	r3, #0
}
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	370c      	adds	r7, #12
 801f4ce:	46bd      	mov	sp, r7
 801f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4d4:	4770      	bx	lr
 801f4d6:	bf00      	nop
 801f4d8:	20008620 	.word	0x20008620

0801f4dc <CAN1_TX_IRQHandler>:
# error "Misconfigured build"
#endif

UAVCAN_STM32_IRQ_HANDLER(CAN1_TX_IRQHandler);
UAVCAN_STM32_IRQ_HANDLER(CAN1_TX_IRQHandler)
{
 801f4dc:	b580      	push	{r7, lr}
 801f4de:	af00      	add	r7, sp, #0
    UAVCAN_STM32_IRQ_PROLOGUE();
    uavcan_stm32::handleTxInterrupt(0);
 801f4e0:	2000      	movs	r0, #0
 801f4e2:	f7fe fdb9 	bl	801e058 <_ZN12uavcan_stm3212_GLOBAL__N_117handleTxInterruptEh>
    UAVCAN_STM32_IRQ_EPILOGUE();
}
 801f4e6:	bf00      	nop
 801f4e8:	bd80      	pop	{r7, pc}

0801f4ea <CAN1_RX0_IRQHandler>:

UAVCAN_STM32_IRQ_HANDLER(CAN1_RX0_IRQHandler);
UAVCAN_STM32_IRQ_HANDLER(CAN1_RX0_IRQHandler)
{
 801f4ea:	b580      	push	{r7, lr}
 801f4ec:	af00      	add	r7, sp, #0
    UAVCAN_STM32_IRQ_PROLOGUE();
    uavcan_stm32::handleRxInterrupt(0, 0);
 801f4ee:	2100      	movs	r1, #0
 801f4f0:	2000      	movs	r0, #0
 801f4f2:	f7fe fdf3 	bl	801e0dc <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh>
    UAVCAN_STM32_IRQ_EPILOGUE();
}
 801f4f6:	bf00      	nop
 801f4f8:	bd80      	pop	{r7, pc}

0801f4fa <CAN1_RX1_IRQHandler>:

UAVCAN_STM32_IRQ_HANDLER(CAN1_RX1_IRQHandler);
UAVCAN_STM32_IRQ_HANDLER(CAN1_RX1_IRQHandler)
{
 801f4fa:	b580      	push	{r7, lr}
 801f4fc:	af00      	add	r7, sp, #0
    UAVCAN_STM32_IRQ_PROLOGUE();
    uavcan_stm32::handleRxInterrupt(0, 1);
 801f4fe:	2101      	movs	r1, #1
 801f500:	2000      	movs	r0, #0
 801f502:	f7fe fdeb 	bl	801e0dc <_ZN12uavcan_stm3212_GLOBAL__N_117handleRxInterruptEhh>
    UAVCAN_STM32_IRQ_EPILOGUE();
}
 801f506:	bf00      	nop
 801f508:	bd80      	pop	{r7, pc}

0801f50a <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEE8fromUSecEy>:
    static T fromUSec(uint64_t us)
 801f50a:	b590      	push	{r4, r7, lr}
 801f50c:	b085      	sub	sp, #20
 801f50e:	af00      	add	r7, sp, #0
 801f510:	60f8      	str	r0, [r7, #12]
 801f512:	e9c7 2300 	strd	r2, r3, [r7]
        T d;
 801f516:	68f8      	ldr	r0, [r7, #12]
 801f518:	f7f8 fee6 	bl	80182e8 <_ZN6uavcan7UtcTimeC1Ev>
        d.usec_ = us;
 801f51c:	68fa      	ldr	r2, [r7, #12]
 801f51e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801f522:	e9c2 3400 	strd	r3, r4, [r2]
        return d;
 801f526:	bf00      	nop
    }
 801f528:	68f8      	ldr	r0, [r7, #12]
 801f52a:	3714      	adds	r7, #20
 801f52c:	46bd      	mov	sp, r7
 801f52e:	bd90      	pop	{r4, r7, pc}

0801f530 <_ZN6uavcan6fill_nIPN12uavcan_stm328CanIface6TxItemES3_EEvT_jRKT0_>:
void fill_n(OutputIt first, std::size_t n, const T& value)
 801f530:	b4b0      	push	{r4, r5, r7}
 801f532:	b085      	sub	sp, #20
 801f534:	af00      	add	r7, sp, #0
 801f536:	60f8      	str	r0, [r7, #12]
 801f538:	60b9      	str	r1, [r7, #8]
 801f53a:	607a      	str	r2, [r7, #4]
    while (n--)
 801f53c:	68bb      	ldr	r3, [r7, #8]
 801f53e:	1e5a      	subs	r2, r3, #1
 801f540:	60ba      	str	r2, [r7, #8]
 801f542:	2b00      	cmp	r3, #0
 801f544:	bf14      	ite	ne
 801f546:	2301      	movne	r3, #1
 801f548:	2300      	moveq	r3, #0
 801f54a:	b2db      	uxtb	r3, r3
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d015      	beq.n	801f57c <_ZN6uavcan6fill_nIPN12uavcan_stm328CanIface6TxItemES3_EEvT_jRKT0_+0x4c>
        *first++ = value;
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	f103 0220 	add.w	r2, r3, #32
 801f556:	60fa      	str	r2, [r7, #12]
 801f558:	687a      	ldr	r2, [r7, #4]
 801f55a:	6810      	ldr	r0, [r2, #0]
 801f55c:	6851      	ldr	r1, [r2, #4]
 801f55e:	6895      	ldr	r5, [r2, #8]
 801f560:	68d4      	ldr	r4, [r2, #12]
 801f562:	6018      	str	r0, [r3, #0]
 801f564:	6059      	str	r1, [r3, #4]
 801f566:	609d      	str	r5, [r3, #8]
 801f568:	60dc      	str	r4, [r3, #12]
 801f56a:	6910      	ldr	r0, [r2, #16]
 801f56c:	6951      	ldr	r1, [r2, #20]
 801f56e:	6118      	str	r0, [r3, #16]
 801f570:	6159      	str	r1, [r3, #20]
 801f572:	8b11      	ldrh	r1, [r2, #24]
 801f574:	7e92      	ldrb	r2, [r2, #26]
 801f576:	8319      	strh	r1, [r3, #24]
 801f578:	769a      	strb	r2, [r3, #26]
    while (n--)
 801f57a:	e7df      	b.n	801f53c <_ZN6uavcan6fill_nIPN12uavcan_stm328CanIface6TxItemES3_EEvT_jRKT0_+0xc>
}
 801f57c:	bf00      	nop
 801f57e:	3714      	adds	r7, #20
 801f580:	46bd      	mov	sp, r7
 801f582:	bcb0      	pop	{r4, r5, r7}
 801f584:	4770      	bx	lr
	...

0801f588 <_Z41__static_initialization_and_destruction_0ii>:
}

# endif
#endif // UAVCAN_STM32_NUTTX

} // extern "C"
 801f588:	b580      	push	{r7, lr}
 801f58a:	b082      	sub	sp, #8
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
 801f590:	6039      	str	r1, [r7, #0]
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	2b01      	cmp	r3, #1
 801f596:	d116      	bne.n	801f5c6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 801f598:	683b      	ldr	r3, [r7, #0]
 801f59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f59e:	4293      	cmp	r3, r2
 801f5a0:	d111      	bne.n	801f5c6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 801f5a2:	480b      	ldr	r0, [pc, #44]	; (801f5d0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 801f5a4:	f7e9 fa82 	bl	8008aac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev>
const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetNodeInfo > _uavcan_gdtr_registrator_GetNodeInfo;
 801f5a8:	480a      	ldr	r0, [pc, #40]	; (801f5d4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801f5aa:	f7e9 fae3 	bl	8008b74 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev>
const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetDataTypeInfo > _uavcan_gdtr_registrator_GetDataTypeInfo;
 801f5ae:	480a      	ldr	r0, [pc, #40]	; (801f5d8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801f5b0:	f7e9 fc2c 	bl	8008e0c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev>
 801f5b4:	4809      	ldr	r0, [pc, #36]	; (801f5dc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801f5b6:	f7e9 fd7b 	bl	80090b0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev>
const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::RestartNode > _uavcan_gdtr_registrator_RestartNode;
 801f5ba:	4809      	ldr	r0, [pc, #36]	; (801f5e0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801f5bc:	f7e9 fe7e 	bl	80092bc <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev>
const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::GetTransportStats > _uavcan_gdtr_registrator_GetTransportStats;
 801f5c0:	4808      	ldr	r0, [pc, #32]	; (801f5e4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801f5c2:	f7e9 ff73 	bl	80094ac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev>
 801f5c6:	bf00      	nop
 801f5c8:	3708      	adds	r7, #8
 801f5ca:	46bd      	mov	sp, r7
 801f5cc:	bd80      	pop	{r7, pc}
 801f5ce:	bf00      	nop
 801f5d0:	20008608 	.word	0x20008608
 801f5d4:	2000860c 	.word	0x2000860c
 801f5d8:	20008610 	.word	0x20008610
 801f5dc:	20008614 	.word	0x20008614
 801f5e0:	20008618 	.word	0x20008618
 801f5e4:	2000861c 	.word	0x2000861c

0801f5e8 <_GLOBAL__sub_I__ZN12uavcan_stm328CanIface7RxQueue16registerOverflowEv>:
 801f5e8:	b580      	push	{r7, lr}
 801f5ea:	af00      	add	r7, sp, #0
 801f5ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f5f0:	2001      	movs	r0, #1
 801f5f2:	f7ff ffc9 	bl	801f588 <_Z41__static_initialization_and_destruction_0ii>
 801f5f6:	bd80      	pop	{r7, pc}

0801f5f8 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 801f5f8:	b480      	push	{r7}
 801f5fa:	b083      	sub	sp, #12
 801f5fc:	af00      	add	r7, sp, #0
 801f5fe:	6078      	str	r0, [r7, #4]
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	2b00      	cmp	r3, #0
 801f604:	bfb8      	it	lt
 801f606:	425b      	neglt	r3, r3
 801f608:	4618      	mov	r0, r3
 801f60a:	370c      	adds	r7, #12
 801f60c:	46bd      	mov	sp, r7
 801f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f612:	4770      	bx	lr

0801f614 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 801f614:	b480      	push	{r7}
 801f616:	b083      	sub	sp, #12
 801f618:	af00      	add	r7, sp, #0
 801f61a:	ed87 0a01 	vstr	s0, [r7, #4]
 801f61e:	edd7 7a01 	vldr	s15, [r7, #4]
 801f622:	eef0 7ae7 	vabs.f32	s15, s15
 801f626:	eeb0 0a67 	vmov.f32	s0, s15
 801f62a:	370c      	adds	r7, #12
 801f62c:	46bd      	mov	sp, r7
 801f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f632:	4770      	bx	lr

0801f634 <_ZN6uavcan12ISystemClockD1Ev>:
 * System clock interface - monotonic and UTC.
 */
class UAVCAN_EXPORT ISystemClock
{
public:
    virtual ~ISystemClock() { }
 801f634:	b480      	push	{r7}
 801f636:	b083      	sub	sp, #12
 801f638:	af00      	add	r7, sp, #0
 801f63a:	6078      	str	r0, [r7, #4]
 801f63c:	4a04      	ldr	r2, [pc, #16]	; (801f650 <_ZN6uavcan12ISystemClockD1Ev+0x1c>)
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	601a      	str	r2, [r3, #0]
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	4618      	mov	r0, r3
 801f646:	370c      	adds	r7, #12
 801f648:	46bd      	mov	sp, r7
 801f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f64e:	4770      	bx	lr
 801f650:	0802cb68 	.word	0x0802cb68

0801f654 <_ZN6uavcan12ISystemClockD0Ev>:
 801f654:	b580      	push	{r7, lr}
 801f656:	b082      	sub	sp, #8
 801f658:	af00      	add	r7, sp, #0
 801f65a:	6078      	str	r0, [r7, #4]
 801f65c:	6878      	ldr	r0, [r7, #4]
 801f65e:	f7ff ffe9 	bl	801f634 <_ZN6uavcan12ISystemClockD1Ev>
 801f662:	2104      	movs	r1, #4
 801f664:	6878      	ldr	r0, [r7, #4]
 801f666:	f000 ff70 	bl	802054a <_ZdlPvj>
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	4618      	mov	r0, r3
 801f66e:	3708      	adds	r7, #8
 801f670:	46bd      	mov	sp, r7
 801f672:	bd80      	pop	{r7, pc}

0801f674 <_ZN6uavcan11UtcDurationD1Ev>:
class UAVCAN_EXPORT UtcDuration : public DurationBase<UtcDuration> { };
 801f674:	b580      	push	{r7, lr}
 801f676:	b082      	sub	sp, #8
 801f678:	af00      	add	r7, sp, #0
 801f67a:	6078      	str	r0, [r7, #4]
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	4618      	mov	r0, r3
 801f680:	f000 fd7a 	bl	8020178 <_ZN6uavcan12DurationBaseINS_11UtcDurationEED1Ev>
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	4618      	mov	r0, r3
 801f688:	3708      	adds	r7, #8
 801f68a:	46bd      	mov	sp, r7
 801f68c:	bd80      	pop	{r7, pc}
	...

0801f690 <_ZN12uavcan_stm325clock13UtcSyncParamsC1Ev>:
    float max_rate_correction_ppm;
    float lock_thres_rate_ppm;
    uavcan::UtcDuration lock_thres_offset;
    uavcan::UtcDuration min_jump;          ///< Min error to jump rather than change rate

    UtcSyncParams()
 801f690:	b580      	push	{r7, lr}
 801f692:	b082      	sub	sp, #8
 801f694:	af00      	add	r7, sp, #0
 801f696:	6078      	str	r0, [r7, #4]
        , rate_i(0.02F)
        , rate_error_corner_freq(0.01F)
        , max_rate_correction_ppm(300.0F)
        , lock_thres_rate_ppm(2.0F)
        , lock_thres_offset(uavcan::UtcDuration::fromMSec(4))
        , min_jump(uavcan::UtcDuration::fromMSec(10))
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	4a14      	ldr	r2, [pc, #80]	; (801f6ec <_ZN12uavcan_stm325clock13UtcSyncParamsC1Ev+0x5c>)
 801f69c:	601a      	str	r2, [r3, #0]
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	4a13      	ldr	r2, [pc, #76]	; (801f6f0 <_ZN12uavcan_stm325clock13UtcSyncParamsC1Ev+0x60>)
 801f6a2:	605a      	str	r2, [r3, #4]
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	4a11      	ldr	r2, [pc, #68]	; (801f6ec <_ZN12uavcan_stm325clock13UtcSyncParamsC1Ev+0x5c>)
 801f6a8:	609a      	str	r2, [r3, #8]
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	4a11      	ldr	r2, [pc, #68]	; (801f6f4 <_ZN12uavcan_stm325clock13UtcSyncParamsC1Ev+0x64>)
 801f6ae:	60da      	str	r2, [r3, #12]
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801f6b6:	611a      	str	r2, [r3, #16]
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	f103 0118 	add.w	r1, r3, #24
 801f6be:	f04f 0204 	mov.w	r2, #4
 801f6c2:	f04f 0300 	mov.w	r3, #0
 801f6c6:	4608      	mov	r0, r1
 801f6c8:	f000 fd1e 	bl	8020108 <_ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromMSecEx>
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	f103 0120 	add.w	r1, r3, #32
 801f6d2:	f04f 020a 	mov.w	r2, #10
 801f6d6:	f04f 0300 	mov.w	r3, #0
 801f6da:	4608      	mov	r0, r1
 801f6dc:	f000 fd14 	bl	8020108 <_ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromMSecEx>
    { }
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	4618      	mov	r0, r3
 801f6e4:	3708      	adds	r7, #8
 801f6e6:	46bd      	mov	sp, r7
 801f6e8:	bd80      	pop	{r7, pc}
 801f6ea:	bf00      	nop
 801f6ec:	3c23d70a 	.word	0x3c23d70a
 801f6f0:	3ca3d70a 	.word	0x3ca3d70a
 801f6f4:	43960000 	.word	0x43960000

0801f6f8 <_ZN6uavcan12ISystemClockC1Ev>:
class UAVCAN_EXPORT ISystemClock
 801f6f8:	b480      	push	{r7}
 801f6fa:	b083      	sub	sp, #12
 801f6fc:	af00      	add	r7, sp, #0
 801f6fe:	6078      	str	r0, [r7, #4]
 801f700:	4a04      	ldr	r2, [pc, #16]	; (801f714 <_ZN6uavcan12ISystemClockC1Ev+0x1c>)
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	601a      	str	r2, [r3, #0]
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	4618      	mov	r0, r3
 801f70a:	370c      	adds	r7, #12
 801f70c:	46bd      	mov	sp, r7
 801f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f712:	4770      	bx	lr
 801f714:	0802cb68 	.word	0x0802cb68

0801f718 <_ZN12uavcan_stm3211SystemClockC1Ev>:
/**
 * Adapter for uavcan::ISystemClock.
 */
class SystemClock : public uavcan::ISystemClock, uavcan::Noncopyable
{
    SystemClock() { }
 801f718:	b580      	push	{r7, lr}
 801f71a:	b082      	sub	sp, #8
 801f71c:	af00      	add	r7, sp, #0
 801f71e:	6078      	str	r0, [r7, #4]
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	4618      	mov	r0, r3
 801f724:	f7ff ffe8 	bl	801f6f8 <_ZN6uavcan12ISystemClockC1Ev>
 801f728:	6878      	ldr	r0, [r7, #4]
 801f72a:	f7e6 f958 	bl	80059de <_ZN6uavcan11NoncopyableC1Ev>
 801f72e:	4a04      	ldr	r2, [pc, #16]	; (801f740 <_ZN12uavcan_stm3211SystemClockC1Ev+0x28>)
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	601a      	str	r2, [r3, #0]
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	4618      	mov	r0, r3
 801f738:	3708      	adds	r7, #8
 801f73a:	46bd      	mov	sp, r7
 801f73c:	bd80      	pop	{r7, pc}
 801f73e:	bf00      	nop
 801f740:	0802cb4c 	.word	0x0802cb4c

0801f744 <_ZN12uavcan_stm3211SystemClock9adjustUtcEN6uavcan11UtcDurationE>:

    virtual void adjustUtc(uavcan::UtcDuration adjustment) { clock::adjustUtc(adjustment); }
 801f744:	b580      	push	{r7, lr}
 801f746:	b084      	sub	sp, #16
 801f748:	af00      	add	r7, sp, #0
 801f74a:	6078      	str	r0, [r7, #4]
 801f74c:	6039      	str	r1, [r7, #0]
 801f74e:	683a      	ldr	r2, [r7, #0]
 801f750:	f107 0308 	add.w	r3, r7, #8
 801f754:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f758:	e883 0003 	stmia.w	r3, {r0, r1}
 801f75c:	f107 0308 	add.w	r3, r7, #8
 801f760:	4618      	mov	r0, r3
 801f762:	f000 fb09 	bl	801fd78 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE>
 801f766:	f107 0308 	add.w	r3, r7, #8
 801f76a:	4618      	mov	r0, r3
 801f76c:	f7ff ff82 	bl	801f674 <_ZN6uavcan11UtcDurationD1Ev>
 801f770:	bf00      	nop
 801f772:	3710      	adds	r7, #16
 801f774:	46bd      	mov	sp, r7
 801f776:	bd80      	pop	{r7, pc}

0801f778 <_ZNK12uavcan_stm3211SystemClock12getMonotonicEv>:

public:
    virtual uavcan::MonotonicTime getMonotonic() const { return clock::getMonotonic(); }
 801f778:	b580      	push	{r7, lr}
 801f77a:	b082      	sub	sp, #8
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	6078      	str	r0, [r7, #4]
 801f780:	6039      	str	r1, [r7, #0]
 801f782:	687b      	ldr	r3, [r7, #4]
 801f784:	4618      	mov	r0, r3
 801f786:	f000 f92f 	bl	801f9e8 <_ZN12uavcan_stm325clock12getMonotonicEv>
 801f78a:	6878      	ldr	r0, [r7, #4]
 801f78c:	3708      	adds	r7, #8
 801f78e:	46bd      	mov	sp, r7
 801f790:	bd80      	pop	{r7, pc}

0801f792 <_ZNK12uavcan_stm3211SystemClock6getUtcEv>:
    virtual uavcan::UtcTime getUtc()             const { return clock::getUtc(); }
 801f792:	b580      	push	{r7, lr}
 801f794:	b082      	sub	sp, #8
 801f796:	af00      	add	r7, sp, #0
 801f798:	6078      	str	r0, [r7, #4]
 801f79a:	6039      	str	r1, [r7, #0]
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	4618      	mov	r0, r3
 801f7a0:	f000 f98e 	bl	801fac0 <_ZN12uavcan_stm325clock6getUtcEv>
 801f7a4:	6878      	ldr	r0, [r7, #4]
 801f7a6:	3708      	adds	r7, #8
 801f7a8:	46bd      	mov	sp, r7
 801f7aa:	bd80      	pop	{r7, pc}

0801f7ac <_ZN12uavcan_stm325MutexC1Ev>:
class Mutex
{
    SemaphoreHandle_t mtx_;

public:
    Mutex(void)
 801f7ac:	b580      	push	{r7, lr}
 801f7ae:	b082      	sub	sp, #8
 801f7b0:	af00      	add	r7, sp, #0
 801f7b2:	6078      	str	r0, [r7, #4]
    {
        mtx_ = xSemaphoreCreateMutex();
 801f7b4:	2001      	movs	r0, #1
 801f7b6:	f7e4 f881 	bl	80038bc <xQueueCreateMutex>
 801f7ba:	4602      	mov	r2, r0
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	601a      	str	r2, [r3, #0]
    }
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	4618      	mov	r0, r3
 801f7c4:	3708      	adds	r7, #8
 801f7c6:	46bd      	mov	sp, r7
 801f7c8:	bd80      	pop	{r7, pc}

0801f7ca <_ZN12uavcan_stm3211MutexLockerC1ERNS_5MutexE>:
class MutexLocker
{
    Mutex& mutex_;

public:
    MutexLocker(Mutex& mutex)
 801f7ca:	b580      	push	{r7, lr}
 801f7cc:	b082      	sub	sp, #8
 801f7ce:	af00      	add	r7, sp, #0
 801f7d0:	6078      	str	r0, [r7, #4]
 801f7d2:	6039      	str	r1, [r7, #0]
        : mutex_(mutex)
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	683a      	ldr	r2, [r7, #0]
 801f7d8:	601a      	str	r2, [r3, #0]
    {
        mutex_.lock();
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	4618      	mov	r0, r3
 801f7e0:	f000 fe5a 	bl	8020498 <_ZN12uavcan_stm325Mutex4lockEv>
    }
 801f7e4:	687b      	ldr	r3, [r7, #4]
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	3708      	adds	r7, #8
 801f7ea:	46bd      	mov	sp, r7
 801f7ec:	bd80      	pop	{r7, pc}

0801f7ee <_ZN12uavcan_stm3211MutexLockerD1Ev>:
    ~MutexLocker()
 801f7ee:	b580      	push	{r7, lr}
 801f7f0:	b082      	sub	sp, #8
 801f7f2:	af00      	add	r7, sp, #0
 801f7f4:	6078      	str	r0, [r7, #4]
    {
        mutex_.unlock();
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	4618      	mov	r0, r3
 801f7fc:	f000 fe5b 	bl	80204b6 <_ZN12uavcan_stm325Mutex6unlockEv>
    }
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	4618      	mov	r0, r3
 801f804:	3708      	adds	r7, #8
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}

0801f80a <_ZN12uavcan_stm325clockL16nvicEnableVectorE9IRQn_Typeh>:
}

#if UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS

static void nvicEnableVector(IRQn_Type irq,  uint8_t prio)
{
 801f80a:	b580      	push	{r7, lr}
 801f80c:	b082      	sub	sp, #8
 801f80e:	af00      	add	r7, sp, #0
 801f810:	4603      	mov	r3, r0
 801f812:	460a      	mov	r2, r1
 801f814:	71fb      	strb	r3, [r7, #7]
 801f816:	4613      	mov	r3, r2
 801f818:	71bb      	strb	r3, [r7, #6]
      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = prio;
      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
      NVIC_Init(&NVIC_InitStructure);
    #else
      HAL_NVIC_SetPriority(irq, prio, 0);
 801f81a:	79b9      	ldrb	r1, [r7, #6]
 801f81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f820:	2200      	movs	r2, #0
 801f822:	4618      	mov	r0, r3
 801f824:	f7e1 f946 	bl	8000ab4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(irq);
 801f828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f82c:	4618      	mov	r0, r3
 801f82e:	f7e1 f95d 	bl	8000aec <HAL_NVIC_EnableIRQ>
    #endif

}
 801f832:	bf00      	nop
 801f834:	3708      	adds	r7, #8
 801f836:	46bd      	mov	sp, r7
 801f838:	bd80      	pop	{r7, pc}
	...

0801f83c <_ZN12uavcan_stm325clock4initEv>:

#endif

void init()
{
 801f83c:	b590      	push	{r4, r7, lr}
 801f83e:	b083      	sub	sp, #12
 801f840:	af00      	add	r7, sp, #0
    CriticalSectionLocker lock;
 801f842:	1d3b      	adds	r3, r7, #4
 801f844:	4618      	mov	r0, r3
 801f846:	f7fe fbf0 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
    if (initialized)
 801f84a:	4b23      	ldr	r3, [pc, #140]	; (801f8d8 <_ZN12uavcan_stm325clock4initEv+0x9c>)
 801f84c:	781b      	ldrb	r3, [r3, #0]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d001      	beq.n	801f856 <_ZN12uavcan_stm325clock4initEv+0x1a>
 801f852:	2400      	movs	r4, #0
    {
        return;
 801f854:	e036      	b.n	801f8c4 <_ZN12uavcan_stm325clock4initEv+0x88>
    }
    initialized = true;
 801f856:	4b20      	ldr	r3, [pc, #128]	; (801f8d8 <_ZN12uavcan_stm325clock4initEv+0x9c>)
 801f858:	2201      	movs	r2, #1
 801f85a:	701a      	strb	r2, [r3, #0]


# if UAVCAN_STM32_CHIBIOS || UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS
    // Power-on and reset
    TIMX_RCC_ENR |= TIMX_RCC_ENR_MASK;
 801f85c:	4b1f      	ldr	r3, [pc, #124]	; (801f8dc <_ZN12uavcan_stm325clock4initEv+0xa0>)
 801f85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f860:	4a1e      	ldr	r2, [pc, #120]	; (801f8dc <_ZN12uavcan_stm325clock4initEv+0xa0>)
 801f862:	f043 0301 	orr.w	r3, r3, #1
 801f866:	6413      	str	r3, [r2, #64]	; 0x40
    TIMX_RCC_RSTR |=  TIMX_RCC_RSTR_MASK;
 801f868:	4b1c      	ldr	r3, [pc, #112]	; (801f8dc <_ZN12uavcan_stm325clock4initEv+0xa0>)
 801f86a:	6a1b      	ldr	r3, [r3, #32]
 801f86c:	4a1b      	ldr	r2, [pc, #108]	; (801f8dc <_ZN12uavcan_stm325clock4initEv+0xa0>)
 801f86e:	f043 0301 	orr.w	r3, r3, #1
 801f872:	6213      	str	r3, [r2, #32]
    TIMX_RCC_RSTR &= ~TIMX_RCC_RSTR_MASK;
 801f874:	4b19      	ldr	r3, [pc, #100]	; (801f8dc <_ZN12uavcan_stm325clock4initEv+0xa0>)
 801f876:	6a1b      	ldr	r3, [r3, #32]
 801f878:	4a18      	ldr	r2, [pc, #96]	; (801f8dc <_ZN12uavcan_stm325clock4initEv+0xa0>)
 801f87a:	f023 0301 	bic.w	r3, r3, #1
 801f87e:	6213      	str	r3, [r2, #32]

    // Enable IRQ
    nvicEnableVector(TIMX_IRQn,  UAVCAN_STM32_IRQ_PRIORITY_MASK);
 801f880:	2105      	movs	r1, #5
 801f882:	201c      	movs	r0, #28
 801f884:	f7ff ffc1 	bl	801f80a <_ZN12uavcan_stm325clockL16nvicEnableVectorE9IRQn_Typeh>
# if (TIMX_INPUT_CLOCK % 1000000) != 0
#  error "No way, timer clock must be divisible by 1e6. FIXME!"
# endif

    // Start the timer
    TIMX->ARR  = 0xFFFF;
 801f888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f88c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f890:	62da      	str	r2, [r3, #44]	; 0x2c
    TIMX->PSC  = (TIMX_INPUT_CLOCK / 1000000) - 1;  // 1 tick == 1 microsecond
 801f892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f896:	2253      	movs	r2, #83	; 0x53
 801f898:	629a      	str	r2, [r3, #40]	; 0x28
    TIMX->CR1  = TIM_CR1_URS;
 801f89a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f89e:	2204      	movs	r2, #4
 801f8a0:	601a      	str	r2, [r3, #0]
    TIMX->SR   = 0;
 801f8a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f8a6:	2200      	movs	r2, #0
 801f8a8:	611a      	str	r2, [r3, #16]
    TIMX->EGR  = TIM_EGR_UG;     // Reload immediately
 801f8aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f8ae:	2201      	movs	r2, #1
 801f8b0:	615a      	str	r2, [r3, #20]
    TIMX->DIER = TIM_DIER_UIE;
 801f8b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f8b6:	2201      	movs	r2, #1
 801f8b8:	60da      	str	r2, [r3, #12]
    TIMX->CR1  = TIM_CR1_CEN;    // Start
 801f8ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f8be:	2201      	movs	r2, #1
 801f8c0:	601a      	str	r2, [r3, #0]
 801f8c2:	2401      	movs	r4, #1
 801f8c4:	1d3b      	adds	r3, r7, #4
 801f8c6:	4618      	mov	r0, r3
 801f8c8:	f7fe fbba 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
 801f8cc:	2c01      	cmp	r4, #1
    CriticalSectionLocker lock;
 801f8ce:	bf00      	nop
// need to investigate
//    up_prioritize_irq(TIMX_IRQn, NVIC_SYSH_HIGH_PRIORITY);
    up_enable_irq(TIMX_IRQn);

# endif
}
 801f8d0:	370c      	adds	r7, #12
 801f8d2:	46bd      	mov	sp, r7
 801f8d4:	bd90      	pop	{r4, r7, pc}
 801f8d6:	bf00      	nop
 801f8d8:	20008644 	.word	0x20008644
 801f8dc:	40023800 	.word	0x40023800

0801f8e0 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv>:
    utc_prev_adj = 0;
    utc_rel_rate_ppm = 0;
}

static uavcan::uint64_t sampleUtcFromCriticalSection()
{
 801f8e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801f8e4:	b086      	sub	sp, #24
 801f8e6:	af00      	add	r7, sp, #0
# if UAVCAN_STM32_CHIBIOS || UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS
    UAVCAN_ASSERT(initialized);
 801f8e8:	4b2c      	ldr	r3, [pc, #176]	; (801f99c <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xbc>)
 801f8ea:	781b      	ldrb	r3, [r3, #0]
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d105      	bne.n	801f8fc <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0x1c>
 801f8f0:	4b2b      	ldr	r3, [pc, #172]	; (801f9a0 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xc0>)
 801f8f2:	4a2c      	ldr	r2, [pc, #176]	; (801f9a4 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xc4>)
 801f8f4:	21c8      	movs	r1, #200	; 0xc8
 801f8f6:	482c      	ldr	r0, [pc, #176]	; (801f9a8 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xc8>)
 801f8f8:	f000 fe48 	bl	802058c <__assert_func>
    UAVCAN_ASSERT(TIMX->DIER & TIM_DIER_UIE);
 801f8fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f900:	68db      	ldr	r3, [r3, #12]
 801f902:	f003 0301 	and.w	r3, r3, #1
 801f906:	2b00      	cmp	r3, #0
 801f908:	d105      	bne.n	801f916 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0x36>
 801f90a:	4b28      	ldr	r3, [pc, #160]	; (801f9ac <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xcc>)
 801f90c:	4a25      	ldr	r2, [pc, #148]	; (801f9a4 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xc4>)
 801f90e:	21c9      	movs	r1, #201	; 0xc9
 801f910:	4825      	ldr	r0, [pc, #148]	; (801f9a8 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xc8>)
 801f912:	f000 fe3b 	bl	802058c <__assert_func>

    volatile uavcan::uint64_t time = time_utc;
 801f916:	4b26      	ldr	r3, [pc, #152]	; (801f9b0 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xd0>)
 801f918:	e9d3 3400 	ldrd	r3, r4, [r3]
 801f91c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    volatile uavcan::uint32_t cnt = TIMX->CNT;
 801f920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f926:	607b      	str	r3, [r7, #4]

    if (TIMX->SR & TIM_SR_UIF)
 801f928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f92c:	691b      	ldr	r3, [r3, #16]
 801f92e:	f003 0301 	and.w	r3, r3, #1
 801f932:	2b00      	cmp	r3, #0
 801f934:	bf14      	ite	ne
 801f936:	2301      	movne	r3, #1
 801f938:	2300      	moveq	r3, #0
 801f93a:	b2db      	uxtb	r3, r3
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	d01d      	beq.n	801f97c <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0x9c>
    {
        cnt = TIMX->CNT;
 801f940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f946:	607b      	str	r3, [r7, #4]
        const uavcan::int32_t add = uavcan::int32_t(USecPerOverflow) +
                                    (utc_accumulated_correction_nsec + utc_correction_nsec_per_overflow) / 1000;
 801f948:	4b1a      	ldr	r3, [pc, #104]	; (801f9b4 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xd4>)
 801f94a:	681a      	ldr	r2, [r3, #0]
 801f94c:	4b1a      	ldr	r3, [pc, #104]	; (801f9b8 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xd8>)
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	4413      	add	r3, r2
 801f952:	4a1a      	ldr	r2, [pc, #104]	; (801f9bc <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv+0xdc>)
 801f954:	fb82 1203 	smull	r1, r2, r2, r3
 801f958:	1192      	asrs	r2, r2, #6
 801f95a:	17db      	asrs	r3, r3, #31
 801f95c:	1ad3      	subs	r3, r2, r3
        const uavcan::int32_t add = uavcan::int32_t(USecPerOverflow) +
 801f95e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 801f962:	617b      	str	r3, [r7, #20]
        time = uavcan::uint64_t(uavcan::int64_t(time) + add);
 801f964:	697b      	ldr	r3, [r7, #20]
 801f966:	469b      	mov	fp, r3
 801f968:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 801f96c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f970:	eb1b 0301 	adds.w	r3, fp, r1
 801f974:	eb4c 0402 	adc.w	r4, ip, r2
 801f978:	e9c7 3402 	strd	r3, r4, [r7, #8]
    }
    return time + cnt;
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	4619      	mov	r1, r3
 801f980:	f04f 0200 	mov.w	r2, #0
 801f984:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 801f988:	eb1b 0301 	adds.w	r3, fp, r1
 801f98c:	eb4c 0402 	adc.w	r4, ip, r2
                                    (utc_accumulated_correction_nsec + utc_correction_nsec_per_overflow) / 1000;
        time = uavcan::uint64_t(uavcan::int64_t(time) + add);
    }
    return time + cnt;
# endif
}
 801f990:	4618      	mov	r0, r3
 801f992:	4621      	mov	r1, r4
 801f994:	3718      	adds	r7, #24
 801f996:	46bd      	mov	sp, r7
 801f998:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801f99c:	20008644 	.word	0x20008644
 801f9a0:	08024eac 	.word	0x08024eac
 801f9a4:	0802cb7c 	.word	0x0802cb7c
 801f9a8:	08024eb8 	.word	0x08024eb8
 801f9ac:	08024f40 	.word	0x08024f40
 801f9b0:	200086a0 	.word	0x200086a0
 801f9b4:	20008684 	.word	0x20008684
 801f9b8:	20008688 	.word	0x20008688
 801f9bc:	10624dd3 	.word	0x10624dd3

0801f9c0 <_ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv>:

uavcan::uint64_t getUtcUSecFromCanInterrupt()
{
 801f9c0:	b598      	push	{r3, r4, r7, lr}
 801f9c2:	af00      	add	r7, sp, #0
    return utc_set ? sampleUtcFromCriticalSection() : 0;
 801f9c4:	4b07      	ldr	r3, [pc, #28]	; (801f9e4 <_ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv+0x24>)
 801f9c6:	781b      	ldrb	r3, [r3, #0]
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	d004      	beq.n	801f9d6 <_ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv+0x16>
 801f9cc:	f7ff ff88 	bl	801f8e0 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv>
 801f9d0:	4603      	mov	r3, r0
 801f9d2:	460c      	mov	r4, r1
 801f9d4:	e003      	b.n	801f9de <_ZN12uavcan_stm325clock26getUtcUSecFromCanInterruptEv+0x1e>
 801f9d6:	f04f 0300 	mov.w	r3, #0
 801f9da:	f04f 0400 	mov.w	r4, #0
}
 801f9de:	4618      	mov	r0, r3
 801f9e0:	4621      	mov	r1, r4
 801f9e2:	bd98      	pop	{r3, r4, r7, pc}
 801f9e4:	20008645 	.word	0x20008645

0801f9e8 <_ZN12uavcan_stm325clock12getMonotonicEv>:

uavcan::MonotonicTime getMonotonic()
{
 801f9e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801f9ec:	b08a      	sub	sp, #40	; 0x28
 801f9ee:	af00      	add	r7, sp, #0
 801f9f0:	6078      	str	r0, [r7, #4]
    uavcan::uint64_t usec = 0;
 801f9f2:	f04f 0300 	mov.w	r3, #0
 801f9f6:	f04f 0400 	mov.w	r4, #0
 801f9fa:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // Scope Critical section
    {
        CriticalSectionLocker locker;
 801f9fe:	f107 031c 	add.w	r3, r7, #28
 801fa02:	4618      	mov	r0, r3
 801fa04:	f7fe fb11 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>

        volatile uavcan::uint64_t time = time_mono;
 801fa08:	4b28      	ldr	r3, [pc, #160]	; (801faac <_ZN12uavcan_stm325clock12getMonotonicEv+0xc4>)
 801fa0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801fa0e:	e9c7 3404 	strd	r3, r4, [r7, #16]

# if UAVCAN_STM32_CHIBIOS || UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS

        volatile uavcan::uint32_t cnt = TIMX->CNT;
 801fa12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa18:	60fb      	str	r3, [r7, #12]
        if (TIMX->SR & TIM_SR_UIF)
 801fa1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fa1e:	691b      	ldr	r3, [r3, #16]
 801fa20:	f003 0301 	and.w	r3, r3, #1
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	bf14      	ite	ne
 801fa28:	2301      	movne	r3, #1
 801fa2a:	2300      	moveq	r3, #0
 801fa2c:	b2db      	uxtb	r3, r3
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d00b      	beq.n	801fa4a <_ZN12uavcan_stm325clock12getMonotonicEv+0x62>
        {
            cnt = TIMX->CNT;
 801fa32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa38:	60fb      	str	r3, [r7, #12]

        if (getreg16(TMR_REG(STM32_BTIM_SR_OFFSET)) & BTIM_SR_UIF)
        {
            cnt = getreg16(TMR_REG(STM32_BTIM_CNT_OFFSET));
# endif
            time += USecPerOverflow;
 801fa3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801fa3e:	f511 3380 	adds.w	r3, r1, #65536	; 0x10000
 801fa42:	f142 0400 	adc.w	r4, r2, #0
 801fa46:	e9c7 3404 	strd	r3, r4, [r7, #16]
        }
        usec = time + cnt;
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	4619      	mov	r1, r3
 801fa4e:	f04f 0200 	mov.w	r2, #0
 801fa52:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 801fa56:	eb1b 0301 	adds.w	r3, fp, r1
 801fa5a:	eb4c 0402 	adc.w	r4, ip, r2
 801fa5e:	e9c7 3408 	strd	r3, r4, [r7, #32]

# ifndef NDEBUG
    static uavcan::uint64_t prev_usec = 0;      // Self-test
    UAVCAN_ASSERT(prev_usec <= usec);
 801fa62:	4b13      	ldr	r3, [pc, #76]	; (801fab0 <_ZN12uavcan_stm325clock12getMonotonicEv+0xc8>)
 801fa64:	e9d3 3400 	ldrd	r3, r4, [r3]
 801fa68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801fa6c:	42a2      	cmp	r2, r4
 801fa6e:	bf08      	it	eq
 801fa70:	4299      	cmpeq	r1, r3
 801fa72:	d206      	bcs.n	801fa82 <_ZN12uavcan_stm325clock12getMonotonicEv+0x9a>
 801fa74:	4b0f      	ldr	r3, [pc, #60]	; (801fab4 <_ZN12uavcan_stm325clock12getMonotonicEv+0xcc>)
 801fa76:	4a10      	ldr	r2, [pc, #64]	; (801fab8 <_ZN12uavcan_stm325clock12getMonotonicEv+0xd0>)
 801fa78:	f240 110f 	movw	r1, #271	; 0x10f
 801fa7c:	480f      	ldr	r0, [pc, #60]	; (801fabc <_ZN12uavcan_stm325clock12getMonotonicEv+0xd4>)
 801fa7e:	f000 fd85 	bl	802058c <__assert_func>
    (void)prev_usec;
    prev_usec = usec;
 801fa82:	4a0b      	ldr	r2, [pc, #44]	; (801fab0 <_ZN12uavcan_stm325clock12getMonotonicEv+0xc8>)
 801fa84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801fa88:	e9c2 3400 	strd	r3, r4, [r2]
        CriticalSectionLocker locker;
 801fa8c:	f107 031c 	add.w	r3, r7, #28
 801fa90:	4618      	mov	r0, r3
 801fa92:	f7fe fad5 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
# endif
   } // End Scope Critical section

   return uavcan::MonotonicTime::fromUSec(usec);
 801fa96:	6879      	ldr	r1, [r7, #4]
 801fa98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801fa9c:	4608      	mov	r0, r1
 801fa9e:	f7e8 ff12 	bl	80088c6 <_ZN6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEE8fromUSecEy>
}
 801faa2:	6878      	ldr	r0, [r7, #4]
 801faa4:	3728      	adds	r7, #40	; 0x28
 801faa6:	46bd      	mov	sp, r7
 801faa8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801faac:	20008698 	.word	0x20008698
 801fab0:	200086a8 	.word	0x200086a8
 801fab4:	08024f84 	.word	0x08024f84
 801fab8:	0802cbc4 	.word	0x0802cbc4
 801fabc:	08024eb8 	.word	0x08024eb8

0801fac0 <_ZN12uavcan_stm325clock6getUtcEv>:

uavcan::UtcTime getUtc()
{
 801fac0:	b590      	push	{r4, r7, lr}
 801fac2:	b087      	sub	sp, #28
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
    if (utc_set)
 801fac8:	4b12      	ldr	r3, [pc, #72]	; (801fb14 <_ZN12uavcan_stm325clock6getUtcEv+0x54>)
 801faca:	781b      	ldrb	r3, [r3, #0]
 801facc:	2b00      	cmp	r3, #0
 801face:	d01a      	beq.n	801fb06 <_ZN12uavcan_stm325clock6getUtcEv+0x46>
    {
        uavcan::uint64_t usec = 0;
 801fad0:	f04f 0300 	mov.w	r3, #0
 801fad4:	f04f 0400 	mov.w	r4, #0
 801fad8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        {
            CriticalSectionLocker locker;
 801fadc:	f107 030c 	add.w	r3, r7, #12
 801fae0:	4618      	mov	r0, r3
 801fae2:	f7fe faa2 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
            usec = sampleUtcFromCriticalSection();
 801fae6:	f7ff fefb 	bl	801f8e0 <_ZN12uavcan_stm325clockL28sampleUtcFromCriticalSectionEv>
 801faea:	e9c7 0104 	strd	r0, r1, [r7, #16]
            CriticalSectionLocker locker;
 801faee:	f107 030c 	add.w	r3, r7, #12
 801faf2:	4618      	mov	r0, r3
 801faf4:	f7fe faa4 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
        }
        return uavcan::UtcTime::fromUSec(usec);
 801faf8:	6879      	ldr	r1, [r7, #4]
 801fafa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801fafe:	4608      	mov	r0, r1
 801fb00:	f7ff fd03 	bl	801f50a <_ZN6uavcan8TimeBaseINS_7UtcTimeENS_11UtcDurationEE8fromUSecEy>
 801fb04:	e002      	b.n	801fb0c <_ZN12uavcan_stm325clock6getUtcEv+0x4c>
    }
    return uavcan::UtcTime();
 801fb06:	6878      	ldr	r0, [r7, #4]
 801fb08:	f7f8 fbee 	bl	80182e8 <_ZN6uavcan7UtcTimeC1Ev>
}
 801fb0c:	6878      	ldr	r0, [r7, #4]
 801fb0e:	371c      	adds	r7, #28
 801fb10:	46bd      	mov	sp, r7
 801fb12:	bd90      	pop	{r4, r7, pc}
 801fb14:	20008645 	.word	0x20008645

0801fb18 <_ZN12uavcan_stm325clockL7lowpassEffff>:

static float lowpass(float xold, float xnew, float corner, float dt)
{
 801fb18:	b480      	push	{r7}
 801fb1a:	b087      	sub	sp, #28
 801fb1c:	af00      	add	r7, sp, #0
 801fb1e:	ed87 0a03 	vstr	s0, [r7, #12]
 801fb22:	edc7 0a02 	vstr	s1, [r7, #8]
 801fb26:	ed87 1a01 	vstr	s2, [r7, #4]
 801fb2a:	edc7 1a00 	vstr	s3, [r7]
    const float tau = 1.F / corner;
 801fb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb32:	ed97 7a01 	vldr	s14, [r7, #4]
 801fb36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fb3a:	edc7 7a05 	vstr	s15, [r7, #20]
    return (dt * xnew + tau * xold) / (dt + tau);
 801fb3e:	ed97 7a00 	vldr	s14, [r7]
 801fb42:	edd7 7a02 	vldr	s15, [r7, #8]
 801fb46:	ee27 7a27 	vmul.f32	s14, s14, s15
 801fb4a:	edd7 6a05 	vldr	s13, [r7, #20]
 801fb4e:	edd7 7a03 	vldr	s15, [r7, #12]
 801fb52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801fb56:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fb5a:	edd7 6a00 	vldr	s13, [r7]
 801fb5e:	edd7 7a05 	vldr	s15, [r7, #20]
 801fb62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801fb66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801fb6a:	eef0 7a66 	vmov.f32	s15, s13
}
 801fb6e:	eeb0 0a67 	vmov.f32	s0, s15
 801fb72:	371c      	adds	r7, #28
 801fb74:	46bd      	mov	sp, r7
 801fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb7a:	4770      	bx	lr

0801fb7c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE>:

static void updateRatePID(uavcan::UtcDuration adjustment)
{
 801fb7c:	b590      	push	{r4, r7, lr}
 801fb7e:	b091      	sub	sp, #68	; 0x44
 801fb80:	af00      	add	r7, sp, #0
 801fb82:	6078      	str	r0, [r7, #4]
    const uavcan::MonotonicTime ts = getMonotonic();
 801fb84:	f107 0310 	add.w	r3, r7, #16
 801fb88:	4618      	mov	r0, r3
 801fb8a:	f7ff ff2d 	bl	801f9e8 <_ZN12uavcan_stm325clock12getMonotonicEv>
    const float dt = float((ts - prev_utc_adj_at).toUSec()) / 1e6F;
 801fb8e:	f107 0318 	add.w	r3, r7, #24
 801fb92:	f107 0110 	add.w	r1, r7, #16
 801fb96:	4a6f      	ldr	r2, [pc, #444]	; (801fd54 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1d8>)
 801fb98:	4618      	mov	r0, r3
 801fb9a:	f7f5 fed0 	bl	801593e <_ZNK6uavcan8TimeBaseINS_13MonotonicTimeENS_17MonotonicDurationEEmiERKS1_>
 801fb9e:	f107 0318 	add.w	r3, r7, #24
 801fba2:	4618      	mov	r0, r3
 801fba4:	f7ea fa8a 	bl	800a0bc <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toUSecEv>
 801fba8:	4603      	mov	r3, r0
 801fbaa:	460c      	mov	r4, r1
 801fbac:	4618      	mov	r0, r3
 801fbae:	4621      	mov	r1, r4
 801fbb0:	f7e0 fc56 	bl	8000460 <__aeabi_l2f>
 801fbb4:	ee06 0a90 	vmov	s13, r0
 801fbb8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801fd58 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1dc>
 801fbbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fbc0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 801fbc4:	f107 0318 	add.w	r3, r7, #24
 801fbc8:	4618      	mov	r0, r3
 801fbca:	f7e6 fb76 	bl	80062ba <_ZN6uavcan17MonotonicDurationD1Ev>
    prev_utc_adj_at = ts;
 801fbce:	4b61      	ldr	r3, [pc, #388]	; (801fd54 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1d8>)
 801fbd0:	461a      	mov	r2, r3
 801fbd2:	f107 0310 	add.w	r3, r7, #16
 801fbd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fbda:	e882 0003 	stmia.w	r2, {r0, r1}
    const float adj_usec = float(adjustment.toUSec());
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	4618      	mov	r0, r3
 801fbe2:	f000 fad4 	bl	802018e <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6toUSecEv>
 801fbe6:	4603      	mov	r3, r0
 801fbe8:	460c      	mov	r4, r1
 801fbea:	4618      	mov	r0, r3
 801fbec:	4621      	mov	r1, r4
 801fbee:	f7e0 fc37 	bl	8000460 <__aeabi_l2f>
 801fbf2:	4603      	mov	r3, r0
 801fbf4:	63bb      	str	r3, [r7, #56]	; 0x38

    /*
     * Target relative rate in PPM
     * Positive to go faster
     */
    const float target_rel_rate_ppm = adj_usec * utc_sync_params.offset_p;
 801fbf6:	4b59      	ldr	r3, [pc, #356]	; (801fd5c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e0>)
 801fbf8:	edd3 7a00 	vldr	s15, [r3]
 801fbfc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801fc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fc04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /*
     * Current relative rate in PPM
     * Positive if the local clock is faster
     */
    const float new_rel_rate_ppm = (utc_prev_adj - adj_usec) / dt; // rate error in [usec/sec], which is PPM
 801fc08:	4b55      	ldr	r3, [pc, #340]	; (801fd60 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e4>)
 801fc0a:	ed93 7a00 	vldr	s14, [r3]
 801fc0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801fc12:	ee77 6a67 	vsub.f32	s13, s14, s15
 801fc16:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801fc1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fc1e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    utc_prev_adj = adj_usec;
 801fc22:	4a4f      	ldr	r2, [pc, #316]	; (801fd60 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e4>)
 801fc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc26:	6013      	str	r3, [r2, #0]
    utc_rel_rate_ppm = lowpass(utc_rel_rate_ppm, new_rel_rate_ppm, utc_sync_params.rate_error_corner_freq, dt);
 801fc28:	4b4e      	ldr	r3, [pc, #312]	; (801fd64 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e8>)
 801fc2a:	edd3 7a00 	vldr	s15, [r3]
 801fc2e:	4b4b      	ldr	r3, [pc, #300]	; (801fd5c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e0>)
 801fc30:	ed93 7a02 	vldr	s14, [r3, #8]
 801fc34:	edd7 1a0f 	vldr	s3, [r7, #60]	; 0x3c
 801fc38:	eeb0 1a47 	vmov.f32	s2, s14
 801fc3c:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 801fc40:	eeb0 0a67 	vmov.f32	s0, s15
 801fc44:	f7ff ff68 	bl	801fb18 <_ZN12uavcan_stm325clockL7lowpassEffff>
 801fc48:	eef0 7a40 	vmov.f32	s15, s0
 801fc4c:	4b45      	ldr	r3, [pc, #276]	; (801fd64 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e8>)
 801fc4e:	edc3 7a00 	vstr	s15, [r3]

    const float rel_rate_error = target_rel_rate_ppm - utc_rel_rate_ppm;
 801fc52:	4b44      	ldr	r3, [pc, #272]	; (801fd64 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e8>)
 801fc54:	edd3 7a00 	vldr	s15, [r3]
 801fc58:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801fc5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801fc60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    if (dt > 10)
 801fc64:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801fc68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801fc6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc74:	dd04      	ble.n	801fc80 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x104>
    {
        utc_rel_rate_error_integral = 0;
 801fc76:	4b3c      	ldr	r3, [pc, #240]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fc78:	f04f 0200 	mov.w	r2, #0
 801fc7c:	601a      	str	r2, [r3, #0]
 801fc7e:	e02b      	b.n	801fcd8 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x15c>
    }
    else
    {
        utc_rel_rate_error_integral += rel_rate_error * dt * utc_sync_params.rate_i;
 801fc80:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801fc84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801fc88:	ee27 7a27 	vmul.f32	s14, s14, s15
 801fc8c:	4b33      	ldr	r3, [pc, #204]	; (801fd5c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e0>)
 801fc8e:	edd3 7a01 	vldr	s15, [r3, #4]
 801fc92:	ee27 7a27 	vmul.f32	s14, s14, s15
 801fc96:	4b34      	ldr	r3, [pc, #208]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fc98:	edd3 7a00 	vldr	s15, [r3]
 801fc9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fca0:	4b31      	ldr	r3, [pc, #196]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fca2:	edc3 7a00 	vstr	s15, [r3]
        utc_rel_rate_error_integral =
            uavcan::max(utc_rel_rate_error_integral, -utc_sync_params.max_rate_correction_ppm);
 801fca6:	4b2d      	ldr	r3, [pc, #180]	; (801fd5c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e0>)
 801fca8:	edd3 7a03 	vldr	s15, [r3, #12]
 801fcac:	eef1 7a67 	vneg.f32	s15, s15
 801fcb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801fcb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801fcb8:	4619      	mov	r1, r3
 801fcba:	482b      	ldr	r0, [pc, #172]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fcbc:	f000 fa74 	bl	80201a8 <_ZN6uavcan3maxIfEERKT_S3_S3_>
 801fcc0:	4603      	mov	r3, r0
 801fcc2:	681b      	ldr	r3, [r3, #0]
        utc_rel_rate_error_integral =
 801fcc4:	4a28      	ldr	r2, [pc, #160]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fcc6:	6013      	str	r3, [r2, #0]
        utc_rel_rate_error_integral =
            uavcan::min(utc_rel_rate_error_integral, utc_sync_params.max_rate_correction_ppm);
 801fcc8:	4928      	ldr	r1, [pc, #160]	; (801fd6c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1f0>)
 801fcca:	4827      	ldr	r0, [pc, #156]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fccc:	f000 fa85 	bl	80201da <_ZN6uavcan3minIfEERKT_S3_S3_>
 801fcd0:	4603      	mov	r3, r0
 801fcd2:	681b      	ldr	r3, [r3, #0]
        utc_rel_rate_error_integral =
 801fcd4:	4a24      	ldr	r2, [pc, #144]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fcd6:	6013      	str	r3, [r2, #0]
    }

    /*
     * Rate controller
     */
    float total_rate_correction_ppm = rel_rate_error + utc_rel_rate_error_integral;
 801fcd8:	4b23      	ldr	r3, [pc, #140]	; (801fd68 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1ec>)
 801fcda:	ed93 7a00 	vldr	s14, [r3]
 801fcde:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801fce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fce6:	edc7 7a03 	vstr	s15, [r7, #12]
    total_rate_correction_ppm = uavcan::max(total_rate_correction_ppm, -utc_sync_params.max_rate_correction_ppm);
 801fcea:	4b1c      	ldr	r3, [pc, #112]	; (801fd5c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1e0>)
 801fcec:	edd3 7a03 	vldr	s15, [r3, #12]
 801fcf0:	eef1 7a67 	vneg.f32	s15, s15
 801fcf4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801fcf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801fcfc:	f107 030c 	add.w	r3, r7, #12
 801fd00:	4611      	mov	r1, r2
 801fd02:	4618      	mov	r0, r3
 801fd04:	f000 fa50 	bl	80201a8 <_ZN6uavcan3maxIfEERKT_S3_S3_>
 801fd08:	4603      	mov	r3, r0
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	60fb      	str	r3, [r7, #12]
    total_rate_correction_ppm = uavcan::min(total_rate_correction_ppm, utc_sync_params.max_rate_correction_ppm);
 801fd0e:	f107 030c 	add.w	r3, r7, #12
 801fd12:	4916      	ldr	r1, [pc, #88]	; (801fd6c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1f0>)
 801fd14:	4618      	mov	r0, r3
 801fd16:	f000 fa60 	bl	80201da <_ZN6uavcan3minIfEERKT_S3_S3_>
 801fd1a:	4603      	mov	r3, r0
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	60fb      	str	r3, [r7, #12]

    utc_correction_nsec_per_overflow = uavcan::int32_t((USecPerOverflow * 1000) * (total_rate_correction_ppm / 1e6F));
 801fd20:	ed97 7a03 	vldr	s14, [r7, #12]
 801fd24:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801fd58 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1dc>
 801fd28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801fd2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801fd70 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1f4>
 801fd30:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fd34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fd38:	ee17 2a90 	vmov	r2, s15
 801fd3c:	4b0d      	ldr	r3, [pc, #52]	; (801fd74 <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE+0x1f8>)
 801fd3e:	601a      	str	r2, [r3, #0]
    const uavcan::MonotonicTime ts = getMonotonic();
 801fd40:	f107 0310 	add.w	r3, r7, #16
 801fd44:	4618      	mov	r0, r3
 801fd46:	f7e6 f9e5 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>

//    syslog("$ adj=%f   rel_rate=%f   rel_rate_eint=%f   tgt_rel_rate=%f   ppm=%f\n",
//              adj_usec, utc_rel_rate_ppm, utc_rel_rate_error_integral, target_rel_rate_ppm,
// total_rate_correction_ppm);
}
 801fd4a:	bf00      	nop
 801fd4c:	3744      	adds	r7, #68	; 0x44
 801fd4e:	46bd      	mov	sp, r7
 801fd50:	bd90      	pop	{r4, r7, pc}
 801fd52:	bf00      	nop
 801fd54:	20008690 	.word	0x20008690
 801fd58:	49742400 	.word	0x49742400
 801fd5c:	20008650 	.word	0x20008650
 801fd60:	20008678 	.word	0x20008678
 801fd64:	2000867c 	.word	0x2000867c
 801fd68:	20008680 	.word	0x20008680
 801fd6c:	2000865c 	.word	0x2000865c
 801fd70:	4c7a0000 	.word	0x4c7a0000
 801fd74:	20008688 	.word	0x20008688

0801fd78 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE>:

void adjustUtc(uavcan::UtcDuration adjustment)
{
 801fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd7a:	ed2d 8b02 	vpush	{d8}
 801fd7e:	b08b      	sub	sp, #44	; 0x2c
 801fd80:	af00      	add	r7, sp, #0
 801fd82:	6078      	str	r0, [r7, #4]
    MutexLocker mlocker(mutex);
 801fd84:	f107 030c 	add.w	r3, r7, #12
 801fd88:	4969      	ldr	r1, [pc, #420]	; (801ff30 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1b8>)
 801fd8a:	4618      	mov	r0, r3
 801fd8c:	f7ff fd1d 	bl	801f7ca <_ZN12uavcan_stm3211MutexLockerC1ERNS_5MutexE>
    UAVCAN_ASSERT(initialized);
 801fd90:	4b68      	ldr	r3, [pc, #416]	; (801ff34 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1bc>)
 801fd92:	781b      	ldrb	r3, [r3, #0]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d106      	bne.n	801fda6 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x2e>
 801fd98:	4b67      	ldr	r3, [pc, #412]	; (801ff38 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1c0>)
 801fd9a:	4a68      	ldr	r2, [pc, #416]	; (801ff3c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1c4>)
 801fd9c:	f240 1161 	movw	r1, #353	; 0x161
 801fda0:	4867      	ldr	r0, [pc, #412]	; (801ff40 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1c8>)
 801fda2:	f000 fbf3 	bl	802058c <__assert_func>

    if (adjustment.getAbs() > utc_sync_params.min_jump || !utc_set)
 801fda6:	687a      	ldr	r2, [r7, #4]
 801fda8:	f107 0310 	add.w	r3, r7, #16
 801fdac:	4611      	mov	r1, r2
 801fdae:	4618      	mov	r0, r3
 801fdb0:	f000 fa2c 	bl	802020c <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6getAbsEv>
 801fdb4:	2501      	movs	r5, #1
 801fdb6:	f107 0310 	add.w	r3, r7, #16
 801fdba:	4962      	ldr	r1, [pc, #392]	; (801ff44 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1cc>)
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	f000 fa3e 	bl	802023e <_ZNK6uavcan12DurationBaseINS_11UtcDurationEEgtERKS1_>
 801fdc2:	4603      	mov	r3, r0
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	d106      	bne.n	801fdd6 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x5e>
 801fdc8:	4b5f      	ldr	r3, [pc, #380]	; (801ff48 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d0>)
 801fdca:	781b      	ldrb	r3, [r3, #0]
 801fdcc:	f083 0301 	eor.w	r3, r3, #1
 801fdd0:	b2db      	uxtb	r3, r3
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d001      	beq.n	801fdda <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x62>
 801fdd6:	2401      	movs	r4, #1
 801fdd8:	e000      	b.n	801fddc <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x64>
 801fdda:	2400      	movs	r4, #0
 801fddc:	2d00      	cmp	r5, #0
 801fdde:	d004      	beq.n	801fdea <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x72>
 801fde0:	f107 0310 	add.w	r3, r7, #16
 801fde4:	4618      	mov	r0, r3
 801fde6:	f7ff fc45 	bl	801f674 <_ZN6uavcan11UtcDurationD1Ev>
 801fdea:	2c00      	cmp	r4, #0
 801fdec:	d04e      	beq.n	801fe8c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x114>
    {
        const uavcan::int64_t adj_usec = adjustment.toUSec();
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	4618      	mov	r0, r3
 801fdf2:	f000 f9cc 	bl	802018e <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6toUSecEv>
 801fdf6:	e9c7 0108 	strd	r0, r1, [r7, #32]

        {
            CriticalSectionLocker locker;
 801fdfa:	f107 0308 	add.w	r3, r7, #8
 801fdfe:	4618      	mov	r0, r3
 801fe00:	f7fe f913 	bl	801e02a <_ZN12uavcan_stm3221CriticalSectionLockerC1Ev>
            if ((adj_usec < 0) && uavcan::uint64_t(-adj_usec) > time_utc)
 801fe04:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	f174 0300 	sbcs.w	r3, r4, #0
 801fe0e:	da15      	bge.n	801fe3c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0xc4>
 801fe10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801fe14:	425b      	negs	r3, r3
 801fe16:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 801fe1a:	4619      	mov	r1, r3
 801fe1c:	4622      	mov	r2, r4
 801fe1e:	4b4b      	ldr	r3, [pc, #300]	; (801ff4c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d4>)
 801fe20:	e9d3 3400 	ldrd	r3, r4, [r3]
 801fe24:	4294      	cmp	r4, r2
 801fe26:	bf08      	it	eq
 801fe28:	428b      	cmpeq	r3, r1
 801fe2a:	d207      	bcs.n	801fe3c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0xc4>
            {
                time_utc = 1;
 801fe2c:	4a47      	ldr	r2, [pc, #284]	; (801ff4c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d4>)
 801fe2e:	f04f 0301 	mov.w	r3, #1
 801fe32:	f04f 0400 	mov.w	r4, #0
 801fe36:	e9c2 3400 	strd	r3, r4, [r2]
 801fe3a:	e00e      	b.n	801fe5a <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0xe2>
            }
            else
            {
                time_utc = uavcan::uint64_t(uavcan::int64_t(time_utc) + adj_usec);
 801fe3c:	4b43      	ldr	r3, [pc, #268]	; (801ff4c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d4>)
 801fe3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801fe42:	4619      	mov	r1, r3
 801fe44:	4622      	mov	r2, r4
 801fe46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801fe4a:	185d      	adds	r5, r3, r1
 801fe4c:	eb44 0602 	adc.w	r6, r4, r2
 801fe50:	462b      	mov	r3, r5
 801fe52:	4634      	mov	r4, r6
 801fe54:	4a3d      	ldr	r2, [pc, #244]	; (801ff4c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d4>)
 801fe56:	e9c2 3400 	strd	r3, r4, [r2]
            CriticalSectionLocker locker;
 801fe5a:	f107 0308 	add.w	r3, r7, #8
 801fe5e:	4618      	mov	r0, r3
 801fe60:	f7fe f8ee 	bl	801e040 <_ZN12uavcan_stm3221CriticalSectionLockerD1Ev>
            }
        }

        utc_set = true;
 801fe64:	4b38      	ldr	r3, [pc, #224]	; (801ff48 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d0>)
 801fe66:	2201      	movs	r2, #1
 801fe68:	701a      	strb	r2, [r3, #0]
        utc_locked = false;
 801fe6a:	4b39      	ldr	r3, [pc, #228]	; (801ff50 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d8>)
 801fe6c:	2200      	movs	r2, #0
 801fe6e:	701a      	strb	r2, [r3, #0]
        utc_jump_cnt++;
 801fe70:	4b38      	ldr	r3, [pc, #224]	; (801ff54 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1dc>)
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	3301      	adds	r3, #1
 801fe76:	4a37      	ldr	r2, [pc, #220]	; (801ff54 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1dc>)
 801fe78:	6013      	str	r3, [r2, #0]
        utc_prev_adj = 0;
 801fe7a:	4b37      	ldr	r3, [pc, #220]	; (801ff58 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1e0>)
 801fe7c:	f04f 0200 	mov.w	r2, #0
 801fe80:	601a      	str	r2, [r3, #0]
        utc_rel_rate_ppm = 0;
 801fe82:	4b36      	ldr	r3, [pc, #216]	; (801ff5c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1e4>)
 801fe84:	f04f 0200 	mov.w	r2, #0
 801fe88:	601a      	str	r2, [r3, #0]
 801fe8a:	e046      	b.n	801ff1a <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1a2>
    }
    else
    {
        updateRatePID(adjustment);
 801fe8c:	687a      	ldr	r2, [r7, #4]
 801fe8e:	f107 0318 	add.w	r3, r7, #24
 801fe92:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fe96:	e883 0003 	stmia.w	r3, {r0, r1}
 801fe9a:	f107 0318 	add.w	r3, r7, #24
 801fe9e:	4618      	mov	r0, r3
 801fea0:	f7ff fe6c 	bl	801fb7c <_ZN12uavcan_stm325clockL13updateRatePIDEN6uavcan11UtcDurationE>
 801fea4:	f107 0318 	add.w	r3, r7, #24
 801fea8:	4618      	mov	r0, r3
 801feaa:	f7ff fbe3 	bl	801f674 <_ZN6uavcan11UtcDurationD1Ev>

        if (!utc_locked)
 801feae:	4b28      	ldr	r3, [pc, #160]	; (801ff50 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d8>)
 801feb0:	781b      	ldrb	r3, [r3, #0]
 801feb2:	f083 0301 	eor.w	r3, r3, #1
 801feb6:	b2db      	uxtb	r3, r3
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d02e      	beq.n	801ff1a <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1a2>
        {
            utc_locked =
                (std::abs(utc_rel_rate_ppm) < utc_sync_params.lock_thres_rate_ppm) &&
 801febc:	4b27      	ldr	r3, [pc, #156]	; (801ff5c <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1e4>)
 801febe:	edd3 7a00 	vldr	s15, [r3]
 801fec2:	eeb0 0a67 	vmov.f32	s0, s15
 801fec6:	f7ff fba5 	bl	801f614 <_ZSt3absf>
 801feca:	eeb0 7a40 	vmov.f32	s14, s0
 801fece:	4b24      	ldr	r3, [pc, #144]	; (801ff60 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1e8>)
 801fed0:	edd3 7a04 	vldr	s15, [r3, #16]
 801fed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fedc:	d51a      	bpl.n	801ff14 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x19c>
                (std::abs(utc_prev_adj) < float(utc_sync_params.lock_thres_offset.toUSec()));
 801fede:	4b1e      	ldr	r3, [pc, #120]	; (801ff58 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1e0>)
 801fee0:	edd3 7a00 	vldr	s15, [r3]
 801fee4:	eeb0 0a67 	vmov.f32	s0, s15
 801fee8:	f7ff fb94 	bl	801f614 <_ZSt3absf>
 801feec:	eeb0 8a40 	vmov.f32	s16, s0
 801fef0:	481c      	ldr	r0, [pc, #112]	; (801ff64 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1ec>)
 801fef2:	f000 f94c 	bl	802018e <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6toUSecEv>
 801fef6:	4603      	mov	r3, r0
 801fef8:	460c      	mov	r4, r1
 801fefa:	4618      	mov	r0, r3
 801fefc:	4621      	mov	r1, r4
 801fefe:	f7e0 faaf 	bl	8000460 <__aeabi_l2f>
 801ff02:	ee07 0a90 	vmov	s15, r0
                (std::abs(utc_rel_rate_ppm) < utc_sync_params.lock_thres_rate_ppm) &&
 801ff06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff0e:	d501      	bpl.n	801ff14 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x19c>
 801ff10:	2201      	movs	r2, #1
 801ff12:	e000      	b.n	801ff16 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x19e>
 801ff14:	2200      	movs	r2, #0
            utc_locked =
 801ff16:	4b0e      	ldr	r3, [pc, #56]	; (801ff50 <_ZN12uavcan_stm325clock9adjustUtcEN6uavcan11UtcDurationE+0x1d8>)
 801ff18:	701a      	strb	r2, [r3, #0]
    MutexLocker mlocker(mutex);
 801ff1a:	f107 030c 	add.w	r3, r7, #12
 801ff1e:	4618      	mov	r0, r3
 801ff20:	f7ff fc65 	bl	801f7ee <_ZN12uavcan_stm3211MutexLockerD1Ev>
        }
    }
}
 801ff24:	bf00      	nop
 801ff26:	372c      	adds	r7, #44	; 0x2c
 801ff28:	46bd      	mov	sp, r7
 801ff2a:	ecbd 8b02 	vpop	{d8}
 801ff2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff30:	20008640 	.word	0x20008640
 801ff34:	20008644 	.word	0x20008644
 801ff38:	08024eac 	.word	0x08024eac
 801ff3c:	0802cc00 	.word	0x0802cc00
 801ff40:	08024eb8 	.word	0x08024eb8
 801ff44:	20008670 	.word	0x20008670
 801ff48:	20008645 	.word	0x20008645
 801ff4c:	200086a0 	.word	0x200086a0
 801ff50:	20008646 	.word	0x20008646
 801ff54:	20008648 	.word	0x20008648
 801ff58:	20008678 	.word	0x20008678
 801ff5c:	2000867c 	.word	0x2000867c
 801ff60:	20008650 	.word	0x20008650
 801ff64:	20008668 	.word	0x20008668

0801ff68 <_ZN12uavcan_stm325clock13UtcSyncParamsD1Ev>:
struct UtcSyncParams
 801ff68:	b580      	push	{r7, lr}
 801ff6a:	b082      	sub	sp, #8
 801ff6c:	af00      	add	r7, sp, #0
 801ff6e:	6078      	str	r0, [r7, #4]
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	3320      	adds	r3, #32
 801ff74:	4618      	mov	r0, r3
 801ff76:	f7ff fb7d 	bl	801f674 <_ZN6uavcan11UtcDurationD1Ev>
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	3318      	adds	r3, #24
 801ff7e:	4618      	mov	r0, r3
 801ff80:	f7ff fb78 	bl	801f674 <_ZN6uavcan11UtcDurationD1Ev>
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	4618      	mov	r0, r3
 801ff88:	3708      	adds	r7, #8
 801ff8a:	46bd      	mov	sp, r7
 801ff8c:	bd80      	pop	{r7, pc}
	...

0801ff90 <_ZN12uavcan_stm3211SystemClock8instanceEv>:
}

} // namespace clock

SystemClock& SystemClock::instance()
{
 801ff90:	b580      	push	{r7, lr}
 801ff92:	b082      	sub	sp, #8
 801ff94:	af00      	add	r7, sp, #0
        uavcan::uint8_t buffer[sizeof(SystemClock)];
        long long _aligner_1;
        long double _aligner_2;
    } storage;

    SystemClock* const ptr = reinterpret_cast<SystemClock*>(storage.buffer);
 801ff96:	4b12      	ldr	r3, [pc, #72]	; (801ffe0 <_ZN12uavcan_stm3211SystemClock8instanceEv+0x50>)
 801ff98:	607b      	str	r3, [r7, #4]

    if (!clock::initialized)
 801ff9a:	4b12      	ldr	r3, [pc, #72]	; (801ffe4 <_ZN12uavcan_stm3211SystemClock8instanceEv+0x54>)
 801ff9c:	781b      	ldrb	r3, [r3, #0]
 801ff9e:	f083 0301 	eor.w	r3, r3, #1
 801ffa2:	b2db      	uxtb	r3, r3
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d015      	beq.n	801ffd4 <_ZN12uavcan_stm3211SystemClock8instanceEv+0x44>
    {
        MutexLocker mlocker(clock::mutex);
 801ffa8:	463b      	mov	r3, r7
 801ffaa:	490f      	ldr	r1, [pc, #60]	; (801ffe8 <_ZN12uavcan_stm3211SystemClock8instanceEv+0x58>)
 801ffac:	4618      	mov	r0, r3
 801ffae:	f7ff fc0c 	bl	801f7ca <_ZN12uavcan_stm3211MutexLockerC1ERNS_5MutexE>
        clock::init();
 801ffb2:	f7ff fc43 	bl	801f83c <_ZN12uavcan_stm325clock4initEv>
        new (ptr)SystemClock();
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	4619      	mov	r1, r3
 801ffba:	2004      	movs	r0, #4
 801ffbc:	f7e5 ff9c 	bl	8005ef8 <_ZnwjPv>
 801ffc0:	4603      	mov	r3, r0
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d002      	beq.n	801ffcc <_ZN12uavcan_stm3211SystemClock8instanceEv+0x3c>
 801ffc6:	4618      	mov	r0, r3
 801ffc8:	f7ff fba6 	bl	801f718 <_ZN12uavcan_stm3211SystemClockC1Ev>
        MutexLocker mlocker(clock::mutex);
 801ffcc:	463b      	mov	r3, r7
 801ffce:	4618      	mov	r0, r3
 801ffd0:	f7ff fc0d 	bl	801f7ee <_ZN12uavcan_stm3211MutexLockerD1Ev>
    }
    return *ptr;
 801ffd4:	4b02      	ldr	r3, [pc, #8]	; (801ffe0 <_ZN12uavcan_stm3211SystemClock8instanceEv+0x50>)
}
 801ffd6:	4618      	mov	r0, r3
 801ffd8:	3708      	adds	r7, #8
 801ffda:	46bd      	mov	sp, r7
 801ffdc:	bd80      	pop	{r7, pc}
 801ffde:	bf00      	nop
 801ffe0:	200086b0 	.word	0x200086b0
 801ffe4:	20008644 	.word	0x20008644
 801ffe8:	20008640 	.word	0x20008640

0801ffec <TIM2_IRQHandler>:
 * Timer interrupt handler
 */

extern "C"
UAVCAN_STM32_IRQ_HANDLER(TIMX_IRQHandler)
{
 801ffec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801fff0:	af00      	add	r7, sp, #0
    UAVCAN_STM32_IRQ_PROLOGUE();

# if UAVCAN_STM32_CHIBIOS || UAVCAN_STM32_BAREMETAL || UAVCAN_STM32_FREERTOS
    TIMX->SR = 0;
 801fff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801fff6:	2200      	movs	r2, #0
 801fff8:	611a      	str	r2, [r3, #16]
# if UAVCAN_STM32_NUTTX
    putreg16(0, TMR_REG(STM32_BTIM_SR_OFFSET));
# endif

    using namespace uavcan_stm32::clock;
    UAVCAN_ASSERT(initialized);
 801fffa:	4b39      	ldr	r3, [pc, #228]	; (80200e0 <TIM2_IRQHandler+0xf4>)
 801fffc:	781b      	ldrb	r3, [r3, #0]
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d106      	bne.n	8020010 <TIM2_IRQHandler+0x24>
 8020002:	4b38      	ldr	r3, [pc, #224]	; (80200e4 <TIM2_IRQHandler+0xf8>)
 8020004:	4a38      	ldr	r2, [pc, #224]	; (80200e8 <TIM2_IRQHandler+0xfc>)
 8020006:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 802000a:	4838      	ldr	r0, [pc, #224]	; (80200ec <TIM2_IRQHandler+0x100>)
 802000c:	f000 fabe 	bl	802058c <__assert_func>

    time_mono += USecPerOverflow;
 8020010:	4b37      	ldr	r3, [pc, #220]	; (80200f0 <TIM2_IRQHandler+0x104>)
 8020012:	e9d3 1200 	ldrd	r1, r2, [r3]
 8020016:	f511 3380 	adds.w	r3, r1, #65536	; 0x10000
 802001a:	f142 0400 	adc.w	r4, r2, #0
 802001e:	4a34      	ldr	r2, [pc, #208]	; (80200f0 <TIM2_IRQHandler+0x104>)
 8020020:	e9c2 3400 	strd	r3, r4, [r2]

    if (utc_set)
 8020024:	4b33      	ldr	r3, [pc, #204]	; (80200f4 <TIM2_IRQHandler+0x108>)
 8020026:	781b      	ldrb	r3, [r3, #0]
 8020028:	2b00      	cmp	r3, #0
 802002a:	d056      	beq.n	80200da <TIM2_IRQHandler+0xee>
    {
        time_utc += USecPerOverflow;
 802002c:	4b32      	ldr	r3, [pc, #200]	; (80200f8 <TIM2_IRQHandler+0x10c>)
 802002e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8020032:	f511 3380 	adds.w	r3, r1, #65536	; 0x10000
 8020036:	f142 0400 	adc.w	r4, r2, #0
 802003a:	4a2f      	ldr	r2, [pc, #188]	; (80200f8 <TIM2_IRQHandler+0x10c>)
 802003c:	e9c2 3400 	strd	r3, r4, [r2]
        utc_accumulated_correction_nsec += utc_correction_nsec_per_overflow;
 8020040:	4b2e      	ldr	r3, [pc, #184]	; (80200fc <TIM2_IRQHandler+0x110>)
 8020042:	681a      	ldr	r2, [r3, #0]
 8020044:	4b2e      	ldr	r3, [pc, #184]	; (8020100 <TIM2_IRQHandler+0x114>)
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	4413      	add	r3, r2
 802004a:	4a2c      	ldr	r2, [pc, #176]	; (80200fc <TIM2_IRQHandler+0x110>)
 802004c:	6013      	str	r3, [r2, #0]
        if (std::abs(utc_accumulated_correction_nsec) >= 1000)
 802004e:	4b2b      	ldr	r3, [pc, #172]	; (80200fc <TIM2_IRQHandler+0x110>)
 8020050:	681b      	ldr	r3, [r3, #0]
 8020052:	4618      	mov	r0, r3
 8020054:	f7ff fad0 	bl	801f5f8 <_ZSt3absl>
 8020058:	4602      	mov	r2, r0
 802005a:	f240 33e7 	movw	r3, #999	; 0x3e7
 802005e:	429a      	cmp	r2, r3
 8020060:	bfcc      	ite	gt
 8020062:	2301      	movgt	r3, #1
 8020064:	2300      	movle	r3, #0
 8020066:	b2db      	uxtb	r3, r3
 8020068:	2b00      	cmp	r3, #0
 802006a:	d023      	beq.n	80200b4 <TIM2_IRQHandler+0xc8>
        {
            time_utc = uavcan::uint64_t(uavcan::int64_t(time_utc) + utc_accumulated_correction_nsec / 1000);
 802006c:	4b23      	ldr	r3, [pc, #140]	; (80200fc <TIM2_IRQHandler+0x110>)
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	4a24      	ldr	r2, [pc, #144]	; (8020104 <TIM2_IRQHandler+0x118>)
 8020072:	fb82 1203 	smull	r1, r2, r2, r3
 8020076:	1192      	asrs	r2, r2, #6
 8020078:	17db      	asrs	r3, r3, #31
 802007a:	1ad3      	subs	r3, r2, r3
 802007c:	469b      	mov	fp, r3
 802007e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8020082:	4a1d      	ldr	r2, [pc, #116]	; (80200f8 <TIM2_IRQHandler+0x10c>)
 8020084:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020088:	eb1b 0301 	adds.w	r3, fp, r1
 802008c:	eb4c 0402 	adc.w	r4, ip, r2
 8020090:	4a19      	ldr	r2, [pc, #100]	; (80200f8 <TIM2_IRQHandler+0x10c>)
 8020092:	e9c2 3400 	strd	r3, r4, [r2]
            utc_accumulated_correction_nsec %= 1000;
 8020096:	4b19      	ldr	r3, [pc, #100]	; (80200fc <TIM2_IRQHandler+0x110>)
 8020098:	681a      	ldr	r2, [r3, #0]
 802009a:	4b1a      	ldr	r3, [pc, #104]	; (8020104 <TIM2_IRQHandler+0x118>)
 802009c:	fb83 1302 	smull	r1, r3, r3, r2
 80200a0:	1199      	asrs	r1, r3, #6
 80200a2:	17d3      	asrs	r3, r2, #31
 80200a4:	1acb      	subs	r3, r1, r3
 80200a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80200aa:	fb01 f303 	mul.w	r3, r1, r3
 80200ae:	1ad3      	subs	r3, r2, r3
 80200b0:	4a12      	ldr	r2, [pc, #72]	; (80200fc <TIM2_IRQHandler+0x110>)
 80200b2:	6013      	str	r3, [r2, #0]
        }

        // Correction decay - 1 nsec per 65536 usec
        if (utc_correction_nsec_per_overflow > 0)
 80200b4:	4b12      	ldr	r3, [pc, #72]	; (8020100 <TIM2_IRQHandler+0x114>)
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	2b00      	cmp	r3, #0
 80200ba:	dd05      	ble.n	80200c8 <TIM2_IRQHandler+0xdc>
        {
            utc_correction_nsec_per_overflow--;
 80200bc:	4b10      	ldr	r3, [pc, #64]	; (8020100 <TIM2_IRQHandler+0x114>)
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	3b01      	subs	r3, #1
 80200c2:	4a0f      	ldr	r2, [pc, #60]	; (8020100 <TIM2_IRQHandler+0x114>)
 80200c4:	6013      	str	r3, [r2, #0]
            ; // Zero
        }
    }

    UAVCAN_STM32_IRQ_EPILOGUE();
}
 80200c6:	e008      	b.n	80200da <TIM2_IRQHandler+0xee>
        else if (utc_correction_nsec_per_overflow < 0)
 80200c8:	4b0d      	ldr	r3, [pc, #52]	; (8020100 <TIM2_IRQHandler+0x114>)
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	da04      	bge.n	80200da <TIM2_IRQHandler+0xee>
            utc_correction_nsec_per_overflow++;
 80200d0:	4b0b      	ldr	r3, [pc, #44]	; (8020100 <TIM2_IRQHandler+0x114>)
 80200d2:	681b      	ldr	r3, [r3, #0]
 80200d4:	3301      	adds	r3, #1
 80200d6:	4a0a      	ldr	r2, [pc, #40]	; (8020100 <TIM2_IRQHandler+0x114>)
 80200d8:	6013      	str	r3, [r2, #0]
}
 80200da:	bf00      	nop
 80200dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80200e0:	20008644 	.word	0x20008644
 80200e4:	08024eac 	.word	0x08024eac
 80200e8:	0802cc3c 	.word	0x0802cc3c
 80200ec:	08024eb8 	.word	0x08024eb8
 80200f0:	20008698 	.word	0x20008698
 80200f4:	20008645 	.word	0x20008645
 80200f8:	200086a0 	.word	0x200086a0
 80200fc:	20008684 	.word	0x20008684
 8020100:	20008688 	.word	0x20008688
 8020104:	10624dd3 	.word	0x10624dd3

08020108 <_ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromMSecEx>:
    static D fromMSec(int64_t ms) { return fromUSec(ms * 1000); }
 8020108:	b5f0      	push	{r4, r5, r6, r7, lr}
 802010a:	b085      	sub	sp, #20
 802010c:	af00      	add	r7, sp, #0
 802010e:	60f8      	str	r0, [r7, #12]
 8020110:	e9c7 2300 	strd	r2, r3, [r7]
 8020114:	e9d7 5600 	ldrd	r5, r6, [r7]
 8020118:	462b      	mov	r3, r5
 802011a:	4634      	mov	r4, r6
 802011c:	f04f 0100 	mov.w	r1, #0
 8020120:	f04f 0200 	mov.w	r2, #0
 8020124:	0162      	lsls	r2, r4, #5
 8020126:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 802012a:	0159      	lsls	r1, r3, #5
 802012c:	460b      	mov	r3, r1
 802012e:	4614      	mov	r4, r2
 8020130:	1b5b      	subs	r3, r3, r5
 8020132:	eb64 0406 	sbc.w	r4, r4, r6
 8020136:	f04f 0100 	mov.w	r1, #0
 802013a:	f04f 0200 	mov.w	r2, #0
 802013e:	00a2      	lsls	r2, r4, #2
 8020140:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8020144:	0099      	lsls	r1, r3, #2
 8020146:	460b      	mov	r3, r1
 8020148:	4614      	mov	r4, r2
 802014a:	195b      	adds	r3, r3, r5
 802014c:	eb44 0406 	adc.w	r4, r4, r6
 8020150:	f04f 0100 	mov.w	r1, #0
 8020154:	f04f 0200 	mov.w	r2, #0
 8020158:	00e2      	lsls	r2, r4, #3
 802015a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802015e:	00d9      	lsls	r1, r3, #3
 8020160:	460b      	mov	r3, r1
 8020162:	4614      	mov	r4, r2
 8020164:	68f9      	ldr	r1, [r7, #12]
 8020166:	461a      	mov	r2, r3
 8020168:	4623      	mov	r3, r4
 802016a:	4608      	mov	r0, r1
 802016c:	f000 f88b 	bl	8020286 <_ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromUSecEx>
 8020170:	68f8      	ldr	r0, [r7, #12]
 8020172:	3714      	adds	r7, #20
 8020174:	46bd      	mov	sp, r7
 8020176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020178 <_ZN6uavcan12DurationBaseINS_11UtcDurationEED1Ev>:
    ~DurationBase() { }
 8020178:	b480      	push	{r7}
 802017a:	b083      	sub	sp, #12
 802017c:	af00      	add	r7, sp, #0
 802017e:	6078      	str	r0, [r7, #4]
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	4618      	mov	r0, r3
 8020184:	370c      	adds	r7, #12
 8020186:	46bd      	mov	sp, r7
 8020188:	f85d 7b04 	ldr.w	r7, [sp], #4
 802018c:	4770      	bx	lr

0802018e <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6toUSecEv>:
    int64_t toUSec() const { return usec_; }
 802018e:	b490      	push	{r4, r7}
 8020190:	b082      	sub	sp, #8
 8020192:	af00      	add	r7, sp, #0
 8020194:	6078      	str	r0, [r7, #4]
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	e9d3 3400 	ldrd	r3, r4, [r3]
 802019c:	4618      	mov	r0, r3
 802019e:	4621      	mov	r1, r4
 80201a0:	3708      	adds	r7, #8
 80201a2:	46bd      	mov	sp, r7
 80201a4:	bc90      	pop	{r4, r7}
 80201a6:	4770      	bx	lr

080201a8 <_ZN6uavcan3maxIfEERKT_S3_S3_>:
const T& max(const T& a, const T& b)
 80201a8:	b480      	push	{r7}
 80201aa:	b083      	sub	sp, #12
 80201ac:	af00      	add	r7, sp, #0
 80201ae:	6078      	str	r0, [r7, #4]
 80201b0:	6039      	str	r1, [r7, #0]
    return (a < b) ? b : a;
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	ed93 7a00 	vldr	s14, [r3]
 80201b8:	683b      	ldr	r3, [r7, #0]
 80201ba:	edd3 7a00 	vldr	s15, [r3]
 80201be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80201c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201c6:	d501      	bpl.n	80201cc <_ZN6uavcan3maxIfEERKT_S3_S3_+0x24>
 80201c8:	683b      	ldr	r3, [r7, #0]
 80201ca:	e000      	b.n	80201ce <_ZN6uavcan3maxIfEERKT_S3_S3_+0x26>
 80201cc:	687b      	ldr	r3, [r7, #4]
}
 80201ce:	4618      	mov	r0, r3
 80201d0:	370c      	adds	r7, #12
 80201d2:	46bd      	mov	sp, r7
 80201d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201d8:	4770      	bx	lr

080201da <_ZN6uavcan3minIfEERKT_S3_S3_>:
const T& min(const T& a, const T& b)
 80201da:	b480      	push	{r7}
 80201dc:	b083      	sub	sp, #12
 80201de:	af00      	add	r7, sp, #0
 80201e0:	6078      	str	r0, [r7, #4]
 80201e2:	6039      	str	r1, [r7, #0]
    return (b < a) ? b : a;
 80201e4:	683b      	ldr	r3, [r7, #0]
 80201e6:	ed93 7a00 	vldr	s14, [r3]
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	edd3 7a00 	vldr	s15, [r3]
 80201f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80201f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201f8:	d501      	bpl.n	80201fe <_ZN6uavcan3minIfEERKT_S3_S3_+0x24>
 80201fa:	683b      	ldr	r3, [r7, #0]
 80201fc:	e000      	b.n	8020200 <_ZN6uavcan3minIfEERKT_S3_S3_+0x26>
 80201fe:	687b      	ldr	r3, [r7, #4]
}
 8020200:	4618      	mov	r0, r3
 8020202:	370c      	adds	r7, #12
 8020204:	46bd      	mov	sp, r7
 8020206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802020a:	4770      	bx	lr

0802020c <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6getAbsEv>:
    D getAbs() const { return D::fromUSec((usec_ < 0) ? (-usec_) : usec_); }
 802020c:	b590      	push	{r4, r7, lr}
 802020e:	b083      	sub	sp, #12
 8020210:	af00      	add	r7, sp, #0
 8020212:	6078      	str	r0, [r7, #4]
 8020214:	6039      	str	r1, [r7, #0]
 8020216:	683b      	ldr	r3, [r7, #0]
 8020218:	e9d3 3400 	ldrd	r3, r4, [r3]
 802021c:	2b00      	cmp	r3, #0
 802021e:	f174 0200 	sbcs.w	r2, r4, #0
 8020222:	da02      	bge.n	802022a <_ZNK6uavcan12DurationBaseINS_11UtcDurationEE6getAbsEv+0x1e>
 8020224:	425b      	negs	r3, r3
 8020226:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 802022a:	6879      	ldr	r1, [r7, #4]
 802022c:	461a      	mov	r2, r3
 802022e:	4623      	mov	r3, r4
 8020230:	4608      	mov	r0, r1
 8020232:	f000 f828 	bl	8020286 <_ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromUSecEx>
 8020236:	6878      	ldr	r0, [r7, #4]
 8020238:	370c      	adds	r7, #12
 802023a:	46bd      	mov	sp, r7
 802023c:	bd90      	pop	{r4, r7, pc}

0802023e <_ZNK6uavcan12DurationBaseINS_11UtcDurationEEgtERKS1_>:
    bool operator>(const D& r) const { return usec_ > r.usec_; }
 802023e:	b490      	push	{r4, r7}
 8020240:	b082      	sub	sp, #8
 8020242:	af00      	add	r7, sp, #0
 8020244:	6078      	str	r0, [r7, #4]
 8020246:	6039      	str	r1, [r7, #0]
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802024e:	683a      	ldr	r2, [r7, #0]
 8020250:	e9d2 1200 	ldrd	r1, r2, [r2]
 8020254:	4299      	cmp	r1, r3
 8020256:	eb72 0304 	sbcs.w	r3, r2, r4
 802025a:	bfb4      	ite	lt
 802025c:	2301      	movlt	r3, #1
 802025e:	2300      	movge	r3, #0
 8020260:	b2db      	uxtb	r3, r3
 8020262:	4618      	mov	r0, r3
 8020264:	3708      	adds	r7, #8
 8020266:	46bd      	mov	sp, r7
 8020268:	bc90      	pop	{r4, r7}
 802026a:	4770      	bx	lr

0802026c <_ZN6uavcan11UtcDurationC1Ev>:
class UAVCAN_EXPORT UtcDuration : public DurationBase<UtcDuration> { };
 802026c:	b580      	push	{r7, lr}
 802026e:	b082      	sub	sp, #8
 8020270:	af00      	add	r7, sp, #0
 8020272:	6078      	str	r0, [r7, #4]
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	4618      	mov	r0, r3
 8020278:	f000 f818 	bl	80202ac <_ZN6uavcan12DurationBaseINS_11UtcDurationEEC1Ev>
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	4618      	mov	r0, r3
 8020280:	3708      	adds	r7, #8
 8020282:	46bd      	mov	sp, r7
 8020284:	bd80      	pop	{r7, pc}

08020286 <_ZN6uavcan12DurationBaseINS_11UtcDurationEE8fromUSecEx>:
    static D fromUSec(int64_t us)
 8020286:	b590      	push	{r4, r7, lr}
 8020288:	b085      	sub	sp, #20
 802028a:	af00      	add	r7, sp, #0
 802028c:	60f8      	str	r0, [r7, #12]
 802028e:	e9c7 2300 	strd	r2, r3, [r7]
        D d;
 8020292:	68f8      	ldr	r0, [r7, #12]
 8020294:	f7ff ffea 	bl	802026c <_ZN6uavcan11UtcDurationC1Ev>
        d.usec_ = us;
 8020298:	68fa      	ldr	r2, [r7, #12]
 802029a:	e9d7 3400 	ldrd	r3, r4, [r7]
 802029e:	e9c2 3400 	strd	r3, r4, [r2]
        return d;
 80202a2:	bf00      	nop
    }
 80202a4:	68f8      	ldr	r0, [r7, #12]
 80202a6:	3714      	adds	r7, #20
 80202a8:	46bd      	mov	sp, r7
 80202aa:	bd90      	pop	{r4, r7, pc}

080202ac <_ZN6uavcan12DurationBaseINS_11UtcDurationEEC1Ev>:
    DurationBase()
 80202ac:	b590      	push	{r4, r7, lr}
 80202ae:	b083      	sub	sp, #12
 80202b0:	af00      	add	r7, sp, #0
 80202b2:	6078      	str	r0, [r7, #4]
        : usec_(0)
 80202b4:	687a      	ldr	r2, [r7, #4]
 80202b6:	f04f 0300 	mov.w	r3, #0
 80202ba:	f04f 0400 	mov.w	r4, #0
 80202be:	e9c2 3400 	strd	r3, r4, [r2]
        StaticAssert<(sizeof(D) == 8)>::check();
 80202c2:	f7e5 fb85 	bl	80059d0 <_ZN6uavcan12StaticAssertILb1EE5checkEv>
    }
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	4618      	mov	r0, r3
 80202ca:	370c      	adds	r7, #12
 80202cc:	46bd      	mov	sp, r7
 80202ce:	bd90      	pop	{r4, r7, pc}

080202d0 <_ZN12uavcan_stm3211SystemClockD1Ev>:
class SystemClock : public uavcan::ISystemClock, uavcan::Noncopyable
 80202d0:	b580      	push	{r7, lr}
 80202d2:	b082      	sub	sp, #8
 80202d4:	af00      	add	r7, sp, #0
 80202d6:	6078      	str	r0, [r7, #4]
 80202d8:	4a07      	ldr	r2, [pc, #28]	; (80202f8 <_ZN12uavcan_stm3211SystemClockD1Ev+0x28>)
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	601a      	str	r2, [r3, #0]
 80202de:	6878      	ldr	r0, [r7, #4]
 80202e0:	f7e5 fb88 	bl	80059f4 <_ZN6uavcan11NoncopyableD1Ev>
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7ff f9a4 	bl	801f634 <_ZN6uavcan12ISystemClockD1Ev>
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	4618      	mov	r0, r3
 80202f0:	3708      	adds	r7, #8
 80202f2:	46bd      	mov	sp, r7
 80202f4:	bd80      	pop	{r7, pc}
 80202f6:	bf00      	nop
 80202f8:	0802cb4c 	.word	0x0802cb4c

080202fc <_ZN12uavcan_stm3211SystemClockD0Ev>:
 80202fc:	b580      	push	{r7, lr}
 80202fe:	b082      	sub	sp, #8
 8020300:	af00      	add	r7, sp, #0
 8020302:	6078      	str	r0, [r7, #4]
 8020304:	6878      	ldr	r0, [r7, #4]
 8020306:	f7ff ffe3 	bl	80202d0 <_ZN12uavcan_stm3211SystemClockD1Ev>
 802030a:	2104      	movs	r1, #4
 802030c:	6878      	ldr	r0, [r7, #4]
 802030e:	f000 f91c 	bl	802054a <_ZdlPvj>
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	4618      	mov	r0, r3
 8020316:	3708      	adds	r7, #8
 8020318:	46bd      	mov	sp, r7
 802031a:	bd80      	pop	{r7, pc}

0802031c <_Z41__static_initialization_and_destruction_0ii>:
 802031c:	b580      	push	{r7, lr}
 802031e:	b082      	sub	sp, #8
 8020320:	af00      	add	r7, sp, #0
 8020322:	6078      	str	r0, [r7, #4]
 8020324:	6039      	str	r1, [r7, #0]
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	2b01      	cmp	r3, #1
 802032a:	d11f      	bne.n	802036c <_Z41__static_initialization_and_destruction_0ii+0x50>
 802032c:	683b      	ldr	r3, [r7, #0]
 802032e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020332:	4293      	cmp	r3, r2
 8020334:	d11a      	bne.n	802036c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8020336:	4816      	ldr	r0, [pc, #88]	; (8020390 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8020338:	f7e8 fbb8 	bl	8008aac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev>
 802033c:	4815      	ldr	r0, [pc, #84]	; (8020394 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 802033e:	f7e8 fc19 	bl	8008b74 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev>
 8020342:	4815      	ldr	r0, [pc, #84]	; (8020398 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8020344:	f7e8 fd62 	bl	8008e0c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev>
 8020348:	4814      	ldr	r0, [pc, #80]	; (802039c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 802034a:	f7e8 feb1 	bl	80090b0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev>
 802034e:	4814      	ldr	r0, [pc, #80]	; (80203a0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8020350:	f7e8 ffb4 	bl	80092bc <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev>
 8020354:	4813      	ldr	r0, [pc, #76]	; (80203a4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8020356:	f7e9 f8a9 	bl	80094ac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev>
Mutex mutex;
 802035a:	4813      	ldr	r0, [pc, #76]	; (80203a8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 802035c:	f7ff fa26 	bl	801f7ac <_ZN12uavcan_stm325MutexC1Ev>
UtcSyncParams utc_sync_params;
 8020360:	4812      	ldr	r0, [pc, #72]	; (80203ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8020362:	f7ff f995 	bl	801f690 <_ZN12uavcan_stm325clock13UtcSyncParamsC1Ev>
uavcan::MonotonicTime prev_utc_adj_at;
 8020366:	4812      	ldr	r0, [pc, #72]	; (80203b0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8020368:	f7e5 fec7 	bl	80060fa <_ZN6uavcan13MonotonicTimeC1Ev>
 802036c:	687b      	ldr	r3, [r7, #4]
 802036e:	2b00      	cmp	r3, #0
 8020370:	d10a      	bne.n	8020388 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8020372:	683b      	ldr	r3, [r7, #0]
 8020374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020378:	4293      	cmp	r3, r2
 802037a:	d105      	bne.n	8020388 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 802037c:	480c      	ldr	r0, [pc, #48]	; (80203b0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 802037e:	f7e5 fec9 	bl	8006114 <_ZN6uavcan13MonotonicTimeD1Ev>
UtcSyncParams utc_sync_params;
 8020382:	480a      	ldr	r0, [pc, #40]	; (80203ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8020384:	f7ff fdf0 	bl	801ff68 <_ZN12uavcan_stm325clock13UtcSyncParamsD1Ev>
}
 8020388:	bf00      	nop
 802038a:	3708      	adds	r7, #8
 802038c:	46bd      	mov	sp, r7
 802038e:	bd80      	pop	{r7, pc}
 8020390:	20008628 	.word	0x20008628
 8020394:	2000862c 	.word	0x2000862c
 8020398:	20008630 	.word	0x20008630
 802039c:	20008634 	.word	0x20008634
 80203a0:	20008638 	.word	0x20008638
 80203a4:	2000863c 	.word	0x2000863c
 80203a8:	20008640 	.word	0x20008640
 80203ac:	20008650 	.word	0x20008650
 80203b0:	20008690 	.word	0x20008690

080203b4 <_GLOBAL__sub_I__ZN12uavcan_stm325clock4initEv>:
 80203b4:	b580      	push	{r7, lr}
 80203b6:	af00      	add	r7, sp, #0
 80203b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80203bc:	2001      	movs	r0, #1
 80203be:	f7ff ffad 	bl	802031c <_Z41__static_initialization_and_destruction_0ii>
 80203c2:	bd80      	pop	{r7, pc}

080203c4 <_GLOBAL__sub_D__ZN12uavcan_stm325clock4initEv>:
 80203c4:	b580      	push	{r7, lr}
 80203c6:	af00      	add	r7, sp, #0
 80203c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80203cc:	2000      	movs	r0, #0
 80203ce:	f7ff ffa5 	bl	802031c <_Z41__static_initialization_and_destruction_0ii>
 80203d2:	bd80      	pop	{r7, pc}

080203d4 <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE>:


#elif UAVCAN_STM32_FREERTOS

bool BusEvent::wait(uavcan::MonotonicDuration duration)
{
 80203d4:	b590      	push	{r4, r7, lr}
 80203d6:	b087      	sub	sp, #28
 80203d8:	af00      	add	r7, sp, #0
 80203da:	6078      	str	r0, [r7, #4]
 80203dc:	6039      	str	r1, [r7, #0]
    static const uavcan::int64_t MaxDelayMSec = 0x000FFFFF;

    const uavcan::int64_t msec = duration.toMSec();
 80203de:	683b      	ldr	r3, [r7, #0]
 80203e0:	4618      	mov	r0, r3
 80203e2:	f7f6 f95e 	bl	80166a2 <_ZNK6uavcan12DurationBaseINS_17MonotonicDurationEE6toMSecEv>
 80203e6:	e9c7 0102 	strd	r0, r1, [r7, #8]

    BaseType_t ret;

    if (msec <= 0)
 80203ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80203ee:	2b01      	cmp	r3, #1
 80203f0:	f174 0300 	sbcs.w	r3, r4, #0
 80203f4:	da07      	bge.n	8020406 <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE+0x32>
    {
        ret = xSemaphoreTake( sem_, ( TickType_t ) 0 );
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	681b      	ldr	r3, [r3, #0]
 80203fa:	2100      	movs	r1, #0
 80203fc:	4618      	mov	r0, r3
 80203fe:	f7e3 fbf9 	bl	8003bf4 <xQueueSemaphoreTake>
 8020402:	6178      	str	r0, [r7, #20]
 8020404:	e010      	b.n	8020428 <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE+0x54>
    }
    else
    {
        ret = xSemaphoreTake( sem_, (msec > MaxDelayMSec) ? (MaxDelayMSec/portTICK_RATE_MS) : (msec/portTICK_RATE_MS));
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	6818      	ldr	r0, [r3, #0]
 802040a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802040e:	490b      	ldr	r1, [pc, #44]	; (802043c <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE+0x68>)
 8020410:	f04f 0200 	mov.w	r2, #0
 8020414:	4299      	cmp	r1, r3
 8020416:	41a2      	sbcs	r2, r4
 8020418:	da02      	bge.n	8020420 <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE+0x4c>
 802041a:	4b08      	ldr	r3, [pc, #32]	; (802043c <_ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE+0x68>)
 802041c:	f04f 0400 	mov.w	r4, #0
 8020420:	4619      	mov	r1, r3
 8020422:	f7e3 fbe7 	bl	8003bf4 <xQueueSemaphoreTake>
 8020426:	6178      	str	r0, [r7, #20]
    }
    return ret == pdTRUE;
 8020428:	697b      	ldr	r3, [r7, #20]
 802042a:	2b01      	cmp	r3, #1
 802042c:	bf0c      	ite	eq
 802042e:	2301      	moveq	r3, #1
 8020430:	2300      	movne	r3, #0
 8020432:	b2db      	uxtb	r3, r3
}
 8020434:	4618      	mov	r0, r3
 8020436:	371c      	adds	r7, #28
 8020438:	46bd      	mov	sp, r7
 802043a:	bd90      	pop	{r4, r7, pc}
 802043c:	000fffff 	.word	0x000fffff

08020440 <_ZN12uavcan_stm328BusEvent19signalFromInterruptEv>:
{
    xSemaphoreGive( sem_ );
}

void BusEvent::signalFromInterrupt()
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b082      	sub	sp, #8
 8020444:	af00      	add	r7, sp, #0
 8020446:	6078      	str	r0, [r7, #4]
    higher_priority_task_woken = pdFALSE;
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	2200      	movs	r2, #0
 802044c:	605a      	str	r2, [r3, #4]

    xSemaphoreGiveFromISR( sem_, &higher_priority_task_woken );
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	681a      	ldr	r2, [r3, #0]
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	3304      	adds	r3, #4
 8020456:	4619      	mov	r1, r3
 8020458:	4610      	mov	r0, r2
 802045a:	f7e3 fb41 	bl	8003ae0 <xQueueGiveFromISR>
}
 802045e:	bf00      	nop
 8020460:	3708      	adds	r7, #8
 8020462:	46bd      	mov	sp, r7
 8020464:	bd80      	pop	{r7, pc}
	...

08020468 <_ZN12uavcan_stm328BusEvent12yieldFromISREv>:

void BusEvent::yieldFromISR()
{
 8020468:	b480      	push	{r7}
 802046a:	b083      	sub	sp, #12
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
    portYIELD_FROM_ISR( higher_priority_task_woken );
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	685b      	ldr	r3, [r3, #4]
 8020474:	2b00      	cmp	r3, #0
 8020476:	d007      	beq.n	8020488 <_ZN12uavcan_stm328BusEvent12yieldFromISREv+0x20>
 8020478:	4b06      	ldr	r3, [pc, #24]	; (8020494 <_ZN12uavcan_stm328BusEvent12yieldFromISREv+0x2c>)
 802047a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802047e:	601a      	str	r2, [r3, #0]
 8020480:	f3bf 8f4f 	dsb	sy
 8020484:	f3bf 8f6f 	isb	sy
}
 8020488:	bf00      	nop
 802048a:	370c      	adds	r7, #12
 802048c:	46bd      	mov	sp, r7
 802048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020492:	4770      	bx	lr
 8020494:	e000ed04 	.word	0xe000ed04

08020498 <_ZN12uavcan_stm325Mutex4lockEv>:

/*
 * Mutex
 */
void Mutex::lock()
{
 8020498:	b580      	push	{r7, lr}
 802049a:	b082      	sub	sp, #8
 802049c:	af00      	add	r7, sp, #0
 802049e:	6078      	str	r0, [r7, #4]
    xSemaphoreTake( mtx_, portMAX_DELAY );
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	f04f 31ff 	mov.w	r1, #4294967295
 80204a8:	4618      	mov	r0, r3
 80204aa:	f7e3 fba3 	bl	8003bf4 <xQueueSemaphoreTake>
}
 80204ae:	bf00      	nop
 80204b0:	3708      	adds	r7, #8
 80204b2:	46bd      	mov	sp, r7
 80204b4:	bd80      	pop	{r7, pc}

080204b6 <_ZN12uavcan_stm325Mutex6unlockEv>:

void Mutex::unlock()
{
 80204b6:	b580      	push	{r7, lr}
 80204b8:	b082      	sub	sp, #8
 80204ba:	af00      	add	r7, sp, #0
 80204bc:	6078      	str	r0, [r7, #4]
    xSemaphoreGive( mtx_ );
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	6818      	ldr	r0, [r3, #0]
 80204c2:	2300      	movs	r3, #0
 80204c4:	2200      	movs	r2, #0
 80204c6:	2100      	movs	r1, #0
 80204c8:	f7e3 fa10 	bl	80038ec <xQueueGenericSend>
}
 80204cc:	bf00      	nop
 80204ce:	3708      	adds	r7, #8
 80204d0:	46bd      	mov	sp, r7
 80204d2:	bd80      	pop	{r7, pc}

080204d4 <_Z41__static_initialization_and_destruction_0ii>:
    }
}

#endif

}
 80204d4:	b580      	push	{r7, lr}
 80204d6:	b082      	sub	sp, #8
 80204d8:	af00      	add	r7, sp, #0
 80204da:	6078      	str	r0, [r7, #4]
 80204dc:	6039      	str	r1, [r7, #0]
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	2b01      	cmp	r3, #1
 80204e2:	d116      	bne.n	8020512 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80204e4:	683b      	ldr	r3, [r7, #0]
 80204e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80204ea:	4293      	cmp	r3, r2
 80204ec:	d111      	bne.n	8020512 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80204ee:	480b      	ldr	r0, [pc, #44]	; (802051c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80204f0:	f7e8 fadc 	bl	8008aac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol11NodeStatus_ILi0EEEEC1Ev>
 80204f4:	480a      	ldr	r0, [pc, #40]	; (8020520 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80204f6:	f7e8 fb3d 	bl	8008b74 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12GetNodeInfo_EEC1Ev>
 80204fa:	480a      	ldr	r0, [pc, #40]	; (8020524 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80204fc:	f7e8 fc86 	bl	8008e0c <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol16GetDataTypeInfo_EEC1Ev>
 8020500:	4809      	ldr	r0, [pc, #36]	; (8020528 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8020502:	f7e8 fdd5 	bl	80090b0 <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol5debug11LogMessage_ILi0EEEEC1Ev>
 8020506:	4809      	ldr	r0, [pc, #36]	; (802052c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8020508:	f7e8 fed8 	bl	80092bc <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol12RestartNode_EEC1Ev>
 802050c:	4808      	ldr	r0, [pc, #32]	; (8020530 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 802050e:	f7e8 ffcd 	bl	80094ac <_ZN6uavcan26DefaultDataTypeRegistratorINS_8protocol18GetTransportStats_EEC1Ev>
 8020512:	bf00      	nop
 8020514:	3708      	adds	r7, #8
 8020516:	46bd      	mov	sp, r7
 8020518:	bd80      	pop	{r7, pc}
 802051a:	bf00      	nop
 802051c:	200086b8 	.word	0x200086b8
 8020520:	200086bc 	.word	0x200086bc
 8020524:	200086c0 	.word	0x200086c0
 8020528:	200086c4 	.word	0x200086c4
 802052c:	200086c8 	.word	0x200086c8
 8020530:	200086cc 	.word	0x200086cc

08020534 <_GLOBAL__sub_I__ZN12uavcan_stm328BusEvent4waitEN6uavcan17MonotonicDurationE>:
 8020534:	b580      	push	{r7, lr}
 8020536:	af00      	add	r7, sp, #0
 8020538:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802053c:	2001      	movs	r0, #1
 802053e:	f7ff ffc9 	bl	80204d4 <_Z41__static_initialization_and_destruction_0ii>
 8020542:	bd80      	pop	{r7, pc}

08020544 <__cxa_pure_virtual>:
 8020544:	b508      	push	{r3, lr}
 8020546:	f000 f811 	bl	802056c <_ZSt9terminatev>

0802054a <_ZdlPvj>:
 802054a:	f000 b800 	b.w	802054e <_ZdlPv>

0802054e <_ZdlPv>:
 802054e:	f000 b885 	b.w	802065c <free>

08020552 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020552:	b508      	push	{r3, lr}
 8020554:	4780      	blx	r0
 8020556:	f000 f811 	bl	802057c <abort>
	...

0802055c <_ZSt13get_terminatev>:
 802055c:	4b02      	ldr	r3, [pc, #8]	; (8020568 <_ZSt13get_terminatev+0xc>)
 802055e:	6818      	ldr	r0, [r3, #0]
 8020560:	f3bf 8f5b 	dmb	ish
 8020564:	4770      	bx	lr
 8020566:	bf00      	nop
 8020568:	2000000c 	.word	0x2000000c

0802056c <_ZSt9terminatev>:
 802056c:	b508      	push	{r3, lr}
 802056e:	f7ff fff5 	bl	802055c <_ZSt13get_terminatev>
 8020572:	f7ff ffee 	bl	8020552 <_ZN10__cxxabiv111__terminateEPFvvE>

08020576 <_ZSt25__throw_bad_function_callv>:
 8020576:	b508      	push	{r3, lr}
 8020578:	f000 f800 	bl	802057c <abort>

0802057c <abort>:
 802057c:	b508      	push	{r3, lr}
 802057e:	2006      	movs	r0, #6
 8020580:	f000 fc30 	bl	8020de4 <raise>
 8020584:	2001      	movs	r0, #1
 8020586:	f7f3 fc13 	bl	8013db0 <_exit>
	...

0802058c <__assert_func>:
 802058c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802058e:	461c      	mov	r4, r3
 8020590:	4b09      	ldr	r3, [pc, #36]	; (80205b8 <__assert_func+0x2c>)
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	4605      	mov	r5, r0
 8020596:	68d8      	ldr	r0, [r3, #12]
 8020598:	b152      	cbz	r2, 80205b0 <__assert_func+0x24>
 802059a:	4b08      	ldr	r3, [pc, #32]	; (80205bc <__assert_func+0x30>)
 802059c:	9100      	str	r1, [sp, #0]
 802059e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80205a2:	4907      	ldr	r1, [pc, #28]	; (80205c0 <__assert_func+0x34>)
 80205a4:	462b      	mov	r3, r5
 80205a6:	4622      	mov	r2, r4
 80205a8:	f000 f81a 	bl	80205e0 <fiprintf>
 80205ac:	f7ff ffe6 	bl	802057c <abort>
 80205b0:	4b04      	ldr	r3, [pc, #16]	; (80205c4 <__assert_func+0x38>)
 80205b2:	461a      	mov	r2, r3
 80205b4:	e7f2      	b.n	802059c <__assert_func+0x10>
 80205b6:	bf00      	nop
 80205b8:	20000010 	.word	0x20000010
 80205bc:	0802cc53 	.word	0x0802cc53
 80205c0:	0802cc60 	.word	0x0802cc60
 80205c4:	0802cc8e 	.word	0x0802cc8e

080205c8 <atexit>:
 80205c8:	2300      	movs	r3, #0
 80205ca:	4601      	mov	r1, r0
 80205cc:	461a      	mov	r2, r3
 80205ce:	4618      	mov	r0, r3
 80205d0:	f000 bd30 	b.w	8021034 <__register_exitproc>

080205d4 <__errno>:
 80205d4:	4b01      	ldr	r3, [pc, #4]	; (80205dc <__errno+0x8>)
 80205d6:	6818      	ldr	r0, [r3, #0]
 80205d8:	4770      	bx	lr
 80205da:	bf00      	nop
 80205dc:	20000010 	.word	0x20000010

080205e0 <fiprintf>:
 80205e0:	b40e      	push	{r1, r2, r3}
 80205e2:	b503      	push	{r0, r1, lr}
 80205e4:	4601      	mov	r1, r0
 80205e6:	ab03      	add	r3, sp, #12
 80205e8:	4805      	ldr	r0, [pc, #20]	; (8020600 <fiprintf+0x20>)
 80205ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80205ee:	6800      	ldr	r0, [r0, #0]
 80205f0:	9301      	str	r3, [sp, #4]
 80205f2:	f000 f921 	bl	8020838 <_vfiprintf_r>
 80205f6:	b002      	add	sp, #8
 80205f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80205fc:	b003      	add	sp, #12
 80205fe:	4770      	bx	lr
 8020600:	20000010 	.word	0x20000010

08020604 <__libc_init_array>:
 8020604:	b570      	push	{r4, r5, r6, lr}
 8020606:	4e0d      	ldr	r6, [pc, #52]	; (802063c <__libc_init_array+0x38>)
 8020608:	4c0d      	ldr	r4, [pc, #52]	; (8020640 <__libc_init_array+0x3c>)
 802060a:	1ba4      	subs	r4, r4, r6
 802060c:	10a4      	asrs	r4, r4, #2
 802060e:	2500      	movs	r5, #0
 8020610:	42a5      	cmp	r5, r4
 8020612:	d109      	bne.n	8020628 <__libc_init_array+0x24>
 8020614:	4e0b      	ldr	r6, [pc, #44]	; (8020644 <__libc_init_array+0x40>)
 8020616:	4c0c      	ldr	r4, [pc, #48]	; (8020648 <__libc_init_array+0x44>)
 8020618:	f001 f996 	bl	8021948 <_init>
 802061c:	1ba4      	subs	r4, r4, r6
 802061e:	10a4      	asrs	r4, r4, #2
 8020620:	2500      	movs	r5, #0
 8020622:	42a5      	cmp	r5, r4
 8020624:	d105      	bne.n	8020632 <__libc_init_array+0x2e>
 8020626:	bd70      	pop	{r4, r5, r6, pc}
 8020628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802062c:	4798      	blx	r3
 802062e:	3501      	adds	r5, #1
 8020630:	e7ee      	b.n	8020610 <__libc_init_array+0xc>
 8020632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020636:	4798      	blx	r3
 8020638:	3501      	adds	r5, #1
 802063a:	e7f2      	b.n	8020622 <__libc_init_array+0x1e>
 802063c:	0802cd30 	.word	0x0802cd30
 8020640:	0802cd30 	.word	0x0802cd30
 8020644:	0802cd30 	.word	0x0802cd30
 8020648:	0802cd54 	.word	0x0802cd54

0802064c <malloc>:
 802064c:	4b02      	ldr	r3, [pc, #8]	; (8020658 <malloc+0xc>)
 802064e:	4601      	mov	r1, r0
 8020650:	6818      	ldr	r0, [r3, #0]
 8020652:	f000 b86d 	b.w	8020730 <_malloc_r>
 8020656:	bf00      	nop
 8020658:	20000010 	.word	0x20000010

0802065c <free>:
 802065c:	4b02      	ldr	r3, [pc, #8]	; (8020668 <free+0xc>)
 802065e:	4601      	mov	r1, r0
 8020660:	6818      	ldr	r0, [r3, #0]
 8020662:	f000 b817 	b.w	8020694 <_free_r>
 8020666:	bf00      	nop
 8020668:	20000010 	.word	0x20000010

0802066c <memcpy>:
 802066c:	b510      	push	{r4, lr}
 802066e:	1e43      	subs	r3, r0, #1
 8020670:	440a      	add	r2, r1
 8020672:	4291      	cmp	r1, r2
 8020674:	d100      	bne.n	8020678 <memcpy+0xc>
 8020676:	bd10      	pop	{r4, pc}
 8020678:	f811 4b01 	ldrb.w	r4, [r1], #1
 802067c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020680:	e7f7      	b.n	8020672 <memcpy+0x6>

08020682 <memset>:
 8020682:	4402      	add	r2, r0
 8020684:	4603      	mov	r3, r0
 8020686:	4293      	cmp	r3, r2
 8020688:	d100      	bne.n	802068c <memset+0xa>
 802068a:	4770      	bx	lr
 802068c:	f803 1b01 	strb.w	r1, [r3], #1
 8020690:	e7f9      	b.n	8020686 <memset+0x4>
	...

08020694 <_free_r>:
 8020694:	b538      	push	{r3, r4, r5, lr}
 8020696:	4605      	mov	r5, r0
 8020698:	2900      	cmp	r1, #0
 802069a:	d045      	beq.n	8020728 <_free_r+0x94>
 802069c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80206a0:	1f0c      	subs	r4, r1, #4
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	bfb8      	it	lt
 80206a6:	18e4      	addlt	r4, r4, r3
 80206a8:	f000 ff1f 	bl	80214ea <__malloc_lock>
 80206ac:	4a1f      	ldr	r2, [pc, #124]	; (802072c <_free_r+0x98>)
 80206ae:	6813      	ldr	r3, [r2, #0]
 80206b0:	4610      	mov	r0, r2
 80206b2:	b933      	cbnz	r3, 80206c2 <_free_r+0x2e>
 80206b4:	6063      	str	r3, [r4, #4]
 80206b6:	6014      	str	r4, [r2, #0]
 80206b8:	4628      	mov	r0, r5
 80206ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80206be:	f000 bf15 	b.w	80214ec <__malloc_unlock>
 80206c2:	42a3      	cmp	r3, r4
 80206c4:	d90c      	bls.n	80206e0 <_free_r+0x4c>
 80206c6:	6821      	ldr	r1, [r4, #0]
 80206c8:	1862      	adds	r2, r4, r1
 80206ca:	4293      	cmp	r3, r2
 80206cc:	bf04      	itt	eq
 80206ce:	681a      	ldreq	r2, [r3, #0]
 80206d0:	685b      	ldreq	r3, [r3, #4]
 80206d2:	6063      	str	r3, [r4, #4]
 80206d4:	bf04      	itt	eq
 80206d6:	1852      	addeq	r2, r2, r1
 80206d8:	6022      	streq	r2, [r4, #0]
 80206da:	6004      	str	r4, [r0, #0]
 80206dc:	e7ec      	b.n	80206b8 <_free_r+0x24>
 80206de:	4613      	mov	r3, r2
 80206e0:	685a      	ldr	r2, [r3, #4]
 80206e2:	b10a      	cbz	r2, 80206e8 <_free_r+0x54>
 80206e4:	42a2      	cmp	r2, r4
 80206e6:	d9fa      	bls.n	80206de <_free_r+0x4a>
 80206e8:	6819      	ldr	r1, [r3, #0]
 80206ea:	1858      	adds	r0, r3, r1
 80206ec:	42a0      	cmp	r0, r4
 80206ee:	d10b      	bne.n	8020708 <_free_r+0x74>
 80206f0:	6820      	ldr	r0, [r4, #0]
 80206f2:	4401      	add	r1, r0
 80206f4:	1858      	adds	r0, r3, r1
 80206f6:	4282      	cmp	r2, r0
 80206f8:	6019      	str	r1, [r3, #0]
 80206fa:	d1dd      	bne.n	80206b8 <_free_r+0x24>
 80206fc:	6810      	ldr	r0, [r2, #0]
 80206fe:	6852      	ldr	r2, [r2, #4]
 8020700:	605a      	str	r2, [r3, #4]
 8020702:	4401      	add	r1, r0
 8020704:	6019      	str	r1, [r3, #0]
 8020706:	e7d7      	b.n	80206b8 <_free_r+0x24>
 8020708:	d902      	bls.n	8020710 <_free_r+0x7c>
 802070a:	230c      	movs	r3, #12
 802070c:	602b      	str	r3, [r5, #0]
 802070e:	e7d3      	b.n	80206b8 <_free_r+0x24>
 8020710:	6820      	ldr	r0, [r4, #0]
 8020712:	1821      	adds	r1, r4, r0
 8020714:	428a      	cmp	r2, r1
 8020716:	bf04      	itt	eq
 8020718:	6811      	ldreq	r1, [r2, #0]
 802071a:	6852      	ldreq	r2, [r2, #4]
 802071c:	6062      	str	r2, [r4, #4]
 802071e:	bf04      	itt	eq
 8020720:	1809      	addeq	r1, r1, r0
 8020722:	6021      	streq	r1, [r4, #0]
 8020724:	605c      	str	r4, [r3, #4]
 8020726:	e7c7      	b.n	80206b8 <_free_r+0x24>
 8020728:	bd38      	pop	{r3, r4, r5, pc}
 802072a:	bf00      	nop
 802072c:	200086d0 	.word	0x200086d0

08020730 <_malloc_r>:
 8020730:	b570      	push	{r4, r5, r6, lr}
 8020732:	1ccd      	adds	r5, r1, #3
 8020734:	f025 0503 	bic.w	r5, r5, #3
 8020738:	3508      	adds	r5, #8
 802073a:	2d0c      	cmp	r5, #12
 802073c:	bf38      	it	cc
 802073e:	250c      	movcc	r5, #12
 8020740:	2d00      	cmp	r5, #0
 8020742:	4606      	mov	r6, r0
 8020744:	db01      	blt.n	802074a <_malloc_r+0x1a>
 8020746:	42a9      	cmp	r1, r5
 8020748:	d903      	bls.n	8020752 <_malloc_r+0x22>
 802074a:	230c      	movs	r3, #12
 802074c:	6033      	str	r3, [r6, #0]
 802074e:	2000      	movs	r0, #0
 8020750:	bd70      	pop	{r4, r5, r6, pc}
 8020752:	f000 feca 	bl	80214ea <__malloc_lock>
 8020756:	4a21      	ldr	r2, [pc, #132]	; (80207dc <_malloc_r+0xac>)
 8020758:	6814      	ldr	r4, [r2, #0]
 802075a:	4621      	mov	r1, r4
 802075c:	b991      	cbnz	r1, 8020784 <_malloc_r+0x54>
 802075e:	4c20      	ldr	r4, [pc, #128]	; (80207e0 <_malloc_r+0xb0>)
 8020760:	6823      	ldr	r3, [r4, #0]
 8020762:	b91b      	cbnz	r3, 802076c <_malloc_r+0x3c>
 8020764:	4630      	mov	r0, r6
 8020766:	f000 fb05 	bl	8020d74 <_sbrk_r>
 802076a:	6020      	str	r0, [r4, #0]
 802076c:	4629      	mov	r1, r5
 802076e:	4630      	mov	r0, r6
 8020770:	f000 fb00 	bl	8020d74 <_sbrk_r>
 8020774:	1c43      	adds	r3, r0, #1
 8020776:	d124      	bne.n	80207c2 <_malloc_r+0x92>
 8020778:	230c      	movs	r3, #12
 802077a:	6033      	str	r3, [r6, #0]
 802077c:	4630      	mov	r0, r6
 802077e:	f000 feb5 	bl	80214ec <__malloc_unlock>
 8020782:	e7e4      	b.n	802074e <_malloc_r+0x1e>
 8020784:	680b      	ldr	r3, [r1, #0]
 8020786:	1b5b      	subs	r3, r3, r5
 8020788:	d418      	bmi.n	80207bc <_malloc_r+0x8c>
 802078a:	2b0b      	cmp	r3, #11
 802078c:	d90f      	bls.n	80207ae <_malloc_r+0x7e>
 802078e:	600b      	str	r3, [r1, #0]
 8020790:	50cd      	str	r5, [r1, r3]
 8020792:	18cc      	adds	r4, r1, r3
 8020794:	4630      	mov	r0, r6
 8020796:	f000 fea9 	bl	80214ec <__malloc_unlock>
 802079a:	f104 000b 	add.w	r0, r4, #11
 802079e:	1d23      	adds	r3, r4, #4
 80207a0:	f020 0007 	bic.w	r0, r0, #7
 80207a4:	1ac3      	subs	r3, r0, r3
 80207a6:	d0d3      	beq.n	8020750 <_malloc_r+0x20>
 80207a8:	425a      	negs	r2, r3
 80207aa:	50e2      	str	r2, [r4, r3]
 80207ac:	e7d0      	b.n	8020750 <_malloc_r+0x20>
 80207ae:	428c      	cmp	r4, r1
 80207b0:	684b      	ldr	r3, [r1, #4]
 80207b2:	bf16      	itet	ne
 80207b4:	6063      	strne	r3, [r4, #4]
 80207b6:	6013      	streq	r3, [r2, #0]
 80207b8:	460c      	movne	r4, r1
 80207ba:	e7eb      	b.n	8020794 <_malloc_r+0x64>
 80207bc:	460c      	mov	r4, r1
 80207be:	6849      	ldr	r1, [r1, #4]
 80207c0:	e7cc      	b.n	802075c <_malloc_r+0x2c>
 80207c2:	1cc4      	adds	r4, r0, #3
 80207c4:	f024 0403 	bic.w	r4, r4, #3
 80207c8:	42a0      	cmp	r0, r4
 80207ca:	d005      	beq.n	80207d8 <_malloc_r+0xa8>
 80207cc:	1a21      	subs	r1, r4, r0
 80207ce:	4630      	mov	r0, r6
 80207d0:	f000 fad0 	bl	8020d74 <_sbrk_r>
 80207d4:	3001      	adds	r0, #1
 80207d6:	d0cf      	beq.n	8020778 <_malloc_r+0x48>
 80207d8:	6025      	str	r5, [r4, #0]
 80207da:	e7db      	b.n	8020794 <_malloc_r+0x64>
 80207dc:	200086d0 	.word	0x200086d0
 80207e0:	200086d4 	.word	0x200086d4

080207e4 <__sfputc_r>:
 80207e4:	6893      	ldr	r3, [r2, #8]
 80207e6:	3b01      	subs	r3, #1
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	b410      	push	{r4}
 80207ec:	6093      	str	r3, [r2, #8]
 80207ee:	da08      	bge.n	8020802 <__sfputc_r+0x1e>
 80207f0:	6994      	ldr	r4, [r2, #24]
 80207f2:	42a3      	cmp	r3, r4
 80207f4:	db01      	blt.n	80207fa <__sfputc_r+0x16>
 80207f6:	290a      	cmp	r1, #10
 80207f8:	d103      	bne.n	8020802 <__sfputc_r+0x1e>
 80207fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80207fe:	f000 bb59 	b.w	8020eb4 <__swbuf_r>
 8020802:	6813      	ldr	r3, [r2, #0]
 8020804:	1c58      	adds	r0, r3, #1
 8020806:	6010      	str	r0, [r2, #0]
 8020808:	7019      	strb	r1, [r3, #0]
 802080a:	4608      	mov	r0, r1
 802080c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020810:	4770      	bx	lr

08020812 <__sfputs_r>:
 8020812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020814:	4606      	mov	r6, r0
 8020816:	460f      	mov	r7, r1
 8020818:	4614      	mov	r4, r2
 802081a:	18d5      	adds	r5, r2, r3
 802081c:	42ac      	cmp	r4, r5
 802081e:	d101      	bne.n	8020824 <__sfputs_r+0x12>
 8020820:	2000      	movs	r0, #0
 8020822:	e007      	b.n	8020834 <__sfputs_r+0x22>
 8020824:	463a      	mov	r2, r7
 8020826:	f814 1b01 	ldrb.w	r1, [r4], #1
 802082a:	4630      	mov	r0, r6
 802082c:	f7ff ffda 	bl	80207e4 <__sfputc_r>
 8020830:	1c43      	adds	r3, r0, #1
 8020832:	d1f3      	bne.n	802081c <__sfputs_r+0xa>
 8020834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020838 <_vfiprintf_r>:
 8020838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083c:	460c      	mov	r4, r1
 802083e:	b09d      	sub	sp, #116	; 0x74
 8020840:	4617      	mov	r7, r2
 8020842:	461d      	mov	r5, r3
 8020844:	4606      	mov	r6, r0
 8020846:	b118      	cbz	r0, 8020850 <_vfiprintf_r+0x18>
 8020848:	6983      	ldr	r3, [r0, #24]
 802084a:	b90b      	cbnz	r3, 8020850 <_vfiprintf_r+0x18>
 802084c:	f000 fd46 	bl	80212dc <__sinit>
 8020850:	4b7c      	ldr	r3, [pc, #496]	; (8020a44 <_vfiprintf_r+0x20c>)
 8020852:	429c      	cmp	r4, r3
 8020854:	d158      	bne.n	8020908 <_vfiprintf_r+0xd0>
 8020856:	6874      	ldr	r4, [r6, #4]
 8020858:	89a3      	ldrh	r3, [r4, #12]
 802085a:	0718      	lsls	r0, r3, #28
 802085c:	d55e      	bpl.n	802091c <_vfiprintf_r+0xe4>
 802085e:	6923      	ldr	r3, [r4, #16]
 8020860:	2b00      	cmp	r3, #0
 8020862:	d05b      	beq.n	802091c <_vfiprintf_r+0xe4>
 8020864:	2300      	movs	r3, #0
 8020866:	9309      	str	r3, [sp, #36]	; 0x24
 8020868:	2320      	movs	r3, #32
 802086a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802086e:	2330      	movs	r3, #48	; 0x30
 8020870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020874:	9503      	str	r5, [sp, #12]
 8020876:	f04f 0b01 	mov.w	fp, #1
 802087a:	46b8      	mov	r8, r7
 802087c:	4645      	mov	r5, r8
 802087e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020882:	b10b      	cbz	r3, 8020888 <_vfiprintf_r+0x50>
 8020884:	2b25      	cmp	r3, #37	; 0x25
 8020886:	d154      	bne.n	8020932 <_vfiprintf_r+0xfa>
 8020888:	ebb8 0a07 	subs.w	sl, r8, r7
 802088c:	d00b      	beq.n	80208a6 <_vfiprintf_r+0x6e>
 802088e:	4653      	mov	r3, sl
 8020890:	463a      	mov	r2, r7
 8020892:	4621      	mov	r1, r4
 8020894:	4630      	mov	r0, r6
 8020896:	f7ff ffbc 	bl	8020812 <__sfputs_r>
 802089a:	3001      	adds	r0, #1
 802089c:	f000 80c2 	beq.w	8020a24 <_vfiprintf_r+0x1ec>
 80208a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208a2:	4453      	add	r3, sl
 80208a4:	9309      	str	r3, [sp, #36]	; 0x24
 80208a6:	f898 3000 	ldrb.w	r3, [r8]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	f000 80ba 	beq.w	8020a24 <_vfiprintf_r+0x1ec>
 80208b0:	2300      	movs	r3, #0
 80208b2:	f04f 32ff 	mov.w	r2, #4294967295
 80208b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80208ba:	9304      	str	r3, [sp, #16]
 80208bc:	9307      	str	r3, [sp, #28]
 80208be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80208c2:	931a      	str	r3, [sp, #104]	; 0x68
 80208c4:	46a8      	mov	r8, r5
 80208c6:	2205      	movs	r2, #5
 80208c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80208cc:	485e      	ldr	r0, [pc, #376]	; (8020a48 <_vfiprintf_r+0x210>)
 80208ce:	f7df fca7 	bl	8000220 <memchr>
 80208d2:	9b04      	ldr	r3, [sp, #16]
 80208d4:	bb78      	cbnz	r0, 8020936 <_vfiprintf_r+0xfe>
 80208d6:	06d9      	lsls	r1, r3, #27
 80208d8:	bf44      	itt	mi
 80208da:	2220      	movmi	r2, #32
 80208dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80208e0:	071a      	lsls	r2, r3, #28
 80208e2:	bf44      	itt	mi
 80208e4:	222b      	movmi	r2, #43	; 0x2b
 80208e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80208ea:	782a      	ldrb	r2, [r5, #0]
 80208ec:	2a2a      	cmp	r2, #42	; 0x2a
 80208ee:	d02a      	beq.n	8020946 <_vfiprintf_r+0x10e>
 80208f0:	9a07      	ldr	r2, [sp, #28]
 80208f2:	46a8      	mov	r8, r5
 80208f4:	2000      	movs	r0, #0
 80208f6:	250a      	movs	r5, #10
 80208f8:	4641      	mov	r1, r8
 80208fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80208fe:	3b30      	subs	r3, #48	; 0x30
 8020900:	2b09      	cmp	r3, #9
 8020902:	d969      	bls.n	80209d8 <_vfiprintf_r+0x1a0>
 8020904:	b360      	cbz	r0, 8020960 <_vfiprintf_r+0x128>
 8020906:	e024      	b.n	8020952 <_vfiprintf_r+0x11a>
 8020908:	4b50      	ldr	r3, [pc, #320]	; (8020a4c <_vfiprintf_r+0x214>)
 802090a:	429c      	cmp	r4, r3
 802090c:	d101      	bne.n	8020912 <_vfiprintf_r+0xda>
 802090e:	68b4      	ldr	r4, [r6, #8]
 8020910:	e7a2      	b.n	8020858 <_vfiprintf_r+0x20>
 8020912:	4b4f      	ldr	r3, [pc, #316]	; (8020a50 <_vfiprintf_r+0x218>)
 8020914:	429c      	cmp	r4, r3
 8020916:	bf08      	it	eq
 8020918:	68f4      	ldreq	r4, [r6, #12]
 802091a:	e79d      	b.n	8020858 <_vfiprintf_r+0x20>
 802091c:	4621      	mov	r1, r4
 802091e:	4630      	mov	r0, r6
 8020920:	f000 fb1a 	bl	8020f58 <__swsetup_r>
 8020924:	2800      	cmp	r0, #0
 8020926:	d09d      	beq.n	8020864 <_vfiprintf_r+0x2c>
 8020928:	f04f 30ff 	mov.w	r0, #4294967295
 802092c:	b01d      	add	sp, #116	; 0x74
 802092e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020932:	46a8      	mov	r8, r5
 8020934:	e7a2      	b.n	802087c <_vfiprintf_r+0x44>
 8020936:	4a44      	ldr	r2, [pc, #272]	; (8020a48 <_vfiprintf_r+0x210>)
 8020938:	1a80      	subs	r0, r0, r2
 802093a:	fa0b f000 	lsl.w	r0, fp, r0
 802093e:	4318      	orrs	r0, r3
 8020940:	9004      	str	r0, [sp, #16]
 8020942:	4645      	mov	r5, r8
 8020944:	e7be      	b.n	80208c4 <_vfiprintf_r+0x8c>
 8020946:	9a03      	ldr	r2, [sp, #12]
 8020948:	1d11      	adds	r1, r2, #4
 802094a:	6812      	ldr	r2, [r2, #0]
 802094c:	9103      	str	r1, [sp, #12]
 802094e:	2a00      	cmp	r2, #0
 8020950:	db01      	blt.n	8020956 <_vfiprintf_r+0x11e>
 8020952:	9207      	str	r2, [sp, #28]
 8020954:	e004      	b.n	8020960 <_vfiprintf_r+0x128>
 8020956:	4252      	negs	r2, r2
 8020958:	f043 0302 	orr.w	r3, r3, #2
 802095c:	9207      	str	r2, [sp, #28]
 802095e:	9304      	str	r3, [sp, #16]
 8020960:	f898 3000 	ldrb.w	r3, [r8]
 8020964:	2b2e      	cmp	r3, #46	; 0x2e
 8020966:	d10e      	bne.n	8020986 <_vfiprintf_r+0x14e>
 8020968:	f898 3001 	ldrb.w	r3, [r8, #1]
 802096c:	2b2a      	cmp	r3, #42	; 0x2a
 802096e:	d138      	bne.n	80209e2 <_vfiprintf_r+0x1aa>
 8020970:	9b03      	ldr	r3, [sp, #12]
 8020972:	1d1a      	adds	r2, r3, #4
 8020974:	681b      	ldr	r3, [r3, #0]
 8020976:	9203      	str	r2, [sp, #12]
 8020978:	2b00      	cmp	r3, #0
 802097a:	bfb8      	it	lt
 802097c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020980:	f108 0802 	add.w	r8, r8, #2
 8020984:	9305      	str	r3, [sp, #20]
 8020986:	4d33      	ldr	r5, [pc, #204]	; (8020a54 <_vfiprintf_r+0x21c>)
 8020988:	f898 1000 	ldrb.w	r1, [r8]
 802098c:	2203      	movs	r2, #3
 802098e:	4628      	mov	r0, r5
 8020990:	f7df fc46 	bl	8000220 <memchr>
 8020994:	b140      	cbz	r0, 80209a8 <_vfiprintf_r+0x170>
 8020996:	2340      	movs	r3, #64	; 0x40
 8020998:	1b40      	subs	r0, r0, r5
 802099a:	fa03 f000 	lsl.w	r0, r3, r0
 802099e:	9b04      	ldr	r3, [sp, #16]
 80209a0:	4303      	orrs	r3, r0
 80209a2:	f108 0801 	add.w	r8, r8, #1
 80209a6:	9304      	str	r3, [sp, #16]
 80209a8:	f898 1000 	ldrb.w	r1, [r8]
 80209ac:	482a      	ldr	r0, [pc, #168]	; (8020a58 <_vfiprintf_r+0x220>)
 80209ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80209b2:	2206      	movs	r2, #6
 80209b4:	f108 0701 	add.w	r7, r8, #1
 80209b8:	f7df fc32 	bl	8000220 <memchr>
 80209bc:	2800      	cmp	r0, #0
 80209be:	d037      	beq.n	8020a30 <_vfiprintf_r+0x1f8>
 80209c0:	4b26      	ldr	r3, [pc, #152]	; (8020a5c <_vfiprintf_r+0x224>)
 80209c2:	bb1b      	cbnz	r3, 8020a0c <_vfiprintf_r+0x1d4>
 80209c4:	9b03      	ldr	r3, [sp, #12]
 80209c6:	3307      	adds	r3, #7
 80209c8:	f023 0307 	bic.w	r3, r3, #7
 80209cc:	3308      	adds	r3, #8
 80209ce:	9303      	str	r3, [sp, #12]
 80209d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209d2:	444b      	add	r3, r9
 80209d4:	9309      	str	r3, [sp, #36]	; 0x24
 80209d6:	e750      	b.n	802087a <_vfiprintf_r+0x42>
 80209d8:	fb05 3202 	mla	r2, r5, r2, r3
 80209dc:	2001      	movs	r0, #1
 80209de:	4688      	mov	r8, r1
 80209e0:	e78a      	b.n	80208f8 <_vfiprintf_r+0xc0>
 80209e2:	2300      	movs	r3, #0
 80209e4:	f108 0801 	add.w	r8, r8, #1
 80209e8:	9305      	str	r3, [sp, #20]
 80209ea:	4619      	mov	r1, r3
 80209ec:	250a      	movs	r5, #10
 80209ee:	4640      	mov	r0, r8
 80209f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80209f4:	3a30      	subs	r2, #48	; 0x30
 80209f6:	2a09      	cmp	r2, #9
 80209f8:	d903      	bls.n	8020a02 <_vfiprintf_r+0x1ca>
 80209fa:	2b00      	cmp	r3, #0
 80209fc:	d0c3      	beq.n	8020986 <_vfiprintf_r+0x14e>
 80209fe:	9105      	str	r1, [sp, #20]
 8020a00:	e7c1      	b.n	8020986 <_vfiprintf_r+0x14e>
 8020a02:	fb05 2101 	mla	r1, r5, r1, r2
 8020a06:	2301      	movs	r3, #1
 8020a08:	4680      	mov	r8, r0
 8020a0a:	e7f0      	b.n	80209ee <_vfiprintf_r+0x1b6>
 8020a0c:	ab03      	add	r3, sp, #12
 8020a0e:	9300      	str	r3, [sp, #0]
 8020a10:	4622      	mov	r2, r4
 8020a12:	4b13      	ldr	r3, [pc, #76]	; (8020a60 <_vfiprintf_r+0x228>)
 8020a14:	a904      	add	r1, sp, #16
 8020a16:	4630      	mov	r0, r6
 8020a18:	f3af 8000 	nop.w
 8020a1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8020a20:	4681      	mov	r9, r0
 8020a22:	d1d5      	bne.n	80209d0 <_vfiprintf_r+0x198>
 8020a24:	89a3      	ldrh	r3, [r4, #12]
 8020a26:	065b      	lsls	r3, r3, #25
 8020a28:	f53f af7e 	bmi.w	8020928 <_vfiprintf_r+0xf0>
 8020a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a2e:	e77d      	b.n	802092c <_vfiprintf_r+0xf4>
 8020a30:	ab03      	add	r3, sp, #12
 8020a32:	9300      	str	r3, [sp, #0]
 8020a34:	4622      	mov	r2, r4
 8020a36:	4b0a      	ldr	r3, [pc, #40]	; (8020a60 <_vfiprintf_r+0x228>)
 8020a38:	a904      	add	r1, sp, #16
 8020a3a:	4630      	mov	r0, r6
 8020a3c:	f000 f888 	bl	8020b50 <_printf_i>
 8020a40:	e7ec      	b.n	8020a1c <_vfiprintf_r+0x1e4>
 8020a42:	bf00      	nop
 8020a44:	0802cce8 	.word	0x0802cce8
 8020a48:	0802cc94 	.word	0x0802cc94
 8020a4c:	0802cd08 	.word	0x0802cd08
 8020a50:	0802ccc8 	.word	0x0802ccc8
 8020a54:	0802cc9a 	.word	0x0802cc9a
 8020a58:	0802cc9e 	.word	0x0802cc9e
 8020a5c:	00000000 	.word	0x00000000
 8020a60:	08020813 	.word	0x08020813

08020a64 <_printf_common>:
 8020a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a68:	4691      	mov	r9, r2
 8020a6a:	461f      	mov	r7, r3
 8020a6c:	688a      	ldr	r2, [r1, #8]
 8020a6e:	690b      	ldr	r3, [r1, #16]
 8020a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020a74:	4293      	cmp	r3, r2
 8020a76:	bfb8      	it	lt
 8020a78:	4613      	movlt	r3, r2
 8020a7a:	f8c9 3000 	str.w	r3, [r9]
 8020a7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020a82:	4606      	mov	r6, r0
 8020a84:	460c      	mov	r4, r1
 8020a86:	b112      	cbz	r2, 8020a8e <_printf_common+0x2a>
 8020a88:	3301      	adds	r3, #1
 8020a8a:	f8c9 3000 	str.w	r3, [r9]
 8020a8e:	6823      	ldr	r3, [r4, #0]
 8020a90:	0699      	lsls	r1, r3, #26
 8020a92:	bf42      	ittt	mi
 8020a94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8020a98:	3302      	addmi	r3, #2
 8020a9a:	f8c9 3000 	strmi.w	r3, [r9]
 8020a9e:	6825      	ldr	r5, [r4, #0]
 8020aa0:	f015 0506 	ands.w	r5, r5, #6
 8020aa4:	d107      	bne.n	8020ab6 <_printf_common+0x52>
 8020aa6:	f104 0a19 	add.w	sl, r4, #25
 8020aaa:	68e3      	ldr	r3, [r4, #12]
 8020aac:	f8d9 2000 	ldr.w	r2, [r9]
 8020ab0:	1a9b      	subs	r3, r3, r2
 8020ab2:	42ab      	cmp	r3, r5
 8020ab4:	dc28      	bgt.n	8020b08 <_printf_common+0xa4>
 8020ab6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8020aba:	6822      	ldr	r2, [r4, #0]
 8020abc:	3300      	adds	r3, #0
 8020abe:	bf18      	it	ne
 8020ac0:	2301      	movne	r3, #1
 8020ac2:	0692      	lsls	r2, r2, #26
 8020ac4:	d42d      	bmi.n	8020b22 <_printf_common+0xbe>
 8020ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020aca:	4639      	mov	r1, r7
 8020acc:	4630      	mov	r0, r6
 8020ace:	47c0      	blx	r8
 8020ad0:	3001      	adds	r0, #1
 8020ad2:	d020      	beq.n	8020b16 <_printf_common+0xb2>
 8020ad4:	6823      	ldr	r3, [r4, #0]
 8020ad6:	68e5      	ldr	r5, [r4, #12]
 8020ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8020adc:	f003 0306 	and.w	r3, r3, #6
 8020ae0:	2b04      	cmp	r3, #4
 8020ae2:	bf08      	it	eq
 8020ae4:	1aad      	subeq	r5, r5, r2
 8020ae6:	68a3      	ldr	r3, [r4, #8]
 8020ae8:	6922      	ldr	r2, [r4, #16]
 8020aea:	bf0c      	ite	eq
 8020aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020af0:	2500      	movne	r5, #0
 8020af2:	4293      	cmp	r3, r2
 8020af4:	bfc4      	itt	gt
 8020af6:	1a9b      	subgt	r3, r3, r2
 8020af8:	18ed      	addgt	r5, r5, r3
 8020afa:	f04f 0900 	mov.w	r9, #0
 8020afe:	341a      	adds	r4, #26
 8020b00:	454d      	cmp	r5, r9
 8020b02:	d11a      	bne.n	8020b3a <_printf_common+0xd6>
 8020b04:	2000      	movs	r0, #0
 8020b06:	e008      	b.n	8020b1a <_printf_common+0xb6>
 8020b08:	2301      	movs	r3, #1
 8020b0a:	4652      	mov	r2, sl
 8020b0c:	4639      	mov	r1, r7
 8020b0e:	4630      	mov	r0, r6
 8020b10:	47c0      	blx	r8
 8020b12:	3001      	adds	r0, #1
 8020b14:	d103      	bne.n	8020b1e <_printf_common+0xba>
 8020b16:	f04f 30ff 	mov.w	r0, #4294967295
 8020b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b1e:	3501      	adds	r5, #1
 8020b20:	e7c3      	b.n	8020aaa <_printf_common+0x46>
 8020b22:	18e1      	adds	r1, r4, r3
 8020b24:	1c5a      	adds	r2, r3, #1
 8020b26:	2030      	movs	r0, #48	; 0x30
 8020b28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020b2c:	4422      	add	r2, r4
 8020b2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020b32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020b36:	3302      	adds	r3, #2
 8020b38:	e7c5      	b.n	8020ac6 <_printf_common+0x62>
 8020b3a:	2301      	movs	r3, #1
 8020b3c:	4622      	mov	r2, r4
 8020b3e:	4639      	mov	r1, r7
 8020b40:	4630      	mov	r0, r6
 8020b42:	47c0      	blx	r8
 8020b44:	3001      	adds	r0, #1
 8020b46:	d0e6      	beq.n	8020b16 <_printf_common+0xb2>
 8020b48:	f109 0901 	add.w	r9, r9, #1
 8020b4c:	e7d8      	b.n	8020b00 <_printf_common+0x9c>
	...

08020b50 <_printf_i>:
 8020b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8020b58:	460c      	mov	r4, r1
 8020b5a:	7e09      	ldrb	r1, [r1, #24]
 8020b5c:	b085      	sub	sp, #20
 8020b5e:	296e      	cmp	r1, #110	; 0x6e
 8020b60:	4617      	mov	r7, r2
 8020b62:	4606      	mov	r6, r0
 8020b64:	4698      	mov	r8, r3
 8020b66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b68:	f000 80b3 	beq.w	8020cd2 <_printf_i+0x182>
 8020b6c:	d822      	bhi.n	8020bb4 <_printf_i+0x64>
 8020b6e:	2963      	cmp	r1, #99	; 0x63
 8020b70:	d036      	beq.n	8020be0 <_printf_i+0x90>
 8020b72:	d80a      	bhi.n	8020b8a <_printf_i+0x3a>
 8020b74:	2900      	cmp	r1, #0
 8020b76:	f000 80b9 	beq.w	8020cec <_printf_i+0x19c>
 8020b7a:	2958      	cmp	r1, #88	; 0x58
 8020b7c:	f000 8083 	beq.w	8020c86 <_printf_i+0x136>
 8020b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020b84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8020b88:	e032      	b.n	8020bf0 <_printf_i+0xa0>
 8020b8a:	2964      	cmp	r1, #100	; 0x64
 8020b8c:	d001      	beq.n	8020b92 <_printf_i+0x42>
 8020b8e:	2969      	cmp	r1, #105	; 0x69
 8020b90:	d1f6      	bne.n	8020b80 <_printf_i+0x30>
 8020b92:	6820      	ldr	r0, [r4, #0]
 8020b94:	6813      	ldr	r3, [r2, #0]
 8020b96:	0605      	lsls	r5, r0, #24
 8020b98:	f103 0104 	add.w	r1, r3, #4
 8020b9c:	d52a      	bpl.n	8020bf4 <_printf_i+0xa4>
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	6011      	str	r1, [r2, #0]
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	da03      	bge.n	8020bae <_printf_i+0x5e>
 8020ba6:	222d      	movs	r2, #45	; 0x2d
 8020ba8:	425b      	negs	r3, r3
 8020baa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020bae:	486f      	ldr	r0, [pc, #444]	; (8020d6c <_printf_i+0x21c>)
 8020bb0:	220a      	movs	r2, #10
 8020bb2:	e039      	b.n	8020c28 <_printf_i+0xd8>
 8020bb4:	2973      	cmp	r1, #115	; 0x73
 8020bb6:	f000 809d 	beq.w	8020cf4 <_printf_i+0x1a4>
 8020bba:	d808      	bhi.n	8020bce <_printf_i+0x7e>
 8020bbc:	296f      	cmp	r1, #111	; 0x6f
 8020bbe:	d020      	beq.n	8020c02 <_printf_i+0xb2>
 8020bc0:	2970      	cmp	r1, #112	; 0x70
 8020bc2:	d1dd      	bne.n	8020b80 <_printf_i+0x30>
 8020bc4:	6823      	ldr	r3, [r4, #0]
 8020bc6:	f043 0320 	orr.w	r3, r3, #32
 8020bca:	6023      	str	r3, [r4, #0]
 8020bcc:	e003      	b.n	8020bd6 <_printf_i+0x86>
 8020bce:	2975      	cmp	r1, #117	; 0x75
 8020bd0:	d017      	beq.n	8020c02 <_printf_i+0xb2>
 8020bd2:	2978      	cmp	r1, #120	; 0x78
 8020bd4:	d1d4      	bne.n	8020b80 <_printf_i+0x30>
 8020bd6:	2378      	movs	r3, #120	; 0x78
 8020bd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020bdc:	4864      	ldr	r0, [pc, #400]	; (8020d70 <_printf_i+0x220>)
 8020bde:	e055      	b.n	8020c8c <_printf_i+0x13c>
 8020be0:	6813      	ldr	r3, [r2, #0]
 8020be2:	1d19      	adds	r1, r3, #4
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	6011      	str	r1, [r2, #0]
 8020be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020bf0:	2301      	movs	r3, #1
 8020bf2:	e08c      	b.n	8020d0e <_printf_i+0x1be>
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	6011      	str	r1, [r2, #0]
 8020bf8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020bfc:	bf18      	it	ne
 8020bfe:	b21b      	sxthne	r3, r3
 8020c00:	e7cf      	b.n	8020ba2 <_printf_i+0x52>
 8020c02:	6813      	ldr	r3, [r2, #0]
 8020c04:	6825      	ldr	r5, [r4, #0]
 8020c06:	1d18      	adds	r0, r3, #4
 8020c08:	6010      	str	r0, [r2, #0]
 8020c0a:	0628      	lsls	r0, r5, #24
 8020c0c:	d501      	bpl.n	8020c12 <_printf_i+0xc2>
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	e002      	b.n	8020c18 <_printf_i+0xc8>
 8020c12:	0668      	lsls	r0, r5, #25
 8020c14:	d5fb      	bpl.n	8020c0e <_printf_i+0xbe>
 8020c16:	881b      	ldrh	r3, [r3, #0]
 8020c18:	4854      	ldr	r0, [pc, #336]	; (8020d6c <_printf_i+0x21c>)
 8020c1a:	296f      	cmp	r1, #111	; 0x6f
 8020c1c:	bf14      	ite	ne
 8020c1e:	220a      	movne	r2, #10
 8020c20:	2208      	moveq	r2, #8
 8020c22:	2100      	movs	r1, #0
 8020c24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020c28:	6865      	ldr	r5, [r4, #4]
 8020c2a:	60a5      	str	r5, [r4, #8]
 8020c2c:	2d00      	cmp	r5, #0
 8020c2e:	f2c0 8095 	blt.w	8020d5c <_printf_i+0x20c>
 8020c32:	6821      	ldr	r1, [r4, #0]
 8020c34:	f021 0104 	bic.w	r1, r1, #4
 8020c38:	6021      	str	r1, [r4, #0]
 8020c3a:	2b00      	cmp	r3, #0
 8020c3c:	d13d      	bne.n	8020cba <_printf_i+0x16a>
 8020c3e:	2d00      	cmp	r5, #0
 8020c40:	f040 808e 	bne.w	8020d60 <_printf_i+0x210>
 8020c44:	4665      	mov	r5, ip
 8020c46:	2a08      	cmp	r2, #8
 8020c48:	d10b      	bne.n	8020c62 <_printf_i+0x112>
 8020c4a:	6823      	ldr	r3, [r4, #0]
 8020c4c:	07db      	lsls	r3, r3, #31
 8020c4e:	d508      	bpl.n	8020c62 <_printf_i+0x112>
 8020c50:	6923      	ldr	r3, [r4, #16]
 8020c52:	6862      	ldr	r2, [r4, #4]
 8020c54:	429a      	cmp	r2, r3
 8020c56:	bfde      	ittt	le
 8020c58:	2330      	movle	r3, #48	; 0x30
 8020c5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020c5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020c62:	ebac 0305 	sub.w	r3, ip, r5
 8020c66:	6123      	str	r3, [r4, #16]
 8020c68:	f8cd 8000 	str.w	r8, [sp]
 8020c6c:	463b      	mov	r3, r7
 8020c6e:	aa03      	add	r2, sp, #12
 8020c70:	4621      	mov	r1, r4
 8020c72:	4630      	mov	r0, r6
 8020c74:	f7ff fef6 	bl	8020a64 <_printf_common>
 8020c78:	3001      	adds	r0, #1
 8020c7a:	d14d      	bne.n	8020d18 <_printf_i+0x1c8>
 8020c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c80:	b005      	add	sp, #20
 8020c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c86:	4839      	ldr	r0, [pc, #228]	; (8020d6c <_printf_i+0x21c>)
 8020c88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8020c8c:	6813      	ldr	r3, [r2, #0]
 8020c8e:	6821      	ldr	r1, [r4, #0]
 8020c90:	1d1d      	adds	r5, r3, #4
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	6015      	str	r5, [r2, #0]
 8020c96:	060a      	lsls	r2, r1, #24
 8020c98:	d50b      	bpl.n	8020cb2 <_printf_i+0x162>
 8020c9a:	07ca      	lsls	r2, r1, #31
 8020c9c:	bf44      	itt	mi
 8020c9e:	f041 0120 	orrmi.w	r1, r1, #32
 8020ca2:	6021      	strmi	r1, [r4, #0]
 8020ca4:	b91b      	cbnz	r3, 8020cae <_printf_i+0x15e>
 8020ca6:	6822      	ldr	r2, [r4, #0]
 8020ca8:	f022 0220 	bic.w	r2, r2, #32
 8020cac:	6022      	str	r2, [r4, #0]
 8020cae:	2210      	movs	r2, #16
 8020cb0:	e7b7      	b.n	8020c22 <_printf_i+0xd2>
 8020cb2:	064d      	lsls	r5, r1, #25
 8020cb4:	bf48      	it	mi
 8020cb6:	b29b      	uxthmi	r3, r3
 8020cb8:	e7ef      	b.n	8020c9a <_printf_i+0x14a>
 8020cba:	4665      	mov	r5, ip
 8020cbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8020cc0:	fb02 3311 	mls	r3, r2, r1, r3
 8020cc4:	5cc3      	ldrb	r3, [r0, r3]
 8020cc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020cca:	460b      	mov	r3, r1
 8020ccc:	2900      	cmp	r1, #0
 8020cce:	d1f5      	bne.n	8020cbc <_printf_i+0x16c>
 8020cd0:	e7b9      	b.n	8020c46 <_printf_i+0xf6>
 8020cd2:	6813      	ldr	r3, [r2, #0]
 8020cd4:	6825      	ldr	r5, [r4, #0]
 8020cd6:	6961      	ldr	r1, [r4, #20]
 8020cd8:	1d18      	adds	r0, r3, #4
 8020cda:	6010      	str	r0, [r2, #0]
 8020cdc:	0628      	lsls	r0, r5, #24
 8020cde:	681b      	ldr	r3, [r3, #0]
 8020ce0:	d501      	bpl.n	8020ce6 <_printf_i+0x196>
 8020ce2:	6019      	str	r1, [r3, #0]
 8020ce4:	e002      	b.n	8020cec <_printf_i+0x19c>
 8020ce6:	066a      	lsls	r2, r5, #25
 8020ce8:	d5fb      	bpl.n	8020ce2 <_printf_i+0x192>
 8020cea:	8019      	strh	r1, [r3, #0]
 8020cec:	2300      	movs	r3, #0
 8020cee:	6123      	str	r3, [r4, #16]
 8020cf0:	4665      	mov	r5, ip
 8020cf2:	e7b9      	b.n	8020c68 <_printf_i+0x118>
 8020cf4:	6813      	ldr	r3, [r2, #0]
 8020cf6:	1d19      	adds	r1, r3, #4
 8020cf8:	6011      	str	r1, [r2, #0]
 8020cfa:	681d      	ldr	r5, [r3, #0]
 8020cfc:	6862      	ldr	r2, [r4, #4]
 8020cfe:	2100      	movs	r1, #0
 8020d00:	4628      	mov	r0, r5
 8020d02:	f7df fa8d 	bl	8000220 <memchr>
 8020d06:	b108      	cbz	r0, 8020d0c <_printf_i+0x1bc>
 8020d08:	1b40      	subs	r0, r0, r5
 8020d0a:	6060      	str	r0, [r4, #4]
 8020d0c:	6863      	ldr	r3, [r4, #4]
 8020d0e:	6123      	str	r3, [r4, #16]
 8020d10:	2300      	movs	r3, #0
 8020d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020d16:	e7a7      	b.n	8020c68 <_printf_i+0x118>
 8020d18:	6923      	ldr	r3, [r4, #16]
 8020d1a:	462a      	mov	r2, r5
 8020d1c:	4639      	mov	r1, r7
 8020d1e:	4630      	mov	r0, r6
 8020d20:	47c0      	blx	r8
 8020d22:	3001      	adds	r0, #1
 8020d24:	d0aa      	beq.n	8020c7c <_printf_i+0x12c>
 8020d26:	6823      	ldr	r3, [r4, #0]
 8020d28:	079b      	lsls	r3, r3, #30
 8020d2a:	d413      	bmi.n	8020d54 <_printf_i+0x204>
 8020d2c:	68e0      	ldr	r0, [r4, #12]
 8020d2e:	9b03      	ldr	r3, [sp, #12]
 8020d30:	4298      	cmp	r0, r3
 8020d32:	bfb8      	it	lt
 8020d34:	4618      	movlt	r0, r3
 8020d36:	e7a3      	b.n	8020c80 <_printf_i+0x130>
 8020d38:	2301      	movs	r3, #1
 8020d3a:	464a      	mov	r2, r9
 8020d3c:	4639      	mov	r1, r7
 8020d3e:	4630      	mov	r0, r6
 8020d40:	47c0      	blx	r8
 8020d42:	3001      	adds	r0, #1
 8020d44:	d09a      	beq.n	8020c7c <_printf_i+0x12c>
 8020d46:	3501      	adds	r5, #1
 8020d48:	68e3      	ldr	r3, [r4, #12]
 8020d4a:	9a03      	ldr	r2, [sp, #12]
 8020d4c:	1a9b      	subs	r3, r3, r2
 8020d4e:	42ab      	cmp	r3, r5
 8020d50:	dcf2      	bgt.n	8020d38 <_printf_i+0x1e8>
 8020d52:	e7eb      	b.n	8020d2c <_printf_i+0x1dc>
 8020d54:	2500      	movs	r5, #0
 8020d56:	f104 0919 	add.w	r9, r4, #25
 8020d5a:	e7f5      	b.n	8020d48 <_printf_i+0x1f8>
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d1ac      	bne.n	8020cba <_printf_i+0x16a>
 8020d60:	7803      	ldrb	r3, [r0, #0]
 8020d62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020d66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020d6a:	e76c      	b.n	8020c46 <_printf_i+0xf6>
 8020d6c:	0802cca5 	.word	0x0802cca5
 8020d70:	0802ccb6 	.word	0x0802ccb6

08020d74 <_sbrk_r>:
 8020d74:	b538      	push	{r3, r4, r5, lr}
 8020d76:	4c06      	ldr	r4, [pc, #24]	; (8020d90 <_sbrk_r+0x1c>)
 8020d78:	2300      	movs	r3, #0
 8020d7a:	4605      	mov	r5, r0
 8020d7c:	4608      	mov	r0, r1
 8020d7e:	6023      	str	r3, [r4, #0]
 8020d80:	f7f3 f88e 	bl	8013ea0 <_sbrk>
 8020d84:	1c43      	adds	r3, r0, #1
 8020d86:	d102      	bne.n	8020d8e <_sbrk_r+0x1a>
 8020d88:	6823      	ldr	r3, [r4, #0]
 8020d8a:	b103      	cbz	r3, 8020d8e <_sbrk_r+0x1a>
 8020d8c:	602b      	str	r3, [r5, #0]
 8020d8e:	bd38      	pop	{r3, r4, r5, pc}
 8020d90:	200087ac 	.word	0x200087ac

08020d94 <_raise_r>:
 8020d94:	291f      	cmp	r1, #31
 8020d96:	b538      	push	{r3, r4, r5, lr}
 8020d98:	4604      	mov	r4, r0
 8020d9a:	460d      	mov	r5, r1
 8020d9c:	d904      	bls.n	8020da8 <_raise_r+0x14>
 8020d9e:	2316      	movs	r3, #22
 8020da0:	6003      	str	r3, [r0, #0]
 8020da2:	f04f 30ff 	mov.w	r0, #4294967295
 8020da6:	bd38      	pop	{r3, r4, r5, pc}
 8020da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020daa:	b112      	cbz	r2, 8020db2 <_raise_r+0x1e>
 8020dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020db0:	b94b      	cbnz	r3, 8020dc6 <_raise_r+0x32>
 8020db2:	4620      	mov	r0, r4
 8020db4:	f000 f830 	bl	8020e18 <_getpid_r>
 8020db8:	462a      	mov	r2, r5
 8020dba:	4601      	mov	r1, r0
 8020dbc:	4620      	mov	r0, r4
 8020dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020dc2:	f000 b817 	b.w	8020df4 <_kill_r>
 8020dc6:	2b01      	cmp	r3, #1
 8020dc8:	d00a      	beq.n	8020de0 <_raise_r+0x4c>
 8020dca:	1c59      	adds	r1, r3, #1
 8020dcc:	d103      	bne.n	8020dd6 <_raise_r+0x42>
 8020dce:	2316      	movs	r3, #22
 8020dd0:	6003      	str	r3, [r0, #0]
 8020dd2:	2001      	movs	r0, #1
 8020dd4:	e7e7      	b.n	8020da6 <_raise_r+0x12>
 8020dd6:	2400      	movs	r4, #0
 8020dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020ddc:	4628      	mov	r0, r5
 8020dde:	4798      	blx	r3
 8020de0:	2000      	movs	r0, #0
 8020de2:	e7e0      	b.n	8020da6 <_raise_r+0x12>

08020de4 <raise>:
 8020de4:	4b02      	ldr	r3, [pc, #8]	; (8020df0 <raise+0xc>)
 8020de6:	4601      	mov	r1, r0
 8020de8:	6818      	ldr	r0, [r3, #0]
 8020dea:	f7ff bfd3 	b.w	8020d94 <_raise_r>
 8020dee:	bf00      	nop
 8020df0:	20000010 	.word	0x20000010

08020df4 <_kill_r>:
 8020df4:	b538      	push	{r3, r4, r5, lr}
 8020df6:	4c07      	ldr	r4, [pc, #28]	; (8020e14 <_kill_r+0x20>)
 8020df8:	2300      	movs	r3, #0
 8020dfa:	4605      	mov	r5, r0
 8020dfc:	4608      	mov	r0, r1
 8020dfe:	4611      	mov	r1, r2
 8020e00:	6023      	str	r3, [r4, #0]
 8020e02:	f7f2 ffc5 	bl	8013d90 <_kill>
 8020e06:	1c43      	adds	r3, r0, #1
 8020e08:	d102      	bne.n	8020e10 <_kill_r+0x1c>
 8020e0a:	6823      	ldr	r3, [r4, #0]
 8020e0c:	b103      	cbz	r3, 8020e10 <_kill_r+0x1c>
 8020e0e:	602b      	str	r3, [r5, #0]
 8020e10:	bd38      	pop	{r3, r4, r5, pc}
 8020e12:	bf00      	nop
 8020e14:	200087ac 	.word	0x200087ac

08020e18 <_getpid_r>:
 8020e18:	f7f2 bfb2 	b.w	8013d80 <_getpid>

08020e1c <strncmp>:
 8020e1c:	b510      	push	{r4, lr}
 8020e1e:	b16a      	cbz	r2, 8020e3c <strncmp+0x20>
 8020e20:	3901      	subs	r1, #1
 8020e22:	1884      	adds	r4, r0, r2
 8020e24:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020e28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020e2c:	4293      	cmp	r3, r2
 8020e2e:	d103      	bne.n	8020e38 <strncmp+0x1c>
 8020e30:	42a0      	cmp	r0, r4
 8020e32:	d001      	beq.n	8020e38 <strncmp+0x1c>
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d1f5      	bne.n	8020e24 <strncmp+0x8>
 8020e38:	1a98      	subs	r0, r3, r2
 8020e3a:	bd10      	pop	{r4, pc}
 8020e3c:	4610      	mov	r0, r2
 8020e3e:	e7fc      	b.n	8020e3a <strncmp+0x1e>

08020e40 <_vsniprintf_r>:
 8020e40:	b530      	push	{r4, r5, lr}
 8020e42:	1e14      	subs	r4, r2, #0
 8020e44:	4605      	mov	r5, r0
 8020e46:	b09b      	sub	sp, #108	; 0x6c
 8020e48:	4618      	mov	r0, r3
 8020e4a:	da05      	bge.n	8020e58 <_vsniprintf_r+0x18>
 8020e4c:	238b      	movs	r3, #139	; 0x8b
 8020e4e:	602b      	str	r3, [r5, #0]
 8020e50:	f04f 30ff 	mov.w	r0, #4294967295
 8020e54:	b01b      	add	sp, #108	; 0x6c
 8020e56:	bd30      	pop	{r4, r5, pc}
 8020e58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020e5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020e60:	bf14      	ite	ne
 8020e62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020e66:	4623      	moveq	r3, r4
 8020e68:	9302      	str	r3, [sp, #8]
 8020e6a:	9305      	str	r3, [sp, #20]
 8020e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e70:	9100      	str	r1, [sp, #0]
 8020e72:	9104      	str	r1, [sp, #16]
 8020e74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020e78:	4602      	mov	r2, r0
 8020e7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020e7c:	4669      	mov	r1, sp
 8020e7e:	4628      	mov	r0, r5
 8020e80:	f000 fbb6 	bl	80215f0 <_svfiprintf_r>
 8020e84:	1c43      	adds	r3, r0, #1
 8020e86:	bfbc      	itt	lt
 8020e88:	238b      	movlt	r3, #139	; 0x8b
 8020e8a:	602b      	strlt	r3, [r5, #0]
 8020e8c:	2c00      	cmp	r4, #0
 8020e8e:	d0e1      	beq.n	8020e54 <_vsniprintf_r+0x14>
 8020e90:	9b00      	ldr	r3, [sp, #0]
 8020e92:	2200      	movs	r2, #0
 8020e94:	701a      	strb	r2, [r3, #0]
 8020e96:	e7dd      	b.n	8020e54 <_vsniprintf_r+0x14>

08020e98 <vsniprintf>:
 8020e98:	b507      	push	{r0, r1, r2, lr}
 8020e9a:	9300      	str	r3, [sp, #0]
 8020e9c:	4613      	mov	r3, r2
 8020e9e:	460a      	mov	r2, r1
 8020ea0:	4601      	mov	r1, r0
 8020ea2:	4803      	ldr	r0, [pc, #12]	; (8020eb0 <vsniprintf+0x18>)
 8020ea4:	6800      	ldr	r0, [r0, #0]
 8020ea6:	f7ff ffcb 	bl	8020e40 <_vsniprintf_r>
 8020eaa:	b003      	add	sp, #12
 8020eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8020eb0:	20000010 	.word	0x20000010

08020eb4 <__swbuf_r>:
 8020eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eb6:	460e      	mov	r6, r1
 8020eb8:	4614      	mov	r4, r2
 8020eba:	4605      	mov	r5, r0
 8020ebc:	b118      	cbz	r0, 8020ec6 <__swbuf_r+0x12>
 8020ebe:	6983      	ldr	r3, [r0, #24]
 8020ec0:	b90b      	cbnz	r3, 8020ec6 <__swbuf_r+0x12>
 8020ec2:	f000 fa0b 	bl	80212dc <__sinit>
 8020ec6:	4b21      	ldr	r3, [pc, #132]	; (8020f4c <__swbuf_r+0x98>)
 8020ec8:	429c      	cmp	r4, r3
 8020eca:	d12a      	bne.n	8020f22 <__swbuf_r+0x6e>
 8020ecc:	686c      	ldr	r4, [r5, #4]
 8020ece:	69a3      	ldr	r3, [r4, #24]
 8020ed0:	60a3      	str	r3, [r4, #8]
 8020ed2:	89a3      	ldrh	r3, [r4, #12]
 8020ed4:	071a      	lsls	r2, r3, #28
 8020ed6:	d52e      	bpl.n	8020f36 <__swbuf_r+0x82>
 8020ed8:	6923      	ldr	r3, [r4, #16]
 8020eda:	b363      	cbz	r3, 8020f36 <__swbuf_r+0x82>
 8020edc:	6923      	ldr	r3, [r4, #16]
 8020ede:	6820      	ldr	r0, [r4, #0]
 8020ee0:	1ac0      	subs	r0, r0, r3
 8020ee2:	6963      	ldr	r3, [r4, #20]
 8020ee4:	b2f6      	uxtb	r6, r6
 8020ee6:	4283      	cmp	r3, r0
 8020ee8:	4637      	mov	r7, r6
 8020eea:	dc04      	bgt.n	8020ef6 <__swbuf_r+0x42>
 8020eec:	4621      	mov	r1, r4
 8020eee:	4628      	mov	r0, r5
 8020ef0:	f000 f98a 	bl	8021208 <_fflush_r>
 8020ef4:	bb28      	cbnz	r0, 8020f42 <__swbuf_r+0x8e>
 8020ef6:	68a3      	ldr	r3, [r4, #8]
 8020ef8:	3b01      	subs	r3, #1
 8020efa:	60a3      	str	r3, [r4, #8]
 8020efc:	6823      	ldr	r3, [r4, #0]
 8020efe:	1c5a      	adds	r2, r3, #1
 8020f00:	6022      	str	r2, [r4, #0]
 8020f02:	701e      	strb	r6, [r3, #0]
 8020f04:	6963      	ldr	r3, [r4, #20]
 8020f06:	3001      	adds	r0, #1
 8020f08:	4283      	cmp	r3, r0
 8020f0a:	d004      	beq.n	8020f16 <__swbuf_r+0x62>
 8020f0c:	89a3      	ldrh	r3, [r4, #12]
 8020f0e:	07db      	lsls	r3, r3, #31
 8020f10:	d519      	bpl.n	8020f46 <__swbuf_r+0x92>
 8020f12:	2e0a      	cmp	r6, #10
 8020f14:	d117      	bne.n	8020f46 <__swbuf_r+0x92>
 8020f16:	4621      	mov	r1, r4
 8020f18:	4628      	mov	r0, r5
 8020f1a:	f000 f975 	bl	8021208 <_fflush_r>
 8020f1e:	b190      	cbz	r0, 8020f46 <__swbuf_r+0x92>
 8020f20:	e00f      	b.n	8020f42 <__swbuf_r+0x8e>
 8020f22:	4b0b      	ldr	r3, [pc, #44]	; (8020f50 <__swbuf_r+0x9c>)
 8020f24:	429c      	cmp	r4, r3
 8020f26:	d101      	bne.n	8020f2c <__swbuf_r+0x78>
 8020f28:	68ac      	ldr	r4, [r5, #8]
 8020f2a:	e7d0      	b.n	8020ece <__swbuf_r+0x1a>
 8020f2c:	4b09      	ldr	r3, [pc, #36]	; (8020f54 <__swbuf_r+0xa0>)
 8020f2e:	429c      	cmp	r4, r3
 8020f30:	bf08      	it	eq
 8020f32:	68ec      	ldreq	r4, [r5, #12]
 8020f34:	e7cb      	b.n	8020ece <__swbuf_r+0x1a>
 8020f36:	4621      	mov	r1, r4
 8020f38:	4628      	mov	r0, r5
 8020f3a:	f000 f80d 	bl	8020f58 <__swsetup_r>
 8020f3e:	2800      	cmp	r0, #0
 8020f40:	d0cc      	beq.n	8020edc <__swbuf_r+0x28>
 8020f42:	f04f 37ff 	mov.w	r7, #4294967295
 8020f46:	4638      	mov	r0, r7
 8020f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f4a:	bf00      	nop
 8020f4c:	0802cce8 	.word	0x0802cce8
 8020f50:	0802cd08 	.word	0x0802cd08
 8020f54:	0802ccc8 	.word	0x0802ccc8

08020f58 <__swsetup_r>:
 8020f58:	4b32      	ldr	r3, [pc, #200]	; (8021024 <__swsetup_r+0xcc>)
 8020f5a:	b570      	push	{r4, r5, r6, lr}
 8020f5c:	681d      	ldr	r5, [r3, #0]
 8020f5e:	4606      	mov	r6, r0
 8020f60:	460c      	mov	r4, r1
 8020f62:	b125      	cbz	r5, 8020f6e <__swsetup_r+0x16>
 8020f64:	69ab      	ldr	r3, [r5, #24]
 8020f66:	b913      	cbnz	r3, 8020f6e <__swsetup_r+0x16>
 8020f68:	4628      	mov	r0, r5
 8020f6a:	f000 f9b7 	bl	80212dc <__sinit>
 8020f6e:	4b2e      	ldr	r3, [pc, #184]	; (8021028 <__swsetup_r+0xd0>)
 8020f70:	429c      	cmp	r4, r3
 8020f72:	d10f      	bne.n	8020f94 <__swsetup_r+0x3c>
 8020f74:	686c      	ldr	r4, [r5, #4]
 8020f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020f7a:	b29a      	uxth	r2, r3
 8020f7c:	0715      	lsls	r5, r2, #28
 8020f7e:	d42c      	bmi.n	8020fda <__swsetup_r+0x82>
 8020f80:	06d0      	lsls	r0, r2, #27
 8020f82:	d411      	bmi.n	8020fa8 <__swsetup_r+0x50>
 8020f84:	2209      	movs	r2, #9
 8020f86:	6032      	str	r2, [r6, #0]
 8020f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f8c:	81a3      	strh	r3, [r4, #12]
 8020f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8020f92:	e03e      	b.n	8021012 <__swsetup_r+0xba>
 8020f94:	4b25      	ldr	r3, [pc, #148]	; (802102c <__swsetup_r+0xd4>)
 8020f96:	429c      	cmp	r4, r3
 8020f98:	d101      	bne.n	8020f9e <__swsetup_r+0x46>
 8020f9a:	68ac      	ldr	r4, [r5, #8]
 8020f9c:	e7eb      	b.n	8020f76 <__swsetup_r+0x1e>
 8020f9e:	4b24      	ldr	r3, [pc, #144]	; (8021030 <__swsetup_r+0xd8>)
 8020fa0:	429c      	cmp	r4, r3
 8020fa2:	bf08      	it	eq
 8020fa4:	68ec      	ldreq	r4, [r5, #12]
 8020fa6:	e7e6      	b.n	8020f76 <__swsetup_r+0x1e>
 8020fa8:	0751      	lsls	r1, r2, #29
 8020faa:	d512      	bpl.n	8020fd2 <__swsetup_r+0x7a>
 8020fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020fae:	b141      	cbz	r1, 8020fc2 <__swsetup_r+0x6a>
 8020fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020fb4:	4299      	cmp	r1, r3
 8020fb6:	d002      	beq.n	8020fbe <__swsetup_r+0x66>
 8020fb8:	4630      	mov	r0, r6
 8020fba:	f7ff fb6b 	bl	8020694 <_free_r>
 8020fbe:	2300      	movs	r3, #0
 8020fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8020fc2:	89a3      	ldrh	r3, [r4, #12]
 8020fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020fc8:	81a3      	strh	r3, [r4, #12]
 8020fca:	2300      	movs	r3, #0
 8020fcc:	6063      	str	r3, [r4, #4]
 8020fce:	6923      	ldr	r3, [r4, #16]
 8020fd0:	6023      	str	r3, [r4, #0]
 8020fd2:	89a3      	ldrh	r3, [r4, #12]
 8020fd4:	f043 0308 	orr.w	r3, r3, #8
 8020fd8:	81a3      	strh	r3, [r4, #12]
 8020fda:	6923      	ldr	r3, [r4, #16]
 8020fdc:	b94b      	cbnz	r3, 8020ff2 <__swsetup_r+0x9a>
 8020fde:	89a3      	ldrh	r3, [r4, #12]
 8020fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020fe8:	d003      	beq.n	8020ff2 <__swsetup_r+0x9a>
 8020fea:	4621      	mov	r1, r4
 8020fec:	4630      	mov	r0, r6
 8020fee:	f000 fa23 	bl	8021438 <__smakebuf_r>
 8020ff2:	89a2      	ldrh	r2, [r4, #12]
 8020ff4:	f012 0301 	ands.w	r3, r2, #1
 8020ff8:	d00c      	beq.n	8021014 <__swsetup_r+0xbc>
 8020ffa:	2300      	movs	r3, #0
 8020ffc:	60a3      	str	r3, [r4, #8]
 8020ffe:	6963      	ldr	r3, [r4, #20]
 8021000:	425b      	negs	r3, r3
 8021002:	61a3      	str	r3, [r4, #24]
 8021004:	6923      	ldr	r3, [r4, #16]
 8021006:	b953      	cbnz	r3, 802101e <__swsetup_r+0xc6>
 8021008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802100c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8021010:	d1ba      	bne.n	8020f88 <__swsetup_r+0x30>
 8021012:	bd70      	pop	{r4, r5, r6, pc}
 8021014:	0792      	lsls	r2, r2, #30
 8021016:	bf58      	it	pl
 8021018:	6963      	ldrpl	r3, [r4, #20]
 802101a:	60a3      	str	r3, [r4, #8]
 802101c:	e7f2      	b.n	8021004 <__swsetup_r+0xac>
 802101e:	2000      	movs	r0, #0
 8021020:	e7f7      	b.n	8021012 <__swsetup_r+0xba>
 8021022:	bf00      	nop
 8021024:	20000010 	.word	0x20000010
 8021028:	0802cce8 	.word	0x0802cce8
 802102c:	0802cd08 	.word	0x0802cd08
 8021030:	0802ccc8 	.word	0x0802ccc8

08021034 <__register_exitproc>:
 8021034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021038:	4d2c      	ldr	r5, [pc, #176]	; (80210ec <__register_exitproc+0xb8>)
 802103a:	682c      	ldr	r4, [r5, #0]
 802103c:	4607      	mov	r7, r0
 802103e:	460e      	mov	r6, r1
 8021040:	4691      	mov	r9, r2
 8021042:	4698      	mov	r8, r3
 8021044:	b934      	cbnz	r4, 8021054 <__register_exitproc+0x20>
 8021046:	4b2a      	ldr	r3, [pc, #168]	; (80210f0 <__register_exitproc+0xbc>)
 8021048:	4c2a      	ldr	r4, [pc, #168]	; (80210f4 <__register_exitproc+0xc0>)
 802104a:	602c      	str	r4, [r5, #0]
 802104c:	b113      	cbz	r3, 8021054 <__register_exitproc+0x20>
 802104e:	681b      	ldr	r3, [r3, #0]
 8021050:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8021054:	6863      	ldr	r3, [r4, #4]
 8021056:	2b1f      	cmp	r3, #31
 8021058:	dd3d      	ble.n	80210d6 <__register_exitproc+0xa2>
 802105a:	4b27      	ldr	r3, [pc, #156]	; (80210f8 <__register_exitproc+0xc4>)
 802105c:	b91b      	cbnz	r3, 8021066 <__register_exitproc+0x32>
 802105e:	f04f 30ff 	mov.w	r0, #4294967295
 8021062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021066:	208c      	movs	r0, #140	; 0x8c
 8021068:	f7ff faf0 	bl	802064c <malloc>
 802106c:	4604      	mov	r4, r0
 802106e:	2800      	cmp	r0, #0
 8021070:	d0f5      	beq.n	802105e <__register_exitproc+0x2a>
 8021072:	2300      	movs	r3, #0
 8021074:	682a      	ldr	r2, [r5, #0]
 8021076:	6002      	str	r2, [r0, #0]
 8021078:	6043      	str	r3, [r0, #4]
 802107a:	6028      	str	r0, [r5, #0]
 802107c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8021080:	b30f      	cbz	r7, 80210c6 <__register_exitproc+0x92>
 8021082:	f44f 7084 	mov.w	r0, #264	; 0x108
 8021086:	f7ff fae1 	bl	802064c <malloc>
 802108a:	2800      	cmp	r0, #0
 802108c:	d0e7      	beq.n	802105e <__register_exitproc+0x2a>
 802108e:	2300      	movs	r3, #0
 8021090:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021094:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8021098:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802109c:	6862      	ldr	r2, [r4, #4]
 802109e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80210a2:	2301      	movs	r3, #1
 80210a4:	4093      	lsls	r3, r2
 80210a6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80210aa:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80210ae:	431a      	orrs	r2, r3
 80210b0:	2f02      	cmp	r7, #2
 80210b2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80210b6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 80210ba:	bf02      	ittt	eq
 80210bc:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80210c0:	4313      	orreq	r3, r2
 80210c2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80210c6:	6863      	ldr	r3, [r4, #4]
 80210c8:	1c5a      	adds	r2, r3, #1
 80210ca:	3302      	adds	r3, #2
 80210cc:	6062      	str	r2, [r4, #4]
 80210ce:	2000      	movs	r0, #0
 80210d0:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80210d4:	e7c5      	b.n	8021062 <__register_exitproc+0x2e>
 80210d6:	2f00      	cmp	r7, #0
 80210d8:	d0f5      	beq.n	80210c6 <__register_exitproc+0x92>
 80210da:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80210de:	2800      	cmp	r0, #0
 80210e0:	d1dc      	bne.n	802109c <__register_exitproc+0x68>
 80210e2:	4b05      	ldr	r3, [pc, #20]	; (80210f8 <__register_exitproc+0xc4>)
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d0ba      	beq.n	802105e <__register_exitproc+0x2a>
 80210e8:	e7cb      	b.n	8021082 <__register_exitproc+0x4e>
 80210ea:	bf00      	nop
 80210ec:	20008764 	.word	0x20008764
 80210f0:	00000000 	.word	0x00000000
 80210f4:	200086d8 	.word	0x200086d8
 80210f8:	0802064d 	.word	0x0802064d

080210fc <__sflush_r>:
 80210fc:	898a      	ldrh	r2, [r1, #12]
 80210fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021102:	4605      	mov	r5, r0
 8021104:	0710      	lsls	r0, r2, #28
 8021106:	460c      	mov	r4, r1
 8021108:	d458      	bmi.n	80211bc <__sflush_r+0xc0>
 802110a:	684b      	ldr	r3, [r1, #4]
 802110c:	2b00      	cmp	r3, #0
 802110e:	dc05      	bgt.n	802111c <__sflush_r+0x20>
 8021110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021112:	2b00      	cmp	r3, #0
 8021114:	dc02      	bgt.n	802111c <__sflush_r+0x20>
 8021116:	2000      	movs	r0, #0
 8021118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802111c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802111e:	2e00      	cmp	r6, #0
 8021120:	d0f9      	beq.n	8021116 <__sflush_r+0x1a>
 8021122:	2300      	movs	r3, #0
 8021124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021128:	682f      	ldr	r7, [r5, #0]
 802112a:	6a21      	ldr	r1, [r4, #32]
 802112c:	602b      	str	r3, [r5, #0]
 802112e:	d032      	beq.n	8021196 <__sflush_r+0x9a>
 8021130:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021132:	89a3      	ldrh	r3, [r4, #12]
 8021134:	075a      	lsls	r2, r3, #29
 8021136:	d505      	bpl.n	8021144 <__sflush_r+0x48>
 8021138:	6863      	ldr	r3, [r4, #4]
 802113a:	1ac0      	subs	r0, r0, r3
 802113c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802113e:	b10b      	cbz	r3, 8021144 <__sflush_r+0x48>
 8021140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021142:	1ac0      	subs	r0, r0, r3
 8021144:	2300      	movs	r3, #0
 8021146:	4602      	mov	r2, r0
 8021148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802114a:	6a21      	ldr	r1, [r4, #32]
 802114c:	4628      	mov	r0, r5
 802114e:	47b0      	blx	r6
 8021150:	1c43      	adds	r3, r0, #1
 8021152:	89a3      	ldrh	r3, [r4, #12]
 8021154:	d106      	bne.n	8021164 <__sflush_r+0x68>
 8021156:	6829      	ldr	r1, [r5, #0]
 8021158:	291d      	cmp	r1, #29
 802115a:	d848      	bhi.n	80211ee <__sflush_r+0xf2>
 802115c:	4a29      	ldr	r2, [pc, #164]	; (8021204 <__sflush_r+0x108>)
 802115e:	40ca      	lsrs	r2, r1
 8021160:	07d6      	lsls	r6, r2, #31
 8021162:	d544      	bpl.n	80211ee <__sflush_r+0xf2>
 8021164:	2200      	movs	r2, #0
 8021166:	6062      	str	r2, [r4, #4]
 8021168:	04d9      	lsls	r1, r3, #19
 802116a:	6922      	ldr	r2, [r4, #16]
 802116c:	6022      	str	r2, [r4, #0]
 802116e:	d504      	bpl.n	802117a <__sflush_r+0x7e>
 8021170:	1c42      	adds	r2, r0, #1
 8021172:	d101      	bne.n	8021178 <__sflush_r+0x7c>
 8021174:	682b      	ldr	r3, [r5, #0]
 8021176:	b903      	cbnz	r3, 802117a <__sflush_r+0x7e>
 8021178:	6560      	str	r0, [r4, #84]	; 0x54
 802117a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802117c:	602f      	str	r7, [r5, #0]
 802117e:	2900      	cmp	r1, #0
 8021180:	d0c9      	beq.n	8021116 <__sflush_r+0x1a>
 8021182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021186:	4299      	cmp	r1, r3
 8021188:	d002      	beq.n	8021190 <__sflush_r+0x94>
 802118a:	4628      	mov	r0, r5
 802118c:	f7ff fa82 	bl	8020694 <_free_r>
 8021190:	2000      	movs	r0, #0
 8021192:	6360      	str	r0, [r4, #52]	; 0x34
 8021194:	e7c0      	b.n	8021118 <__sflush_r+0x1c>
 8021196:	2301      	movs	r3, #1
 8021198:	4628      	mov	r0, r5
 802119a:	47b0      	blx	r6
 802119c:	1c41      	adds	r1, r0, #1
 802119e:	d1c8      	bne.n	8021132 <__sflush_r+0x36>
 80211a0:	682b      	ldr	r3, [r5, #0]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d0c5      	beq.n	8021132 <__sflush_r+0x36>
 80211a6:	2b1d      	cmp	r3, #29
 80211a8:	d001      	beq.n	80211ae <__sflush_r+0xb2>
 80211aa:	2b16      	cmp	r3, #22
 80211ac:	d101      	bne.n	80211b2 <__sflush_r+0xb6>
 80211ae:	602f      	str	r7, [r5, #0]
 80211b0:	e7b1      	b.n	8021116 <__sflush_r+0x1a>
 80211b2:	89a3      	ldrh	r3, [r4, #12]
 80211b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211b8:	81a3      	strh	r3, [r4, #12]
 80211ba:	e7ad      	b.n	8021118 <__sflush_r+0x1c>
 80211bc:	690f      	ldr	r7, [r1, #16]
 80211be:	2f00      	cmp	r7, #0
 80211c0:	d0a9      	beq.n	8021116 <__sflush_r+0x1a>
 80211c2:	0793      	lsls	r3, r2, #30
 80211c4:	680e      	ldr	r6, [r1, #0]
 80211c6:	bf08      	it	eq
 80211c8:	694b      	ldreq	r3, [r1, #20]
 80211ca:	600f      	str	r7, [r1, #0]
 80211cc:	bf18      	it	ne
 80211ce:	2300      	movne	r3, #0
 80211d0:	eba6 0807 	sub.w	r8, r6, r7
 80211d4:	608b      	str	r3, [r1, #8]
 80211d6:	f1b8 0f00 	cmp.w	r8, #0
 80211da:	dd9c      	ble.n	8021116 <__sflush_r+0x1a>
 80211dc:	4643      	mov	r3, r8
 80211de:	463a      	mov	r2, r7
 80211e0:	6a21      	ldr	r1, [r4, #32]
 80211e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80211e4:	4628      	mov	r0, r5
 80211e6:	47b0      	blx	r6
 80211e8:	2800      	cmp	r0, #0
 80211ea:	dc06      	bgt.n	80211fa <__sflush_r+0xfe>
 80211ec:	89a3      	ldrh	r3, [r4, #12]
 80211ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211f2:	81a3      	strh	r3, [r4, #12]
 80211f4:	f04f 30ff 	mov.w	r0, #4294967295
 80211f8:	e78e      	b.n	8021118 <__sflush_r+0x1c>
 80211fa:	4407      	add	r7, r0
 80211fc:	eba8 0800 	sub.w	r8, r8, r0
 8021200:	e7e9      	b.n	80211d6 <__sflush_r+0xda>
 8021202:	bf00      	nop
 8021204:	20400001 	.word	0x20400001

08021208 <_fflush_r>:
 8021208:	b538      	push	{r3, r4, r5, lr}
 802120a:	690b      	ldr	r3, [r1, #16]
 802120c:	4605      	mov	r5, r0
 802120e:	460c      	mov	r4, r1
 8021210:	b1db      	cbz	r3, 802124a <_fflush_r+0x42>
 8021212:	b118      	cbz	r0, 802121c <_fflush_r+0x14>
 8021214:	6983      	ldr	r3, [r0, #24]
 8021216:	b90b      	cbnz	r3, 802121c <_fflush_r+0x14>
 8021218:	f000 f860 	bl	80212dc <__sinit>
 802121c:	4b0c      	ldr	r3, [pc, #48]	; (8021250 <_fflush_r+0x48>)
 802121e:	429c      	cmp	r4, r3
 8021220:	d109      	bne.n	8021236 <_fflush_r+0x2e>
 8021222:	686c      	ldr	r4, [r5, #4]
 8021224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021228:	b17b      	cbz	r3, 802124a <_fflush_r+0x42>
 802122a:	4621      	mov	r1, r4
 802122c:	4628      	mov	r0, r5
 802122e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021232:	f7ff bf63 	b.w	80210fc <__sflush_r>
 8021236:	4b07      	ldr	r3, [pc, #28]	; (8021254 <_fflush_r+0x4c>)
 8021238:	429c      	cmp	r4, r3
 802123a:	d101      	bne.n	8021240 <_fflush_r+0x38>
 802123c:	68ac      	ldr	r4, [r5, #8]
 802123e:	e7f1      	b.n	8021224 <_fflush_r+0x1c>
 8021240:	4b05      	ldr	r3, [pc, #20]	; (8021258 <_fflush_r+0x50>)
 8021242:	429c      	cmp	r4, r3
 8021244:	bf08      	it	eq
 8021246:	68ec      	ldreq	r4, [r5, #12]
 8021248:	e7ec      	b.n	8021224 <_fflush_r+0x1c>
 802124a:	2000      	movs	r0, #0
 802124c:	bd38      	pop	{r3, r4, r5, pc}
 802124e:	bf00      	nop
 8021250:	0802cce8 	.word	0x0802cce8
 8021254:	0802cd08 	.word	0x0802cd08
 8021258:	0802ccc8 	.word	0x0802ccc8

0802125c <std>:
 802125c:	2300      	movs	r3, #0
 802125e:	b510      	push	{r4, lr}
 8021260:	4604      	mov	r4, r0
 8021262:	e9c0 3300 	strd	r3, r3, [r0]
 8021266:	6083      	str	r3, [r0, #8]
 8021268:	8181      	strh	r1, [r0, #12]
 802126a:	6643      	str	r3, [r0, #100]	; 0x64
 802126c:	81c2      	strh	r2, [r0, #14]
 802126e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021272:	6183      	str	r3, [r0, #24]
 8021274:	4619      	mov	r1, r3
 8021276:	2208      	movs	r2, #8
 8021278:	305c      	adds	r0, #92	; 0x5c
 802127a:	f7ff fa02 	bl	8020682 <memset>
 802127e:	4b05      	ldr	r3, [pc, #20]	; (8021294 <std+0x38>)
 8021280:	6263      	str	r3, [r4, #36]	; 0x24
 8021282:	4b05      	ldr	r3, [pc, #20]	; (8021298 <std+0x3c>)
 8021284:	62a3      	str	r3, [r4, #40]	; 0x28
 8021286:	4b05      	ldr	r3, [pc, #20]	; (802129c <std+0x40>)
 8021288:	62e3      	str	r3, [r4, #44]	; 0x2c
 802128a:	4b05      	ldr	r3, [pc, #20]	; (80212a0 <std+0x44>)
 802128c:	6224      	str	r4, [r4, #32]
 802128e:	6323      	str	r3, [r4, #48]	; 0x30
 8021290:	bd10      	pop	{r4, pc}
 8021292:	bf00      	nop
 8021294:	080217e1 	.word	0x080217e1
 8021298:	08021803 	.word	0x08021803
 802129c:	0802183b 	.word	0x0802183b
 80212a0:	0802185f 	.word	0x0802185f

080212a4 <_cleanup_r>:
 80212a4:	4901      	ldr	r1, [pc, #4]	; (80212ac <_cleanup_r+0x8>)
 80212a6:	f000 b885 	b.w	80213b4 <_fwalk_reent>
 80212aa:	bf00      	nop
 80212ac:	08021209 	.word	0x08021209

080212b0 <__sfmoreglue>:
 80212b0:	b570      	push	{r4, r5, r6, lr}
 80212b2:	1e4a      	subs	r2, r1, #1
 80212b4:	2568      	movs	r5, #104	; 0x68
 80212b6:	4355      	muls	r5, r2
 80212b8:	460e      	mov	r6, r1
 80212ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80212be:	f7ff fa37 	bl	8020730 <_malloc_r>
 80212c2:	4604      	mov	r4, r0
 80212c4:	b140      	cbz	r0, 80212d8 <__sfmoreglue+0x28>
 80212c6:	2100      	movs	r1, #0
 80212c8:	e9c0 1600 	strd	r1, r6, [r0]
 80212cc:	300c      	adds	r0, #12
 80212ce:	60a0      	str	r0, [r4, #8]
 80212d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80212d4:	f7ff f9d5 	bl	8020682 <memset>
 80212d8:	4620      	mov	r0, r4
 80212da:	bd70      	pop	{r4, r5, r6, pc}

080212dc <__sinit>:
 80212dc:	6983      	ldr	r3, [r0, #24]
 80212de:	b510      	push	{r4, lr}
 80212e0:	4604      	mov	r4, r0
 80212e2:	bb33      	cbnz	r3, 8021332 <__sinit+0x56>
 80212e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80212e8:	6503      	str	r3, [r0, #80]	; 0x50
 80212ea:	4b12      	ldr	r3, [pc, #72]	; (8021334 <__sinit+0x58>)
 80212ec:	4a12      	ldr	r2, [pc, #72]	; (8021338 <__sinit+0x5c>)
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	6282      	str	r2, [r0, #40]	; 0x28
 80212f2:	4298      	cmp	r0, r3
 80212f4:	bf04      	itt	eq
 80212f6:	2301      	moveq	r3, #1
 80212f8:	6183      	streq	r3, [r0, #24]
 80212fa:	f000 f81f 	bl	802133c <__sfp>
 80212fe:	6060      	str	r0, [r4, #4]
 8021300:	4620      	mov	r0, r4
 8021302:	f000 f81b 	bl	802133c <__sfp>
 8021306:	60a0      	str	r0, [r4, #8]
 8021308:	4620      	mov	r0, r4
 802130a:	f000 f817 	bl	802133c <__sfp>
 802130e:	2200      	movs	r2, #0
 8021310:	60e0      	str	r0, [r4, #12]
 8021312:	2104      	movs	r1, #4
 8021314:	6860      	ldr	r0, [r4, #4]
 8021316:	f7ff ffa1 	bl	802125c <std>
 802131a:	2201      	movs	r2, #1
 802131c:	2109      	movs	r1, #9
 802131e:	68a0      	ldr	r0, [r4, #8]
 8021320:	f7ff ff9c 	bl	802125c <std>
 8021324:	2202      	movs	r2, #2
 8021326:	2112      	movs	r1, #18
 8021328:	68e0      	ldr	r0, [r4, #12]
 802132a:	f7ff ff97 	bl	802125c <std>
 802132e:	2301      	movs	r3, #1
 8021330:	61a3      	str	r3, [r4, #24]
 8021332:	bd10      	pop	{r4, pc}
 8021334:	0802cc90 	.word	0x0802cc90
 8021338:	080212a5 	.word	0x080212a5

0802133c <__sfp>:
 802133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802133e:	4b1b      	ldr	r3, [pc, #108]	; (80213ac <__sfp+0x70>)
 8021340:	681e      	ldr	r6, [r3, #0]
 8021342:	69b3      	ldr	r3, [r6, #24]
 8021344:	4607      	mov	r7, r0
 8021346:	b913      	cbnz	r3, 802134e <__sfp+0x12>
 8021348:	4630      	mov	r0, r6
 802134a:	f7ff ffc7 	bl	80212dc <__sinit>
 802134e:	3648      	adds	r6, #72	; 0x48
 8021350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021354:	3b01      	subs	r3, #1
 8021356:	d503      	bpl.n	8021360 <__sfp+0x24>
 8021358:	6833      	ldr	r3, [r6, #0]
 802135a:	b133      	cbz	r3, 802136a <__sfp+0x2e>
 802135c:	6836      	ldr	r6, [r6, #0]
 802135e:	e7f7      	b.n	8021350 <__sfp+0x14>
 8021360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021364:	b16d      	cbz	r5, 8021382 <__sfp+0x46>
 8021366:	3468      	adds	r4, #104	; 0x68
 8021368:	e7f4      	b.n	8021354 <__sfp+0x18>
 802136a:	2104      	movs	r1, #4
 802136c:	4638      	mov	r0, r7
 802136e:	f7ff ff9f 	bl	80212b0 <__sfmoreglue>
 8021372:	6030      	str	r0, [r6, #0]
 8021374:	2800      	cmp	r0, #0
 8021376:	d1f1      	bne.n	802135c <__sfp+0x20>
 8021378:	230c      	movs	r3, #12
 802137a:	603b      	str	r3, [r7, #0]
 802137c:	4604      	mov	r4, r0
 802137e:	4620      	mov	r0, r4
 8021380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021382:	4b0b      	ldr	r3, [pc, #44]	; (80213b0 <__sfp+0x74>)
 8021384:	6665      	str	r5, [r4, #100]	; 0x64
 8021386:	e9c4 5500 	strd	r5, r5, [r4]
 802138a:	60a5      	str	r5, [r4, #8]
 802138c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8021390:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8021394:	2208      	movs	r2, #8
 8021396:	4629      	mov	r1, r5
 8021398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802139c:	f7ff f971 	bl	8020682 <memset>
 80213a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80213a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80213a8:	e7e9      	b.n	802137e <__sfp+0x42>
 80213aa:	bf00      	nop
 80213ac:	0802cc90 	.word	0x0802cc90
 80213b0:	ffff0001 	.word	0xffff0001

080213b4 <_fwalk_reent>:
 80213b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80213b8:	4680      	mov	r8, r0
 80213ba:	4689      	mov	r9, r1
 80213bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80213c0:	2600      	movs	r6, #0
 80213c2:	b914      	cbnz	r4, 80213ca <_fwalk_reent+0x16>
 80213c4:	4630      	mov	r0, r6
 80213c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80213ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80213ce:	3f01      	subs	r7, #1
 80213d0:	d501      	bpl.n	80213d6 <_fwalk_reent+0x22>
 80213d2:	6824      	ldr	r4, [r4, #0]
 80213d4:	e7f5      	b.n	80213c2 <_fwalk_reent+0xe>
 80213d6:	89ab      	ldrh	r3, [r5, #12]
 80213d8:	2b01      	cmp	r3, #1
 80213da:	d907      	bls.n	80213ec <_fwalk_reent+0x38>
 80213dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80213e0:	3301      	adds	r3, #1
 80213e2:	d003      	beq.n	80213ec <_fwalk_reent+0x38>
 80213e4:	4629      	mov	r1, r5
 80213e6:	4640      	mov	r0, r8
 80213e8:	47c8      	blx	r9
 80213ea:	4306      	orrs	r6, r0
 80213ec:	3568      	adds	r5, #104	; 0x68
 80213ee:	e7ee      	b.n	80213ce <_fwalk_reent+0x1a>

080213f0 <__swhatbuf_r>:
 80213f0:	b570      	push	{r4, r5, r6, lr}
 80213f2:	460e      	mov	r6, r1
 80213f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80213f8:	2900      	cmp	r1, #0
 80213fa:	b096      	sub	sp, #88	; 0x58
 80213fc:	4614      	mov	r4, r2
 80213fe:	461d      	mov	r5, r3
 8021400:	da07      	bge.n	8021412 <__swhatbuf_r+0x22>
 8021402:	2300      	movs	r3, #0
 8021404:	602b      	str	r3, [r5, #0]
 8021406:	89b3      	ldrh	r3, [r6, #12]
 8021408:	061a      	lsls	r2, r3, #24
 802140a:	d410      	bmi.n	802142e <__swhatbuf_r+0x3e>
 802140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021410:	e00e      	b.n	8021430 <__swhatbuf_r+0x40>
 8021412:	466a      	mov	r2, sp
 8021414:	f000 fa4a 	bl	80218ac <_fstat_r>
 8021418:	2800      	cmp	r0, #0
 802141a:	dbf2      	blt.n	8021402 <__swhatbuf_r+0x12>
 802141c:	9a01      	ldr	r2, [sp, #4]
 802141e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021422:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021426:	425a      	negs	r2, r3
 8021428:	415a      	adcs	r2, r3
 802142a:	602a      	str	r2, [r5, #0]
 802142c:	e7ee      	b.n	802140c <__swhatbuf_r+0x1c>
 802142e:	2340      	movs	r3, #64	; 0x40
 8021430:	2000      	movs	r0, #0
 8021432:	6023      	str	r3, [r4, #0]
 8021434:	b016      	add	sp, #88	; 0x58
 8021436:	bd70      	pop	{r4, r5, r6, pc}

08021438 <__smakebuf_r>:
 8021438:	898b      	ldrh	r3, [r1, #12]
 802143a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802143c:	079d      	lsls	r5, r3, #30
 802143e:	4606      	mov	r6, r0
 8021440:	460c      	mov	r4, r1
 8021442:	d507      	bpl.n	8021454 <__smakebuf_r+0x1c>
 8021444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021448:	6023      	str	r3, [r4, #0]
 802144a:	6123      	str	r3, [r4, #16]
 802144c:	2301      	movs	r3, #1
 802144e:	6163      	str	r3, [r4, #20]
 8021450:	b002      	add	sp, #8
 8021452:	bd70      	pop	{r4, r5, r6, pc}
 8021454:	ab01      	add	r3, sp, #4
 8021456:	466a      	mov	r2, sp
 8021458:	f7ff ffca 	bl	80213f0 <__swhatbuf_r>
 802145c:	9900      	ldr	r1, [sp, #0]
 802145e:	4605      	mov	r5, r0
 8021460:	4630      	mov	r0, r6
 8021462:	f7ff f965 	bl	8020730 <_malloc_r>
 8021466:	b948      	cbnz	r0, 802147c <__smakebuf_r+0x44>
 8021468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802146c:	059a      	lsls	r2, r3, #22
 802146e:	d4ef      	bmi.n	8021450 <__smakebuf_r+0x18>
 8021470:	f023 0303 	bic.w	r3, r3, #3
 8021474:	f043 0302 	orr.w	r3, r3, #2
 8021478:	81a3      	strh	r3, [r4, #12]
 802147a:	e7e3      	b.n	8021444 <__smakebuf_r+0xc>
 802147c:	4b0d      	ldr	r3, [pc, #52]	; (80214b4 <__smakebuf_r+0x7c>)
 802147e:	62b3      	str	r3, [r6, #40]	; 0x28
 8021480:	89a3      	ldrh	r3, [r4, #12]
 8021482:	6020      	str	r0, [r4, #0]
 8021484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021488:	81a3      	strh	r3, [r4, #12]
 802148a:	9b00      	ldr	r3, [sp, #0]
 802148c:	6163      	str	r3, [r4, #20]
 802148e:	9b01      	ldr	r3, [sp, #4]
 8021490:	6120      	str	r0, [r4, #16]
 8021492:	b15b      	cbz	r3, 80214ac <__smakebuf_r+0x74>
 8021494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021498:	4630      	mov	r0, r6
 802149a:	f000 fa19 	bl	80218d0 <_isatty_r>
 802149e:	b128      	cbz	r0, 80214ac <__smakebuf_r+0x74>
 80214a0:	89a3      	ldrh	r3, [r4, #12]
 80214a2:	f023 0303 	bic.w	r3, r3, #3
 80214a6:	f043 0301 	orr.w	r3, r3, #1
 80214aa:	81a3      	strh	r3, [r4, #12]
 80214ac:	89a3      	ldrh	r3, [r4, #12]
 80214ae:	431d      	orrs	r5, r3
 80214b0:	81a5      	strh	r5, [r4, #12]
 80214b2:	e7cd      	b.n	8021450 <__smakebuf_r+0x18>
 80214b4:	080212a5 	.word	0x080212a5

080214b8 <memmove>:
 80214b8:	4288      	cmp	r0, r1
 80214ba:	b510      	push	{r4, lr}
 80214bc:	eb01 0302 	add.w	r3, r1, r2
 80214c0:	d807      	bhi.n	80214d2 <memmove+0x1a>
 80214c2:	1e42      	subs	r2, r0, #1
 80214c4:	4299      	cmp	r1, r3
 80214c6:	d00a      	beq.n	80214de <memmove+0x26>
 80214c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80214cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80214d0:	e7f8      	b.n	80214c4 <memmove+0xc>
 80214d2:	4283      	cmp	r3, r0
 80214d4:	d9f5      	bls.n	80214c2 <memmove+0xa>
 80214d6:	1881      	adds	r1, r0, r2
 80214d8:	1ad2      	subs	r2, r2, r3
 80214da:	42d3      	cmn	r3, r2
 80214dc:	d100      	bne.n	80214e0 <memmove+0x28>
 80214de:	bd10      	pop	{r4, pc}
 80214e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80214e4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80214e8:	e7f7      	b.n	80214da <memmove+0x22>

080214ea <__malloc_lock>:
 80214ea:	4770      	bx	lr

080214ec <__malloc_unlock>:
 80214ec:	4770      	bx	lr

080214ee <_realloc_r>:
 80214ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214f0:	4607      	mov	r7, r0
 80214f2:	4614      	mov	r4, r2
 80214f4:	460e      	mov	r6, r1
 80214f6:	b921      	cbnz	r1, 8021502 <_realloc_r+0x14>
 80214f8:	4611      	mov	r1, r2
 80214fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80214fe:	f7ff b917 	b.w	8020730 <_malloc_r>
 8021502:	b922      	cbnz	r2, 802150e <_realloc_r+0x20>
 8021504:	f7ff f8c6 	bl	8020694 <_free_r>
 8021508:	4625      	mov	r5, r4
 802150a:	4628      	mov	r0, r5
 802150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802150e:	f000 fa01 	bl	8021914 <_malloc_usable_size_r>
 8021512:	42a0      	cmp	r0, r4
 8021514:	d20f      	bcs.n	8021536 <_realloc_r+0x48>
 8021516:	4621      	mov	r1, r4
 8021518:	4638      	mov	r0, r7
 802151a:	f7ff f909 	bl	8020730 <_malloc_r>
 802151e:	4605      	mov	r5, r0
 8021520:	2800      	cmp	r0, #0
 8021522:	d0f2      	beq.n	802150a <_realloc_r+0x1c>
 8021524:	4631      	mov	r1, r6
 8021526:	4622      	mov	r2, r4
 8021528:	f7ff f8a0 	bl	802066c <memcpy>
 802152c:	4631      	mov	r1, r6
 802152e:	4638      	mov	r0, r7
 8021530:	f7ff f8b0 	bl	8020694 <_free_r>
 8021534:	e7e9      	b.n	802150a <_realloc_r+0x1c>
 8021536:	4635      	mov	r5, r6
 8021538:	e7e7      	b.n	802150a <_realloc_r+0x1c>

0802153a <__ssputs_r>:
 802153a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802153e:	688e      	ldr	r6, [r1, #8]
 8021540:	429e      	cmp	r6, r3
 8021542:	4682      	mov	sl, r0
 8021544:	460c      	mov	r4, r1
 8021546:	4690      	mov	r8, r2
 8021548:	4699      	mov	r9, r3
 802154a:	d837      	bhi.n	80215bc <__ssputs_r+0x82>
 802154c:	898a      	ldrh	r2, [r1, #12]
 802154e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021552:	d031      	beq.n	80215b8 <__ssputs_r+0x7e>
 8021554:	6825      	ldr	r5, [r4, #0]
 8021556:	6909      	ldr	r1, [r1, #16]
 8021558:	1a6f      	subs	r7, r5, r1
 802155a:	6965      	ldr	r5, [r4, #20]
 802155c:	2302      	movs	r3, #2
 802155e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021562:	fb95 f5f3 	sdiv	r5, r5, r3
 8021566:	f109 0301 	add.w	r3, r9, #1
 802156a:	443b      	add	r3, r7
 802156c:	429d      	cmp	r5, r3
 802156e:	bf38      	it	cc
 8021570:	461d      	movcc	r5, r3
 8021572:	0553      	lsls	r3, r2, #21
 8021574:	d530      	bpl.n	80215d8 <__ssputs_r+0x9e>
 8021576:	4629      	mov	r1, r5
 8021578:	f7ff f8da 	bl	8020730 <_malloc_r>
 802157c:	4606      	mov	r6, r0
 802157e:	b950      	cbnz	r0, 8021596 <__ssputs_r+0x5c>
 8021580:	230c      	movs	r3, #12
 8021582:	f8ca 3000 	str.w	r3, [sl]
 8021586:	89a3      	ldrh	r3, [r4, #12]
 8021588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802158c:	81a3      	strh	r3, [r4, #12]
 802158e:	f04f 30ff 	mov.w	r0, #4294967295
 8021592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021596:	463a      	mov	r2, r7
 8021598:	6921      	ldr	r1, [r4, #16]
 802159a:	f7ff f867 	bl	802066c <memcpy>
 802159e:	89a3      	ldrh	r3, [r4, #12]
 80215a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80215a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80215a8:	81a3      	strh	r3, [r4, #12]
 80215aa:	6126      	str	r6, [r4, #16]
 80215ac:	6165      	str	r5, [r4, #20]
 80215ae:	443e      	add	r6, r7
 80215b0:	1bed      	subs	r5, r5, r7
 80215b2:	6026      	str	r6, [r4, #0]
 80215b4:	60a5      	str	r5, [r4, #8]
 80215b6:	464e      	mov	r6, r9
 80215b8:	454e      	cmp	r6, r9
 80215ba:	d900      	bls.n	80215be <__ssputs_r+0x84>
 80215bc:	464e      	mov	r6, r9
 80215be:	4632      	mov	r2, r6
 80215c0:	4641      	mov	r1, r8
 80215c2:	6820      	ldr	r0, [r4, #0]
 80215c4:	f7ff ff78 	bl	80214b8 <memmove>
 80215c8:	68a3      	ldr	r3, [r4, #8]
 80215ca:	1b9b      	subs	r3, r3, r6
 80215cc:	60a3      	str	r3, [r4, #8]
 80215ce:	6823      	ldr	r3, [r4, #0]
 80215d0:	441e      	add	r6, r3
 80215d2:	6026      	str	r6, [r4, #0]
 80215d4:	2000      	movs	r0, #0
 80215d6:	e7dc      	b.n	8021592 <__ssputs_r+0x58>
 80215d8:	462a      	mov	r2, r5
 80215da:	f7ff ff88 	bl	80214ee <_realloc_r>
 80215de:	4606      	mov	r6, r0
 80215e0:	2800      	cmp	r0, #0
 80215e2:	d1e2      	bne.n	80215aa <__ssputs_r+0x70>
 80215e4:	6921      	ldr	r1, [r4, #16]
 80215e6:	4650      	mov	r0, sl
 80215e8:	f7ff f854 	bl	8020694 <_free_r>
 80215ec:	e7c8      	b.n	8021580 <__ssputs_r+0x46>
	...

080215f0 <_svfiprintf_r>:
 80215f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215f4:	461d      	mov	r5, r3
 80215f6:	898b      	ldrh	r3, [r1, #12]
 80215f8:	061f      	lsls	r7, r3, #24
 80215fa:	b09d      	sub	sp, #116	; 0x74
 80215fc:	4680      	mov	r8, r0
 80215fe:	460c      	mov	r4, r1
 8021600:	4616      	mov	r6, r2
 8021602:	d50f      	bpl.n	8021624 <_svfiprintf_r+0x34>
 8021604:	690b      	ldr	r3, [r1, #16]
 8021606:	b96b      	cbnz	r3, 8021624 <_svfiprintf_r+0x34>
 8021608:	2140      	movs	r1, #64	; 0x40
 802160a:	f7ff f891 	bl	8020730 <_malloc_r>
 802160e:	6020      	str	r0, [r4, #0]
 8021610:	6120      	str	r0, [r4, #16]
 8021612:	b928      	cbnz	r0, 8021620 <_svfiprintf_r+0x30>
 8021614:	230c      	movs	r3, #12
 8021616:	f8c8 3000 	str.w	r3, [r8]
 802161a:	f04f 30ff 	mov.w	r0, #4294967295
 802161e:	e0c8      	b.n	80217b2 <_svfiprintf_r+0x1c2>
 8021620:	2340      	movs	r3, #64	; 0x40
 8021622:	6163      	str	r3, [r4, #20]
 8021624:	2300      	movs	r3, #0
 8021626:	9309      	str	r3, [sp, #36]	; 0x24
 8021628:	2320      	movs	r3, #32
 802162a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802162e:	2330      	movs	r3, #48	; 0x30
 8021630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021634:	9503      	str	r5, [sp, #12]
 8021636:	f04f 0b01 	mov.w	fp, #1
 802163a:	4637      	mov	r7, r6
 802163c:	463d      	mov	r5, r7
 802163e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021642:	b10b      	cbz	r3, 8021648 <_svfiprintf_r+0x58>
 8021644:	2b25      	cmp	r3, #37	; 0x25
 8021646:	d13e      	bne.n	80216c6 <_svfiprintf_r+0xd6>
 8021648:	ebb7 0a06 	subs.w	sl, r7, r6
 802164c:	d00b      	beq.n	8021666 <_svfiprintf_r+0x76>
 802164e:	4653      	mov	r3, sl
 8021650:	4632      	mov	r2, r6
 8021652:	4621      	mov	r1, r4
 8021654:	4640      	mov	r0, r8
 8021656:	f7ff ff70 	bl	802153a <__ssputs_r>
 802165a:	3001      	adds	r0, #1
 802165c:	f000 80a4 	beq.w	80217a8 <_svfiprintf_r+0x1b8>
 8021660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021662:	4453      	add	r3, sl
 8021664:	9309      	str	r3, [sp, #36]	; 0x24
 8021666:	783b      	ldrb	r3, [r7, #0]
 8021668:	2b00      	cmp	r3, #0
 802166a:	f000 809d 	beq.w	80217a8 <_svfiprintf_r+0x1b8>
 802166e:	2300      	movs	r3, #0
 8021670:	f04f 32ff 	mov.w	r2, #4294967295
 8021674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021678:	9304      	str	r3, [sp, #16]
 802167a:	9307      	str	r3, [sp, #28]
 802167c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021680:	931a      	str	r3, [sp, #104]	; 0x68
 8021682:	462f      	mov	r7, r5
 8021684:	2205      	movs	r2, #5
 8021686:	f817 1b01 	ldrb.w	r1, [r7], #1
 802168a:	4850      	ldr	r0, [pc, #320]	; (80217cc <_svfiprintf_r+0x1dc>)
 802168c:	f7de fdc8 	bl	8000220 <memchr>
 8021690:	9b04      	ldr	r3, [sp, #16]
 8021692:	b9d0      	cbnz	r0, 80216ca <_svfiprintf_r+0xda>
 8021694:	06d9      	lsls	r1, r3, #27
 8021696:	bf44      	itt	mi
 8021698:	2220      	movmi	r2, #32
 802169a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802169e:	071a      	lsls	r2, r3, #28
 80216a0:	bf44      	itt	mi
 80216a2:	222b      	movmi	r2, #43	; 0x2b
 80216a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80216a8:	782a      	ldrb	r2, [r5, #0]
 80216aa:	2a2a      	cmp	r2, #42	; 0x2a
 80216ac:	d015      	beq.n	80216da <_svfiprintf_r+0xea>
 80216ae:	9a07      	ldr	r2, [sp, #28]
 80216b0:	462f      	mov	r7, r5
 80216b2:	2000      	movs	r0, #0
 80216b4:	250a      	movs	r5, #10
 80216b6:	4639      	mov	r1, r7
 80216b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216bc:	3b30      	subs	r3, #48	; 0x30
 80216be:	2b09      	cmp	r3, #9
 80216c0:	d94d      	bls.n	802175e <_svfiprintf_r+0x16e>
 80216c2:	b1b8      	cbz	r0, 80216f4 <_svfiprintf_r+0x104>
 80216c4:	e00f      	b.n	80216e6 <_svfiprintf_r+0xf6>
 80216c6:	462f      	mov	r7, r5
 80216c8:	e7b8      	b.n	802163c <_svfiprintf_r+0x4c>
 80216ca:	4a40      	ldr	r2, [pc, #256]	; (80217cc <_svfiprintf_r+0x1dc>)
 80216cc:	1a80      	subs	r0, r0, r2
 80216ce:	fa0b f000 	lsl.w	r0, fp, r0
 80216d2:	4318      	orrs	r0, r3
 80216d4:	9004      	str	r0, [sp, #16]
 80216d6:	463d      	mov	r5, r7
 80216d8:	e7d3      	b.n	8021682 <_svfiprintf_r+0x92>
 80216da:	9a03      	ldr	r2, [sp, #12]
 80216dc:	1d11      	adds	r1, r2, #4
 80216de:	6812      	ldr	r2, [r2, #0]
 80216e0:	9103      	str	r1, [sp, #12]
 80216e2:	2a00      	cmp	r2, #0
 80216e4:	db01      	blt.n	80216ea <_svfiprintf_r+0xfa>
 80216e6:	9207      	str	r2, [sp, #28]
 80216e8:	e004      	b.n	80216f4 <_svfiprintf_r+0x104>
 80216ea:	4252      	negs	r2, r2
 80216ec:	f043 0302 	orr.w	r3, r3, #2
 80216f0:	9207      	str	r2, [sp, #28]
 80216f2:	9304      	str	r3, [sp, #16]
 80216f4:	783b      	ldrb	r3, [r7, #0]
 80216f6:	2b2e      	cmp	r3, #46	; 0x2e
 80216f8:	d10c      	bne.n	8021714 <_svfiprintf_r+0x124>
 80216fa:	787b      	ldrb	r3, [r7, #1]
 80216fc:	2b2a      	cmp	r3, #42	; 0x2a
 80216fe:	d133      	bne.n	8021768 <_svfiprintf_r+0x178>
 8021700:	9b03      	ldr	r3, [sp, #12]
 8021702:	1d1a      	adds	r2, r3, #4
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	9203      	str	r2, [sp, #12]
 8021708:	2b00      	cmp	r3, #0
 802170a:	bfb8      	it	lt
 802170c:	f04f 33ff 	movlt.w	r3, #4294967295
 8021710:	3702      	adds	r7, #2
 8021712:	9305      	str	r3, [sp, #20]
 8021714:	4d2e      	ldr	r5, [pc, #184]	; (80217d0 <_svfiprintf_r+0x1e0>)
 8021716:	7839      	ldrb	r1, [r7, #0]
 8021718:	2203      	movs	r2, #3
 802171a:	4628      	mov	r0, r5
 802171c:	f7de fd80 	bl	8000220 <memchr>
 8021720:	b138      	cbz	r0, 8021732 <_svfiprintf_r+0x142>
 8021722:	2340      	movs	r3, #64	; 0x40
 8021724:	1b40      	subs	r0, r0, r5
 8021726:	fa03 f000 	lsl.w	r0, r3, r0
 802172a:	9b04      	ldr	r3, [sp, #16]
 802172c:	4303      	orrs	r3, r0
 802172e:	3701      	adds	r7, #1
 8021730:	9304      	str	r3, [sp, #16]
 8021732:	7839      	ldrb	r1, [r7, #0]
 8021734:	4827      	ldr	r0, [pc, #156]	; (80217d4 <_svfiprintf_r+0x1e4>)
 8021736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802173a:	2206      	movs	r2, #6
 802173c:	1c7e      	adds	r6, r7, #1
 802173e:	f7de fd6f 	bl	8000220 <memchr>
 8021742:	2800      	cmp	r0, #0
 8021744:	d038      	beq.n	80217b8 <_svfiprintf_r+0x1c8>
 8021746:	4b24      	ldr	r3, [pc, #144]	; (80217d8 <_svfiprintf_r+0x1e8>)
 8021748:	bb13      	cbnz	r3, 8021790 <_svfiprintf_r+0x1a0>
 802174a:	9b03      	ldr	r3, [sp, #12]
 802174c:	3307      	adds	r3, #7
 802174e:	f023 0307 	bic.w	r3, r3, #7
 8021752:	3308      	adds	r3, #8
 8021754:	9303      	str	r3, [sp, #12]
 8021756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021758:	444b      	add	r3, r9
 802175a:	9309      	str	r3, [sp, #36]	; 0x24
 802175c:	e76d      	b.n	802163a <_svfiprintf_r+0x4a>
 802175e:	fb05 3202 	mla	r2, r5, r2, r3
 8021762:	2001      	movs	r0, #1
 8021764:	460f      	mov	r7, r1
 8021766:	e7a6      	b.n	80216b6 <_svfiprintf_r+0xc6>
 8021768:	2300      	movs	r3, #0
 802176a:	3701      	adds	r7, #1
 802176c:	9305      	str	r3, [sp, #20]
 802176e:	4619      	mov	r1, r3
 8021770:	250a      	movs	r5, #10
 8021772:	4638      	mov	r0, r7
 8021774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021778:	3a30      	subs	r2, #48	; 0x30
 802177a:	2a09      	cmp	r2, #9
 802177c:	d903      	bls.n	8021786 <_svfiprintf_r+0x196>
 802177e:	2b00      	cmp	r3, #0
 8021780:	d0c8      	beq.n	8021714 <_svfiprintf_r+0x124>
 8021782:	9105      	str	r1, [sp, #20]
 8021784:	e7c6      	b.n	8021714 <_svfiprintf_r+0x124>
 8021786:	fb05 2101 	mla	r1, r5, r1, r2
 802178a:	2301      	movs	r3, #1
 802178c:	4607      	mov	r7, r0
 802178e:	e7f0      	b.n	8021772 <_svfiprintf_r+0x182>
 8021790:	ab03      	add	r3, sp, #12
 8021792:	9300      	str	r3, [sp, #0]
 8021794:	4622      	mov	r2, r4
 8021796:	4b11      	ldr	r3, [pc, #68]	; (80217dc <_svfiprintf_r+0x1ec>)
 8021798:	a904      	add	r1, sp, #16
 802179a:	4640      	mov	r0, r8
 802179c:	f3af 8000 	nop.w
 80217a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80217a4:	4681      	mov	r9, r0
 80217a6:	d1d6      	bne.n	8021756 <_svfiprintf_r+0x166>
 80217a8:	89a3      	ldrh	r3, [r4, #12]
 80217aa:	065b      	lsls	r3, r3, #25
 80217ac:	f53f af35 	bmi.w	802161a <_svfiprintf_r+0x2a>
 80217b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80217b2:	b01d      	add	sp, #116	; 0x74
 80217b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217b8:	ab03      	add	r3, sp, #12
 80217ba:	9300      	str	r3, [sp, #0]
 80217bc:	4622      	mov	r2, r4
 80217be:	4b07      	ldr	r3, [pc, #28]	; (80217dc <_svfiprintf_r+0x1ec>)
 80217c0:	a904      	add	r1, sp, #16
 80217c2:	4640      	mov	r0, r8
 80217c4:	f7ff f9c4 	bl	8020b50 <_printf_i>
 80217c8:	e7ea      	b.n	80217a0 <_svfiprintf_r+0x1b0>
 80217ca:	bf00      	nop
 80217cc:	0802cc94 	.word	0x0802cc94
 80217d0:	0802cc9a 	.word	0x0802cc9a
 80217d4:	0802cc9e 	.word	0x0802cc9e
 80217d8:	00000000 	.word	0x00000000
 80217dc:	0802153b 	.word	0x0802153b

080217e0 <__sread>:
 80217e0:	b510      	push	{r4, lr}
 80217e2:	460c      	mov	r4, r1
 80217e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217e8:	f000 f89c 	bl	8021924 <_read_r>
 80217ec:	2800      	cmp	r0, #0
 80217ee:	bfab      	itete	ge
 80217f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80217f2:	89a3      	ldrhlt	r3, [r4, #12]
 80217f4:	181b      	addge	r3, r3, r0
 80217f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80217fa:	bfac      	ite	ge
 80217fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80217fe:	81a3      	strhlt	r3, [r4, #12]
 8021800:	bd10      	pop	{r4, pc}

08021802 <__swrite>:
 8021802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021806:	461f      	mov	r7, r3
 8021808:	898b      	ldrh	r3, [r1, #12]
 802180a:	05db      	lsls	r3, r3, #23
 802180c:	4605      	mov	r5, r0
 802180e:	460c      	mov	r4, r1
 8021810:	4616      	mov	r6, r2
 8021812:	d505      	bpl.n	8021820 <__swrite+0x1e>
 8021814:	2302      	movs	r3, #2
 8021816:	2200      	movs	r2, #0
 8021818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802181c:	f000 f868 	bl	80218f0 <_lseek_r>
 8021820:	89a3      	ldrh	r3, [r4, #12]
 8021822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802182a:	81a3      	strh	r3, [r4, #12]
 802182c:	4632      	mov	r2, r6
 802182e:	463b      	mov	r3, r7
 8021830:	4628      	mov	r0, r5
 8021832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021836:	f000 b817 	b.w	8021868 <_write_r>

0802183a <__sseek>:
 802183a:	b510      	push	{r4, lr}
 802183c:	460c      	mov	r4, r1
 802183e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021842:	f000 f855 	bl	80218f0 <_lseek_r>
 8021846:	1c43      	adds	r3, r0, #1
 8021848:	89a3      	ldrh	r3, [r4, #12]
 802184a:	bf15      	itete	ne
 802184c:	6560      	strne	r0, [r4, #84]	; 0x54
 802184e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021856:	81a3      	strheq	r3, [r4, #12]
 8021858:	bf18      	it	ne
 802185a:	81a3      	strhne	r3, [r4, #12]
 802185c:	bd10      	pop	{r4, pc}

0802185e <__sclose>:
 802185e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021862:	f000 b813 	b.w	802188c <_close_r>
	...

08021868 <_write_r>:
 8021868:	b538      	push	{r3, r4, r5, lr}
 802186a:	4c07      	ldr	r4, [pc, #28]	; (8021888 <_write_r+0x20>)
 802186c:	4605      	mov	r5, r0
 802186e:	4608      	mov	r0, r1
 8021870:	4611      	mov	r1, r2
 8021872:	2200      	movs	r2, #0
 8021874:	6022      	str	r2, [r4, #0]
 8021876:	461a      	mov	r2, r3
 8021878:	f7f2 fac1 	bl	8013dfe <_write>
 802187c:	1c43      	adds	r3, r0, #1
 802187e:	d102      	bne.n	8021886 <_write_r+0x1e>
 8021880:	6823      	ldr	r3, [r4, #0]
 8021882:	b103      	cbz	r3, 8021886 <_write_r+0x1e>
 8021884:	602b      	str	r3, [r5, #0]
 8021886:	bd38      	pop	{r3, r4, r5, pc}
 8021888:	200087ac 	.word	0x200087ac

0802188c <_close_r>:
 802188c:	b538      	push	{r3, r4, r5, lr}
 802188e:	4c06      	ldr	r4, [pc, #24]	; (80218a8 <_close_r+0x1c>)
 8021890:	2300      	movs	r3, #0
 8021892:	4605      	mov	r5, r0
 8021894:	4608      	mov	r0, r1
 8021896:	6023      	str	r3, [r4, #0]
 8021898:	f7f2 facd 	bl	8013e36 <_close>
 802189c:	1c43      	adds	r3, r0, #1
 802189e:	d102      	bne.n	80218a6 <_close_r+0x1a>
 80218a0:	6823      	ldr	r3, [r4, #0]
 80218a2:	b103      	cbz	r3, 80218a6 <_close_r+0x1a>
 80218a4:	602b      	str	r3, [r5, #0]
 80218a6:	bd38      	pop	{r3, r4, r5, pc}
 80218a8:	200087ac 	.word	0x200087ac

080218ac <_fstat_r>:
 80218ac:	b538      	push	{r3, r4, r5, lr}
 80218ae:	4c07      	ldr	r4, [pc, #28]	; (80218cc <_fstat_r+0x20>)
 80218b0:	2300      	movs	r3, #0
 80218b2:	4605      	mov	r5, r0
 80218b4:	4608      	mov	r0, r1
 80218b6:	4611      	mov	r1, r2
 80218b8:	6023      	str	r3, [r4, #0]
 80218ba:	f7f2 fac8 	bl	8013e4e <_fstat>
 80218be:	1c43      	adds	r3, r0, #1
 80218c0:	d102      	bne.n	80218c8 <_fstat_r+0x1c>
 80218c2:	6823      	ldr	r3, [r4, #0]
 80218c4:	b103      	cbz	r3, 80218c8 <_fstat_r+0x1c>
 80218c6:	602b      	str	r3, [r5, #0]
 80218c8:	bd38      	pop	{r3, r4, r5, pc}
 80218ca:	bf00      	nop
 80218cc:	200087ac 	.word	0x200087ac

080218d0 <_isatty_r>:
 80218d0:	b538      	push	{r3, r4, r5, lr}
 80218d2:	4c06      	ldr	r4, [pc, #24]	; (80218ec <_isatty_r+0x1c>)
 80218d4:	2300      	movs	r3, #0
 80218d6:	4605      	mov	r5, r0
 80218d8:	4608      	mov	r0, r1
 80218da:	6023      	str	r3, [r4, #0]
 80218dc:	f7f2 fac7 	bl	8013e6e <_isatty>
 80218e0:	1c43      	adds	r3, r0, #1
 80218e2:	d102      	bne.n	80218ea <_isatty_r+0x1a>
 80218e4:	6823      	ldr	r3, [r4, #0]
 80218e6:	b103      	cbz	r3, 80218ea <_isatty_r+0x1a>
 80218e8:	602b      	str	r3, [r5, #0]
 80218ea:	bd38      	pop	{r3, r4, r5, pc}
 80218ec:	200087ac 	.word	0x200087ac

080218f0 <_lseek_r>:
 80218f0:	b538      	push	{r3, r4, r5, lr}
 80218f2:	4c07      	ldr	r4, [pc, #28]	; (8021910 <_lseek_r+0x20>)
 80218f4:	4605      	mov	r5, r0
 80218f6:	4608      	mov	r0, r1
 80218f8:	4611      	mov	r1, r2
 80218fa:	2200      	movs	r2, #0
 80218fc:	6022      	str	r2, [r4, #0]
 80218fe:	461a      	mov	r2, r3
 8021900:	f7f2 fac0 	bl	8013e84 <_lseek>
 8021904:	1c43      	adds	r3, r0, #1
 8021906:	d102      	bne.n	802190e <_lseek_r+0x1e>
 8021908:	6823      	ldr	r3, [r4, #0]
 802190a:	b103      	cbz	r3, 802190e <_lseek_r+0x1e>
 802190c:	602b      	str	r3, [r5, #0]
 802190e:	bd38      	pop	{r3, r4, r5, pc}
 8021910:	200087ac 	.word	0x200087ac

08021914 <_malloc_usable_size_r>:
 8021914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021918:	1f18      	subs	r0, r3, #4
 802191a:	2b00      	cmp	r3, #0
 802191c:	bfbc      	itt	lt
 802191e:	580b      	ldrlt	r3, [r1, r0]
 8021920:	18c0      	addlt	r0, r0, r3
 8021922:	4770      	bx	lr

08021924 <_read_r>:
 8021924:	b538      	push	{r3, r4, r5, lr}
 8021926:	4c07      	ldr	r4, [pc, #28]	; (8021944 <_read_r+0x20>)
 8021928:	4605      	mov	r5, r0
 802192a:	4608      	mov	r0, r1
 802192c:	4611      	mov	r1, r2
 802192e:	2200      	movs	r2, #0
 8021930:	6022      	str	r2, [r4, #0]
 8021932:	461a      	mov	r2, r3
 8021934:	f7f2 fa46 	bl	8013dc4 <_read>
 8021938:	1c43      	adds	r3, r0, #1
 802193a:	d102      	bne.n	8021942 <_read_r+0x1e>
 802193c:	6823      	ldr	r3, [r4, #0]
 802193e:	b103      	cbz	r3, 8021942 <_read_r+0x1e>
 8021940:	602b      	str	r3, [r5, #0]
 8021942:	bd38      	pop	{r3, r4, r5, pc}
 8021944:	200087ac 	.word	0x200087ac

08021948 <_init>:
 8021948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802194a:	bf00      	nop
 802194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802194e:	bc08      	pop	{r3}
 8021950:	469e      	mov	lr, r3
 8021952:	4770      	bx	lr

08021954 <_fini>:
 8021954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021956:	bf00      	nop
 8021958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802195a:	bc08      	pop	{r3}
 802195c:	469e      	mov	lr, r3
 802195e:	4770      	bx	lr
